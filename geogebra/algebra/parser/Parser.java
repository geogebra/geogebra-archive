/* Generated By:JavaCC: Do not edit this line. Parser.java */
package geogebra.algebra.parser;

import geogebra.*;
import geogebra.kernel.*;
import geogebra.kernel.arithmetic.*;
import java.util.*;

public class Parser implements ParserConstants {

    private Kernel kernel;
    private Construction cons;
    private Application app;

    public Parser(Kernel kernel, Construction cons) {
         this ( new java.io.StringReader("") ); // dummy stream for parser initing
         this.kernel = kernel;
         this.cons = cons;
         app = kernel.getApplication();
    }

    /**
     * Parses a String and returns a ValidExpression Object     
     */
    public ValidExpression parse(String parseString) throws ParseException {
        ReInit( new java.io.StringReader(parseString) );
        return buildValidExpression();
    }

    /**
     * Parses a String and returns a Function Object     
     */
    public Function parseFunction(String parseString)
    throws ParseException {
        ReInit( new java.io.StringReader(parseString) );
        return function();
    }

    /**
     * Parses a String and returns an ExpressionNode Object     
     */
    public ExpressionNode parseCmdExpression(String parseString)
    throws ParseException {
        ReInit( new java.io.StringReader(parseString) );
        return cmdexpression();
    }

    /**
     * Parses a String and returns an ExpressionNode Object     
     */
    public ExpressionNode parseExpression(String parseString)
    throws ParseException {
        ReInit( new java.io.StringReader(parseString) );
        return expression();
    }

    /**
     * Parses a String if it is a label
     */
    public String parseLabel(String parseString)
    throws ParseException {
        ReInit( new java.io.StringReader(parseString) );
        return label();
    }

  final public String label() throws ParseException {
    Token t;
    t = jj_consume_token(LABEL);
           {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

/**
 * validexpression =    <LABEL> = assignment() |        // assignment of any type (possibly not numeric)
 *                  labellist() = command() |           // e.g. {A,B} = Intersect[c, g]
 *                      <LABEL> : parametric() |        // e.g. X = (3,2) + t (2,1)              
 *                      <LABEL> = expression()      // arithmetic expression of floats, vectors and vars
 *                      <LABEL> : equation()        // equation in x an y
 						<LABEL>(x) = function()   // function in x, e.g. f(x) = 3x^3 - sqrt(x)
 */
  final public ValidExpression buildValidExpression() throws ParseException {
    ValidExpression ve;
    ExpressionNode lhs, rhs;
    Token l = new Token();
    Vector labels = new Vector();
    if (jj_2_3(2147483647)) {
      ve = functioncommand();
    } else if (jj_2_4(2147483647)) {
      ve = function();
    } else if (jj_2_5(2147483647)) {
      if (jj_2_1(2147483647)) {
        l = jj_consume_token(LABEL);
        jj_consume_token(EQUAL);
      } else {
        ;
      }
      ve = assignment();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EOL:
        jj_consume_token(EOL);
        break;
      case 0:
        jj_consume_token(0);
        break;
      default:
        jj_la1[0] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } else if (jj_2_6(2147483647)) {
      if (jj_2_2(2147483647)) {
        l = jj_consume_token(LABEL);
        jj_consume_token(75);
      } else {
        ;
      }
      ve = parametric();
    } else if (jj_2_7(2147483647)) {
      l = jj_consume_token(LABEL);
      jj_consume_token(75);
      ve = equation();
    } else if (jj_2_8(2147483647)) {
      lhs = expressionnode();
      jj_consume_token(EQUAL);
      rhs = expressionnode();
            // maybe expression
            if (lhs.isSingleVariable() && !rhs.includesPolynomial()) {
                // it's an expression
                ve = rhs;
                ve.setLabel(((Variable)lhs.evaluate()).getName());
            } else {
                // it's a polynomial
                ve = new Equation(kernel, lhs, rhs);
            }
    } else if (jj_2_9(2147483647)) {
      ve = cmdexpression();
    } else if (jj_2_10(2147483647)) {
      labels = labellist();
      jj_consume_token(EQUAL);
      ve = command();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PARAMETRICVAR:
        // special case "X = (3,2)" should become a point
                l = jj_consume_token(PARAMETRICVAR);
        jj_consume_token(EQUAL);
        ve = expression();
        break;
      default:
        jj_la1[1] = jj_gen;
        if (jj_2_11(2147483647)) {
          ve = cartesianvector_special();
        } else if (jj_2_12(2147483647)) {
          ve = polarvector_special();
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EOL:
      jj_consume_token(EOL);
      break;
    case 0:
      jj_consume_token(0);
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        if (labels.size() > 0) ve.addLabel(labels);  // command with ouput labels
        else if (ve.labelCount() == 0) ve.addLabel(l.image);  // standard case                         
        {if (true) return ve;}
    throw new Error("Missing return statement in function");
  }

// single variable assignment (not expressionnode !!!)  
  final public Assignment assignment() throws ParseException {
    Token t;
    t = jj_consume_token(LABEL);
        {if (true) return new Assignment(t.image);}
    throw new Error("Missing return statement in function");
  }

/**
 * command =     <LABEL> [ argument (, argument)* ]  
 */
  final public Command command() throws ParseException {
    Command c;
    Token t;
    ExpressionNode en;
    t = jj_consume_token(LABEL);
        c = new Command(kernel, t.image, true );
    jj_consume_token(76);
    en = cmdexpression();
                                c.addArgument( en );
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 77:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_1;
      }
      jj_consume_token(77);
      en = cmdexpression();
                                     c.addArgument( en );
    }
    jj_consume_token(78);
      {if (true) return c;}
    throw new Error("Missing return statement in function");
  }

/**
 * labellist =    { <LABEL> (, <LABEL>)* }  
 */
  final public Vector labellist() throws ParseException {
    Token t;
    Vector labels;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 79:
      jj_consume_token(79);
      t = jj_consume_token(LABEL);
            labels = new Vector(); labels.add(t.image);
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 77:
          ;
          break;
        default:
          jj_la1[4] = jj_gen;
          break label_2;
        }
        jj_consume_token(77);
        t = jj_consume_token(LABEL);
                         labels.add(t.image);
      }
      jj_consume_token(80);
      break;
    case LABEL:
      t = jj_consume_token(LABEL);
            labels = new Vector(); labels.add(t.image);
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 77:
          ;
          break;
        default:
          jj_la1[5] = jj_gen;
          break label_3;
        }
        jj_consume_token(77);
        t = jj_consume_token(LABEL);
                         labels.add(t.image);
      }
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
       {if (true) return labels;}
    throw new Error("Missing return statement in function");
  }

/**
 * parametric =   <PARAMETRICVAR> = vector + <LABEL> * vector  |
 *                <PARAMETRICVAR> = vector - <LABEL> * vector |
 */
  final public Parametric parametric() throws ParseException {
    ExpressionNode P, v;
    ExpressionValue temp;
    Token s, par;
    jj_consume_token(PARAMETRICVAR);
    jj_consume_token(EQUAL);
    P = enterm();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
      s = jj_consume_token(PLUS);
      break;
    case MINUS:
      s = jj_consume_token(MINUS);
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    par = jj_consume_token(LABEL);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MULTIPLY:
      jj_consume_token(MULTIPLY);
      break;
    default:
      jj_la1[8] = jj_gen;
      ;
    }
    v = expression();
            if (s.kind == MINUS)
                v = new ExpressionNode(kernel, new MyDouble(kernel, -1.0d), ExpressionNode.MULTIPLY, v);
            {if (true) return new Parametric(kernel, P, v, par.image );}
    throw new Error("Missing return statement in function");
  }

/** NOT USED BY NOW
 * normalvectorform =   <PARAMETRICVAR> vector  = vector 
 
NormalVectorForm normalvectorform():
{         
    ExpressionNode left, right;
    ExpressionValue temp;
}
{    
    <PARAMETRICVAR> (<MULTIPLY>)? left = enterm()  <EQUAL> right = expressionnode()           
         {                        
            // check if left is VectorValue and right is NumberValue
            temp = left.evaluate();
            if (!(temp instanceof VectorValue)) {
                String [] str = { "VectorExpected", temp.toString() };
                throw new MyParseError(app, str);
            }

            temp = right.evaluate();
            if (!(temp instanceof NumberValue)) {
                String [] str = { "NumberExpected", temp.toString() };
                throw new MyParseError(app, str);
            }        
            
            return new NormalVectorForm( left, right );                
         }   
}
*/

/******************************************************************
 * ARTIHMETIC FOR NUMBERS AND 2D VECTORS WITH VARIABLES
 * plus
 * ARTIHMETIC FOR POLYNOMIALS WITH VARIABLES "x" AND "y"
 * exponents must be integers >= 0
 * divisors must be simplifyable to numbers
 ******************************************************************/


/**
 * equation =       expression = expression
 */
  final public Equation equation() throws ParseException {
    ExpressionNode lhs, rhs;
    lhs = expressionnode();
    jj_consume_token(EQUAL);
    rhs = expressionnode();
            //lhs.resolveVariables();
            //rhs.resolveVariables();
            {if (true) return new Equation(kernel, lhs, rhs);}
    throw new Error("Missing return statement in function");
  }

/**
 * expression = expressionnode
 */
  final public ExpressionNode expression() throws ParseException {
    ExpressionNode rhs;
    rhs = expressionnode();
        if (rhs.includesPolynomial()) {
                {if (true) throw new MyError(app, "IncompleteEquation");}
        }

        // since v3.0: commands have to take care of resolving the variables of 
        // their arguments on their own, e.g. Sequence[ (i, i^2), i , 1, 10 ]       
                //rhs.resolveVariables();
        {if (true) return rhs;}
    throw new Error("Missing return statement in function");
  }

/**
 * cmdexpression = expressionnode 
 * (may only return Function)
 */
  final public ExpressionNode cmdexpression() throws ParseException {
    ExpressionNode rhs;
    rhs = expressionnode();
        if (rhs.includesPolynomial()) {
                if (rhs.isFunctionInX())
                        {if (true) return new ExpressionNode(kernel, new Function(rhs));}
                else
                        {if (true) throw new MyError(app, "IncompleteEquation");}
        }

        // since v3.0: commands have to take care of resolving the variables of 
        // their arguments on their own, e.g. Sequence[ i^2, i , 1, 10 ]
        // rhs.resolveVariables();

        {if (true) return rhs;}
    throw new Error("Missing return statement in function");
  }

/**
 * function = 	label(x) = expressionnode
 */
  final public Function function() throws ParseException {
    ExpressionNode rhs;
    Token l = null;
    Token var;
    Function f;
    l = jj_consume_token(FUNCTION_LABEL);
    jj_consume_token(VARX);
    jj_consume_token(81);
    jj_consume_token(EQUAL);
    rhs = expressionnode();
                f = new Function(rhs);
                f.setLabel(l.image.substring(0,l.image.length()-1));
                {if (true) return f;}
    throw new Error("Missing return statement in function");
  }

/**
 * functioncommand = 	label(x) =  command 
 */
  final public Command functioncommand() throws ParseException {
    Command c;
    Token l;
    // e.g. f(x) = Derivative[ 3 x^2 ]
            l = jj_consume_token(FUNCTION_LABEL);
    jj_consume_token(VARX);
    jj_consume_token(81);
    jj_consume_token(EQUAL);
    c = command();
                c.setLabel(l.image.substring(0,l.image.length()-1));
                {if (true) return c;}
    throw new Error("Missing return statement in function");
  }

/**
 *  expression =  term <OR> term
 */
  final public ExpressionNode expressionnode() throws ParseException {
    ExpressionNode ret, f;
    Token x;
    ret = ANDterm();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
        ;
        break;
      default:
        jj_la1[9] = jj_gen;
        break label_4;
      }
      jj_consume_token(OR);
      f = ANDterm();
                 ret = new ExpressionNode(kernel, ret, ExpressionNode.OR, f);
    }
        ret.simplifyLeafs();
        {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

/**
 * ANDterm =   COMPAREterm <AND> COMPAREterm 
 */
  final public ExpressionNode ANDterm() throws ParseException {
    ExpressionNode ret, f;
    Token x;
    ret = COMPAREterm();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        ;
        break;
      default:
        jj_la1[10] = jj_gen;
        break label_5;
      }
      jj_consume_token(AND);
      f = COMPAREterm();
                ret = new ExpressionNode(kernel, ret, ExpressionNode.AND, f);
    }
      {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

/**
 * COMPAREterm =   plusminusnode ("==" | "<" | "<=" | ">" | ">=") plusminusnode 
 */
  final public ExpressionNode COMPAREterm() throws ParseException {
    ExpressionNode ret, f;
    Token x;
    ret = plusminusnode();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQUAL_BOOLEAN:
    case NOT_EQUAL:
    case LESS:
    case GREATER:
    case LESS_EQUAL:
    case GREATER_EQUAL:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQUAL_BOOLEAN:
        jj_consume_token(EQUAL_BOOLEAN);
        f = plusminusnode();
           ret = new ExpressionNode(kernel, ret, ExpressionNode.EQUAL_BOOLEAN, f);
        break;
      case NOT_EQUAL:
        jj_consume_token(NOT_EQUAL);
        f = plusminusnode();
           ret = new ExpressionNode(kernel, ret, ExpressionNode.NOT_EQUAL, f);
        break;
      case LESS:
        jj_consume_token(LESS);
        f = plusminusnode();
           ret = new ExpressionNode(kernel, ret, ExpressionNode.LESS, f);
        break;
      case GREATER:
        jj_consume_token(GREATER);
        f = plusminusnode();
           ret = new ExpressionNode(kernel, ret, ExpressionNode.GREATER, f);
        break;
      case LESS_EQUAL:
        jj_consume_token(LESS_EQUAL);
        f = plusminusnode();
           ret = new ExpressionNode(kernel, ret, ExpressionNode.LESS_EQUAL, f);
        break;
      case GREATER_EQUAL:
        jj_consume_token(GREATER_EQUAL);
        f = plusminusnode();
           ret = new ExpressionNode(kernel, ret, ExpressionNode.GREATER_EQUAL, f);
        break;
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[12] = jj_gen;
      ;
    }
      {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

/**
 *  expression =    term + term |
 *                  term - term
 */
  final public ExpressionNode plusminusnode() throws ParseException {
    ExpressionNode ret, f;
    Token x;
    ret = enterm();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        jj_la1[13] = jj_gen;
        break label_6;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        x = jj_consume_token(PLUS);
        break;
      case MINUS:
        x = jj_consume_token(MINUS);
        break;
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      f = enterm();
            if (x.kind == PLUS)
                ret = new ExpressionNode(kernel, ret, ExpressionNode.PLUS, f);
            else
                ret = new ExpressionNode(kernel, ret, ExpressionNode.MINUS, f);
    }
        ret.simplifyLeafs();
        {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

/**
 * term =   unary * unary  |
 *          unary / unary
 */
  final public ExpressionNode enterm() throws ParseException {
    ExpressionNode ret, f;
    Token x;
    ret = enunary();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NOT:
      case MULTIPLY:
      case DIVIDE:
      case FACTORIAL:
      case PI:
      case E:
      case DEGREE:
      case RAD:
      case TRUE:
      case FALSE:
      case VARX:
      case VARY:
      case FLOAT:
      case EFLOAT:
      case LABEL:
      case TEXT:
      case X_FUNC:
      case Y_FUNC:
      case COS_FUNC:
      case SIN_FUNC:
      case TAN_FUNC:
      case ACOS_FUNC:
      case ASIN_FUNC:
      case ATAN_FUNC:
      case COSH_FUNC:
      case SINH_FUNC:
      case TANH_FUNC:
      case ACOSH_FUNC:
      case ASINH_FUNC:
      case ATANH_FUNC:
      case EXP_FUNC:
      case LOG_FUNC:
      case LD_FUNC:
      case LG_FUNC:
      case SQRT_FUNC:
      case ABS_FUNC:
      case SGN_FUNC:
      case FLOOR_FUNC:
      case CEIL_FUNC:
      case ROUND_FUNC:
      case GAMMA_FUNC:
      case FUNCTION_LABEL:
      case 79:
      case 82:
        ;
        break;
      default:
        jj_la1[15] = jj_gen;
        break label_7;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULTIPLY:
      case DIVIDE:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MULTIPLY:
          x = jj_consume_token(MULTIPLY);
          break;
        case DIVIDE:
          x = jj_consume_token(DIVIDE);
          break;
        default:
          jj_la1[16] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        f = enunary();
            if (x.kind == MULTIPLY) {
                ret = new ExpressionNode(kernel, ret, ExpressionNode.MULTIPLY, f);
            } else {
                ret = new ExpressionNode(kernel, ret, ExpressionNode.DIVIDE, f);
            }
        break;
      case NOT:
      case FACTORIAL:
      case PI:
      case E:
      case DEGREE:
      case RAD:
      case TRUE:
      case FALSE:
      case VARX:
      case VARY:
      case FLOAT:
      case EFLOAT:
      case LABEL:
      case TEXT:
      case X_FUNC:
      case Y_FUNC:
      case COS_FUNC:
      case SIN_FUNC:
      case TAN_FUNC:
      case ACOS_FUNC:
      case ASIN_FUNC:
      case ATAN_FUNC:
      case COSH_FUNC:
      case SINH_FUNC:
      case TANH_FUNC:
      case ACOSH_FUNC:
      case ASINH_FUNC:
      case ATANH_FUNC:
      case EXP_FUNC:
      case LOG_FUNC:
      case LD_FUNC:
      case LG_FUNC:
      case SQRT_FUNC:
      case ABS_FUNC:
      case SGN_FUNC:
      case FLOOR_FUNC:
      case CEIL_FUNC:
      case ROUND_FUNC:
      case GAMMA_FUNC:
      case FUNCTION_LABEL:
      case 79:
      case 82:
        f = enpower();
               ret = new ExpressionNode(kernel, ret, ExpressionNode.MULTIPLY, f);
        break;
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
      {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

/**
 * unary =  -power    |
 *          power
 */
  final public ExpressionNode enunary() throws ParseException {
    ExpressionNode e;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MINUS:
      jj_consume_token(MINUS);
      e = enpower();
          // -e  = -1*e
          {if (true) return new ExpressionNode(kernel, new MyDouble(kernel, -1.0d), ExpressionNode.MULTIPLY, e);}
      break;
    case NOT:
    case FACTORIAL:
    case PI:
    case E:
    case DEGREE:
    case RAD:
    case TRUE:
    case FALSE:
    case VARX:
    case VARY:
    case FLOAT:
    case EFLOAT:
    case LABEL:
    case TEXT:
    case X_FUNC:
    case Y_FUNC:
    case COS_FUNC:
    case SIN_FUNC:
    case TAN_FUNC:
    case ACOS_FUNC:
    case ASIN_FUNC:
    case ATAN_FUNC:
    case COSH_FUNC:
    case SINH_FUNC:
    case TANH_FUNC:
    case ACOSH_FUNC:
    case ASINH_FUNC:
    case ATANH_FUNC:
    case EXP_FUNC:
    case LOG_FUNC:
    case LD_FUNC:
    case LG_FUNC:
    case SQRT_FUNC:
    case ABS_FUNC:
    case SGN_FUNC:
    case FLOOR_FUNC:
    case CEIL_FUNC:
    case ROUND_FUNC:
    case GAMMA_FUNC:
    case FUNCTION_LABEL:
    case 79:
    case 82:
      e = enpower();
            {if (true) return e;}
      break;
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/**
 * power =    element                 |
 *          element ^ power           
 */
  final public ExpressionNode enpower() throws ParseException {
    ExpressionNode ret, f;
    ret = enfactorial();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SQUARED:
      jj_consume_token(SQUARED);
            ret = new ExpressionNode(kernel, ret, ExpressionNode.POWER,
                                 new MyDouble(kernel, 2));
      break;
    case CUBED:
      jj_consume_token(CUBED);
            {if (true) return new ExpressionNode(kernel, ret, ExpressionNode.POWER,
                                 new MyDouble(kernel, 3));}
      break;
    case POWER4:
      jj_consume_token(POWER4);
            {if (true) return new ExpressionNode(kernel, ret, ExpressionNode.POWER,
                                 new MyDouble(kernel, 4));}
      break;
    case POWER5:
      jj_consume_token(POWER5);
            {if (true) return new ExpressionNode(kernel, ret, ExpressionNode.POWER,
                                 new MyDouble(kernel, 5));}
      break;
    case POWER6:
      jj_consume_token(POWER6);
            {if (true) return new ExpressionNode(kernel, ret, ExpressionNode.POWER,
                                 new MyDouble(kernel, 6));}
      break;
    default:
      jj_la1[19] = jj_gen;
      label_8:
      while (true) {
        if (jj_2_13(2147483647)) {
          ;
        } else {
          break label_8;
        }
        jj_consume_token(POWER);
        f = enunary();
            ret = new ExpressionNode(kernel, ret, ExpressionNode.POWER, f);
      }
    }
       {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

/**
 * factorial =  <NOTterm> |
 *              <NOTterm> !
 */
  final public ExpressionNode enfactorial() throws ParseException {
    ExpressionNode en;
    en = NOTterm();
    if (jj_2_14(2147483647)) {
      jj_consume_token(FACTORIAL);
                    en = new ExpressionNode(kernel, en, ExpressionNode.FACTORIAL, null);
    } else {
      ;
    }
               {if (true) return en;}
    throw new Error("Missing return statement in function");
  }

/**
 * NOTterm =  <NOT> <enelement> |
 *               	<enelement>
 */
  final public ExpressionNode NOTterm() throws ParseException {
    ExpressionNode en;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
    case FACTORIAL:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NOT:
        jj_consume_token(NOT);
        break;
      case FACTORIAL:
        jj_consume_token(FACTORIAL);
        break;
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      en = enelement();
                    {if (true) return new ExpressionNode(kernel, en, ExpressionNode.NOT, null);}
      break;
    case PI:
    case E:
    case DEGREE:
    case RAD:
    case TRUE:
    case FALSE:
    case VARX:
    case VARY:
    case FLOAT:
    case EFLOAT:
    case LABEL:
    case TEXT:
    case X_FUNC:
    case Y_FUNC:
    case COS_FUNC:
    case SIN_FUNC:
    case TAN_FUNC:
    case ACOS_FUNC:
    case ASIN_FUNC:
    case ATAN_FUNC:
    case COSH_FUNC:
    case SINH_FUNC:
    case TANH_FUNC:
    case ACOSH_FUNC:
    case ASINH_FUNC:
    case ATANH_FUNC:
    case EXP_FUNC:
    case LOG_FUNC:
    case LD_FUNC:
    case LG_FUNC:
    case SQRT_FUNC:
    case ABS_FUNC:
    case SGN_FUNC:
    case FLOOR_FUNC:
    case CEIL_FUNC:
    case ROUND_FUNC:
    case GAMMA_FUNC:
    case FUNCTION_LABEL:
    case 79:
    case 82:
      en = enelement();
               {if (true) return en;}
      break;
    default:
      jj_la1[21] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/**
 * element =    <variable>      |
 *              <float>         |
 *              ( expression )
 */
  final public ExpressionNode enelement() throws ParseException {
    ExpressionNode en;
    ExpressionValue ev;
    double num;
    MyDouble myDouble;
    Token c;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
      jj_consume_token(TRUE);
           {if (true) return new ExpressionNode(kernel, new MyBoolean(true));}
      break;
    case FALSE:
      jj_consume_token(FALSE);
            {if (true) return new ExpressionNode(kernel, new MyBoolean(false));}
      break;
    case PI:
    case E:
    case DEGREE:
    case RAD:
    case FLOAT:
    case EFLOAT:
      // number
          myDouble = myDouble();
          {if (true) return new ExpressionNode(kernel, myDouble);}
      break;
    default:
      jj_la1[22] = jj_gen;
      if (jj_2_15(2147483647)) {
        en = numberFunction();
           {if (true) return en;}
      } else if (jj_2_16(2147483647)) {
        ev = command();
          {if (true) return new ExpressionNode(kernel, ev);}
      } else if (jj_2_17(2147483647)) {
        en = numVecVariable();
          {if (true) return en;}
      } else if (jj_2_18(2147483647)) {
        ev = list();
              {if (true) return new ExpressionNode(kernel, ev);}
      } else if (jj_2_19(2147483647)) {
        jj_consume_token(82);
        en = expressionnode();
        jj_consume_token(81);
          {if (true) return  en;}
      } else if (jj_2_20(2147483647)) {
        ev = cartesianvector();
          {if (true) return new ExpressionNode(kernel, ev);}
      } else if (jj_2_21(2147483647)) {
        ev = polarvector();
          {if (true) return new ExpressionNode(kernel, ev);}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TEXT:
          // text (between " ... ")
                  c = jj_consume_token(TEXT);
        // remove " (first and last character)
        String text = c.image.substring(1, c.image.length()-1);
        {if (true) return new ExpressionNode(kernel, new MyStringBuffer(text));}
          break;
        default:
          jj_la1[23] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public ExpressionValue list() throws ParseException {
    MyList myList;
    ExpressionNode en;
    jj_consume_token(79);
    en = cmdexpression();
            myList = new MyList(kernel);
            myList.addListElement(en);
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 77:
        ;
        break;
      default:
        jj_la1[24] = jj_gen;
        break label_9;
      }
      jj_consume_token(77);
      en = cmdexpression();
                myList.addListElement(en);
    }
    jj_consume_token(80);
       {if (true) return myList;}
    throw new Error("Missing return statement in function");
  }

  final public ExpressionNode numVecVariable() throws ParseException {
    GeoElement geo;
    Token c;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VARX:
      c = jj_consume_token(VARX);
        {if (true) return new ExpressionNode(kernel, new Polynomial(kernel, c.image));}
      break;
    case VARY:
      c = jj_consume_token(VARY);
        {if (true) return new ExpressionNode(kernel, new Polynomial(kernel, c.image));}
      break;
    case LABEL:
      c = jj_consume_token(LABEL);
        // single variable name

        // special case: label "e" and no GeoElement exists with this name
        // then we use the Euler number    	
        if ("e".equals(c.image)) {
                if (kernel.lookupLabel("e") == null) {
                        {if (true) return new ExpressionNode(kernel, new MyDouble(kernel, Math.E));}
                }
        }

        // standard case for variable
        {if (true) return new ExpressionNode(kernel, new Variable(kernel, c.image));}
      break;
    default:
      jj_la1[25] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/**
 * floating point number: angle or numeric are distinguished
 */
  final public MyDouble myDouble() throws ParseException {
    Token c;
    MyDouble d;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FLOAT:
    case EFLOAT:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FLOAT:
        c = jj_consume_token(FLOAT);
        break;
      case EFLOAT:
        c = jj_consume_token(EFLOAT);
        break;
      default:
        jj_la1[26] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
        {if (true) return new MyDouble(kernel,
                        Double.parseDouble( c.image )
                );}
      break;
    case DEGREE:
      jj_consume_token(DEGREE);
       // constant for degree to radians 
        d = new MySpecialDouble(kernel, Math.PI / 180.0d,  "\u00b0" );
        d.setAngle();
        {if (true) return d;}
      break;
    case RAD:
      jj_consume_token(RAD);
       // constant for radians to radians 
        d = new MySpecialDouble(kernel, 1.0d, "rad");
        d.setAngle();
        {if (true) return d;}
      break;
    case PI:
      jj_consume_token(PI);
        {if (true) return new MyDouble(kernel, Math.PI);}
      break;
    case E:
      jj_consume_token(E);
        {if (true) return new MyDouble(kernel, Math.E);}
      break;
    default:
      jj_la1[27] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/**
 * mathematical Function (cos, sin, tan, ...)
 */
  final public ExpressionNode numberFunction() throws ParseException {
    ExpressionNode en;
    Token c;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case X_FUNC:
      jj_consume_token(X_FUNC);
      en = expressionnode();
      jj_consume_token(81);
        {if (true) return new ExpressionNode(kernel, en, ExpressionNode.XCOORD, null);}
      break;
    case Y_FUNC:
      jj_consume_token(Y_FUNC);
      en = expressionnode();
      jj_consume_token(81);
        {if (true) return new ExpressionNode(kernel, en, ExpressionNode.YCOORD, null);}
      break;
    case COS_FUNC:
      jj_consume_token(COS_FUNC);
      en = expressionnode();
      jj_consume_token(81);
        {if (true) return new ExpressionNode(kernel, en, ExpressionNode.COS, null);}
      break;
    case SIN_FUNC:
      jj_consume_token(SIN_FUNC);
      en = expressionnode();
      jj_consume_token(81);
        {if (true) return new ExpressionNode(kernel, en, ExpressionNode.SIN, null);}
      break;
    case TAN_FUNC:
      jj_consume_token(TAN_FUNC);
      en = expressionnode();
      jj_consume_token(81);
        {if (true) return new ExpressionNode(kernel, en, ExpressionNode.TAN, null);}
      break;
    case ACOS_FUNC:
      jj_consume_token(ACOS_FUNC);
      en = expressionnode();
      jj_consume_token(81);
        {if (true) return new ExpressionNode(kernel, en, ExpressionNode.ARCCOS, null);}
      break;
    case ASIN_FUNC:
      jj_consume_token(ASIN_FUNC);
      en = expressionnode();
      jj_consume_token(81);
        {if (true) return new ExpressionNode(kernel, en, ExpressionNode.ARCSIN, null);}
      break;
    case ATAN_FUNC:
      jj_consume_token(ATAN_FUNC);
      en = expressionnode();
      jj_consume_token(81);
        {if (true) return new ExpressionNode(kernel, en, ExpressionNode.ARCTAN, null);}
      break;
    case COSH_FUNC:
      jj_consume_token(COSH_FUNC);
      en = expressionnode();
      jj_consume_token(81);
        {if (true) return new ExpressionNode(kernel, en, ExpressionNode.COSH, null);}
      break;
    case SINH_FUNC:
      jj_consume_token(SINH_FUNC);
      en = expressionnode();
      jj_consume_token(81);
        {if (true) return new ExpressionNode(kernel, en, ExpressionNode.SINH, null);}
      break;
    case TANH_FUNC:
      jj_consume_token(TANH_FUNC);
      en = expressionnode();
      jj_consume_token(81);
        {if (true) return new ExpressionNode(kernel, en, ExpressionNode.TANH, null);}
      break;
    case ACOSH_FUNC:
      jj_consume_token(ACOSH_FUNC);
      en = expressionnode();
      jj_consume_token(81);
        {if (true) return new ExpressionNode(kernel, en, ExpressionNode.ACOSH, null);}
      break;
    case ASINH_FUNC:
      jj_consume_token(ASINH_FUNC);
      en = expressionnode();
      jj_consume_token(81);
        {if (true) return new ExpressionNode(kernel, en, ExpressionNode.ASINH, null);}
      break;
    case ATANH_FUNC:
      jj_consume_token(ATANH_FUNC);
      en = expressionnode();
      jj_consume_token(81);
        {if (true) return new ExpressionNode(kernel, en, ExpressionNode.ATANH, null);}
      break;
    case EXP_FUNC:
      jj_consume_token(EXP_FUNC);
      en = expressionnode();
      jj_consume_token(81);
        {if (true) return new ExpressionNode(kernel, en, ExpressionNode.EXP, null);}
      break;
    case LOG_FUNC:
      jj_consume_token(LOG_FUNC);
      en = expressionnode();
      jj_consume_token(81);
        {if (true) return new ExpressionNode(kernel, en, ExpressionNode.LOG, null);}
      break;
    case LG_FUNC:
      jj_consume_token(LG_FUNC);
      en = expressionnode();
      jj_consume_token(81);
        {if (true) return new ExpressionNode(kernel, en, ExpressionNode.LOG10, null);}
      break;
    case LD_FUNC:
      jj_consume_token(LD_FUNC);
      en = expressionnode();
      jj_consume_token(81);
        {if (true) return new ExpressionNode(kernel, en, ExpressionNode.LOG2, null);}
      break;
    case SQRT_FUNC:
      jj_consume_token(SQRT_FUNC);
      en = expressionnode();
      jj_consume_token(81);
        {if (true) return new ExpressionNode(kernel, en, ExpressionNode.SQRT, null);}
      break;
    case ABS_FUNC:
      jj_consume_token(ABS_FUNC);
      en = expressionnode();
      jj_consume_token(81);
        {if (true) return new ExpressionNode(kernel, en, ExpressionNode.ABS, null);}
      break;
    case SGN_FUNC:
      jj_consume_token(SGN_FUNC);
      en = expressionnode();
      jj_consume_token(81);
        {if (true) return new ExpressionNode(kernel, en, ExpressionNode.SGN, null);}
      break;
    case FLOOR_FUNC:
      jj_consume_token(FLOOR_FUNC);
      en = expressionnode();
      jj_consume_token(81);
        {if (true) return new ExpressionNode(kernel, en, ExpressionNode.FLOOR, null);}
      break;
    case CEIL_FUNC:
      jj_consume_token(CEIL_FUNC);
      en = expressionnode();
      jj_consume_token(81);
        {if (true) return new ExpressionNode(kernel, en, ExpressionNode.CEIL, null);}
      break;
    case ROUND_FUNC:
      jj_consume_token(ROUND_FUNC);
      en = expressionnode();
      jj_consume_token(81);
        {if (true) return new ExpressionNode(kernel, en, ExpressionNode.ROUND, null);}
      break;
    case GAMMA_FUNC:
      jj_consume_token(GAMMA_FUNC);
      en = expressionnode();
      jj_consume_token(81);
        {if (true) return new ExpressionNode(kernel, en, ExpressionNode.GAMMA, null);}
      break;
    case FUNCTION_LABEL:
      c = jj_consume_token(FUNCTION_LABEL);
      en = expressionnode();
      jj_consume_token(81);
                // remove the opening parenthesis
                String funcName = c.image.substring(0, c.image.length()-1);
                int order = 0;
                int index = funcName.length()-1;
                GeoElement geo = null;
                while (index >= 0) {
                        geo = cons.lookupLabel(funcName.substring(0, index+1));
                        if (geo != null) break;
                        if (c.image.charAt(index) == '\'') {
                                order++;
                                index--;
                        } else break;
                }

                if (geo == null) {
                        String [] str = { "UndefinedVariable", funcName };
                        {if (true) throw new MyParseError(app, str);}
                }

                if (order > 0) { // derivative
                        if (geo.isGeoFunction()) {// function 
                                // n-th derivative of geo
                                ExpressionNode derivative =  new ExpressionNode(kernel, geo, ExpressionNode.DERIVATIVE,
                                                                                                                                        new MyDouble(kernel, order));
                                {if (true) return new ExpressionNode(kernel, derivative, ExpressionNode.FUNCTION, en);}
                        }
                        else {
                        String [] str = { "FunctionExpected", funcName };
                        {if (true) throw new MyParseError(app, str);}
                        }
                }
                else { // no derivative
                        if (geo.isGeoFunction()) // function 
                                {if (true) return new ExpressionNode(kernel, geo, ExpressionNode.FUNCTION, en);}
                        else if (geo.isGeoCurveCartesian()) // vector function 
                                {if (true) return new ExpressionNode(kernel, geo, ExpressionNode.VEC_FUNCTION, en);}
                        else {// error: no function
                                String [] str = { "FunctionExpected", funcName };
                        {if (true) throw new MyParseError(app, str);}
                    }
                }
      break;
    default:
      jj_la1[28] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/**
 * cartesianvector =  ( expression, expression ) 
 */
  final public VectorValue cartesianvector() throws ParseException {
    ExpressionValue x, y;
    if (jj_2_22(2147483647)) {
      jj_consume_token(82);
      x = expression();
      jj_consume_token(77);
      y = expression();
      jj_consume_token(81);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 82:
        jj_consume_token(82);
        x = expression();
        jj_consume_token(CARTESIAN_SPECIAL_SEPERATOR);
        y = expression();
        jj_consume_token(81);
        break;
      default:
        jj_la1[29] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
           {if (true) return new MyVecNode(kernel, x, y);}
    throw new Error("Missing return statement in function");
  }

/**
 * polarvector = ( expression ; expression )             
 */
  final public VectorValue polarvector() throws ParseException {
    ExpressionValue r, phi;
    MyVecNode v;
    jj_consume_token(82);
    r = expression();
    jj_consume_token(EOL);
    phi = expression();
    jj_consume_token(81);
             v = new MyVecNode(kernel);
             v.setPolarCoords(r, phi);
             {if (true) return v;}
    throw new Error("Missing return statement in function");
  }

/**
 * cartesianvector_special =  <LABEL>( expression | expression ) 
 */
  final public ExpressionNode cartesianvector_special() throws ParseException {
   Token l;
    ExpressionValue x, y;
    l = jj_consume_token(FUNCTION_LABEL);
    x = expression();
    jj_consume_token(CARTESIAN_SPECIAL_SEPERATOR);
    y = expression();
    jj_consume_token(81);
                ExpressionNode en =  new ExpressionNode(kernel, new MyVecNode(kernel, x, y));
                en.setLabel(l.image.substring(0,l.image.length()-1));
                {if (true) return en;}
    throw new Error("Missing return statement in function");
  }

/**
 * polarvector_special =  <LABEL>( expression ; expression ) 
 */
  final public ExpressionNode polarvector_special() throws ParseException {
   Token l;
    ExpressionValue r, phi;
    l = jj_consume_token(FUNCTION_LABEL);
    r = expression();
    jj_consume_token(EOL);
    phi = expression();
    jj_consume_token(81);
            MyVecNode v = new MyVecNode(kernel);
            v.setPolarCoords(r, phi);
                ExpressionNode en =  new ExpressionNode(kernel, v);
                en.setLabel(l.image.substring(0,l.image.length()-1));
                {if (true) return en;}
    throw new Error("Missing return statement in function");
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  final private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  final private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  final private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  final private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  final private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  final private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  final private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  final private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  final private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  final private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  final private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  final private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  final private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  final private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  final private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  final private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  final private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  final private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  final private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  final private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  final private boolean jj_3R_59() {
    if (jj_scan_token(VARX)) return true;
    return false;
  }

  final private boolean jj_3R_22() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_59()) {
    jj_scanpos = xsp;
    if (jj_3R_60()) {
    jj_scanpos = xsp;
    if (jj_3R_61()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_71() {
    if (jj_3R_76()) return true;
    return false;
  }

  final private boolean jj_3R_12() {
    if (jj_scan_token(LABEL)) return true;
    return false;
  }

  final private boolean jj_3R_70() {
    if (jj_scan_token(MINUS)) return true;
    if (jj_3R_76()) return true;
    return false;
  }

  final private boolean jj_3R_64() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_70()) {
    jj_scanpos = xsp;
    if (jj_3R_71()) return true;
    }
    return false;
  }

  final private boolean jj_3R_62() {
    if (jj_scan_token(77)) return true;
    if (jj_3R_16()) return true;
    return false;
  }

  final private boolean jj_3_12() {
    if (jj_3R_20()) return true;
    return false;
  }

  final private boolean jj_3R_11() {
    if (jj_scan_token(FUNCTION_LABEL)) return true;
    if (jj_scan_token(VARX)) return true;
    if (jj_scan_token(81)) return true;
    if (jj_scan_token(EQUAL)) return true;
    if (jj_3R_15()) return true;
    return false;
  }

  final private boolean jj_3R_23() {
    if (jj_scan_token(79)) return true;
    if (jj_3R_16()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_62()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(80)) return true;
    return false;
  }

  final private boolean jj_3R_73() {
    if (jj_3R_76()) return true;
    return false;
  }

  final private boolean jj_3_11() {
    if (jj_3R_19()) return true;
    return false;
  }

  final private boolean jj_3R_100() {
    if (jj_scan_token(TEXT)) return true;
    return false;
  }

  final private boolean jj_3R_72() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(19)) {
    jj_scanpos = xsp;
    if (jj_scan_token(20)) return true;
    }
    if (jj_3R_64()) return true;
    return false;
  }

  final private boolean jj_3R_65() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_72()) {
    jj_scanpos = xsp;
    if (jj_3R_73()) return true;
    }
    return false;
  }

  final private boolean jj_3_10() {
    if (jj_3R_17()) return true;
    if (jj_scan_token(EQUAL)) return true;
    if (jj_3R_18()) return true;
    return false;
  }

  final private boolean jj_3_9() {
    if (jj_3R_16()) return true;
    return false;
  }

  final private boolean jj_3R_27() {
    if (jj_3R_64()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_65()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_58() {
    if (jj_scan_token(FUNCTION_LABEL)) return true;
    if (jj_3R_15()) return true;
    if (jj_scan_token(81)) return true;
    return false;
  }

  final private boolean jj_3R_16() {
    if (jj_3R_15()) return true;
    return false;
  }

  final private boolean jj_3_21() {
    if (jj_3R_25()) return true;
    return false;
  }

  final private boolean jj_3R_57() {
    if (jj_scan_token(GAMMA_FUNC)) return true;
    if (jj_3R_15()) return true;
    if (jj_scan_token(81)) return true;
    return false;
  }

  final private boolean jj_3_20() {
    if (jj_3R_24()) return true;
    return false;
  }

  final private boolean jj_3R_56() {
    if (jj_scan_token(ROUND_FUNC)) return true;
    if (jj_3R_15()) return true;
    if (jj_scan_token(81)) return true;
    return false;
  }

  final private boolean jj_3_8() {
    if (jj_3R_15()) return true;
    if (jj_scan_token(EQUAL)) return true;
    if (jj_3R_15()) return true;
    return false;
  }

  final private boolean jj_3R_55() {
    if (jj_scan_token(CEIL_FUNC)) return true;
    if (jj_3R_15()) return true;
    if (jj_scan_token(81)) return true;
    return false;
  }

  final private boolean jj_3_19() {
    if (jj_scan_token(82)) return true;
    if (jj_3R_15()) return true;
    if (jj_scan_token(81)) return true;
    return false;
  }

  final private boolean jj_3R_54() {
    if (jj_scan_token(FLOOR_FUNC)) return true;
    if (jj_3R_15()) return true;
    if (jj_scan_token(81)) return true;
    return false;
  }

  final private boolean jj_3R_53() {
    if (jj_scan_token(SGN_FUNC)) return true;
    if (jj_3R_15()) return true;
    if (jj_scan_token(81)) return true;
    return false;
  }

  final private boolean jj_3_18() {
    if (jj_3R_23()) return true;
    return false;
  }

  final private boolean jj_3R_77() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(17)) {
    jj_scanpos = xsp;
    if (jj_scan_token(18)) return true;
    }
    if (jj_3R_27()) return true;
    return false;
  }

  final private boolean jj_3_7() {
    if (jj_scan_token(LABEL)) return true;
    if (jj_scan_token(75)) return true;
    if (jj_3R_14()) return true;
    return false;
  }

  final private boolean jj_3R_52() {
    if (jj_scan_token(ABS_FUNC)) return true;
    if (jj_3R_15()) return true;
    if (jj_scan_token(81)) return true;
    return false;
  }

  final private boolean jj_3_2() {
    if (jj_scan_token(LABEL)) return true;
    if (jj_scan_token(75)) return true;
    return false;
  }

  final private boolean jj_3R_74() {
    if (jj_3R_27()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_77()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_26() {
    if (jj_3R_15()) return true;
    return false;
  }

  final private boolean jj_3_17() {
    if (jj_3R_22()) return true;
    return false;
  }

  final private boolean jj_3R_50() {
    if (jj_scan_token(LD_FUNC)) return true;
    if (jj_3R_15()) return true;
    if (jj_scan_token(81)) return true;
    return false;
  }

  final private boolean jj_3_6() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_2()) jj_scanpos = xsp;
    if (jj_3R_13()) return true;
    return false;
  }

  final private boolean jj_3_1() {
    if (jj_scan_token(LABEL)) return true;
    if (jj_scan_token(EQUAL)) return true;
    return false;
  }

  final private boolean jj_3R_51() {
    if (jj_scan_token(SQRT_FUNC)) return true;
    if (jj_3R_15()) return true;
    if (jj_scan_token(81)) return true;
    return false;
  }

  final private boolean jj_3_16() {
    if (jj_3R_18()) return true;
    return false;
  }

  final private boolean jj_3R_49() {
    if (jj_scan_token(LG_FUNC)) return true;
    if (jj_3R_15()) return true;
    if (jj_scan_token(81)) return true;
    return false;
  }

  final private boolean jj_3_5() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_1()) jj_scanpos = xsp;
    if (jj_3R_12()) return true;
    xsp = jj_scanpos;
    if (jj_scan_token(5)) {
    jj_scanpos = xsp;
    if (jj_scan_token(0)) return true;
    }
    return false;
  }

  final private boolean jj_3_4() {
    if (jj_3R_11()) return true;
    return false;
  }

  final private boolean jj_3R_48() {
    if (jj_scan_token(LOG_FUNC)) return true;
    if (jj_3R_15()) return true;
    if (jj_scan_token(81)) return true;
    return false;
  }

  final private boolean jj_3_15() {
    if (jj_3R_21()) return true;
    return false;
  }

  final private boolean jj_3_3() {
    if (jj_3R_10()) return true;
    return false;
  }

  final private boolean jj_3R_47() {
    if (jj_scan_token(EXP_FUNC)) return true;
    if (jj_3R_15()) return true;
    if (jj_scan_token(81)) return true;
    return false;
  }

  final private boolean jj_3R_99() {
    if (jj_3R_101()) return true;
    return false;
  }

  final private boolean jj_3R_98() {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  final private boolean jj_3R_83() {
    if (jj_scan_token(GREATER_EQUAL)) return true;
    if (jj_3R_74()) return true;
    return false;
  }

  final private boolean jj_3R_14() {
    if (jj_3R_15()) return true;
    if (jj_scan_token(EQUAL)) return true;
    if (jj_3R_15()) return true;
    return false;
  }

  final private boolean jj_3R_46() {
    if (jj_scan_token(ATANH_FUNC)) return true;
    if (jj_3R_15()) return true;
    if (jj_scan_token(81)) return true;
    return false;
  }

  final private boolean jj_3R_97() {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  final private boolean jj_3R_96() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_97()) {
    jj_scanpos = xsp;
    if (jj_3R_98()) {
    jj_scanpos = xsp;
    if (jj_3R_99()) {
    jj_scanpos = xsp;
    if (jj_3_15()) {
    jj_scanpos = xsp;
    if (jj_3_16()) {
    jj_scanpos = xsp;
    if (jj_3_17()) {
    jj_scanpos = xsp;
    if (jj_3_18()) {
    jj_scanpos = xsp;
    if (jj_3_19()) {
    jj_scanpos = xsp;
    if (jj_3_20()) {
    jj_scanpos = xsp;
    if (jj_3_21()) {
    jj_scanpos = xsp;
    if (jj_3R_100()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_45() {
    if (jj_scan_token(ASINH_FUNC)) return true;
    if (jj_3R_15()) return true;
    if (jj_scan_token(81)) return true;
    return false;
  }

  final private boolean jj_3R_82() {
    if (jj_scan_token(LESS_EQUAL)) return true;
    if (jj_3R_74()) return true;
    return false;
  }

  final private boolean jj_3R_44() {
    if (jj_scan_token(ACOSH_FUNC)) return true;
    if (jj_3R_15()) return true;
    if (jj_scan_token(81)) return true;
    return false;
  }

  final private boolean jj_3R_43() {
    if (jj_scan_token(TANH_FUNC)) return true;
    if (jj_3R_15()) return true;
    if (jj_scan_token(81)) return true;
    return false;
  }

  final private boolean jj_3R_81() {
    if (jj_scan_token(GREATER)) return true;
    if (jj_3R_74()) return true;
    return false;
  }

  final private boolean jj_3R_42() {
    if (jj_scan_token(SINH_FUNC)) return true;
    if (jj_3R_15()) return true;
    if (jj_scan_token(81)) return true;
    return false;
  }

  final private boolean jj_3R_41() {
    if (jj_scan_token(COSH_FUNC)) return true;
    if (jj_3R_15()) return true;
    if (jj_scan_token(81)) return true;
    return false;
  }

  final private boolean jj_3R_80() {
    if (jj_scan_token(LESS)) return true;
    if (jj_3R_74()) return true;
    return false;
  }

  final private boolean jj_3R_40() {
    if (jj_scan_token(ATAN_FUNC)) return true;
    if (jj_3R_15()) return true;
    if (jj_scan_token(81)) return true;
    return false;
  }

  final private boolean jj_3R_39() {
    if (jj_scan_token(ASIN_FUNC)) return true;
    if (jj_3R_15()) return true;
    if (jj_scan_token(81)) return true;
    return false;
  }

  final private boolean jj_3R_95() {
    if (jj_3R_96()) return true;
    return false;
  }

  final private boolean jj_3R_79() {
    if (jj_scan_token(NOT_EQUAL)) return true;
    if (jj_3R_74()) return true;
    return false;
  }

  final private boolean jj_3R_38() {
    if (jj_scan_token(ACOS_FUNC)) return true;
    if (jj_3R_15()) return true;
    if (jj_scan_token(81)) return true;
    return false;
  }

  final private boolean jj_3R_37() {
    if (jj_scan_token(TAN_FUNC)) return true;
    if (jj_3R_15()) return true;
    if (jj_scan_token(81)) return true;
    return false;
  }

  final private boolean jj_3R_94() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(7)) {
    jj_scanpos = xsp;
    if (jj_scan_token(22)) return true;
    }
    if (jj_3R_96()) return true;
    return false;
  }

  final private boolean jj_3R_91() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_94()) {
    jj_scanpos = xsp;
    if (jj_3R_95()) return true;
    }
    return false;
  }

  final private boolean jj_3R_78() {
    if (jj_scan_token(EQUAL_BOOLEAN)) return true;
    if (jj_3R_74()) return true;
    return false;
  }

  final private boolean jj_3R_75() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_78()) {
    jj_scanpos = xsp;
    if (jj_3R_79()) {
    jj_scanpos = xsp;
    if (jj_3R_80()) {
    jj_scanpos = xsp;
    if (jj_3R_81()) {
    jj_scanpos = xsp;
    if (jj_3R_82()) {
    jj_scanpos = xsp;
    if (jj_3R_83()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_36() {
    if (jj_scan_token(SIN_FUNC)) return true;
    if (jj_3R_15()) return true;
    if (jj_scan_token(81)) return true;
    return false;
  }

  final private boolean jj_3_14() {
    if (jj_scan_token(FACTORIAL)) return true;
    return false;
  }

  final private boolean jj_3R_35() {
    if (jj_scan_token(COS_FUNC)) return true;
    if (jj_3R_15()) return true;
    if (jj_scan_token(81)) return true;
    return false;
  }

  final private boolean jj_3R_66() {
    if (jj_3R_74()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_75()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_34() {
    if (jj_scan_token(Y_FUNC)) return true;
    if (jj_3R_15()) return true;
    if (jj_scan_token(81)) return true;
    return false;
  }

  final private boolean jj_3R_21() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_33()) {
    jj_scanpos = xsp;
    if (jj_3R_34()) {
    jj_scanpos = xsp;
    if (jj_3R_35()) {
    jj_scanpos = xsp;
    if (jj_3R_36()) {
    jj_scanpos = xsp;
    if (jj_3R_37()) {
    jj_scanpos = xsp;
    if (jj_3R_38()) {
    jj_scanpos = xsp;
    if (jj_3R_39()) {
    jj_scanpos = xsp;
    if (jj_3R_40()) {
    jj_scanpos = xsp;
    if (jj_3R_41()) {
    jj_scanpos = xsp;
    if (jj_3R_42()) {
    jj_scanpos = xsp;
    if (jj_3R_43()) {
    jj_scanpos = xsp;
    if (jj_3R_44()) {
    jj_scanpos = xsp;
    if (jj_3R_45()) {
    jj_scanpos = xsp;
    if (jj_3R_46()) {
    jj_scanpos = xsp;
    if (jj_3R_47()) {
    jj_scanpos = xsp;
    if (jj_3R_48()) {
    jj_scanpos = xsp;
    if (jj_3R_49()) {
    jj_scanpos = xsp;
    if (jj_3R_50()) {
    jj_scanpos = xsp;
    if (jj_3R_51()) {
    jj_scanpos = xsp;
    if (jj_3R_52()) {
    jj_scanpos = xsp;
    if (jj_3R_53()) {
    jj_scanpos = xsp;
    if (jj_3R_54()) {
    jj_scanpos = xsp;
    if (jj_3R_55()) {
    jj_scanpos = xsp;
    if (jj_3R_56()) {
    jj_scanpos = xsp;
    if (jj_3R_57()) {
    jj_scanpos = xsp;
    if (jj_3R_58()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_33() {
    if (jj_scan_token(X_FUNC)) return true;
    if (jj_3R_15()) return true;
    if (jj_scan_token(81)) return true;
    return false;
  }

  final private boolean jj_3R_92() {
    if (jj_scan_token(FACTORIAL)) return true;
    return false;
  }

  final private boolean jj_3R_20() {
    if (jj_scan_token(FUNCTION_LABEL)) return true;
    if (jj_3R_26()) return true;
    if (jj_scan_token(EOL)) return true;
    if (jj_3R_26()) return true;
    if (jj_scan_token(81)) return true;
    return false;
  }

  final private boolean jj_3R_84() {
    if (jj_3R_91()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_92()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_67() {
    if (jj_scan_token(AND)) return true;
    if (jj_3R_66()) return true;
    return false;
  }

  final private boolean jj_3R_28() {
    if (jj_3R_66()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_67()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_106() {
    if (jj_scan_token(E)) return true;
    return false;
  }

  final private boolean jj_3_13() {
    if (jj_scan_token(POWER)) return true;
    return false;
  }

  final private boolean jj_3R_13() {
    if (jj_scan_token(PARAMETRICVAR)) return true;
    if (jj_scan_token(EQUAL)) return true;
    if (jj_3R_27()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(17)) {
    jj_scanpos = xsp;
    if (jj_scan_token(18)) return true;
    }
    if (jj_scan_token(LABEL)) return true;
    xsp = jj_scanpos;
    if (jj_scan_token(19)) jj_scanpos = xsp;
    if (jj_3R_26()) return true;
    return false;
  }

  final private boolean jj_3R_105() {
    if (jj_scan_token(PI)) return true;
    return false;
  }

  final private boolean jj_3R_19() {
    if (jj_scan_token(FUNCTION_LABEL)) return true;
    if (jj_3R_26()) return true;
    if (jj_scan_token(CARTESIAN_SPECIAL_SEPERATOR)) return true;
    if (jj_3R_26()) return true;
    if (jj_scan_token(81)) return true;
    return false;
  }

  final private boolean jj_3R_93() {
    if (jj_scan_token(POWER)) return true;
    if (jj_3R_64()) return true;
    return false;
  }

  final private boolean jj_3R_90() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_93()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_104() {
    if (jj_scan_token(RAD)) return true;
    return false;
  }

  final private boolean jj_3R_29() {
    if (jj_scan_token(OR)) return true;
    if (jj_3R_28()) return true;
    return false;
  }

  final private boolean jj_3R_89() {
    if (jj_scan_token(POWER6)) return true;
    return false;
  }

  final private boolean jj_3R_69() {
    if (jj_scan_token(77)) return true;
    if (jj_scan_token(LABEL)) return true;
    return false;
  }

  final private boolean jj_3R_103() {
    if (jj_scan_token(DEGREE)) return true;
    return false;
  }

  final private boolean jj_3R_15() {
    if (jj_3R_28()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_29()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_88() {
    if (jj_scan_token(POWER5)) return true;
    return false;
  }

  final private boolean jj_3R_25() {
    if (jj_scan_token(82)) return true;
    if (jj_3R_26()) return true;
    if (jj_scan_token(EOL)) return true;
    if (jj_3R_26()) return true;
    if (jj_scan_token(81)) return true;
    return false;
  }

  final private boolean jj_3R_68() {
    if (jj_scan_token(77)) return true;
    if (jj_scan_token(LABEL)) return true;
    return false;
  }

  final private boolean jj_3R_102() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(38)) {
    jj_scanpos = xsp;
    if (jj_scan_token(39)) return true;
    }
    return false;
  }

  final private boolean jj_3R_101() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_102()) {
    jj_scanpos = xsp;
    if (jj_3R_103()) {
    jj_scanpos = xsp;
    if (jj_3R_104()) {
    jj_scanpos = xsp;
    if (jj_3R_105()) {
    jj_scanpos = xsp;
    if (jj_3R_106()) return true;
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_87() {
    if (jj_scan_token(POWER4)) return true;
    return false;
  }

  final private boolean jj_3R_31() {
    if (jj_scan_token(LABEL)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_69()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_10() {
    if (jj_scan_token(FUNCTION_LABEL)) return true;
    if (jj_scan_token(VARX)) return true;
    if (jj_scan_token(81)) return true;
    if (jj_scan_token(EQUAL)) return true;
    if (jj_3R_18()) return true;
    return false;
  }

  final private boolean jj_3R_86() {
    if (jj_scan_token(CUBED)) return true;
    return false;
  }

  final private boolean jj_3R_30() {
    if (jj_scan_token(79)) return true;
    if (jj_scan_token(LABEL)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_68()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(80)) return true;
    return false;
  }

  final private boolean jj_3R_17() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_30()) {
    jj_scanpos = xsp;
    if (jj_3R_31()) return true;
    }
    return false;
  }

  final private boolean jj_3R_63() {
    if (jj_scan_token(82)) return true;
    if (jj_3R_26()) return true;
    if (jj_scan_token(CARTESIAN_SPECIAL_SEPERATOR)) return true;
    if (jj_3R_26()) return true;
    if (jj_scan_token(81)) return true;
    return false;
  }

  final private boolean jj_3_22() {
    if (jj_scan_token(82)) return true;
    if (jj_3R_26()) return true;
    if (jj_scan_token(77)) return true;
    if (jj_3R_26()) return true;
    if (jj_scan_token(81)) return true;
    return false;
  }

  final private boolean jj_3R_85() {
    if (jj_scan_token(SQUARED)) return true;
    return false;
  }

  final private boolean jj_3R_32() {
    if (jj_scan_token(77)) return true;
    if (jj_3R_16()) return true;
    return false;
  }

  final private boolean jj_3R_24() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_22()) {
    jj_scanpos = xsp;
    if (jj_3R_63()) return true;
    }
    return false;
  }

  final private boolean jj_3R_76() {
    if (jj_3R_84()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_85()) {
    jj_scanpos = xsp;
    if (jj_3R_86()) {
    jj_scanpos = xsp;
    if (jj_3R_87()) {
    jj_scanpos = xsp;
    if (jj_3R_88()) {
    jj_scanpos = xsp;
    if (jj_3R_89()) {
    jj_scanpos = xsp;
    if (jj_3R_90()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_61() {
    if (jj_scan_token(LABEL)) return true;
    return false;
  }

  final private boolean jj_3R_18() {
    if (jj_scan_token(LABEL)) return true;
    if (jj_scan_token(76)) return true;
    if (jj_3R_16()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_32()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(78)) return true;
    return false;
  }

  final private boolean jj_3R_60() {
    if (jj_scan_token(VARY)) return true;
    return false;
  }

  public ParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[30];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_0();
      jj_la1_1();
      jj_la1_2();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x21,0x0,0x21,0x0,0x0,0x0,0x0,0x60000,0x80000,0x100,0x200,0xfc00,0xfc00,0x60000,0x60000,0xf0580080,0x180000,0xf0580080,0xf0440080,0xf800000,0x400080,0xf0400080,0xf0000000,0x0,0x0,0x0,0x0,0xf0000000,0x0,0x0,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x0,0x20,0x0,0x0,0x0,0x0,0x400,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xfffe84de,0x0,0xfffe84de,0xfffe84de,0x0,0x0,0xfffe84de,0xc6,0x8000,0x0,0x418,0xc0,0xc0,0xfffe0000,0x0,};
   }
   private static void jj_la1_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x2000,0x2000,0x2000,0x8000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x487ff,0x0,0x487ff,0x487ff,0x0,0x0,0x487ff,0x0,0x0,0x2000,0x0,0x0,0x0,0x7ff,0x40000,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[22];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  public Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  public Parser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public Parser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public Parser(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[83];
    for (int i = 0; i < 83; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 30; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 83; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

  final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 22; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
