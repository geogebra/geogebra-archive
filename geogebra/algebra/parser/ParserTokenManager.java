/* Generated By:JavaCC: Do not edit this line. ParserTokenManager.java */
package geogebra.algebra.parser;
import geogebra.*;
import geogebra.kernel.*;
import geogebra.kernel.arithmetic.*;
import java.util.*;

public class ParserTokenManager implements ParserConstants
{
  public  java.io.PrintStream debugStream = System.out;
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x40L) != 0L)
            return 0;
         if ((active0 & 0xc00700000000L) != 0L)
            return 46;
         if ((active0 & 0x400L) != 0L)
            return 6;
         if ((active0 & 0xffff0000d0000000L) != 0L || (active1 & 0x1fL) != 0L)
         {
            jjmatchedKind = 39;
            return 46;
         }
         if ((active0 & 0x800L) != 0L)
            return 9;
         return -1;
      case 1:
         if ((active0 & 0xffff0000d0000000L) != 0L || (active1 & 0x1fL) != 0L)
         {
            jjmatchedKind = 39;
            jjmatchedPos = 1;
            return 46;
         }
         return -1;
      case 2:
         if ((active0 & 0x10000000L) != 0L)
            return 46;
         if ((active0 & 0xffff0000c0000000L) != 0L || (active1 & 0x1fL) != 0L)
         {
            jjmatchedKind = 39;
            jjmatchedPos = 2;
            return 46;
         }
         return -1;
      case 3:
         if ((active0 & 0x40000000L) != 0L)
            return 46;
         if ((active0 & 0x4ff8000080000000L) != 0L || (active1 & 0x1eL) != 0L)
         {
            jjmatchedKind = 39;
            jjmatchedPos = 3;
            return 46;
         }
         return -1;
      case 4:
         if ((active0 & 0x80000000L) != 0L)
            return 46;
         if ((active0 & 0xe00000000000000L) != 0L || (active1 & 0x1aL) != 0L)
         {
            jjmatchedKind = 39;
            jjmatchedPos = 4;
            return 46;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private final int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         return jjStopAtPos(0, 20);
      case 39:
         return jjStopAtPos(0, 29);
      case 40:
         return jjStopAtPos(0, 77);
      case 41:
         return jjStopAtPos(0, 76);
      case 42:
         return jjStopAtPos(0, 17);
      case 43:
         return jjStopAtPos(0, 15);
      case 44:
         return jjStopAtPos(0, 72);
      case 45:
         return jjStopAtPos(0, 16);
      case 47:
         return jjStopAtPos(0, 18);
      case 58:
         return jjStopAtPos(0, 70);
      case 59:
         return jjStopAtPos(0, 5);
      case 60:
         return jjStartNfaWithStates_0(0, 10, 6);
      case 61:
         jjmatchedKind = 14;
         return jjMoveStringLiteralDfa1_0(0x200L, 0x0L);
      case 62:
         return jjStartNfaWithStates_0(0, 11, 9);
      case 88:
         return jjStartNfaWithStates_0(0, 34, 46);
      case 91:
         return jjStopAtPos(0, 71);
      case 93:
         return jjStopAtPos(0, 73);
      case 94:
         return jjStopAtPos(0, 19);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x8e38000000000000L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x41000000000000L, 0x4L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x1000000000000000L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x80000000L, 0x2L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x2000000000000000L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x10000000L, 0x8L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x4082000000000000L, 0x1L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x104000040000000L, 0x0L);
      case 120:
         jjmatchedKind = 32;
         return jjMoveStringLiteralDfa1_0(0x400000000000L, 0x0L);
      case 121:
         jjmatchedKind = 33;
         return jjMoveStringLiteralDfa1_0(0x800000000000L, 0x0L);
      case 123:
         return jjStopAtPos(0, 74);
      case 124:
         return jjStartNfaWithStates_0(0, 6, 0);
      case 125:
         return jjStopAtPos(0, 75);
      case 176:
         return jjStopAtPos(0, 27);
      case 178:
         return jjStopAtPos(0, 21);
      case 179:
         return jjStopAtPos(0, 22);
      case 8308:
         return jjStopAtPos(0, 23);
      case 8309:
         return jjStopAtPos(0, 24);
      case 8310:
         return jjStopAtPos(0, 25);
      default :
         return jjMoveNfa_0(1, 0);
   }
}
private final int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 40:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStopAtPos(1, 46);
         else if ((active0 & 0x800000000000L) != 0L)
            return jjStopAtPos(1, 47);
         break;
      case 61:
         if ((active0 & 0x200L) != 0L)
            return jjStopAtPos(1, 9);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x104000090000000L, active1, 0x10L);
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000000000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0x208000000000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x4L);
      case 103:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x82000000000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x2L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x2041000000000000L, active1, 0x8L);
      case 113:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000000000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0x410000000000000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x820000000000000L, active1, 0L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private final int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x820000000000000L, active1, 0L);
      case 100:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(2, 28, 46);
         break;
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x410000000000000L, active1, 0x4L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x10L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x186000000000000L, active1, 0x1L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x208000000000000L, active1, 0x2L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000000000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x8041000000000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000L, active1, 0x8L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
private final int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 40:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStopAtPos(3, 48);
         else if ((active0 & 0x2000000000000L) != 0L)
            return jjStopAtPos(3, 49);
         else if ((active0 & 0x4000000000000L) != 0L)
            return jjStopAtPos(3, 50);
         else if ((active0 & 0x1000000000000000L) != 0L)
            return jjStopAtPos(3, 60);
         else if ((active0 & 0x2000000000000000L) != 0L)
            return jjStopAtPos(3, 61);
         else if ((active0 & 0x8000000000000000L) != 0L)
            return jjStopAtPos(3, 63);
         else if ((active1 & 0x1L) != 0L)
            return jjStopAtPos(3, 64);
         break;
      case 101:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(3, 30, 46);
         break;
      case 104:
         return jjMoveStringLiteralDfa4_0(active0, 0x1c0000000000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x4L);
      case 109:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x10L);
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0xc30000000000000L, active1, 0x8L);
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x2L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x208000080000000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1);
}
private final int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1);
      return 4;
   }
   switch(curChar)
   {
      case 40:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStopAtPos(4, 51);
         else if ((active0 & 0x10000000000000L) != 0L)
            return jjStopAtPos(4, 52);
         else if ((active0 & 0x20000000000000L) != 0L)
            return jjStopAtPos(4, 53);
         else if ((active0 & 0x40000000000000L) != 0L)
            return jjStopAtPos(4, 54);
         else if ((active0 & 0x80000000000000L) != 0L)
            return jjStopAtPos(4, 55);
         else if ((active0 & 0x100000000000000L) != 0L)
            return jjStopAtPos(4, 56);
         else if ((active0 & 0x4000000000000000L) != 0L)
            return jjStopAtPos(4, 62);
         else if ((active1 & 0x4L) != 0L)
            return jjStopAtPos(4, 66);
         break;
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x10L);
      case 100:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x8L);
      case 101:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(4, 31, 46);
         break;
      case 104:
         return jjMoveStringLiteralDfa5_0(active0, 0xe00000000000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x2L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1);
}
private final int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1);
      return 5;
   }
   switch(curChar)
   {
      case 40:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStopAtPos(5, 57);
         else if ((active0 & 0x400000000000000L) != 0L)
            return jjStopAtPos(5, 58);
         else if ((active0 & 0x800000000000000L) != 0L)
            return jjStopAtPos(5, 59);
         else if ((active1 & 0x2L) != 0L)
            return jjStopAtPos(5, 65);
         else if ((active1 & 0x8L) != 0L)
            return jjStopAtPos(5, 67);
         else if ((active1 & 0x10L) != 0L)
            return jjStopAtPos(5, 68);
         break;
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1);
}
private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
static final long[] jjbitVec0 = {
   0x10000000000L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec1 = {
   0x8000000000L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec2 = {
   0x0L, 0x1000000000L, 0x0L, 0x0L
};
static final long[] jjbitVec3 = {
   0x0L, 0x2000000000L, 0x0L, 0x0L
};
static final long[] jjbitVec4 = {
   0x0L, 0x0L, 0x0L, 0x1L
};
static final long[] jjbitVec5 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec7 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec8 = {
   0x1600L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec9 = {
   0x0L, 0xffc000000000L, 0x0L, 0xffc000000000L
};
static final long[] jjbitVec10 = {
   0x0L, 0x3ff00000000L, 0x0L, 0x3ff000000000000L
};
static final long[] jjbitVec11 = {
   0x0L, 0xffc000000000L, 0x0L, 0xff8000000000L
};
static final long[] jjbitVec12 = {
   0x0L, 0xffc000000000L, 0x0L, 0x0L
};
static final long[] jjbitVec13 = {
   0x0L, 0x3ff0000L, 0x0L, 0x3ff0000L
};
static final long[] jjbitVec14 = {
   0x0L, 0x3ffL, 0x0L, 0x0L
};
static final long[] jjbitVec15 = {
   0x1ff00000fffffffeL, 0xffffffffffffc000L, 0xffffffffL, 0x600000000000000L
};
static final long[] jjbitVec16 = {
   0x0L, 0x0L, 0x0L, 0xfe7effff3e7effffL
};
static final long[] jjbitVec17 = {
   0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec18 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffL, 0x0L
};
static final long[] jjbitVec19 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0x0L, 0x0L
};
static final long[] jjbitVec20 = {
   0x3fffffffffffL, 0x0L, 0x0L, 0x0L
};
private final int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 46;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 46:
                  if ((0x3ff008000000000L & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  else if (curChar == 40)
                  {
                     if (kind > 69)
                        kind = 69;
                  }
                  if ((0x3ff008000000000L & l) != 0L)
                  {
                     if (kind > 39)
                        kind = 39;
                     jjCheckNAddTwoStates(33, 34);
                  }
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 35)
                        kind = 35;
                     jjCheckNAddStates(3, 7);
                  }
                  else if (curChar == 46)
                     jjCheckNAddTwoStates(30, 31);
                  else if (curChar == 34)
                     jjCheckNAddTwoStates(17, 18);
                  else if (curChar == 62)
                     jjstateSet[jjnewStateCnt++] = 9;
                  else if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 6;
                  else if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 3:
                  if (curChar == 38 && kind > 8)
                     kind = 8;
                  break;
               case 4:
                  if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 6:
                  if (curChar == 61 && kind > 12)
                     kind = 12;
                  break;
               case 7:
                  if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 9:
                  if (curChar == 61 && kind > 13)
                     kind = 13;
                  break;
               case 10:
                  if (curChar == 62)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 16:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(17, 18);
                  break;
               case 17:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(17, 18);
                  break;
               case 18:
                  if (curChar == 34 && kind > 44)
                     kind = 44;
                  break;
               case 19:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 35)
                     kind = 35;
                  jjCheckNAddStates(3, 7);
                  break;
               case 20:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 35)
                     kind = 35;
                  jjCheckNAddTwoStates(20, 21);
                  break;
               case 21:
                  if (curChar == 46)
                     jjCheckNAdd(22);
                  break;
               case 22:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 35)
                     kind = 35;
                  jjCheckNAdd(22);
                  break;
               case 23:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(8, 10);
                  break;
               case 24:
                  if (curChar == 46)
                     jjCheckNAdd(25);
                  break;
               case 25:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(25, 26);
                  break;
               case 27:
                  if (curChar == 45)
                     jjCheckNAdd(28);
                  break;
               case 28:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 36)
                     kind = 36;
                  jjCheckNAdd(28);
                  break;
               case 29:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(30, 31);
                  break;
               case 30:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 35)
                     kind = 35;
                  jjCheckNAdd(30);
                  break;
               case 31:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(31, 26);
                  break;
               case 33:
                  if ((0x3ff008000000000L & l) == 0L)
                     break;
                  if (kind > 39)
                     kind = 39;
                  jjCheckNAddTwoStates(33, 34);
                  break;
               case 35:
                  if ((0xfffffffbffffffffL & l) != 0L && kind > 39)
                     kind = 39;
                  break;
               case 37:
                  jjAddStates(11, 12);
                  break;
               case 39:
                  if ((0x3ff008000000000L & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 41:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAdd(42);
                  break;
               case 42:
                  if (curChar == 40 && kind > 69)
                     kind = 69;
                  break;
               case 44:
                  jjAddStates(13, 14);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 46:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  else if (curChar == 95)
                     jjAddStates(15, 16);
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 39)
                        kind = 39;
                     jjCheckNAddTwoStates(33, 34);
                  }
                  else if (curChar == 95)
                     jjAddStates(17, 18);
                  break;
               case 1:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 39)
                        kind = 39;
                     jjCheckNAddStates(19, 23);
                  }
                  else if (curChar == 124)
                     jjstateSet[jjnewStateCnt++] = 0;
                  if (curChar == 80)
                     jjCheckNAdd(12);
                  else if (curChar == 112)
                     jjCheckNAdd(12);
                  break;
               case 0:
                  if (curChar == 124 && kind > 7)
                     kind = 7;
                  break;
               case 12:
                  if (curChar == 105 && kind > 26)
                     kind = 26;
                  break;
               case 13:
                  if (curChar == 112)
                     jjCheckNAdd(12);
                  break;
               case 14:
                  if (curChar == 80)
                     jjCheckNAdd(12);
                  break;
               case 17:
                  jjAddStates(24, 25);
                  break;
               case 26:
                  if (curChar == 69)
                     jjAddStates(26, 27);
                  break;
               case 32:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 39)
                     kind = 39;
                  jjCheckNAddStates(19, 23);
                  break;
               case 33:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 39)
                     kind = 39;
                  jjCheckNAddTwoStates(33, 34);
                  break;
               case 34:
                  if (curChar == 95)
                     jjAddStates(17, 18);
                  break;
               case 35:
                  if (kind > 39)
                     kind = 39;
                  break;
               case 36:
                  if (curChar == 123)
                     jjCheckNAdd(37);
                  break;
               case 37:
                  if ((0xdfffffffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(37, 38);
                  break;
               case 38:
                  if (curChar == 125 && kind > 39)
                     kind = 39;
                  break;
               case 39:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 40:
                  if (curChar == 95)
                     jjAddStates(15, 16);
                  break;
               case 41:
                  jjCheckNAdd(42);
                  break;
               case 43:
                  if (curChar == 123)
                     jjCheckNAdd(44);
                  break;
               case 44:
                  if ((0xdfffffffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(44, 45);
                  break;
               case 45:
                  if (curChar == 125)
                     jjCheckNAdd(42);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 46:
                  if (jjCanMove_7(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 39)
                        kind = 39;
                     jjCheckNAddTwoStates(33, 34);
                  }
                  if (jjCanMove_7(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(0, 2);
                  break;
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 7)
                        kind = 7;
                  }
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 8)
                        kind = 8;
                  }
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 12)
                        kind = 12;
                  }
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 13)
                        kind = 13;
                  }
                  if (jjCanMove_4(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 26)
                        kind = 26;
                  }
                  if (jjCanMove_6(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 35)
                        kind = 35;
                     jjCheckNAddStates(3, 7);
                  }
                  if (jjCanMove_7(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 39)
                        kind = 39;
                     jjCheckNAddStates(19, 23);
                  }
                  break;
               case 2:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 7)
                     kind = 7;
                  break;
               case 5:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2) && kind > 8)
                     kind = 8;
                  break;
               case 8:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2) && kind > 12)
                     kind = 12;
                  break;
               case 11:
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2) && kind > 13)
                     kind = 13;
                  break;
               case 15:
                  if (jjCanMove_4(hiByte, i1, i2, l1, l2) && kind > 26)
                     kind = 26;
                  break;
               case 17:
                  if (jjCanMove_5(hiByte, i1, i2, l1, l2))
                     jjAddStates(24, 25);
                  break;
               case 19:
                  if (!jjCanMove_6(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 35)
                     kind = 35;
                  jjCheckNAddStates(3, 7);
                  break;
               case 20:
                  if (!jjCanMove_6(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 35)
                     kind = 35;
                  jjCheckNAddTwoStates(20, 21);
                  break;
               case 22:
                  if (!jjCanMove_6(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 35)
                     kind = 35;
                  jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 23:
                  if (jjCanMove_6(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(8, 10);
                  break;
               case 25:
                  if (jjCanMove_6(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(25, 26);
                  break;
               case 28:
                  if (!jjCanMove_6(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 36)
                     kind = 36;
                  jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 30:
                  if (!jjCanMove_6(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 35)
                     kind = 35;
                  jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 31:
                  if (jjCanMove_6(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(31, 26);
                  break;
               case 32:
                  if (!jjCanMove_7(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 39)
                     kind = 39;
                  jjCheckNAddStates(19, 23);
                  break;
               case 33:
                  if (!jjCanMove_7(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 39)
                     kind = 39;
                  jjCheckNAddTwoStates(33, 34);
                  break;
               case 35:
                  if (jjCanMove_5(hiByte, i1, i2, l1, l2) && kind > 39)
                     kind = 39;
                  break;
               case 37:
                  if (jjCanMove_5(hiByte, i1, i2, l1, l2))
                     jjAddStates(11, 12);
                  break;
               case 39:
                  if (jjCanMove_7(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(0, 2);
                  break;
               case 41:
                  if (jjCanMove_5(hiByte, i1, i2, l1, l2))
                     jjCheckNAdd(42);
                  break;
               case 44:
                  if (jjCanMove_5(hiByte, i1, i2, l1, l2))
                     jjAddStates(13, 14);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 46 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   39, 40, 42, 20, 21, 23, 24, 26, 23, 24, 26, 37, 38, 44, 45, 41, 
   43, 35, 36, 33, 34, 39, 40, 42, 17, 18, 27, 28, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 34:
         return ((jjbitVec0[i2] & l2) != 0L);
      default : 
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 34:
         return ((jjbitVec1[i2] & l2) != 0L);
      default : 
         return false;
   }
}
private static final boolean jjCanMove_2(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 34:
         return ((jjbitVec2[i2] & l2) != 0L);
      default : 
         return false;
   }
}
private static final boolean jjCanMove_3(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 34:
         return ((jjbitVec3[i2] & l2) != 0L);
      default : 
         return false;
   }
}
private static final boolean jjCanMove_4(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 3:
         return ((jjbitVec4[i2] & l2) != 0L);
      default : 
         return false;
   }
}
private static final boolean jjCanMove_5(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec7[i2] & l2) != 0L);
      default : 
         if ((jjbitVec5[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_6(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 6:
         return ((jjbitVec10[i2] & l2) != 0L);
      case 11:
         return ((jjbitVec11[i2] & l2) != 0L);
      case 13:
         return ((jjbitVec12[i2] & l2) != 0L);
      case 14:
         return ((jjbitVec13[i2] & l2) != 0L);
      case 16:
         return ((jjbitVec14[i2] & l2) != 0L);
      default : 
         if ((jjbitVec8[i1] & l1) != 0L)
            if ((jjbitVec9[i2] & l2) == 0L)
               return false;
            else
            return true;
         return false;
   }
}
private static final boolean jjCanMove_7(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec16[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec17[i2] & l2) != 0L);
      case 49:
         return ((jjbitVec18[i2] & l2) != 0L);
      case 51:
         return ((jjbitVec19[i2] & l2) != 0L);
      case 61:
         return ((jjbitVec20[i2] & l2) != 0L);
      default : 
         if ((jjbitVec15[i1] & l1) != 0L)
            return true;
         return false;
   }
}
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, "\73", "\174", null, null, "\75\75", "\74", "\76", 
null, null, "\75", "\53", "\55", "\52", "\57", "\136", "\41", "\262", "\263", 
"\u2074", "\u2075", "\u2076", null, "\260", "\162\141\144", "\47", "\164\162\165\145", 
"\146\141\154\163\145", "\170", "\171", "\130", null, null, null, null, null, null, null, null, null, 
null, null, "\170\50", "\171\50", "\143\157\163\50", "\163\151\156\50", 
"\164\141\156\50", "\141\143\157\163\50", "\141\163\151\156\50", "\141\164\141\156\50", 
"\143\157\163\150\50", "\163\151\156\150\50", "\164\141\156\150\50", "\141\143\157\163\150\50", 
"\141\163\151\156\150\50", "\141\164\141\156\150\50", "\145\170\160\50", "\154\157\147\50", 
"\163\161\162\164\50", "\141\142\163\50", "\163\147\156\50", "\146\154\157\157\162\50", 
"\143\145\151\154\50", "\162\157\165\156\144\50", "\147\141\155\155\141\50", null, "\72", "\133", 
"\54", "\135", "\173", "\175", "\51", "\50", };
public static final String[] lexStateNames = {
   "DEFAULT", 
};
static final long[] jjtoToken = {
   0xffffd09fffffffe1L, 0x3fffL, 
};
static final long[] jjtoSkip = {
   0x1eL, 0x0L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[46];
private final int[] jjstateSet = new int[92];
protected char curChar;
public ParserTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}
public ParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 46; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

public Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

}
