/* 
GeoGebra - Dynamic Mathematics for Everyone
Copyright Markus Hohenwarter, http://www.geogebra.org

This file is part of GeoGebra.

This program is free software; you can redistribute it and/or modify it 
under the terms of the GNU General Public License as published by 
the Free Software Foundation; either version 2 of the License, or 
(at your option) any later version.
*/

/*
 * Parser.jj
 * javacc definition file to generate Parser.java
 * <BR> <BR>
 * This class provides a static function to  
 * parse a String and return an appropriate ValidExpression.
 * Direct subclasses of ValidExpression are: Assignment (single variable),
 * Command, Equation (in x, y), Parametric, Vector (for cartesian and polar points),
 * ExpressionNode (for number or vector arithmetic expressions)
 *
 * <BR><BR>
 * Some examples of possible recognized input:<BR>
 * Point   <CODE> P = (3,4) </CODE><BR>
 * Point   <CODE> P = (7; 20�) </CODE><BR>
 * Line    <CODE> g: X = (3,4) + t (7,2) </CODE><BR>
 * Line    <CODE> g: y = 3x - 9 </CODE><BR>
 * Line    <CODE> h: 5x + 7y = -2 </CODE><BR>
 * Circle  <CODE> k: (x-5)^2 + (y-2)^2 = 25 </CODE><BR>
 * Circle  <CODE> k: (x-5)� + (y-2)� = 25 </CODE><BR>
 * Conic   <CODE> c: 5x^2 - 7y^2 + 6xy - 3x + 2y = 7 </CODE>
 * Command <CODE> P = Intersect[ g, h ] </CODE>
 * Number  <CODE> r = 25 </CODE>
 * <BR><BR>
 * All arithmetic expressions (operators: +, -, *, /, ^) are 
 * valid as long as they obey the following rules:
 * Varibales are x or y. Divisors and Exponents must be constant
 * numbers. The "*" operator may be omitted.
 *
 * @author Markus Hohenwarter
 * @version 10.4.2004
 */   

PARSER_BEGIN(Parser)
package geogebra.algebra.parser;

import geogebra.*;
import geogebra.kernel.*;
import geogebra.kernel.arithmetic.*;
import java.util.*;

public class Parser {

    private Kernel kernel;
    private Construction cons;
    private Application app;
    
    public Parser(Kernel kernel, Construction cons) {
    	 this ( new java.io.StringReader("") ); // dummy stream for parser initing
         this.kernel = kernel;
         this.cons = cons;
         app = kernel.getApplication();
    }   

    /**
     * Parses a String and returns a ValidExpression Object     
     */
    public ValidExpression parse(String parseString) throws ParseException {           
        ReInit( new java.io.StringReader(parseString) );                          
        return buildValidExpression();     
    }
    
    /**
     * Parses a String and returns a Function Object     
     */
    public Function parseFunction(String parseString) 
    throws ParseException {    
        ReInit( new java.io.StringReader(parseString) );                           
        return function();      
    }
    
    /**
     * Parses a String and returns an ExpressionNode Object     
     */
    public ExpressionNode parseCmdExpression(String parseString) 
    throws ParseException {    
        ReInit( new java.io.StringReader(parseString) );                           
        return cmdexpression();      
    }
    
    /**
     * Parses a String and returns an ExpressionNode Object     
     */
    public ExpressionNode parseExpression(String parseString) 
    throws ParseException {    
        ReInit( new java.io.StringReader(parseString) );                           
        return expression();      
    }
    
    /**
     * Parses a String if it is a label
     */
    public String parseLabel(String parseString) 
    throws ParseException {    
        ReInit( new java.io.StringReader(parseString) );                           
        return label();      
    }    
}
PARSER_END(Parser)



SKIP : {
    " " 
  | "\r"
  | "\t"
  | "\n"
}

TOKEN : {
    < EOL: ";" >
}

/* OPERATORS */
TOKEN :  {   
    < CARTESIAN_SPECIAL_SEPERATOR: "|" >
  | < NOT: ("\u00ac") > 
  | < OR:		("||" | "\u2228" ) >
  | < AND:		("&&" | "\u2227" ) >
  | < EQUAL_BOOLEAN: ("==" | "\u225f" ) >
  | < NOT_EQUAL: ("!=" | "\u2260" ) >
  | < LESS:		"<" >
  | < GREATER:	">" >
  | < LESS_EQUAL: ("<=" | "\u2264") >
  | < GREATER_EQUAL: (">=" | "\u2265") >
  | < PARALLEL: "\u2225" >
  | < PERPENDICULAR: "\u22a5" >
  | < EQUAL:    "=" >
  | < PLUS:     "+" >
  | < MINUS:    ("-"  | "\u2013" | "\u2212") >
  | < MULTIPLY: ("*" | "\u22c5") >
  | < COMPLEXMULTIPLY: "\u2297" >
  | < DIVIDE:   "/" >
  | < POWER:    "^" >  
  | < FACTORIAL: "!" >  
  | < UNDEFINED: ( "?" | "\ufffd" ) >
  | < SQUARED:  "\u00b2" >
  | < CUBED:    "\u00b3" >
  | < POWER4:   "\u2074" >
  | < POWER5:   "\u2075" >
  | < POWER6:   "\u2076" >
  | < POWER7:   "\u2077" >
  | < POWER8:   "\u2078" >
  | < POWER9:   "\u2079" >
  | < PI:       ( "pi" | "Pi" | "\u03c0") >
  | < E:        "\u212f" >  
  | < DEGREE:   "\u00b0" >
  | < INFINITY: "\u221e" >
  | < RAD:      "rad" >
  | < DERIVATIVE: "'" >
  | < TRUE:     ( "true" | "True" ) >
  | < FALSE:    ( "false" | "False" ) >
}

TOKEN : {      
  		< VARX: "x" >
  |		< VARY: "y" >
  |     < PARAMETRICVAR: "X" >
  |     < FLOAT: <INTEGER> ( "." <INTEGER> )? 
        | "." <INTEGER> 
        | <INTEGER> "."
        >
 |     < EFLOAT: <FLOAT> "E"  (<MINUS>)? <INTEGER> >
  |     < #INTEGER: ( <DIGIT> )+ >
  |     < #DIGIT:                                     // unicode digits
       [
        "\u0030"-"\u0039",
        "\u0660"-"\u0669",
        "\u06f0"-"\u06f9",
        "\u0966"-"\u096f",
        "\u09e6"-"\u09ef",
        "\u0a66"-"\u0a6f",
        "\u0ae6"-"\u0aef",
        "\u0b66"-"\u0b6f",
        "\u0be7"-"\u0bef",
        "\u0c66"-"\u0c6f",
        "\u0ce6"-"\u0cef",
        "\u0d66"-"\u0d6f",
        "\u0e50"-"\u0e59",
        "\u0ed0"-"\u0ed9",
        "\u1040"-"\u1049"
       ]
>
}   

TOKEN : { 
 	// labels for cells in the spreadsheet
 	<SPREADSHEET_LABEL: (["A"-"Z"]|["a"-"z"])+(["0"-"9"])+ > // e.g. B12
 |
 	// standard case: labels for GeoElements and command names
   < LABEL:  
    <LETTER> ( <LETTER> | <DIGIT> | "'" )* (<INDEX>)? (<LETTER> | <DIGIT>)*>
 // |  < #INDEX:  "_" (  <CHAR>  | ("{" (<CHAR>)+ "}") )  >  
 |  < #INDEX:  "_" (  <CHAR>  | ("{" (~["}"])+ "}" ) )  >  
 | < #LETTER:  // unicode letters
       [
        "$", // for absolute references in the spreadsheet
        "\u0041"-"\u005a",      //upper case (A-Z)
        "\u0061"-"\u007a",      //lower case (a-z)
        "\u00b7",   			// middle dot (for Catalan)
        "\u00c0"-"\u00d6",      //accentuated letters
        "\u00d8"-"\u01bf",		//accentuated letters
        "\u01c4"-"\u02a8",		//accentuated letters
        "\u0391"-"\u03f3", 		// Greek 
       	"\u0401"-"\u0481",		// Cyrillic
        "\u0490"-"\u04f9",		// Cyrillic
        "\u0531"-"\u1ffc", 	    // a lot of signs (Arabic, accentuated, ...)
        "\u3041"-"\u3357", 	 	// Asian letters	 
        "\u4e00"-"\ud7a3",		// Asian letters
        "\uf71d"-"\ufa2d",		// Asian letters
        "\ufb13"-"\ufdfb",		// Armenian, Hebrew, Arabic
        "\ufe80"-"\ufefc",		// Arabic
        "\uff66"-"\uff9d",		// Katakana
        "\uffa1"-"\uffdc"		// Hangul
       ] >
       
}
 


// labels for function names
TOKEN: {
    < X_FUNC:  "x("  >
|	< Y_FUNC:  "y("  > 
|	< COS_FUNC: ( "cos(" | "Cos(" ) > 
|	< SIN_FUNC: ( "sin(" | "Sin(" ) > 
|	< TAN_FUNC: ( "tan(" | "Tan(" ) > 
|	< ACOS_FUNC: ( "acos(" | "arccos(" | "ArcCos(" )> 
|	< ASIN_FUNC: ( "asin(" | "arcsin(" | "ArcSin(" ) > 
|	< ATAN_FUNC: ( "atan(" | "arctan(" | "ArcTan(" )> 
|	< COSH_FUNC: ( "cosh(" | "Cosh(" ) > 
|	< SINH_FUNC: ( "sinh(" | "Sinh(" ) > 
|	< TANH_FUNC: ( "tanh(" | "Tanh(" ) > 
|	< ACOSH_FUNC: ( "acosh(" | "arccosh(" | "ArcCosh(" ) > 
|	< ASINH_FUNC: ( "asinh(" | "arcsinh(" | "ArcSinh(" ) > 
|	< ATANH_FUNC: ( "atanh(" | "arctanh(" | "ArcTanh(" ) > 
|	< EXP_FUNC: ( "exp(" | "Exp(" ) > 
|	< LOG_FUNC: ( "log(" | "ln(" | "Ln(" ) > 
|	< LD_FUNC:    "ld("  > 
|	< LG_FUNC:    "lg("  > 
|	< SQRT_FUNC: ( "sqrt(" | "Sqrt(" ) > 
|	< CBRT_FUNC:   "cbrt("  > 
|	< ABS_FUNC:  ( "abs(" | "Abs(" ) > 
|	< SGN_FUNC:  ( "sgn(" | "sign(" | "Sign(" ) > 
|	< FLOOR_FUNC: ( "floor(" | "Floor(" ) > 
|	< CEIL_FUNC:  ( "ceil(" | "Ceil(" ) > 
|	< ROUND_FUNC: ( "round(" | "Round(" ) > 
|	< GAMMA_FUNC: ( "gamma(" | "Gamma(" ) > 
|	< RANDOM_FUNC:  "random()"  > 
| 	< FUNCTION_LABEL: <LABEL> "(" >
}

 TOKEN : {
 < TEXT: "\""  (<CHAR>)* "\"" > |
 < #CHAR: ["\u0000"-"\u0021", "\u0023"-"\uffff"]  >    
}

String label():
{     
    Token t;
}
{         	  
       ( t = <SPREADSHEET_LABEL> |  t = <LABEL> )
        {  return t.image;   }
}
                          
 

/**
 * validexpression =    <LABEL> = assignment() |        // assignment of any type (possibly not numeric)
 *                  labellist() = command() |           // e.g. {A,B} = Intersect[c, g]
 *                      <LABEL> : parametric() |        // e.g. X = (3,2) + t (2,1)              
 *                      <LABEL> = expression()      // arithmetic expression of floats, vectors and vars
 *                      <LABEL> : equation()        // equation in x an y
 						<LABEL>(x) = function()   // function in x, e.g. f(x) = 3x^3 - sqrt(x)
 */
ValidExpression buildValidExpression() : 
{
    ValidExpression ve;
    ExpressionNode lhs, rhs;
    Token l = new Token();
    Vector labels = new Vector();
} 
{         
     (  
        LOOKAHEAD(2147483647)
        ve = functionExpressionnode()          
    |            
        LOOKAHEAD(2147483647)
         [LOOKAHEAD(2147483647) l = <LABEL> "="] ve = assignment()    ( <EOL> | <EOF> )      
     | 
        LOOKAHEAD(2147483647)
         l = <LABEL> ":"               
        ( 
          ve = parametric()      // h: X = (3,2) + t (5,1)
          |          
           LOOKAHEAD(2147483647)
          ve = equation()        // g: 3x + y = 7 
          |           
          ve = expression()   // special case "A: (3,2)" should become a point                
        )                                   
    |     
        // distingiush <LABEL> = expressionnode()               and  
        //             expressionnode() = expressionnode()      (Equation)
        //
        // equation without label and only one variable on the lhs
        // could be expression too!!!
        // eg. t = 2 x     or     t = 2 s
        LOOKAHEAD(2147483647)
        lhs = expressionnode() <EQUAL> rhs = expressionnode()
        {             
            // maybe expression
            if (lhs.isSingleVariable() && !rhs.includesPolynomial()) {                                  
                // it's an expression
                ve = rhs;
                ve.setLabel(((Variable)lhs.evaluate()).getName());                         
            } else {
                // it's a polynomial
                ve = new Equation(kernel, lhs, rhs); 
            }
        }
     |
        LOOKAHEAD(2147483647)
        ve = cmdexpression()     
     |	     
        LOOKAHEAD(2147483647)
        labels = labellist() "=" ve = command()  
    | 	
		// special case "X = (3,2)" should become a point
    	l = <PARAMETRICVAR> "=" ve = expression()      	  	                                       	                       	 	 
   	 |
        LOOKAHEAD(2147483647)                               
	  	ve = cartesianvector_special()
	|
	 	 LOOKAHEAD(2147483647)    
	 	 	ve = polarvector_special()
	    
    )                     
    ( <EOL> | <EOF> )     
    {                      
        if (labels.size() > 0) ve.addLabel(labels);  // command with ouput labels
        else if (ve.labelCount() == 0) ve.addLabel(l.image);  // standard case                         
        return ve;
    }    
}


// single variable assignment (not expressionnode !!!)  
Assignment assignment():
{     
    Token t;
}
{          
        (t = <SPREADSHEET_LABEL> | t = <LABEL>) 
        {  
        return new Assignment(t.image);   }
}



/**
 * command =     <LABEL> [ argument (, argument)* ]  
 */
Command command():
{     
    Command c;
    Token t;
    ExpressionNode en;
}
{   
    (t = <SPREADSHEET_LABEL> | t = <LABEL>)
    {   c = new Command(kernel, t.image, true );    } 
    "[" 
       ( en = cmdexpression()  { c.addArgument( en ); } )?
        ( "," en = cmdexpression() { c.addArgument( en ); } )*
    "]"
    { return c; }
}

/**
 * labellist =    { <LABEL> (, <LABEL>)* }  
 */
Vector labellist():
{         
    Token t;    
    Vector labels;
}
{
(( 
    "{" t = <LABEL> 
        {   
            labels = new Vector(); labels.add(t.image);  
        }
     ( "," t = <LABEL> { labels.add(t.image); } )*
    "}" 
)
    |    
( 
    t = <LABEL> 
        {   
            labels = new Vector(); labels.add(t.image);  
        }
     ( "," t = <LABEL> { labels.add(t.image); } )*
))
     { return labels; }
}


/**
 * parametric =   <PARAMETRICVAR> = vector + <LABEL> * vector  |
 *                <PARAMETRICVAR> = vector - <LABEL> * vector |
 */
Parametric parametric():
{         
    ExpressionNode P, v;
    ExpressionValue temp;
    Token s, par;    
}
{    
    <PARAMETRICVAR> <EQUAL> P = enterm()
    ( 
     (s = <PLUS> | s = <MINUS>) par = <LABEL> (<MULTIPLY>)? v = expression()
         {                                    
            if (s.kind == MINUS) 
                v = new ExpressionNode(kernel, new MyDouble(kernel, -1.0d), ExpressionNode.MULTIPLY, v);                    
            return new Parametric(kernel, P, v, par.image );                
         }
    ) 
}


/** NOT USED BY NOW
 * normalvectorform =   <PARAMETRICVAR> vector  = vector 
 
NormalVectorForm normalvectorform():
{         
    ExpressionNode left, right;
    ExpressionValue temp;
}
{    
    <PARAMETRICVAR> (<MULTIPLY>)? left = enterm()  <EQUAL> right = expressionnode()           
         {                        
            // check if left is VectorValue and right is NumberValue
            temp = left.evaluate();
            if (!(temp instanceof VectorValue)) {
                String [] str = { "VectorExpected", temp.toString() };
                throw new MyParseError(app, str);
            }

            temp = right.evaluate();
            if (!(temp instanceof NumberValue)) {
                String [] str = { "NumberExpected", temp.toString() };
                throw new MyParseError(app, str);
            }        
            
            return new NormalVectorForm( left, right );                
         }   
}
*/

/******************************************************************
 * ARTIHMETIC FOR NUMBERS AND 2D VECTORS WITH VARIABLES
 * plus
 * ARTIHMETIC FOR POLYNOMIALS WITH VARIABLES "x" AND "y"
 * exponents must be integers >= 0
 * divisors must be simplifyable to numbers
 ******************************************************************/


/**
 * equation =       expression = expression
 */
Equation equation():
{
    ExpressionNode lhs, rhs;
}
{    
    lhs = expressionnode() <EQUAL> rhs = expressionnode()
        {             
            //lhs.resolveVariables();
            //rhs.resolveVariables();
            return new Equation(kernel, lhs, rhs); 
        }
}

/**
 * expression = expressionnode
 */
ExpressionNode expression():
{
    ExpressionNode rhs;
}
{    
    rhs = expressionnode()              
    {
        if (rhs.includesPolynomial()) {
        	throw new MyError(app, "IncompleteEquation");
        }
        
        // since v3.0: commands have to take care of resolving the variables of 
        // their arguments on their own, e.g. Sequence[ (i, i^2), i , 1, 10 ]       
		//rhs.resolveVariables();
        return rhs;
    }
}

/**
 * cmdexpression = expressionnode 
 * (may only return Function)
 */
ExpressionNode cmdexpression():
{
    ExpressionNode rhs;
}
{    
    rhs = expressionnode()              
    {
        if (rhs.includesPolynomial()) {
        	if (rhs.isFunctionInX()) 
        		return new ExpressionNode(kernel, new Function(rhs));
        	else
	        	throw new MyError(app, "IncompleteEquation");
        }
        
        // since v3.0: commands have to take care of resolving the variables of 
        // their arguments on their own, e.g. Sequence[ i^2, i , 1, 10 ]
        // rhs.resolveVariables();
        
        return rhs;
    }
}

/**
 * function = functionExpressionnode 
 */
Function  function():
{
    ExpressionNode rhs;
    Token l = null;
    Function f;
}
{          
(
	   // f(x) =  x^2 + 3	
	 	 rhs = functionExpressionnode()
	    {
	    	if (rhs.getLeft() instanceof Function) {
	    		f = (Function) rhs.getLeft();
	    	}
	    	else {
		        f = new Function(rhs);		        
		    }
		    f.setLabel(rhs.getLabel());	       
		    return f;
	    }   
)	   
}

/**
 * function = 	label(x) = expressionnode 
 * note: may also include commands in expressionnode
 */
ExpressionNode functionExpressionnode():
{
    ExpressionNode rhs;
    Token l = null;
    Token var;
}
{          
(
	   // f(x) =  x^2 + 3	
	   l = <FUNCTION_LABEL> <VARX> ")" "="
	 	 rhs = expressionnode()
	    {	        
	    	String label = l.image.substring(0,l.image.length()-1);	
	    
	        // convert to function if not only command
	    	if (!(rhs.getLeft() instanceof Command)) {
	    	    Function fun = new Function(rhs);
	    	    fun.setLabel(label);
       			rhs = new ExpressionNode(kernel, fun);       			   
       		}
       		
       		rhs.setLabel(label);		
       		return rhs;
	    }   
)	   

/* 
functions of other variables than x not implemented yet
|
(
	// e.g. f(t) =  t^2	
	var = <LABEL> ")" "="	 rhs = expressionnode()
	    {
	        f = new Function(rhs, var.image);
	        f.setLabel(l.image.substring(0,l.image.length()-1));	       
	        return f;
	    }  	    
)
*/	    
}

/**
 * function = 	label(x) = ( expressionnode | command ) 
 *
ValidExpression  functionOrCommand():
{
    ExpressionNode rhs;
    Token l = null;
    Token var;
    Function f;
    Command c;
}
{   
    LOOKAHEAD(10)  
   (      
	// f(x) = Derivative[ 3 x^2 ]
	l = <FUNCTION_LABEL> <VARX> ")" "="  
	    c = command()
	    {	    		       
	        c.setLabel(l.image.substring(0,l.image.length()-1));	       
	        return c;
	    }   
	)
	|
	(
	   // f(x) =  x^2 + 3	
	    l = <FUNCTION_LABEL> <VARX> ")" "="  
	 	rhs = expressionnode()
	    {
	        f = new Function(rhs);
	        f.setLabel(l.image.substring(0,l.image.length()-1));	       
	        return f;
	    }   
    )	   

}
*/

/**
 *  expression =  term <OR> term
 */
ExpressionNode expressionnode():
{
    ExpressionNode ret, f;
    Token x;
}
{
    ret = ANDterm()                 
    ( <OR>  f = ANDterm()
        {                
	         ret = new ExpressionNode(kernel, ret, ExpressionNode.OR, f);                   
        }
    )*
    { 
    	//ret.simplifyLeafs();
    	return ret; 
    }
}

/**
 * ANDterm =   COMPAREterm <AND> COMPAREterm 
 */
ExpressionNode ANDterm():
{
    ExpressionNode ret, f;
    Token x;    
}
{
    ret = COMPAREterm()           
    ( <AND>  f = COMPAREterm() 
        {
        	ret = new ExpressionNode(kernel, ret, ExpressionNode.AND, f);             
        }     
    )*
    { return ret; }  
}

/**
 * COMPAREterm =   plusminusnode ("==" | "<" | "<=" | ">" | ">=") plusminusnode 
 */
ExpressionNode COMPAREterm():
{
    ExpressionNode ret, f;
    Token x;    
}
{
    ret = plusminusnode()  
    (         
       (<EQUAL_BOOLEAN>  f = plusminusnode()
    	 {            
           ret = new ExpressionNode(kernel, ret, ExpressionNode.EQUAL_BOOLEAN, f);  
         }
       )   
     |   
       (<NOT_EQUAL>  f = plusminusnode()
    	 {            
           ret = new ExpressionNode(kernel, ret, ExpressionNode.NOT_EQUAL, f);  
         }
       )   
     |   
       (<LESS>  f = plusminusnode()
    	 {            
           ret = new ExpressionNode(kernel, ret, ExpressionNode.LESS, f);  
         }
       ) 
     |
       (<GREATER>  f = plusminusnode()
    	 {            
           ret = new ExpressionNode(kernel, ret, ExpressionNode.GREATER, f);  
         }
       ) 
     |
       (<LESS_EQUAL>  f = plusminusnode()
    	 {            
           ret = new ExpressionNode(kernel, ret, ExpressionNode.LESS_EQUAL, f);  
         }
       ) 
     |
       (<GREATER_EQUAL>  f = plusminusnode()
    	 {            
           ret = new ExpressionNode(kernel, ret, ExpressionNode.GREATER_EQUAL, f);  
         }
       ) 
      |
   	    (<PARALLEL>  f = plusminusnode()
    	 {            
           ret = new ExpressionNode(kernel, ret, ExpressionNode.PARALLEL, f);  
         }
         ) 
      |
   	    (<PERPENDICULAR>  f = plusminusnode()
    	 {            
           ret = new ExpressionNode(kernel, ret, ExpressionNode.PERPENDICULAR, f);  
         }
        )                       
    )? 
    { return ret; }  
}

/**
 *  expression =    term + term |
 *                  term - term
 */
ExpressionNode plusminusnode():
{
    ExpressionNode ret, f;
    Token x;
}
{
    ret = enterm()                 
    (( x = <PLUS> | x = <MINUS> ) f = enterm()
        {                       
            if (x.kind == PLUS) 
                ret = new ExpressionNode(kernel, ret, ExpressionNode.PLUS, f);  
            else
                ret = new ExpressionNode(kernel, ret, ExpressionNode.MINUS, f);  
        }
    )*
    { 
    	//ret.simplifyLeafs();
    	return ret; 
    }
}

/**
 * term =   unary * unary  |
 *          unary / unary
 */
ExpressionNode enterm():
{
    ExpressionNode ret, f;
    Token x;    
}
{
    ret = enunary()           
    (                 
     ( x = <MULTIPLY> | x = <DIVIDE> | x = <COMPLEXMULTIPLY> ) f = enunary() 
        {
            if (x.kind == MULTIPLY) {
                ret = new ExpressionNode(kernel, ret, ExpressionNode.MULTIPLY, f);  
            } else if (x.kind == DIVIDE){
                ret = new ExpressionNode(kernel, ret, ExpressionNode.DIVIDE, f);  
            } else {
                ret = new ExpressionNode(kernel, ret, ExpressionNode.COMPLEXMULTIPLY, f);  
            }
        }
     |
      f = enpower()
        { 
               ret = new ExpressionNode(kernel, ret, ExpressionNode.MULTIPLY, f);  
         }	
    )*
    { return ret; }  
}

/**
 * unary =  -power    |
 * 	        +power    | 	
 *          power
 */
ExpressionNode enunary():        
{
    ExpressionNode e;
}
{
    <MINUS> e = enpower()
        { // -e  = -1*e
          return new ExpressionNode(kernel, new MyDouble(kernel, -1.0d), ExpressionNode.MULTIPLY, e);              
        }
|
   <PLUS> e = enpower()
        { // +e  = e
          return e;              
        }
|
    e = enpower()
        {
            return e;
        }
}

/**
 * power =    element                 |
 *          element ^ power           
 */
ExpressionNode enpower():
{
    ExpressionNode ret, f;    
}
{	
    ret = enfactorial()         
    (   
    	<SQUARED>
        {            
            return new ExpressionNode(kernel, ret, ExpressionNode.POWER, 
            			 new MyDouble(kernel, 2));  
	    } 
    |       
    	<CUBED>
       	{            
            return new ExpressionNode(kernel, ret, ExpressionNode.POWER, 
            			 new MyDouble(kernel, 3));                  
	     } 	     
	|       
    	<POWER4>
       	{            
            return new ExpressionNode(kernel, ret, ExpressionNode.POWER, 
            			 new MyDouble(kernel, 4));                  
	     } 	
	|       
    	<POWER5>
       	{            
            return new ExpressionNode(kernel, ret, ExpressionNode.POWER, 
            			 new MyDouble(kernel, 5));                  
	     } 
	|       
    	<POWER6>
       	{            
            return new ExpressionNode(kernel, ret, ExpressionNode.POWER, 
            			 new MyDouble(kernel, 6));                  
	     } 
    |
    	<POWER7>
       	{            
            return new ExpressionNode(kernel, ret, ExpressionNode.POWER, 
            			 new MyDouble(kernel, 7));                  
	     } 
    |
    	<POWER8>
       	{            
            return new ExpressionNode(kernel, ret, ExpressionNode.POWER, 
            			 new MyDouble(kernel, 8));                  
	     } 
    |
    	<POWER9>
       	{            
            return new ExpressionNode(kernel, ret, ExpressionNode.POWER, 
            			 new MyDouble(kernel, 9));                  
	     } 
    |
    	(LOOKAHEAD(<POWER>) <POWER> f = enunary()
        {            
        	// check if we have e^
        	if (ret.isLeaf() &&  ret.getLeft() instanceof MyDouble) {
        		MyDouble num = (MyDouble) ret.getLeft();
        		if (num.getDouble() == Math.E) {      	
        	    	return new ExpressionNode(kernel, f, ExpressionNode.EXP, null);        		
        		} 
        	}       
        	
        	// standard case ret^f
            return new ExpressionNode(kernel, ret, ExpressionNode.POWER, f);                              
        }      
    	)*
    )     
    { return ret; }    
}

/**
 * factorial =  <NOTterm> |
 *              <NOTterm> !
 */
ExpressionNode enfactorial():
{   
    ExpressionNode en;   
}
{     
	    en = NOTterm() 
	    (LOOKAHEAD(<FACTORIAL>) <FACTORIAL> 
	     {            
	            en = new ExpressionNode(kernel, en, ExpressionNode.FACTORIAL, null);                    
	     }      
	     )?    
	     { return en; }	    	
}

/**
 * NOTterm =  <NOT> <enelement> |
 *               	<enelement>
 */
ExpressionNode NOTterm():
{   
    ExpressionNode en;   
}
{     
	(
	    ( <NOT> | "!" ) en = enelement() 	    
	     {            
	            return new ExpressionNode(kernel, en, ExpressionNode.NOT, null);       
	     }      
	 ) 
|
	 (
	  	en = enelement() 	
	     { return en; }	    	
	 )	    	     
}

/**
 * element =    <variable>      |
 *              <float>         |
 *              ( expression )
 */
ExpressionNode enelement():
{    
    ExpressionNode en;
    ExpressionValue ev;
    double num;
    MyDouble myDouble;
    Token c;    
}
{   
// boolean
	<TRUE>
	 { return new ExpressionNode(kernel, new MyBoolean(true)); }     
|
	<FALSE>
	  { return new ExpressionNode(kernel, new MyBoolean(false)); }     
|	 	 
 // number
    myDouble = myDouble()
        { return new ExpressionNode(kernel, myDouble); }      
|
    // cos, sin, tan, ...
    LOOKAHEAD(2147483647)
    en = numberFunction()
         { return en; }
|
	// command
	LOOKAHEAD(2147483647)
    ev = command()
        { return new ExpressionNode(kernel, ev); } 
|
    // number or vector variable
     LOOKAHEAD(2147483647)
    en = numVecVariable()
        { return en; }
|        
    //list
    LOOKAHEAD(2147483647)
	ev = list()
	    { return new ExpressionNode(kernel, ev); }      
|
    // parenthesis
    LOOKAHEAD(2147483647)
    "("  en = expressionnode()  ")" 
        { return  en; }       	           
|
    // cartesian vector  (x, y) or (x|y)
    LOOKAHEAD(2147483647)
    ev = cartesianvector()
        { return new ExpressionNode(kernel, ev); } 
|    
    // polar vector   
    LOOKAHEAD(2147483647)
    ev = polarvector()
        { return new ExpressionNode(kernel, ev); } 
 |
	// text (between " ... ")
	c = <TEXT>
    { 
    	// remove " (first and last character)
    	String text = c.image.substring(1, c.image.length()-1);
    	return new ExpressionNode(kernel, new MyStringBuffer(text));
     }  
}

ExpressionValue list():
{
    MyList myList;
    ExpressionNode en;
}
{
   LOOKAHEAD(5)
   (
     // empty list
      "{" "}"  
      {   
           return new MyList(kernel);               
       }
    )
    |
   ( 
    // list
    "{"
      en = cmdexpression()     
       {   
            myList = new MyList(kernel);         
            myList.addListElement(en);
        }
       ( "," en = cmdexpression()  
       	 {
       		myList.addListElement(en); 
       	 } 
        )*
    "}"
    {  return myList;  }
   )          
    
}

ExpressionNode numVecVariable():
{
    GeoElement geo;
    Token c, c2;
}
{
    c = <VARX>  
    {
        return new ExpressionNode(kernel, new Polynomial(kernel, c.image));
    }
|
    c = <VARY>  
    {
        return new ExpressionNode(kernel, new Polynomial(kernel, c.image));
    }
|
	// spreadsheet range like A1:B2
	LOOKAHEAD (3)
	c = <SPREADSHEET_LABEL> ":" c2 = <SPREADSHEET_LABEL>
	{
		// build command CellRange[ startCell, endCell ]
		ExpressionNode startCell = new ExpressionNode(kernel, new Variable(kernel, c.image));
		ExpressionNode endCell = new ExpressionNode(kernel, new Variable(kernel, c2.image));
		Command cmd = new Command(kernel, "CellRange", false ); // don't translate name
		cmd.addArgument(startCell);
		cmd.addArgument(endCell);
		return new ExpressionNode(kernel, cmd);
	}
|
    ( c = <SPREADSHEET_LABEL> | c = <LABEL> )
    {   
    	// standard case for variable
        return new ExpressionNode(kernel, new Variable(kernel, c.image));
    }
}

/**
 * floating point number: angle or numeric are distinguished
 */
MyDouble myDouble():
{
    Token c;
    MyDouble d;
}
{       
   (c = <FLOAT> | c = <EFLOAT>)
    {
        return new MyDouble(kernel, 
                	Double.parseDouble( c.image )
                );                               
    }
|
    <DEGREE>
    {  // constant for degree to radians 
        d = new MySpecialDouble(kernel, Math.PI / 180.0d,  "\u00b0" );
        d.setAngle();
        return d;
    }
|
    <RAD>
    {  // constant for radians to radians 
        d = new MySpecialDouble(kernel, 1.0d, "rad");
        d.setAngle();
        return d;
    }
|
    <PI>
    {
        return new MyDouble(kernel, Math.PI);
    }
|
    <E>
    {
        return new MyDouble(kernel, Math.E);
    }
 |
    <INFINITY>
    {
        return new MyDouble(kernel, Double.POSITIVE_INFINITY);
    }   
|
	<UNDEFINED>
	{
        return new MyDouble(kernel, Double.NaN);
    }
}


/**
 * mathematical Function (cos, sin, tan, ...)
 */
ExpressionNode numberFunction():
{
    ExpressionNode en;
    Token c;
}
{           
    <X_FUNC> en = expressionnode() ")"
      { return new ExpressionNode(kernel, en, ExpressionNode.XCOORD, null); }  
|
     <Y_FUNC> en = expressionnode() ")"
      { return new ExpressionNode(kernel, en, ExpressionNode.YCOORD, null); }  
|
     <COS_FUNC> en = expressionnode() ")"
      { return new ExpressionNode(kernel, en, ExpressionNode.COS, null); }   
|
    <SIN_FUNC> en = expressionnode() ")"
      { return new ExpressionNode(kernel, en, ExpressionNode.SIN, null); }  
|
    <TAN_FUNC> en = expressionnode() ")"
      { return new ExpressionNode(kernel, en, ExpressionNode.TAN, null); }  
|
    <ACOS_FUNC> en = expressionnode() ")"
      { return new ExpressionNode(kernel, en, ExpressionNode.ARCCOS, null); }   
|
    <ASIN_FUNC> en = expressionnode() ")"
      { return new ExpressionNode(kernel, en, ExpressionNode.ARCSIN, null); }  
|
    <ATAN_FUNC> en = expressionnode() ")"
      { return new ExpressionNode(kernel, en, ExpressionNode.ARCTAN, null); }  
|
    <COSH_FUNC> en = expressionnode() ")"
      { return new ExpressionNode(kernel, en, ExpressionNode.COSH, null); }   
|
    <SINH_FUNC> en = expressionnode() ")"
      { return new ExpressionNode(kernel, en, ExpressionNode.SINH, null); }  
|
    <TANH_FUNC> en = expressionnode() ")"
      { return new ExpressionNode(kernel, en, ExpressionNode.TANH, null); }  
|
    <ACOSH_FUNC> en = expressionnode() ")"
      { return new ExpressionNode(kernel, en, ExpressionNode.ACOSH, null); }   
|
    <ASINH_FUNC> en = expressionnode() ")"
      { return new ExpressionNode(kernel, en, ExpressionNode.ASINH, null); }  
|
    <ATANH_FUNC> en = expressionnode() ")"
      { return new ExpressionNode(kernel, en, ExpressionNode.ATANH, null); }  
|
    <EXP_FUNC> en = expressionnode() ")"
      { return new ExpressionNode(kernel, en, ExpressionNode.EXP, null); }  
|
    <LOG_FUNC> en = expressionnode() ")"
      { return new ExpressionNode(kernel, en, ExpressionNode.LOG, null); }   
|
 	<LG_FUNC> en = expressionnode() ")"
      { return new ExpressionNode(kernel, en, ExpressionNode.LOG10, null); }  
|
 	<LD_FUNC> en = expressionnode() ")"
      { return new ExpressionNode(kernel, en, ExpressionNode.LOG2, null); }  
|
    <SQRT_FUNC> en = expressionnode() ")"
      { return new ExpressionNode(kernel, en, ExpressionNode.SQRT, null); }  
|
    <CBRT_FUNC> en = expressionnode() ")"
      { return new ExpressionNode(kernel, en, ExpressionNode.CBRT, null); }  
|
    <ABS_FUNC> en = expressionnode() ")"
      { return new ExpressionNode(kernel, en, ExpressionNode.ABS, null); }   
|
    <SGN_FUNC> en = expressionnode() ")"
      { return new ExpressionNode(kernel, en, ExpressionNode.SGN, null); }
|
    <FLOOR_FUNC> en = expressionnode() ")"
      { return new ExpressionNode(kernel, en, ExpressionNode.FLOOR, null); }         
|
    <CEIL_FUNC> en = expressionnode() ")"
      { return new ExpressionNode(kernel, en, ExpressionNode.CEIL, null); }               
| 
    <ROUND_FUNC> en = expressionnode() ")"
      { return new ExpressionNode(kernel, en, ExpressionNode.ROUND, null); }               
| 
    <GAMMA_FUNC> en = expressionnode() ")"
      { return new ExpressionNode(kernel, en, ExpressionNode.GAMMA, null); }               
| 
  <RANDOM_FUNC> 
      {  GeoNumeric randNum = new GeoNumeric(kernel.getConstruction());
         randNum.setValue(Math.random());
         randNum.setUsedForRandom(true);
      	 return new ExpressionNode(kernel, randNum, ExpressionNode.RANDOM, null); }               
|
	c = <FUNCTION_LABEL> en = expressionnode() ")"
	// note: the last character of FUNCTION_LABEL is a "("
      { 
      		// remove the opening parenthesis
      		String funcName = c.image.substring(0, c.image.length()-1);
      		int order = 0;
      		int index = funcName.length()-1;
      		GeoElement geo = null;      
      		while (index >= 0) {
      			geo = cons.lookupLabel(funcName.substring(0, index+1));
      			if (geo != null) break;
      			if (c.image.charAt(index) == '\'') {
      				order++;
      				index--;
      			} else break;
      		}
      		
      		if (geo == null) {
      		  	String [] str = { "UndefinedVariable", funcName };
           	 	throw new MyParseError(app, str);    
           	}
      		
      		if (order > 0) { // derivative
      			if (geo.isGeoFunction()) {// function 
      				// n-th derivative of geo
	      			ExpressionNode derivative =  new ExpressionNode(kernel, geo, ExpressionNode.DERIVATIVE, 
	      																new MyDouble(kernel, order));
	      			return new ExpressionNode(kernel, derivative, ExpressionNode.FUNCTION, en); 
	      		} 	      		
	      		else {
	                String [] str = { "FunctionExpected", funcName };
	                throw new MyParseError(app, str);
	      		} 		
      		}
      		else { // no derivative
	      		if (geo.isGeoFunction()) // function 
	      			return new ExpressionNode(kernel, geo, ExpressionNode.FUNCTION, en); 
	      		else if (geo.isGeoCurveCartesian()) // vector function 
	      			return new ExpressionNode(kernel, geo, ExpressionNode.VEC_FUNCTION, en); 
	      		else {// error: no function
	      			String [] str = { "FunctionExpected", funcName };
	                throw new MyParseError(app, str);
	            }
	      	}
      }  
}


/**
 * cartesianvector =  ( expression, expression ) 
 */
VectorValue cartesianvector():
{     
    ExpressionValue x, y;                
}
{   
    // cartesian coordinates
  
    (  LOOKAHEAD(2147483647)
   ( "(" x = expression() "," y = expression() ")"  ) 	
    | 
    (  "(" x = expression() <CARTESIAN_SPECIAL_SEPERATOR> y = expression() ")" )
    )
        {  return new MyVecNode(kernel, x, y); }           
}

/**
 * polarvector = ( expression ; expression )             
 */
VectorValue polarvector():
{     
    ExpressionValue r, phi;                  
    MyVecNode v;
}
{   
    (  
       "(" r = expression() ";"  phi = expression() ")"   
        {                            
             v = new MyVecNode(kernel);                         
             v.setPolarCoords(r, phi);     
             return v;
        }  
    )         
}

/**
 * cartesianvector_special =  <LABEL>( expression | expression ) 
 */
ExpressionNode cartesianvector_special():
{     
   Token l;
    ExpressionValue x, y;                
}
{   
    // cartesian coordinates
    (   l = <FUNCTION_LABEL>  x = expression() <CARTESIAN_SPECIAL_SEPERATOR> y = expression() ")" )
        {         
        	ExpressionNode en =  new ExpressionNode(kernel, new MyVecNode(kernel, x, y)); 
        	en.setLabel(l.image.substring(0,l.image.length()-1));
        	return en;
        }           
}

/**
 * polarvector_special =  <LABEL>( expression ; expression ) 
 */
ExpressionNode polarvector_special():
{     
   Token l;
    ExpressionValue r, phi;                
}
{   
    // cartesian coordinates
    (   l = <FUNCTION_LABEL>  r = expression() ";" phi = expression() ")" )
        {         
            MyVecNode v = new MyVecNode(kernel);
            v.setPolarCoords(r, phi);
        	ExpressionNode en =  new ExpressionNode(kernel, v); 
        	en.setLabel(l.image.substring(0,l.image.length()-1));
        	return en;
        }           
}