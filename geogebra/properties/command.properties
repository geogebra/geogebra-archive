
ANOVA=ANOVA
ANOVASyntax=ANOVA[ <List>, <List>, ...]
# New commands of Victor Franco 18-04-2007
AffineRatio=AffineRatio
AffineRatioSyntax=AffineRatio[ <Point>, <Point>, <Point> ]
Angle=Angle
# V2.5 changed
AngleSyntax=Angle[ <Object> ]\n\
		Angle[ <Vector>, <Vector> ]\n\
		Angle[ <Line>, <Line> ]\n\
		Angle[ <Point>, <Apex>, <Point> ]\n\
		Angle[ <Point>, <Apex>, <Angle> ]
AngularBisector=AngleBisector
AngularBisectorSyntax=AngleBisector[ <Line>, <Line> ]\n\
		AngleBisector[ <Point>, <Point>, <Point> ]
Append=Append
AppendSyntax=Append[ <List>, <Object> ]\n\
		Append[ <Object>, <List> ]
ApplyMatrix=ApplyMatrix
ApplyMatrixSyntax=ApplyMatrix[ <Matrix>, <Object> ]
Arc=Arc
ArcSyntax=Arc[ <Circle>, <Point>, <Point> ]\n\
		Arc[ <Ellipse>, <Point>, <Point> ]\n\
		Arc[ <Circle>, <Parameter Value>, <Parameter Value> ]\n\
		Arc[ <Ellipse>, <Parameter Value>, <Parameter Value> ]
Area=Area
AreaSyntax=Area[ <Conic> ]\n\
		Area[ <Point>, ..., <Point> ]
Asymptote=Asymptote
AsymptoteSyntax=Asymptote[ <Conic> ]\n\
		Asymptote[ <Function> ]\n\
		Asymptote[ <Implicit Curve> ]
Axes=Axes
AxesSyntax=Axes[ <Conic> ]
AxisStepX=AxisStepX
AxisStepXSyntax=AxisStepX[]
AxisStepY=AxisStepY
AxisStepYSyntax=AxisStepY[]
BarChart=BarChart
BarChartSyntax=BarChart[ <List of Data>, <List of Frequencies> ]\n\
		BarChart[ <List of Data>, <List of Frequencies>, <Width of Bars> ]\n\
		BarChart[ <List of Raw Data>, <Width of Bars> ]\n\
		BarChart[ <Start Value>, <End Value>, <List of Heights> ]\n\
		BarChart[ <Start Value>, <End Value>, <Expression>, <Variable>, <From Number>, <To Number> ]\n\
		BarChart[ <Start Value>, <End Value>, <Expression>, <Variable>, <From Number>, <To Number>, <Step Width> ]
Bernoulli=Bernoulli
BernoulliSyntax=Bernoulli[ <Probability>, <Boolean Cumulative> ]
Binomial=BinomialCoefficient
BinomialDist=BinomialDist
BinomialDistSyntax=BinomialDist[ <Number of Trials>, <Probability of Success> ]\n\
		BinomialDist[ <Number of Trials>, <Probability of Success>, <Boolean Cumulative> ]\n\
		BinomialDist[ <Number of Trials>, <Probability of Success>, <Variable Value>, <Boolean Cumulative> ]
BinomialDistSyntaxCAS=BinomialDist[ <Number of Trials>, <Probability of Success>,  <Variable Value>, <Boolean Cumulative> ]
BinomialSyntax=BinomialCoefficient[ <Number n>, <Number r> ]
BinomialSyntaxCAS=BinomialCoefficient[ <Number>, <Number> ]
# QuadricSideSyntax=
Bottom=Bottom
BoxPlot=BoxPlot
BoxPlotSyntax=BoxPlot[ <yOffset>, <yScale>, <List of Raw Data> ]\n\
		BoxPlot[ <yOffset>, <yScale>, <Start Value>, <Q1>, <Median>, <Q3>, <End Value> ]
Button=Button
ButtonSyntax=Button[]\n\
		Button[ <Caption> ]
CFactor=CFactor
CFactorSyntaxCAS=CFactor[ <Expression> ]\n\
		CFactor[ <Expression>, <Variable> ]
CSolutions=CSolutions
CSolutionsSyntaxCAS=CSolutions[ <Equation> ]\n\
		CSolutions[ <Equation>, <Variable> ]\n\
		CSolutions[ <List of Equations>, <List of Variables> ]
CSolve=CSolve
CSolveSyntaxCAS=CSolve[ <Equation> ]\n\
		CSolve[ <Equation>, <Variable> ]\n\
		CSolve[ <List of Equations>, <List of Variables> ]
Cauchy=Cauchy
CauchySyntax=Cauchy[ <Median>, <Scale>, x ]\n\
		Cauchy[ <Median>, <Scale>, x, <Boolean Cumulative> ]\n\
		Cauchy[ <Median>, <Scale>, <Variable Value> ]
CauchySyntaxCAS=Cauchy[ <Median>, <Scale>, <Variable Value> ]
Cell=Cell
CellRange=CellRange
CellRangeSyntax=CellRange[ <Start Cell>, <End Cell> ]
CellSyntax=Cell[ <Column>, <Row> ]
Center=Center
CenterSyntax=Center[ <Conic> ]
Centroid=Centroid
CentroidSyntax=Centroid[ <Polygon> ]
Checkbox=Checkbox
CheckboxSyntax=Checkbox[]\n\
		Checkbox[ <Caption> ]\n\
		Checkbox[ <List> ]\n\
		Checkbox[ <Caption>, <List> ]
ChiSquared=ChiSquared
ChiSquaredSyntax=ChiSquared[ <Degrees of Freedom>, x ]\n\
		ChiSquared[ <Degrees of Freedom>, x, <Boolean Cumulative> ]\n\
		ChiSquared[ <Degrees of Freedom>, <Variable Value> ]
ChiSquaredSyntaxCAS=ChiSquared[ <Degrees of Freedom>, <Variable ]
Circle=Circle
# V2.5 begin
CircleArc=CircularArc
CircleArcSyntax=CircularArc[ <Midpoint>, <Point>, <Point> ]
CircleSector=CircularSector
CircleSectorSyntax=CircularSector[ <Midpoint>, <Point>, <Point> ]
CircleSyntax=Circle[ <Point>, <Radius Number> ]\n\
		Circle[ <Point>, <Segment> ]\n\
		Circle[ <Point>, <Point> ]\n\
		Circle[ <Point>, <Point>, <Point> ]
CircumcircleArc=CircumcircularArc
CircumcircleArcSyntax=CircumcircularArc[ <Point>, <Point>, <Point> ]
CircumcircleSector=CircumcircularSector
CircumcircleSectorSyntax=CircumcircularSector[ <Point>, <Point>, <Point> ]
# New commands of Philipp Weissenbacher
Circumference=Circumference
CircumferenceSyntax=Circumference[ <Conic> ]\n\
		Circumference[ <Polygon> ]
Classes=Classes
ClassesSyntax=Classes[ <List of Data>, <Number of Classes> ]\n\
		Classes[ <List of Data>, <Start>, <Width of Classes> ]
ClosestPoint=ClosestPoint
ClosestPointSyntax=ClosestPoint[ <Path>, <Point> ]
Coefficients=Coefficients
CoefficientsSyntax=Coefficients[ <Polynomial> ]\n\
		Coefficients[ <Conic> ]
CoefficientsSyntaxCAS=Coefficients[ <Polynomial> ]
Column=Column
ColumnName=ColumnName
ColumnNameSyntax=ColumnName[ <Spreadsheet Cell> ]

Append=Append
AppendSyntax=Append[ <List>, <Object> ]\nAppend[ <Object>, <List> ]

Union=Union
UnionSyntax=Union[ <List>, <List> ]\nUnion[ <Polygon>, <Polygon> ]

Insert=Insert
InsertSyntax=Insert[ <List>, <List>, <Position> ]\nInsert[ <Object>, <List>, <Position> ]

Intersection=Intersection
IntersectionSyntax=Intersection[ <List>, <List> ]

IntersectionPaths=IntersectionPaths
IntersectionPathsSyntax=IntersectionPaths[ <GeoLine>, <GeoPolygon> ] \n\
 IntersectionPaths[ <GeoLine>, <GeoConic> ] \n\
 IntersectionPaths[ <GeoPlane>, <GeoPolygon> ] \n\
 IntersectionPaths[ <GeoPlane>, <GeoQuadric> ]
 
IntersectRegion=IntersectRegion
IntersectRegionSyntax=IntersectRegion[ <Polygon>, <Polygon> ]

IsInteger=IsInteger
IsIntegerSyntax=IsInteger[ <Number> ]

Random=RandomBetween
RandomSyntax=RandomBetween[ <Minimum Integer>, <Maximum Integer> ]

RandomBinomial=RandomBinomial
RandomBinomialSyntax=RandomBinomial[ <Number of Trials>, <Probability> ]

RandomPoisson=RandomPoisson
RandomPoissonSyntax=RandomPoisson[ <Mean> ]

CellRange=CellRange
CellRangeSyntax=CellRange[ <Start Cell>, <End Cell> ]
KeepIf=KeepIf
KeepIfSyntax=KeepIf[ <Condition>, <List> ]

Invert=Invert
InvertSyntax=Invert[ <Matrix> ]

Transpose=Transpose
TransposeSyntax=Transpose[ <Matrix> ]

Determinant=Determinant
DeterminantSyntax=Determinant[ <Matrix> ]

AxisStepX=AxisStepX
AxisStepXSyntax=AxisStepX[]

AxisStepY=AxisStepY
AxisStepYSyntax=AxisStepY[]
FractionText=FractionText
FractionTextSyntax=FractionText[ <Number> ]
TableText=TableText
TableTextSyntax=TableText[ <List>, <List>, ... ]\nTableText[ <List>, <List>, ..., <Alignment of Text> ]
RemoveUndefined=RemoveUndefined
RemoveUndefinedSyntax=RemoveUndefined[ <List> ]
LaTeX=FormulaText
LaTeXSyntax=FormulaText[ <Object> ]\nFormulaText[ <Object>, <Boolean for Substitution of Variables> ]\nFormulaText[ <Object>, <Boolean for Substitution of Variables>, <Boolean Show Name> ]
TextToUnicode=TextToUnicode
TextToUnicodeSyntax=TextToUnicode[ "<Text>" ]
LetterToUnicode=LetterToUnicode
LetterToUnicodeSyntax=LetterToUnicode[ "<Letter>" ]
UnicodeToLetter=UnicodeToLetter
UnicodeToLetterSyntax=UnicodeToLetter[ <Integer> ]
UnicodeToText=UnicodeToText
UnicodeToTextSyntax=UnicodeToText[ <List of Integers> ]
Join=Join
JoinSyntax=Join[ <List>, <List>, ... ]\nJoin[ <List of Lists> ]


FitSin=FitSin
FitSinSyntax=FitSin[ <List of Points> ]

FitLogistic=FitLogistic
FitLogisticSyntax=FitLogistic[ <List of Points> ]

#V3.1 end

#ggb40 start
# modified keys


Intersect=Intersect
IntersectSyntax=Intersect[ <Object>, <Object> ]\n\
Intersect[ <Object>, <Object>, <Index of Intersection Point> ]\n\
Intersect[ <Object>, <Object>, <Initial Point> ]\n\
Intersect[ <Function>, <Function>, <Start x-Value>, <End x-Value> ]

Mirror=Reflect
MirrorSyntax=Reflect[ <Object>, <Point> ]\nReflect[ <Object>, <Line> ]\nReflect[ <Object>, <Circle> ]
Length=Length
LengthSyntax=Length[ <Vector> ]\nLength[ <Point> ]\nLength[ <Function>, <Start x-Value>, <End x-Value> ]\nLength[ <Function>, <Start Point>, <End Point> ]\nLength[ <Curve>, <Start x-Value>, <End x-Value> ]\nLength[ <Curve>, <Start Point>, <End Point> ]\nLength[ <List> ]\nLength[ <Text> ]\nLength[ <Locus> ]
Text=Text
TextSyntax=Text[ <Object> ]\nText[ <Object>, <Boolean for Substitution of Variables> ]\nText[ <Object>, <Point> ]\nText[ <Object>, <Point>, <Boolean for Substitution of Variables> ]\nText[ <Object>, <Point>, <Boolean for Substitution of Variables>, <Boolean for LaTeX formula> ] 
Simplify=Simplify
SimplifySyntax=Simplify[ <Function> ]\nSimplify[ <Text> ]
Perimeter=Perimeter
PerimeterSyntax=Perimeter[ <Polygon> ]\nPerimeter[ <Conic> ]\nPerimeter[ <Locus> ]

# ggb40 new keys below
LeftSum=LeftSum
LeftSumSyntax=LeftSum[ <Function>, <Start x-Value>, <End x-Value>, <Number of Rectangles> ]
RectangleSum=RectangleSum
RectangleSumSyntax=RectangleSum[ <Function>, <Start x-Value>, <End x-Value>, <Number of Rectangles>, <Position for rectangle start> ]
Maximize=Maximize
MaximizeSyntax=Maximize[ <Dependent Number>, <Free Number> ]
Minimize=Minimize
MinimizeSyntax=Minimize[ <Dependent Number>, <Free Number> ]

DynamicCoordinates=DynamicCoordinates
DynamicCoordinatesSyntax=DynamicCoordinates[ <Point>, <Number>, <Number> ]

## continuous
TDistribution=TDistribution
TDistributionSyntax=TDistribution[ <Degrees of Freedom>, x ]\nTDistribution[ <Degrees of Freedom>, x, <Boolean Cumulative>]\nTDistribution[ <Degrees of Freedom>, <Variable Value> ]
InverseTDistribution=InverseTDistribution
InverseTDistributionSyntax=InverseTDistribution[ <Degrees of Freedom>, <Probability> ]

FDistribution=FDistribution
FDistributionSyntax=FDistribution[ <Numerator Degrees of Freedom>, <Denominator Degrees of Freedom>, x ]\nFDistribution[ <Numerator Degrees of Freedom>, <Denominator Degrees of Freedom>, x, <Boolean Cumulative> ]\nFDistribution[ <Numerator Degrees of Freedom>, <Denominator Degrees of Freedom>, <Variable Value> ]
InverseFDistribution=InverseFDistribution
InverseFDistributionSyntax=InverseFDistribution[ <Numerator Degrees of Freedom>, <Denominator Degrees of Freedom>, <Probability> ]

Gamma=Gamma
GammaSyntax=Gamma[ <Alpha>, <Beta>, x ]\nGamma[ <Alpha>, <Beta>, x, <Boolean Cumulative> ]\nGamma[ <Alpha>, <Beta>, <Variable Value> ]
InverseGamma=InverseGamma
InverseGammaSyntax=InverseGamma[ <Alpha>, <Beta>, <Probability> ]

Cauchy=Cauchy
CauchySyntax=Cauchy[ <Median>, <Scale>, x ]\nCauchy[ <Median>, <Scale>, x, <Boolean Cumulative> ]\nCauchy[ <Median>, <Scale>, <Variable Value> ]
InverseCauchy=InverseCauchy
InverseCauchySyntax=InverseCauchy[ <Median>, <Scale>, <Probability> ]

ChiSquared=ChiSquared
ChiSquaredSyntax=ChiSquared[ <Degrees of Freedom>, x ]\nChiSquared[ <Degrees of Freedom>, x, <Boolean Cumulative> ]\nChiSquared[ <Degrees of Freedom>, <Variable Value> ]
InverseChiSquared=InverseChiSquared
InverseChiSquaredSyntax=InverseChiSquared[ <Degrees of Freedom>, <Probability> ]

Exponential=Exponential
ExponentialSyntax=Exponential[ <Lambda>, x ]\nExponential[ <Lambda>, x, <Boolean Cumulative> ]\nExponential[ <Lambda>, <Variable Value> ]
InverseExponential=InverseExponential
InverseExponentialSyntax=InverseExponential[ <Lambda>, <Probability> ]

Weibull=Weibull
WeibullSyntax=Weibull[ <Shape>, <Scale>, x ]\nWeibull[ <Shape>, <Scale>, x, <Boolean Cumulative> ]\nWeibull[ <Shape>, <Scale>, <Variable Value> ]
InverseWeibull=InverseWeibull
InverseWeibullSyntax=InverseWeibull[ <Shape>, <Scale>, <Probability> ]

Normal=Normal
NormalSyntax=Normal[ <Mean>, <Standard Deviation>, x ]\nNormal[ <Mean>, <Standard Deviation>, x, <Boolean Cumulative>]\nNormal[ <Mean>, <Standard Deviation>, <Variable Value> ]
InverseNormal=InverseNormal
InverseNormalSyntax=InverseNormal[ <Mean>, <Standard Deviation>, <Probability> ]

LogNormal=LogNormal
LogNormalSyntax=LogNormal[ <Mean>, <Standard Deviation>, x ]\nLogNormal[ <Mean>, <Standard Deviation>, x, <Boolean Cumulative>]\nLogNormal[ <Mean>, <Standard Deviation>, <Variable Value> ]

Uniform=Uniform
UniformSyntax=Uniform[ <Lower Bound>, <Upper Bound>, x ]\nUniform[ <Lower Bound>, <Upper Bound>, x, <Boolean Cumulative> ]\nUniform[ <Lower Bound>, <Upper Bound>, <Variable Value> ]

Triangular=Triangular
TriangularSyntax=Triangular[ <Lower Bound>, <Upper Bound>, <Mode>, x ]\nTriangular[ <Lower Bound>, <Upper Bound>, <Mode>, x, <Boolean Cumulative> ]\nTriangular[ <Lower Bound>, <Upper Bound>, <Mode>, <Variable Value> ]

Logistic=Logistic
LogisticSyntax=Logistic[ <Mean>, <Scale>, x ]\nLogistic[ <Mean>, <Scale>, x, <Boolean Cumulative> ]\nLogistic[ <Mean>, <Scale>, <Variable Value> ]

Erlang=Erlang
ErlangSyntax=Erlang[ <Shape>, <Rate>, x ]\nErlang[ <Shape>, <Rate>, x, <Boolean Cumulative> ]\nErlang[ <Shape>, <Rate>, <Variable Value> ]
## end continuous


## Discrete
Pascal=Pascal
PascalSyntax=Pascal[ <Number of Successes>, <Probability of Success> ]\n\
  Pascal[ <Number of Successes>, <Probability of Success>, <Boolean Cumulative> ]\n\
  Pascal[ <Number of Successes>, <Probability of Success>, <Variable Value>, <Boolean Cumulative> ]
InversePascal=InversePascal
InversePascalSyntax=InversePascal[ <Number of Successes>, <Probability of Success>, <Probability> ]

Poisson=Poisson
PoissonSyntax=Poisson[ <Mean> ]\n\
  Poisson[ <Mean>, <Boolean Cumulative> ]\n\
  Poisson[ <Mean>, <Variable Value>, <Boolean Cumulative> ]
InversePoisson=InversePoisson
InversePoissonSyntax=InversePoisson[ <Mean>, <Probability> ]

BinomialDist=BinomialDist
BinomialDistSyntax=BinomialDist[ <Number of Trials>, <Probability of Success> ]\n\
  BinomialDist[ <Number of Trials>, <Probability of Success>, <Boolean Cumulative> ]\n\
  BinomialDist[ <Number of Trials>, <Probability of Success>, <Variable Value>, <Boolean Cumulative> ]
InverseBinomial=InverseBinomial
InverseBinomialSyntax=InverseBinomial[ <Number of Trials>, <Probability of Success>, <Probability> ]

HyperGeometric=HyperGeometric
HyperGeometricSyntax=HyperGeometric[ <Population Size>, <Number of Successes>, <Sample Size> ]\n\
  HyperGeometric[ <Population Size>, <Number of Successes>, <Sample Size>, <Boolean Cumulative> ]\n\
  HyperGeometric[ <Population Size>, <Number of Successes>, <Sample Size>, <Variable Value>, <Boolean Cumulative> ]
InverseHyperGeometric=InverseHyperGeometric
InverseHyperGeometricSyntax=InverseHyperGeometric[ <Population Size>, <Number of Successes>, <Sample Size>, <Probability> ]

Zipf=Zipf
ZipfSyntax=Zipf[ <Number of Elements>, <Exponent> ]\n\
  Zipf[ <Number of Elements>, <Exponent>, <Boolean Cumulative> ]\n\
  Zipf[ <Number of Elements>, <Exponent>, <Variable Value>, <Boolean Cumulative> ]
InverseZipf=InverseZipf
InverseZipfSyntax=InverseZipf[ <Number of Elements>, <Exponent>, <Probability> ]

Bernoulli=Bernoulli
BernoulliSyntax=Bernoulli[ <Probability>, <Boolean Cumulative> ]

## end Discrete

CopyFreeObject=CopyFreeObject
CopyFreeObjectSyntax=CopyFreeObject[ <Object> ]
SetColor=SetColor
SetColorSyntax=SetColor[ <Object>, "<Color>" ]\nSetColor[ <Object>, <Red>, <Green>, <Blue> ]
SetBackgroundColor=SetBackgroundColor
SetBackgroundColorSyntax=SetBackgroundColor[ <Object>, "<Color>" ]\nSetBackgroundColor[ <Object>, <Red>, <Green>, <Blue> ]
SetDynamicColor=SetDynamicColor
SetDynamicColorSyntax=SetDynamicColor[ <Object>, <Red>, <Green>, <Blue> ]\nSetDynamicColor[ <Object>, <Red>, <Green>, <Blue>, <Opacity> ]
SetConditionToShowObject=SetConditionToShowObject
SetConditionToShowObjectSyntax=SetConditionToShowObject[ <Object>, <Condition> ]
SetCoords=SetCoords
SetCoordsSyntax=SetCoords[ <Point>, <x>, <y> ]
SetFilling=SetFilling
SetFillingSyntax=SetFilling[ <Object>, <Number> ]
ShowLayer=ShowLayer
ShowLayerSyntax=ShowLayer[ <Number> ]
HideLayer=HideLayer
HideLayerSyntax=HideLayer[ <Number> ]
SetFixed=SetFixed
SetFixedSyntax=SetFixed[ <Object>, <true | false> ]
SetPointSize=SetPointSize
SetPointSizeSyntax=SetPointSize[ <Point>, <Number> ]
SetPointStyle=SetPointStyle
SetPointStyleSyntax=SetPointStyle[ <Point>, <Number> ]
SetLineStyle=SetLineStyle
SetLineStyleSyntax=SetLineStyle[ <Line>, <Number> ]
SetLineThickness=SetLineThickness
SetLineThicknessSyntax=SetLineThickness[ <Line>, <Number> ]
Rename=Rename
RenameSyntax=Rename[ <Object>, <Name> ]
FillRow=FillRow
FillRowSyntax=FillRow[ <Row>, <List> ]
FillColumn=FillColumn
FillColumnSyntax=FillColumn[ <Column>, <List> ]
FillCells=FillCells
FillCellsSyntax=FillCells[ <CellRange>, <Object> ]\nFillCells[ <Cell>, <List> ]\nFillCells[ <Cell>, <Matrix> ]
ZoomIn=ZoomIn
ZoomInSyntax=ZoomIn[ <Scale Factor> ]\nZoomIn[ <Scale Factor>, <Center Point> ]\nZoomIn[ <Min x>, <Min y>, <Max x>, <Max y> ]
ZoomOut=ZoomOut
ZoomOutSyntax=ZoomOut[ <Scale Factor> ]\nZoomOut[ <Scale Factor>, <Center Point> ]
Pan=Pan
PanSyntax=Pan[ <x>, <y> ]
SelectObjects=SelectObjects
SelectObjectsSyntax=SelectObjects[ ]\nSelectObjects[ <Object>, <Object>, ... ]
SetLayer=SetLayer
SetLayerSyntax=SetLayer[ <Object>, <Layer> ]
Element=Element
ElementSyntax=Element[ <List>, <Position of Element> ]\nElement[ <Matrix>, <Row>, <Column> ]\nElement[ <List>, <Index1>, <Index2>, ... ]
Cell=Cell
CellSyntax=Cell[ <Column>, <Row> ]
SetCaption=SetCaption
SetCaptionSyntax=SetCaption[ <Object>, <Text> ]
SetLabelMode=SetLabelMode
SetLabelModeSyntax=SetLabelMode[ <Object>, <Number> ]
SetTooltipMode=SetTooltipMode
SetTooltipModeSyntax=SetTooltipMode[ <Object>, <Number> ]
PlaySound=PlaySound
PlaySoundSyntax=PlaySound[ <Note>, <Duration>, <Instrument> ]\nPlaySound[ <Note Sequence>, <Instrument> ]\nPlaySound[ <File> ]\nPlaySound[ <Function>, <Min Value>, <Max Value> ]\nPlaySound[ <Function>, <Min Value>, <Max Value>, <Sample Rate>, <Sample Depth>]\nPlaySound[ <Boolean Play> ]
Eccentricity=Eccentricity
EccentricitySyntax=Eccentricity[ <Conic> ]
Factors=Factors
FactorsSyntax=Factors[ <Polynomial> ]\nFactors[ <Number> ]
RandomUniform=RandomUniform
RandomUniformSyntax=RandomUniform[ <Min>, <Max> ]
Mod=Mod
ModSyntax=Mod[ <Dividend Number>, <Divisor Number> ]\nMod[ <Dividend Polynomial>, <Divisor Polynomial> ] 
Div=Div
DivSyntax=Div[ <Dividend Number>, <Divisor Number> ]\nDiv[ <Dividend Polynomial>, <Divisor Polynomial> ] 

Coefficients=Coefficients
CoefficientsSyntax=Coefficients[ <Polynomial> ]\nCoefficients[ <Conic> ]
Limit=Limit
LimitSyntax=Limit[ <Function>, <Value> ]

LimitBelow=LimitBelow
LimitBelowSyntax=LimitBelow[ <Function>, <Value> ]

LimitAbove=LimitAbove
LimitAboveSyntax=LimitAbove[ <Function>, <Value> ]

Asymptote=Asymptote
AsymptoteSyntax=Asymptote[ <Conic> ]\nAsymptote[ <Function> ]\nAsymptote[ <Implicit Curve> ]
PartialFractions=PartialFractions
PartialFractionsSyntax=PartialFractions[ <Function> ]
Numerator=Numerator
NumeratorSyntax=Numerator[ <Function> ]
Denominator=Denominator
DenominatorSyntax=Denominator[ <Function> ]
SumSquaredErrors=SumSquaredErrors
SumSquaredErrorsSyntax=SumSquaredErrors[ <List of Points>, <Function> ]
RSquare=RSquare
RSquareSyntax=RSquare[ <List of Points>, <Function> ]
Fit=Fit
FitSyntax=Fit[ <List of Points>, <List of Functions> ]\nFit[ <List of Points>, <Function> ]
FitGrowth=FitGrowth
FitGrowthSyntax=FitGrowth[ <List of Points> ]
ParseToNumber=ParseToNumber
ParseToNumberSyntax=ParseToNumber[ <Number>, <String> ]
ParseToFunction=ParseToFunction
ParseToFunctionSyntax=ParseToFunction[ <Function>, <String> ]
PointList=PointList
PointListSyntax=PointList[ <List> ]
RootList=RootList
RootListSyntax=RootList[ <List> ]
SampleVariance=SampleVariance
SampleVarianceSyntax=SampleVariance[ <List of Numbers> ]
SampleSD=SampleSD
SampleSDSyntax=SampleSD[ <List of Numbers> ]
Spearman=Spearman
SpearmanSyntax=Spearman[ <List of Points> ]\nSpearman[ <List of Numbers>, <List of Numbers> ]

TTest=TTest
TTestSyntax=TTest[ <List of Sample Data>, <Hypothesized Mean>, <Tail> ]\nTTest[ <Sample Mean>, <Sample Standard Deviation>, <Sample Size>, <Hypothesized Mean>, <Tail>]
TTest2=TTest2
TTest2Syntax=TTest2[ <List of Sample Data 1>, <List of Sample Data 2>, <Tail>, <Boolean Pooled> ]\nTTest2[ <Sample Mean 1>, <Sample Standard Deviation 1>, <Sample Size 1>, <Sample Mean 2>, <Sample Standard Deviation 2 >, <Sample Size 2>, <Tail>, <Boolean Pooled>]
TTestPaired=TTestPaired
TTestPairedSyntax=TTestPaired[ <List of Sample Data 1>, <List of Sample Data 2>, <Tail>]
TMeanEstimate=TMeanEstimate
TMeanEstimateSyntax=TMeanEstimate[ <List of Sample Data>, <Level>]\nTMeanEstimate[ <Sample Mean>, <Sample Standard Deviation>, <Sample Size>, <Level>]
TMean2Estimate=TMean2Estimate
TMean2EstimateSyntax=TMean2Estimate[ <List of Sample Data 1>, <List of Sample Data 2>, <Level>, <Boolean Pooled> ]\nTMean2Estimate[ <Sample Mean 1>, <Sample Standard Deviation 1>, <Sample Size 1>, <Sample Mean 2>, <Sample Standard Deviation 2>, <Sample Size 2>,  <Level>, <Boolean Pooled>]
ANOVA=ANOVA
ANOVASyntax=ANOVA[ <List>, <List>, ...]

FrequencyPolygon=FrequencyPolygon
FrequencyPolygonSyntax=FrequencyPolygon[ <List of Class Boundaries>, <List of Heights> ]\nFrequencyPolygon[ <List of Class Boundaries>, <List of Raw Data>, <Boolean Use Density> , <Density Scale Factor (optional) > ]\nFrequencyPolygon[ <Boolean Cumulative>, <List of Class Boundaries>, <List of Raw Data>, <Boolean Use Density> , <Density Scale Factor (optional)> ]
FrequencyTable=FrequencyTable
FrequencyTableSyntax=FrequencyTable[ <List of Raw Data> ]\n\
FrequencyTable[ <Cumulative>, <List of Raw Data>]\n\
FrequencyTable[ <List of Class Boundaries>, <List of Raw Data> ]\n\
FrequencyTable[ <Cumulative>, <List of Class Boundaries>, <List of Raw Data>]\n\
FrequencyTable[ <List of Class Boundaries>, <List of Raw Data>, <Use Density> , <Density Scale Factor (optional)> ]\n\
FrequencyTable[ <Cumulative>, <List of Class Boundaries>, <List of Raw Data>, <Use Density> , <Density Scale Factor (optional)> ]
NormalQuantilePlot=NormalQuantilePlot
NormalQuantilePlotSyntax=NormalQuantilePlot[ <List of Raw Data>]

SampleSDX=SampleSDX
SampleSDXSyntax=SampleSDX[ <List of Points> ]
SampleSDY=SampleSDY
SampleSDYSyntax=SampleSDY[ <List of Points> ]
SDX=SDX
SDXSyntax=SDX[ <List of Points> ]
SDY=SDY
SDYSyntax=SDY[ <List of Points> ]
GeometricMean=GeometricMean
GeometricMeanSyntax=GeometricMean[ <List of Numbers> ]
HarmonicMean=HarmonicMean
HarmonicMeanSyntax=HarmonicMean[ <List of Numbers> ]
RootMeanSquare=RootMeanSquare
RootMeanSquareSyntax=RootMeanSquare[ <List of Numbers> ]
Percentile=Percentile
PercentileSyntax=Percentile[ <List of Numbers>, <Percent> ]

OrdinalRank=OrdinalRank
OrdinalRankSyntax=OrdinalRank[ <List> ]
TiedRank=TiedRank
TiedRankSyntax=TiedRank[ <List> ]
CompetitionRank=CompetitionRank
CompetitionRankSyntax=CompetitionRank[ <List> ]
CompleteSquare=CompleteSquare
CompleteSquareSyntax=CompleteSquare[ <Quadratic Function> ]


Cone=Cone
# ConeSyntax=Cone[ <Point>, <Vector>, <Angle Number> ]
# Cone[ <Point>, <Point>, <Angle Number> ]
# Cone[ <Point>, <Line>, <Angle Number> ]
ConeInfinite=InfiniteCone
Conic=Conic
ConicSyntax=Conic[ <Point>, <Point>, <Point>, <Point>, <Point> ]\n\
		Conic[ <Number>, <Number>, <Number>, <Number>, <Number>, <Number> ]
ConstructionStep=ConstructionStep
ConstructionStepSyntax=ConstructionStep[]\n\
		ConstructionStep[ <Object> ]
ConvexHull=ConvexHull
ConvexHullSyntax=ConvexHull[ <List of Points> ]
CopyFreeObject=CopyFreeObject
CopyFreeObjectSyntax=CopyFreeObject[ <Object> ]
Corner=Corner
CornerSyntax=Corner[ <Image>, <Number of Corner> ]\n\
		Corner[ <Text>, <Number of Corner> ]\n\
		Corner[ <Graphics View>, <Number of Corner> ]\n\
		Corner[ <Number of Corner> ]
CountIf=CountIf
CountIfSyntax=CountIf[ <Condition>, <List> ]
Covariance=Covariance
CovarianceSyntax=Covariance[ <List of Points> ]\n\
		Covariance[ <List of Numbers>, <List of Numbers> ]
CovarianceSyntaxCAS=Covariance[ <List of Numbers>, <List of Numbers> ]\n\
		Covariance[ <List of Points> ]
Cross=Cross
CrossRatio=CrossRatio
CrossRatioSyntax=CrossRatio[ <Point>, <Point>, <Point>, <Point> ]
CrossSyntaxCAS=Cross[ <Vector> , <Vector> ]
Curvature=Curvature
CurvatureSyntax=Curvature[ <Point>, <Function> ]\n\
		Curvature[ <Point>, <Curve> ]
CurvatureVector=CurvatureVector
CurvatureVectorSyntax=CurvatureVector[ <Point>, <Function> ]\n\
		CurvatureVector[ <Point>, <Curve> ]
CurveCartesian=Curve
CurveCartesianSyntax=Curve[ <Expression>, <Expression>, <Parameter Variable>, <Start Value>, <End Value> ]
CurveCartesianSyntax3D=Curve[ <Expression>, <Expression>, <Parameter Variable>, <Start Value>, <End Value> ]\n\
		Curve[ <Expression>, <Expression>, <Expression>, <Parameter Variable>, <Start Value>, <End Value> ]
# ConeInfiniteSyntax=ConeInfinite[ <Point>, <Vector>, <Angle Number> ]
# ConeInfinite[ <Point>, <Point>, <Angle Number> ]
# ConeInfinite[ <Point>, <Line>, <Angle Number> ]
Cylinder=Cylinder
# CylinderSyntax=Cylinder[ <Point>, <Vector>, <Radius Number> ]
# Cylinder[ <Point>, <Point>, <Radius Number> ]
# Cylinder[ <Line>, <Radius Number> ]
CylinderInfinite=InfiniteCylinder
#CylinderInfiniteSyntax=CylinderInfinite[ <Point>, <Vector>, <Radius Number> ]\nCylinderInfinite[ <Point>, <Point>, <Radius Number> ]\nCylinderInfinite[ <Line>, <Radius Number> ]
QuadricSide=Side
#QuadricSideSyntax=
Bottom=Bottom
Top=Top
Ends=Ends

CurveCartesianSyntax3D=Curve[ <Expression>, <Expression>, <Parameter Variable>, <Start Value>, <End Value> ]\nCurve[ <Expression>, <Expression>, <Expression>, <Parameter Variable>, <Start Value>, <End Value> ]

SurfaceCartesian=Surface

# ggb3D end




#GeoGebraCAS



BinomialSyntaxCAS=BinomialCoefficient[ <Number>, <Number> ]
BinomialDistSyntaxCAS=BinomialDist[ <Number of Trials>, <Probability of Success>,  <Variable Value>, <Boolean Cumulative> ]

CauchySyntaxCAS=Cauchy[ <Median>, <Scale>, <Variable Value> ]
CFactor=CFactor
CFactorSyntaxCAS=CFactor[ <Expression> ]\nCFactor[ <Expression>, <Variable> ]
ChiSquaredSyntaxCAS=ChiSquared[ <Degrees of Freedom>, <Variable ]
CoefficientsSyntaxCAS=Coefficients[ <Polynomial> ]
CommonDenominator=CommonDenominator
CommonDenominatorSyntaxCAS=CommonDenominator[ <Expression>, <Expression> ]
CovarianceSyntaxCAS=Covariance[ <List of Numbers>, <List of Numbers> ]\nCovariance[ <List of Points> ]
Cross=Cross
CrossSyntaxCAS=Cross[ <Vector> , <Vector> ]
CSolutions=CSolutions
CSolutionsSyntaxCAS=CSolutions[ <Equation> ]\nCSolutions[ <Equation>, <Variable> ]\nCSolutions[ <List of Equations>, <List of Variables> ]
CSolve=CSolve
CSolveSyntaxCAS=CSolve[ <Equation> ]\nCSolve[ <Equation>, <Variable> ]\nCSolve[ <Equation> , <Variable = starting value> ]\nCSolve[ <List of Equations>, <List of Variables> ]

Decimal=Decimal
DecimalSyntaxCAS=Decimal[ <Expression> ]
Defined=IsDefined
DefinedSyntax=IsDefined[ <Object> ]
Degree=Degree
DegreeSyntax=Degree[ <Polynomial> ]
DegreeSyntaxCAS=Degree[ <Polynomial> ]
DelauneyTriangulation=DelaunayTriangulation
DelauneyTriangulationSyntax=DelaunayTriangulation[ <List of Points> ]
Delete=Delete
DeleteSyntax=Delete[ <Object> ]
DeleteSyntaxCAS=Delete[ <Variable> ]
Denominator=Denominator
DenominatorSyntax=Denominator[ <Function> ]
DenominatorSyntaxCAS=Denominator[ <Expression> ]
Derivative=Derivative
DerivativeSyntax=Derivative[ <Function> ]\n\
		Derivative[ <Function>, <Number> ]\n\
		Derivative[ <Curve> ]\n\
		Derivative[ <Curve>, <Number> ]
DerivativeSyntaxCAS=Derivative[ <Expression> ]\n\
		Derivative[ <Expression> , <Variable> ]\n\
		Derivative[ <Expression> , <Variable>, <Number> ]
Determinant=Determinant
DeterminantSyntax=Determinant[ <Matrix> ]
DeterminantSyntaxCAS=Determinant[ <Matrix> ]
Diameter=ConjugateDiameter
DiameterSyntax=ConjugateDiameter[ <Vector>, <Conic> ]\n\
		ConjugateDiameter[ <Line>, <Conic> ]
Dilate=Dilate
DilateSyntax=Dilate[ <Object>, <Dilation Factor>, <Dilation Center Point> ]\n\
		Dilate[ <Object>, <Dilation Factor> ]
Dimension=Dimension
DimensionSyntaxCAS=Dimension[ <Vector> ]
Direction=Direction
DirectionSyntax=Direction[ <Line> ]
Directrix=Directrix
DirectrixSyntax=Directrix[ <Conic> ]
Distance=Distance
DistanceSyntax=Distance[ <Point>, <Object> ]\n\
		Distance[Line g, Line h]
Div=Div
DivSyntax=Div[ <Dividend Number>, <Divisor Number> ]\n\
		Div[ <Dividend Polynomial>, <Divisor Polynomial> ]
DivSyntaxCAS=Div[ <Dividend Number>, <Divisor Number> ]\n\
		Div[ <Dividend Polynomial>, <Divisor Polynomial> ]
Division=Division
DivisionSyntaxCAS=Division[ <Dividend Number>, <Divisor Number> ]\n\
		Division[ <Dividend Polynomial>, <Divisor Polynomial> ]
Divisors=Divisors
DivisorsList=DivisorsList
DivisorsListSyntaxCAS=DivisorsList[ <Number> ]
DivisorsSum=DivisorsSum
DivisorsSumSyntaxCAS=DivisorsSum[ <Number> ]
DivisorsSyntaxCAS=Divisors[ <Number> ]
Dot=Dot
DotPlot=DotPlot
DotPlotSyntax=DotPlot[ <List of Raw Data> ]
DotSyntaxCAS=Dot[ <Vector>, <Vector> ]
DynamicCoordinates=DynamicCoordinates
DynamicCoordinatesSyntax=DynamicCoordinates[ <Point>, <Number>, <Number> ]
Eccentricity=Eccentricity
EccentricitySyntax=Eccentricity[ <Conic> ]
Element=Element
ElementSyntax=Element[ <List>, <Position of Element> ]\n\
		Element[ <Matrix>, <Row>, <Column> ]\n\
		Element[ <List>, <Index1>, <Index2>, ... ]
ElementSyntaxCAS=Element[ <List>, <Position of Element> ]\n\
		Element[ <Matrix>, <Row>, <Column> ]
Ellipse=Ellipse
EllipseSyntax=Ellipse[ <Focal Point>, <Focal Point>, <Semimajor Axis Length> ]\n\
		Ellipse[ <Focal Point>, <Focal Point>, <Segment> ]\n\
		Ellipse[ <Point>, <Point>, <Point> ]
Ends=Ends
Erlang=Erlang
ErlangSyntax=Erlang[ <Shape>, <Rate>, x ]\n\
		Erlang[ <Shape>, <Rate>, x, <Boolean Cumulative> ]\n\
		Erlang[ <Shape>, <Rate>, <Variable Value> ]
Excentricity=LinearEccentricity
ExcentricitySyntax=LinearEccentricity[ <Conic> ]
Execute=Execute
ExecuteSyntax=Execute[ <List of Texts>]\n\
		Execute[ <List of Texts>, <Parameter>, <Parameter>, ...]
Expand=Expand
ExpandSyntax=Expand[ <Expression> ]
ExpandSyntaxCAS=Expand[ <Expression> ]
Exponential=Exponential
ExponentialSyntax=Exponential[ <Lambda>, x ]\n\
		Exponential[ <Lambda>, x, <Boolean Cumulative> ]\n\
		Exponential[ <Lambda>, <Variable Value> ]
ExponentialSyntaxCAS=Exponential[ <Lambda>, <Variable Value> ]
Extremum=Extremum
ExtremumSyntax=Extremum[ <Polynomial> ]\n\
		Extremum[ <Function>, <Start x-Value>, <End x-Value> ]
FDistribution=FDistribution
FDistributionSyntax=FDistribution[ <Numerator Degrees of Freedom>, <Denominator Degrees of Freedom>, x ]\n\
		FDistribution[ <Numerator Degrees of Freedom>, <Denominator Degrees of Freedom>, x, <Boolean Cumulative> ]\n\
		FDistribution[ <Numerator Degrees of Freedom>, <Denominator Degrees of Freedom>, <Variable Value> ]
FDistributionSyntaxCAS=FDistribution[ <Numerator Degrees of Freedom>, <Denominator Degrees of Freedom>, <Variable Value> ]
Factor=Factor
FactorSyntax=Factor[ <Polynomial> ]
FactorSyntaxCAS=Factor[ <Polynomial> ]\n\
		Factor[ <Expression>, <Variable> ]
Factors=Factors
FactorsSyntax=Factors[ <Polynomial> ]\n\
		Factors[ <Number> ]
FactorsSyntaxCAS=Factors[ <Polynomial> ]\n\
		Factors[ <Number> ]
FillCells=FillCells
FillCellsSyntax=FillCells[ <CellRange>, <Object> ]\n\
		FillCells[ <Cell>, <List> ]\n\
		FillCells[ <Cell>, <Matrix> ]
FillColumn=FillColumn
FillColumnSyntax=FillColumn[ <Column>, <List> ]
FillRow=FillRow
FillRowSyntax=FillRow[ <Row>, <List> ]
First=First
FirstAxis=MajorAxis
FirstAxisLength=SemiMajorAxisLength
FirstAxisLengthSyntax=SemiMajorAxisLength[ <Conic> ]
FirstAxisSyntax=MajorAxis[ <Conic> ]
FirstSyntax=First[ <List> ]\n\
		First[ <List> , <Number of Elements> ]\n\
		First[ <Text> ]\n\
		First[ <Text> , <Number of Elements> ]\n\
		First[ <Locus> , <Number of Elements> ]
FirstSyntaxCAS=First[ <List> ]\n\
		First[ <List> , <Number of Elements> ]
Fit=Fit
FitExp=FitExp
FitExpSyntax=FitExp[ <List of Points> ]
FitExpSyntaxCAS=FitExp[ <List of Points> ]
FitGrowth=FitGrowth
FitGrowthSyntax=FitGrowth[ <List of Points> ]
FitLineX=FitLineX
FitLineXSyntax=FitLineX[ <List of Points> ]
FitLineY=FitLine
FitLineYSyntax=FitLine[ <List of Points> ]
FitLog=FitLog
FitLogSyntax=FitLog[ <List of Points> ]
FitLogSyntaxCAS=FitLog[ <List of Points> ]
FitLogistic=FitLogistic
FitLogisticSyntax=FitLogistic[ <List of Points> ]
FitPoly=FitPoly
FitPolySyntax=FitPoly[ <List of Points>, <Degree of Polynomial> ]
FitPolySyntaxCAS=FitPoly[ <List of Points>, <Degree of Polynomial> ]
FitPow=FitPow
FitPowSyntax=FitPow[ <List of Points> ]
FitPowSyntaxCAS=FitPow[ <List of Points> ]
FitSin=FitSin
FitSinSyntax=FitSin[ <List of Points> ]
FitSinSyntaxCAS=FitSin[ <List of Points> ]
FitSyntax=Fit[ <List of Points>, <List of Functions> ]\n\
		Fit[ <List of Points>, <Function> ]
Focus=Focus
FocusSyntax=Focus[ <Conic> ]
FractionText=FractionText
FractionTextSyntax=FractionText[ <Number> ]
FractionalPart=FractionalPart
FractionalPartSyntaxCAS=FractionalPart[ <Expression> ]
Frequency=Frequency
FrequencyPolygon=FrequencyPolygon
FrequencyPolygonSyntax=FrequencyPolygon[ <List of Class Boundaries>, <List of Heights> ]\n\
		FrequencyPolygon[ <List of Class Boundaries>, <List of Raw Data>, <Boolean Use Density> , <Density Scale Factor (optional) > ]\n\
		FrequencyPolygon[ <Boolean Cumulative>, <List of Class Boundaries>, <List of Raw Data>, <Boolean Use Density> , <Density Scale Factor (optional)> ]
FrequencySyntax=Frequency[ <List of Raw Data> ]\n\
		Frequency[ <Cumulative>, <List of Raw Data>]\n\
		Frequency[ <List of Class Boundaries>, <List of Raw Data>,  ]\n\
		Frequency[ <Cumulative>, <List of Class Boundaries>, <List of Raw Data>]\n\
		Frequency[ <List of Class Boundaries>, <List of Raw Data>, <Use Density> , <Density Scale Factor (optional)> ]\n\
		Frequency[ <Boolean Cumulative>, <List of Class Boundaries>, <List of Raw Data>, <Use Density> , <Density Scale Factor (optional)> ]
FrequencyTable=FrequencyTable
FrequencyTableSyntax=FrequencyTable[ <List of Raw Data> ]\n\
		FrequencyTable[ <Cumulative>, <List of Raw Data>]\n\
		FrequencyTable[ <List of Class Boundaries>, <List of Raw Data> ]\n\
		FrequencyTable[ <Cumulative>, <List of Class Boundaries>, <List of Raw Data>]\n\
		FrequencyTable[ <List of Class Boundaries>, <List of Raw Data>, <Use Density> , <Density Scale Factor (optional)> ]\n\
		FrequencyTable[ <Cumulative>, <List of Class Boundaries>, <List of Raw Data>, <Use Density> , <Density Scale Factor (optional)> ]
Function=Function
FunctionSyntax=Function[ <Function>, <Start x-Value>, <End x-Value> ]
GCD=GCD
GCDSyntax=GCD[ <List of Numbers> ]\n\
		GCD[ <Number>, <Number> ]
GCDSyntaxCAS=GCD[ <List of Numbers> ]\n\
		GCD[ <List of Polynomials> ]\n\
		GCD[ <Number>, <Number> ]\n\
		GCD[ <Polynomial>, <Polynomial> ]
Gamma=Gamma
GammaSyntax=Gamma[ <Alpha>, <Beta>, x ]\n\
		Gamma[ <Alpha>, <Beta>, x, <Boolean Cumulative> ]\n\
		Gamma[ <Alpha>, <Beta>, <Variable Value> ]
GammaSyntaxCAS=Gamma[ <Alpha>, <Beta>, <Variable Value> ]
GeometricMean=GeometricMean
GeometricMeanSyntax=GeometricMean[ <List of Numbers> ]
GetTime=GetTime
GetTimeSyntax=GetTime[]
HarmonicMean=HarmonicMean
HarmonicMeanSyntax=HarmonicMean[ <List of Numbers> ]
HideLayer=HideLayer
HideLayerSyntax=HideLayer[ <Number> ]
Histogram=Histogram
# ## commands not yet added ###
HistogramRight=HistogramRight
HistogramRightSyntax=HistogramRight[ <List of Class Boundaries>, <List of Heights> ]\n\
		HistogramRight[ <List of Class Boundaries>, <List of Raw Data>, <Use Density> , <Density Scale Factor> (optional) ]\n\
		HistogramRight[ <Boolean Cumulative>, <List of Class Boundaries>, <List of Raw Data>, <Use Density> , <Density Scale Factor> (optional) ]
HistogramSyntax=Histogram[ <List of Class Boundaries>, <List of Heights> ]\n\
		Histogram[ <List of Class Boundaries>, <List of Raw Data>, <Use Density> , <Density Scale Factor (optional)>  ]\n\
		Histogram[ <Boolean Cumulative>, <List of Class Boundaries>, <List of Raw Data>, <Use Density> , <Density Scale Factor (optional)> ]
Hull=Hull
HullSyntax=Hull[ <List of Points> , <Percentage> ]
HyperGeometric=HyperGeometric
HyperGeometricSyntax=HyperGeometric[ <Population Size>, <Number of Successes>, <Sample Size> ]\n\
		HyperGeometric[ <Population Size>, <Number of Successes>, <Sample Size>, <Boolean Cumulative> ]\n\
		HyperGeometric[ <Population Size>, <Number of Successes>, <Sample Size>, <Variable Value>, <Boolean Cumulative> ]
HyperGeometricSyntaxCAS=HyperGeometric[ <Population Size>, <Number of Successes>, <Sample Size>, <Variable Value>, <Boolean Cumulative> ]
Hyperbola=Hyperbola
HyperbolaSyntax=Hyperbola[ <Focal Point>, <Focal Point>, <Semimajor Axis Length> ]\n\
		Hyperbola[ <Focal Point>, <Focal Point>, <Segment> ]\n\
		Hyperbola[ <Point>, <Point>, <Point> ]
Identity=Identity
IdentitySyntax=Identity[ <Number> ]
IdentitySyntaxCAS=Identity[ <Number> ]
# V3.0 begin
If=If
IfSyntax=If[ <Condition>, <Then> ]\n\
		If[ <Condition>, <Then>, <Else> ]
Imaginary=Imaginary
ImaginarySyntaxCAS=Imaginary[ <Complex Number> ]
ImplicitCurve=ImplicitCurve
ImplicitCurveSyntax=ImplicitCurve[ <List of Points> ]\n\
		ImplicitCurve[ <f(x,y)> ]
ImplicitDerivative=ImplicitDerivative
ImplicitDerivativeSyntaxCAS=ImplicitDerivative[ <Expression>, <Dependent Variable>, <Independent Variable> ]
Incircle=Incircle
IncircleSyntax=Incircle[ <Point>, <Point>, <Point> ]
IndexOf=IndexOf
IndexOfSyntax=IndexOf[ <Object>, <List> ]\n\
		IndexOf[ <Object>, <List>, <Start Index> ]\n\
		IndexOf[ <Text>, <Text>]\n\
		IndexOf[ <Text>, <Text>, <Start Index> ]
Insert=Insert
InsertSyntax=Insert[ <List>, <List>, <Position> ]\n\
		Insert[ <Object>, <List>, <Position> ]
IntegerPart=IntegerPart
IntegerPartSyntaxCAS=IntegerPart[ <Expression> ]
Integral=Integral
IntegralBetween=IntegralBetween
IntegralBetweenSyntax=IntegralBetween[ <Function>, <Function>, <Start x-Value>, <End x-Value> ]\n\
		IntegralBetween[ <Function>, <Function>, <Start x-Value>, <End x-Value>, < Boolean Evaluate> ]
IntegralBetweenSyntaxCAS=IntegralBetween[ <Function>, <Function>, <Start x-Value>, <End x-Value> ]\n\
		IntegralBetween[ <Function>, <Function>, <Variable>, <Start Value>, <End Value> ]
IntegralSyntax=Integral[ <Function> ]\n\
		Integral[ <Function>, <Start x-Value>, <End x-Value> ]\n\
		Integral[ <Function>, <Start x-Value>, <End x-Value>, < Boolean Evaluate> ]
IntegralSyntaxCAS=Integral[ <Function> ]\n\
		Integral[ <Function>, <Variable> ]\n\
		Integral[ <Function>, <Start x-Value>, <End x-Value> ]\n\
		Integral[ <Function>, <Variable>, <Start Value>, <End Value> ]
Intersect=Intersect
IntersectRegion=IntersectRegion
IntersectRegionSyntax=IntersectRegion[ <Polygon>, <Polygon> ]
IntersectSyntax=Intersect[ <Object>, <Object> ]\n\
		Intersect[ <Object>, <Object>, <Index of Intersection Point> ]\n\
		Intersect[ <Object>, <Object>, <Initial Point> ]\n\
		Intersect[ <Function>, <Function>, <Start x-Value>, <End x-Value> ]
IntersectSyntaxCAS=Intersect[ <Function>, <Function> ]
Intersection=Intersection
IntersectionPaths=IntersectionPaths
IntersectionPathsSyntax=IntersectionPaths[ <GeoLine>, <GeoPolygon> ] \n\
		IntersectionPaths[ <GeoLine>, <GeoConic> ] \n\
		IntersectionPaths[ <GeoPlane>, <GeoPolygon> ] \n\
		IntersectionPaths[ <GeoPlane>, <GeoQuadric> ]
IntersectionSyntax=Intersection[ <List>, <List> ]
InverseBinomial=InverseBinomial
InverseBinomialSyntax=InverseBinomial[ <Number of Trials>, <Probability of Success>, <Probability> ]
InverseCauchy=InverseCauchy
InverseCauchySyntax=InverseCauchy[ <Median>, <Scale>, <Probability> ]
InverseChiSquared=InverseChiSquared
InverseChiSquaredSyntax=InverseChiSquared[ <Degrees of Freedom>, <Probability> ]
InverseExponential=InverseExponential
InverseExponentialSyntax=InverseExponential[ <Lambda>, <Probability> ]
InverseFDistribution=InverseFDistribution
InverseFDistributionSyntax=InverseFDistribution[ <Numerator Degrees of Freedom>, <Denominator Degrees of Freedom>, <Probability> ]
InverseGamma=InverseGamma
InverseGammaSyntax=InverseGamma[ <Alpha>, <Beta>, <Probability> ]
InverseHyperGeometric=InverseHyperGeometric
InverseHyperGeometricSyntax=InverseHyperGeometric[ <Population Size>, <Number of Successes>, <Sample Size>, <Probability> ]
InverseNormal=InverseNormal
InverseNormalSyntax=InverseNormal[ <Mean>, <Standard Deviation>, <Probability> ]
InversePascal=InversePascal
InversePascalSyntax=InversePascal[ <Number of Successes>, <Probability of Success>, <Probability> ]
InversePoisson=InversePoisson
InversePoissonSyntax=InversePoisson[ <Mean>, <Probability> ]
InverseTDistribution=InverseTDistribution
InverseTDistributionSyntax=InverseTDistribution[ <Degrees of Freedom>, <Probability> ]
InverseWeibull=InverseWeibull
InverseWeibullSyntax=InverseWeibull[ <Shape>, <Scale>, <Probability> ]
InverseZipf=InverseZipf
InverseZipfSyntax=InverseZipf[ <Number of Elements>, <Exponent>, <Probability> ]
Invert=Invert
InvertSyntax=Invert[ <Matrix> ]
InvertSyntaxCAS=Invert[ <Matrix> ]
IsInRegion=IsInRegion
IsInRegionSyntax=IsInRegion[ <Point>, <Region> ]
IsInteger=IsInteger
IsIntegerSyntax=IsInteger[ <Number> ]
IsPrime=IsPrime
IsPrimeSyntaxCAS=IsPrime[ <Number> ]
Iteration=Iteration
IterationList=IterationList
IterationListSyntax=IterationList[ <Function>, <Start Value>, <Number of Iterations> ]
IterationSyntax=Iteration[ <Function>, <Start Value>, <Number of Iterations> ]
Join=Join
JoinSyntax=Join[ <List>, <List>, ... ]\n\
		Join[ <List of Lists> ]
KeepIf=KeepIf
KeepIfSyntax=KeepIf[ <Condition>, <List> ]
LCM=LCM
LCMSyntax=LCM[ <List of Numbers> ]\n\
		LCM[ <Number>, <Number> ]
LCMSyntaxCAS=LCM[ <Number>, <Number> ]\n\
		LCM[ <Polynomial>, <Polynomial> ]\n\
		LCM[ <List of Numbers> ]\n\
		LCM[ <List of Polynomials> ]
LaTeX=FormulaText
LaTeXSyntax=FormulaText[ <Object> ]\n\
		FormulaText[ <Object>, <Boolean for Substitution of Variables> ]\n\
		FormulaText[ <Object>, <Boolean for Substitution of Variables>, <Boolean Show Name> ]
Last=Last
LastSyntax=Last[ <List> ]\n\
		Last[ <List> , <Number of Elements> ]\n\
		Last[ <Text> ]\n\
		Last[ <Text> , <Number of Elements> ]
LastSyntaxCAS=Last[ <List> ]\n\
		Last[ <List> , <Number of Elements> ]
LeftSide=LeftSide
LeftSideSyntaxCAS=LeftSide[ <Equation> ]\n\
		LeftSide[ { <Equation> } ]
# ggb40 new keys below
LeftSum=LeftSum
LeftSumSyntax=LeftSum[ <Function>, <Start x-Value>, <End x-Value>, <Number of Rectangles> ]
Length=Length
LengthSyntax=Length[ <Vector> ]\n\
		Length[ <Point> ]\n\
		Length[ <Function>, <Start x-Value>, <End x-Value> ]\n\
		Length[ <Function>, <Start Point>, <End Point> ]\n\
		Length[ <Curve>, <Start x-Value>, <End x-Value> ]\n\
		Length[ <Curve>, <Start Point>, <End Point> ]\n\
		Length[ <List> ]\n\
		Length[ <Text> ]\n\
		Length[ <Locus> ]
LengthSyntaxCAS=Length[ <Function>, <x-start>, <x-end> ]\n\
		Length[ <Function>, <Variable> , <Start Point>, <End Point> ]
LetterToUnicode=LetterToUnicode
LetterToUnicodeSyntax=LetterToUnicode[ <"Letter"> ]
Limit=Limit
LimitAbove=LimitAbove
LimitAboveSyntax=LimitAbove[ <Function>, <Value> ]
LimitAboveSyntaxCAS=LimitAbove[ <Expression>, <Value> ]\n\
		LimitAbove[ <Expression>, <Variable>, <Value> ]
LimitBelow=LimitBelow
LimitBelowSyntax=LimitBelow[ <Function>, <Value> ]
LimitBelowSyntaxCAS=LimitBelow[ <Expression>, <Value> ]\n\
		LimitBelow[ <Expression>, <Variable>, <Value> ]
LimitSyntax=Limit[ <Function>, <Value> ]
LimitSyntaxCAS=Limit[ <Expression>, <Value> ]\n\
		Limit[ <Expression>, <Variable>, <Value> ]
Line=Line
LineBisector=PerpendicularBisector
LineBisectorSyntax=PerpendicularBisector[ <Segment> ]\n\
		PerpendicularBisector[ <Point>, <Point> ]
LineSyntax=Line[ <Point>, <Point> ]\n\
		Line[ <Point>, <Parallel Line> ]\n\
		Line[ <Point>, <Direction Vector> ]
Locus=Locus
LocusSyntax=Locus[ <Point Creating Locus Line>, <Point> ]\n\
		Locus[ <Point Creating Locus Line>, <Slider> ]
LogNormal=LogNormal
LogNormalSyntax=LogNormal[ <Mean>, <Standard Deviation>, x ]\n\
		LogNormal[ <Mean>, <Standard Deviation>, x, <Boolean Cumulative>]\n\
		LogNormal[ <Mean>, <Standard Deviation>, <Variable Value> ]
Logistic=Logistic
LogisticSyntax=Logistic[ <Mean>, <Scale>, x ]\n\
		Logistic[ <Mean>, <Scale>, x, <Boolean Cumulative> ]\n\
		Logistic[ <Mean>, <Scale>, <Variable Value> ]
LowerSum=LowerSum
LowerSumSyntax=LowerSum[ <Function>, <Start x-Value>, <End x-Value>, <Number of Rectangles> ]
MatrixRank=MatrixRank
MatrixRankSyntaxCAS=MatrixRank[ <Matrix> ]
Max=Max
MaxSyntax=Max[ <Number>, <Number> ]\n\
		Max[ <List> ]\n\
		Max[ <Interval> ]\n\
		Max[ <Function>, <Start x-Value>, <End x-Value> ]
MaxSyntaxCAS=Max[ <List> ]\n\
		Max[ <Number>, <Number> ]
Maximize=Maximize
MaximizeSyntax=Maximize[ <Dependent Number>, <Free Number> ]
Mean=Mean
MeanSyntax=Mean[ <List of Numbers> ]
MeanSyntaxCAS=Mean[ <List of Numbers> ]
MeanX=MeanX
MeanXSyntax=MeanX[ <List of Points> ]
MeanY=MeanY
MeanYSyntax=MeanY[ <List of Points> ]
Median=Median
MedianSyntax=Median[ <List of Numbers> ]
MedianSyntaxCAS=Median[ <List of Numbers> ]
Midpoint=Midpoint
MidpointSyntax=Midpoint[ <Segment> ]\n\
		Midpoint[ <Point>, <Point> ]\n\
		Midpoint[ <Conic> ]\n\
		MidPoint[ <Interval> ]
Min=Min
MinSyntax=Min[ <Number>, <Number> ]\n\
		Min[ <List> ]\n\
		Min[ <Interval> ]\n\
		Min[ <Function>, <Start x-Value>, <End x-Value> ]
MinSyntaxCAS=Min[ <List> ]\n\
		Min[ <Number>, <Number> ]
Minimize=Minimize
MinimizeSyntax=Minimize[ <Dependent Number>, <Free Number> ]
MinimumSpanningTree=MinimumSpanningTree
MinimumSpanningTreeSyntax=MinimumSpanningTree[ <List of Points> ]
Mirror=Reflect
MirrorSyntax=Reflect[ <Object>, <Point> ]\n\
		Reflect[ <Object>, <Line> ]\n\
		Reflect[ <Object>, <Circle> ]
Mod=Mod
ModSyntax=Mod[ <Dividend Number>, <Divisor Number> ]\n\
		Mod[ <Dividend Polynomial>, <Divisor Polynomial> ]
ModSyntaxCAS=Mod[ <Dividend Number>, <Divisor Number> ]\n\
		Mod[ <Dividend Polynomial>, <Divisor Polynomial> ]
Mode=Mode
ModeSyntax=Mode[ <List of Numbers> ]
NIntegral=NIntegral
NIntegralSyntaxCAS=NIntegral[ <Function>, <Start x-Value>, <End x-Value> ]\n\
		NIntegral[ <Function>, <Variable>, <Start Value>, <End Value> ]
NRoot=NRoot
NRootSyntaxCAS=NRoot[ <Expression> , <N> ]
NSolutions=NSolutions
NSolutionsSyntaxCAS=NSolutions[ <Equation> ]\n\
		NSolutions[ <Equation>, <Variable> ]\n\
		NSolutions[ <Equation>, <Variable = starting value> ]\n\
		NSolutions[ <List of Equations>, <List of Variables> ]
NSolve=NSolve
NSolveSyntaxCAS=NSolve[ <Equation> ]\n\
		NSolve[ <Equation> , <Variable> ]\n\
		NSolve[ <Equation> , <Variable = starting value> ]\n\
		NSolve[ <List of Equations> , <List of Variables)> ]
# V3.1 begin
Name=Name
NameSyntax=Name[ <Object> ]
NextPrime=NextPrime
NextPrimeSyntaxCAS=NextPrime[ <Number> ]
Normal=Normal
NormalQuantilePlot=NormalQuantilePlot
NormalQuantilePlotSyntax=NormalQuantilePlot[ <List of Raw Data>]
NormalSyntax=Normal[ <Mean>, <Standard Deviation>, x ]\n\
		Normal[ <Mean>, <Standard Deviation>, x, <Boolean Cumulative>]\n\
		Normal[ <Mean>, <Standard Deviation>, <Variable Value> ]
NormalSyntaxCAS=Normal[ <Mean>, <Standard Deviation>, <Variable Value> ]
Numerator=Numerator
NumeratorSyntax=Numerator[ <Function> ]
NumeratorSyntaxCAS=Numerator[ <Expression> ]
Numeric=Numeric
NumericSyntaxCAS=Numeric[ <Expression> ]\n\
		Numeric[ <Expression>, <significant figures> ]
Object=Object
ObjectSyntax=Object[ <Name of Object as Text> ]
Ordinal=Ordinal
OrdinalRank=OrdinalRank
OrdinalRankSyntax=OrdinalRank[ <List> ]
OrdinalSyntax=Ordinal[ <Integer> ]
OrthogonalLine=PerpendicularLine
OrthogonalLineSyntax=PerpendicularLine[ <Point>, <Line> ]\n\
		PerpendicularLine[ <Point>, <Segment> ]\n\
		PerpendicularLine[ <Point>, <Vector> ]
OrthogonalPlane=PerpendicularPlane
OrthogonalPlaneSyntax=PerpendicularPlane[ <Point3D>, <Line3D> ]
OrthogonalVector=PerpendicularVector
OrthogonalVectorSyntax=PerpendicularVector[ <Line> ]\n\
		PerpendicularVector[ <Segment> ]\n\
		PerpendicularVector[ <Vector> ]
OrthogonalVectorSyntaxCAS=PerpendicularVector[ <Vector> ]
OsculatingCircle=OsculatingCircle
OsculatingCircleSyntax=OsculatingCircle[ <Point>, <Function> ]\n\
		OsculatingCircle[ <Point>, <Curve> ]
PMCC=CorrelationCoefficient
PMCCSyntax=CorrelationCoefficient[ <List of Points> ]\n\
		CorrelationCoefficient[ <List of x-Coordinates>, <List of y-Coordinates> ]
Pan=Pan
PanSyntax=Pan[ <x>, <y> ]
Parabola=Parabola
ParabolaSyntax=Parabola[ <Point>, <Line> ]
Parameter=Parameter
ParameterSyntax=Parameter[ <Parabola> ]
ParseToFunction=ParseToFunction
ParseToFunctionSyntax=ParseToFunction[ <Function>, <String> ]
ParseToNumber=ParseToNumber
ParseToNumberSyntax=ParseToNumber[ <Number>, <String> ]
PartialFractions=PartialFractions
PartialFractionsSyntax=PartialFractions[ <Function> ]
PartialFractionsSyntaxCAS=PartialFractions[ <Function> ]\n\
		PartialFractions[ <Function>, <Variable>]
# # Discrete
Pascal=Pascal
PascalSyntax=Pascal[ <Number of Successes>, <Probability of Success> ]\n\
		Pascal[ <Number of Successes>, <Probability of Success>, <Boolean Cumulative> ]\n\
		Pascal[ <Number of Successes>, <Probability of Success>, <Variable Value>, <Boolean Cumulative> ]
PascalSyntaxCAS=Pascal[ <Number of Successes>, <Probability of Success>, <Variable Value>, <Boolean Cumulative> ]
PathParameter=PathParameter
PathParameterSyntax=PathParameter[ <Point On Path> ]
Percentile=Percentile
PercentileSyntax=Percentile[ <List of Numbers>, <Percent> ]
Perimeter=Perimeter
PerimeterSyntax=Perimeter[ <Polygon> ]\n\
		Perimeter[ <Conic> ]\n\
		Perimeter[ <Locus> ]
Plane=Plane
# PerpendicularPlane[ <Point>, <Segment> ]
# PerpendicularPlane[ <Point>, <Vector> ]
PlaneBisector=PlaneBisector
PlaneSyntax=Plane[ <Point3D>, <Point3D>, <Point3D> ]\n\
		Plane[ <Point3D>, <Plane> ]
PlaySound=PlaySound
PlaySoundSyntax=PlaySound[ <Note>, <Duration>, <Instrument> ]\n\
		PlaySound[ <Note Sequence>, <Instrument> ]\n\
		PlaySound[ <File> ]\n\
		PlaySound[ <Function>, <Min Value>, <Max Value> ]\n\
		PlaySound[ <Function>, <Min Value>, <Max Value>, <Sample Rate>, <Sample Depth>]\n\
		PlaySound[ <Boolean Play> ]
Point=Point
PointIn=PointIn
PointInSyntax=PointIn[ <Region> ]
PointList=PointList
PointListSyntax=PointList[ <List> ]
PointSyntax=Point[ <Object> ]\n\
		Point[ <Object>, <Parameter> ]\n\
		Point[ <Point>, <Vector> ]
Poisson=Poisson
PoissonSyntax=Poisson[ <Mean> ]\n\
		Poisson[ <Mean>, <Boolean Cumulative> ]\n\
		Poisson[ <Mean>, <Variable Value>, <Boolean Cumulative> ]
PoissonSyntaxCAS=Poisson[ <Mean>, <Variable Value>, <Boolean Cumulative> ]
Polar=Polar
PolarSyntax=Polar[ <Point>, <Conic> ]
PolyLine=PolyLine
PolyLineSyntax=PolyLine[ <List of Points> ]\n\
		PolyLine[ <Point>, ..., <Point> ]
Polygon=Polygon
PolygonSyntax=Polygon[ <Point>, ..., <Point> ]\n\
		Polygon[ <Point>, <Point>, <Number of Vertices> ]\n\
		Polygon[ <List of Points> ]
Polyhedron=Polyhedron
PolyhedronSyntax=Polyhedron[ <Point3D>, <Point3D>, ...]
Polynomial=Polynomial
PolynomialSyntax=Polynomial[ <Function> ]\n\
		Polynomial[ <List of Points> ]
PreviousPrime=PreviousPrime
PreviousPrimeSyntaxCAS=PreviousPrime[ <Number> ]
PrimeFactors=PrimeFactors
PrimeFactorsSyntax=PrimeFactors[ <Number> ]
PrimeFactorsSyntaxCAS=PrimeFactors[ <Number> ]
Prism=Prism
PrismSyntax=Prism[ <Point>, <Point>, ...]\n\
		Prism[ <Polygon>, <Point>]\n\
		Prism[ <Polygon>, <Height value>]
Product=Product
ProductSyntax=Product[ <List of Numbers> ]\n\
		Product[ <List of Numbers>,  <Number of Elements> ]
ProductSyntaxCAS=Product[ <List of expressions> ]\n\
		Product[ <Expression>, <variable>, <start index>, <end index> ]
ProperFraction=MixedNumber
ProperFractionSyntaxCAS=MixedNumber[ <Number> ]
Pyramid=Pyramid
PyramidSyntax=Pyramid[ <Point3D>, <Point3D>, ...]
Q1=Q1
Q1Syntax=Q1[ <List of Numbers> ]
Q3=Q3
Q3Syntax=Q3[ <List of Numbers> ]
# CylinderInfiniteSyntax=CylinderInfinite[ <Point>, <Vector>, <Radius Number> ]
# CylinderInfinite[ <Point>, <Point>, <Radius Number> ]
# CylinderInfinite[ <Line>, <Radius Number> ]
QuadricSide=Side
RSquare=RSquare
RSquareSyntax=RSquare[ <List of Points>, <Function> ]
Radius=Radius
RadiusSyntax=Radius[ <Conic> ]
Random=RandomBetween
RandomBinomial=RandomBinomial
RandomBinomialSyntax=RandomBinomial[ <Number of Trials>, <Probability> ]
RandomBinomialSyntaxCAS=RandomBinomial[ <Number of Trials>, <Probability> ]
RandomElement=RandomElement
RandomElementSyntax=RandomElement[ <List> ]
RandomElementSyntaxCAS=RandomElement[ <List> ]
RandomNormal=RandomNormal
RandomNormalSyntax=RandomNormal[ <Mean>, <Standard Deviation> ]
RandomNormalSyntaxCAS=RandomNormal[ <Mean>, <Standard Deviation> ]
RandomPoisson=RandomPoisson
RandomPoissonSyntax=RandomPoisson[ <Mean> ]
RandomPoissonSyntaxCAS=RandomPoisson[ <Mean> ]
RandomPolynomial=RandomPolynomial
RandomPolynomialSyntaxCAS=RandomPolynomial[ <Degree>, <Minimum for Coefficients>, <Maximum for Coefficients> ]\n\
		RandomPolynomial[ <Variable>, <Degree> , <Minimum for Coefficients>, <Maximum for Coefficients> ]
RandomSyntax=RandomBetween[ <Minimum Integer>, <Maximum Integer> ]
RandomSyntaxCAS=RandomBetween[ <Minimum Integer>, <Maximum Integer> ]
RandomUniform=RandomUniform
RandomUniformSyntax=RandomUniform[ <Min>, <Max> ]
Rationalize=Rationalize
RationalizeSyntaxCAS=Rationalize[ <Number> ]
Ray=Ray
RaySyntax=Ray[ <Start Point>, <Point> ]\n\
		Ray[ <Start Point>, <Direction Vector> ]
Real=Real
RealSyntaxCAS=Real[ <Complex Number> ]
RectangleSum=RectangleSum
RectangleSumSyntax=RectangleSum[ <Function>, <Start x-Value>, <End x-Value>, <Number of Rectangles>, <Position for rectangle start> ]
ReducedRowEchelonForm=ReducedRowEchelonForm
ReducedRowEchelonFormSyntax=ReducedRowEchelonForm[ <Matrix> ]
ReducedRowEchelonFormSyntaxCAS=ReducedRowEchelonForm[ <Matrix> ]
Relation=Relation
RelationSyntax=Relation[ <Object>, <Object> ]
RemoveUndefined=RemoveUndefined
RemoveUndefinedSyntax=RemoveUndefined[ <List> ]
Rename=Rename
RenameSyntax=Rename[ <Object>, <Name> ]
ResidualPlot=ResidualPlot
ResidualPlotSyntax=ResidualPlot[ <List of Points>, <Function> ]
Reverse=Reverse
ReverseSyntax=Reverse[ <List> ]
RightSide=RightSide
RightSideSyntaxCAS=RightSide[ <Equation> ]\n\
		RightSide[ { <Equation> } ]
RigidPolygon=RigidPolygon
RigidPolygonSyntax=RigidPolygon[ <Free Point>, ..., <Free Point> ]
Root=Root
RootList=RootList
RootListSyntax=RootList[ <List> ]
RootMeanSquare=RootMeanSquare
RootMeanSquareSyntax=RootMeanSquare[ <List of Numbers> ]
RootSyntax=Root[ <Polynomial> ]\n\
		Root[ <Function>, <Initial x-Value> ]\n\
		Root[ <Function>, <Start x-Value>, <End x-Value> ]
RootSyntaxCAS=Root[ <Polynomial> ]
Roots=Roots
RootsSyntax=Roots[ <Function>, <Start x-Value>, <End x-Value> ]
Rotate=Rotate
# V2.5 changed
RotateSyntax=Rotate[ <Object>, <Angle> ]\n\
		Rotate[ <Object>, <Angle>, <Point> ]
RotateText=RotateText
RotateTextSyntax=RotateText[ <Text>, <Angle> ]
Row=Row
RowSyntax=Row[ <Spreadsheet Cell> ]
SD=SD
SDSyntax=SD[ <List of Numbers> ]
SDSyntaxCAS=SD[ <List of Numbers> ]
SDX=SDX
SDXSyntax=SDX[ <List of Points> ]
SDY=SDY
SDYSyntax=SDY[ <List of Points> ]
SXX=Sxx
SXXSyntax=Sxx[ <List of Numbers> ]\n\
		Sxx[ <List of Points> ]
SXY=Sxy
SXYSyntax=Sxy[ <List of Points> ]\n\
		Sxy[ <List of Numbers>, <List of Numbers> ]
SYY=Syy
SYYSyntax=Syy[ <List of Points> ]
Sample=Sample
SampleSD=SampleSD
SampleSDSyntax=SampleSD[ <List of Numbers> ]
SampleSDSyntaxCAS=SampleSD[ <List of Numbers> ]
SampleSDX=SampleSDX
SampleSDXSyntax=SampleSDX[ <List of Points> ]
SampleSDY=SampleSDY
SampleSDYSyntax=SampleSDY[ <List of Points> ]
SampleSyntax=Sample[ <List>, <Size> ]\n\
		Sample[ <List>, <Size>, <With Replacement> ]
SampleSyntaxCAS=Sample[ <List>, <Size> ]\n\
		Sample[ <List>, <Size>, <With Replacement> ]
SampleVariance=SampleVariance
SampleVarianceSyntax=SampleVariance[ <List of Numbers> ]
SampleVarianceSyntaxCAS=SampleVariance[ <List of Numbers> ]
SecondAxis=MinorAxis
SecondAxisLength=SemiMinorAxisLength
SecondAxisLengthSyntax=SemiMinorAxisLength[ <Conic> ]
SecondAxisSyntax=MinorAxis[ <Conic> ]
Sector=Sector
SectorSyntax=Sector[ <Conic>, <Point>, <Point> ]\n\
		Sector[ <Conic>, <Parameter Value>, <Parameter Value> ]
Segment=Segment
# V2.5 changed
SegmentSyntax=Segment[ <Point>, <Point> ]\n\
		Segment[ <Point>, <Length> ]
SelectObjects=SelectObjects
SelectObjectsSyntax=SelectObjects[ ]\n\
		SelectObjects[ <Object>, <Object>, ... ]
SelectedElement=SelectedElement
SelectedElementSyntax=SelectedElement[ <List> ]
SelectedIndex=SelectedIndex
SelectedIndexSyntax=SelectedIndex[ <List> ]
Semicircle=Semicircle
SemicircleSyntax=Semicircle[ <Point>, <Point> ]
Sequence=Sequence
SequenceSyntax=Sequence[ <Expression>, <Variable>, <Start Value>, <End Value> ]\n\
		Sequence[ <Expression>, <Variable>, <Start Value>, <End Value>, <Increment> ]\n\
		Sequence[ <End Value> ]
SequenceSyntaxCAS=Sequence[ <Expression>, <Variable>, <Start Value>, <End Value> ]\n\
		Sequence[ <Expression>, <Variable>, <Start Value>, <End Value>, <Increment> ]\n\
		Sequence[ <End Value> ]
SetActiveView=SetActiveView
SetActiveViewSyntax=SetActiveView[ <View Number 1|2> ]
SetAxesRatio=SetAxesRatio
SetAxesRatioSyntax=SetAxesRatio[ <Number>, <Number> ]
SetAxesRatioSyntax3D=SetAxesRatio[ <Number>, <Number> ]\n\
		SetAxesRatio[ <Number>, <Number>, <Number> ]
SetBackgroundColor=SetBackgroundColor
SetBackgroundColorSyntax=SetBackgroundColor[ <Object>, "color" ]\n\
		SetBackgroundColor[ <Object>, <Red>, <Green>, <Blue> ]
SetCaption=SetCaption
SetCaptionSyntax=SetCaption[ <Object>, <Text> ]
SetColor=SetColor
SetColorSyntax=SetColor[ <Object>, "color" ]\n\
		SetColor[ <Object>, <Red>, <Green>, <Blue> ]
SetConditionToShowObject=SetConditionToShowObject
SetConditionToShowObjectSyntax=SetConditionToShowObject[ <Object>, <Condition> ]
SetCoords=SetCoords
SetCoordsSyntax=SetCoords[ <Point>, <x>, <y> ]
SetDynamicColor=SetDynamicColor
SetDynamicColorSyntax=SetDynamicColor[ <Object>, <Red>, <Green>, <Blue> ]\n\
		SetDynamicColor[ <Object>, <Red>, <Green>, <Blue>, <Opacity> ]
SetFilling=SetFilling
SetFillingSyntax=SetFilling[ <Object>, <Number> ]
SetFixed=SetFixed
SetFixedSyntax=SetFixed[ <Object>, <true | false> ]
SetLabelMode=SetLabelMode
SetLabelModeSyntax=SetLabelMode[ <Object>, <Number> ]
SetLayer=SetLayer
SetLayerSyntax=SetLayer[ <Object>, <Layer> ]
SetLineStyle=SetLineStyle
SetLineStyleSyntax=SetLineStyle[ <Line>, <Number> ]
SetLineThickness=SetLineThickness
SetLineThicknessSyntax=SetLineThickness[ <Line>, <Number> ]
SetPointSize=SetPointSize
SetPointSizeSyntax=SetPointSize[ <Point>, <Number> ]
SetPointStyle=SetPointStyle
SetPointStyleSyntax=SetPointStyle[ <Point>, <Number> ]
SetTooltipMode=SetTooltipMode
SetTooltipModeSyntax=SetTooltipMode[ <Object>, <Number> ]
SetValue=SetValue
SetValueSyntax=SetValue[ <Boolean>, <0|1> ]\n\
		SetValue[ <Object>, <Object> ]\n\
		SetValue[ <List>, <Number>, <Object> ]
SetVisibleInView=SetVisibleInView
SetVisibleInViewSyntax=SetVisibleInView[ <Object>, <View Number 1|2>, <Boolean> ]
Shear=Shear
ShearSyntax=Shear[ <Object>, <Line>, <Ratio> ]
ShortestDistance=ShortestDistance
ShortestDistanceSyntax=ShortestDistance[ <List of Segments>, <Start Point>, <End Point>, <Boolean Weighted> ]
ShowLabel=ShowLabel
ShowLabelSyntax=ShowLabel[ <Object>, <Boolean> ]
ShowLayer=ShowLayer
ShowLayerSyntax=ShowLayer[ <Number> ]
Shuffle=Shuffle
ShuffleSyntax=Shuffle[ <List> ]
ShuffleSyntaxCAS=Shuffle[ <List> ]
SigmaXX=SigmaXX
SigmaXXSyntax=SigmaXX[ <List of Points> ]\n\
		SigmaXX[ <List of Numbers> ]
SigmaXY=SigmaXY
SigmaXYSyntax=SigmaXY[ <List of Points> ]\n\
		SigmaXY[ <List of x-Coordinates>, <List of y-Coordinates> ]
SigmaYY=SigmaYY
SigmaYYSyntax=SigmaYY[ <List of Points> ]
Simplify=Simplify
SimplifySyntax=Simplify[ <Function> ]\n\
		Simplify[ <Text> ]
SimplifySyntaxCAS=Simplify[ <Function> ]
Slider=Slider
SliderSyntax=Slider[ <Min>, <Max>, <Increment>, <Speed>, <Width>, <Is Angle>, <Horizontal>, <Animating>, <Random> ]
Slope=Slope
SlopeSyntax=Slope[ <Line> ]
SlowPlot=SlowPlot
SlowPlotSyntax=SlowPlot[ <Function> ]
Solutions=Solutions
SolutionsSyntaxCAS=Solutions[ <Equation> ]\nSolutions[ <Equation>, <Variable> ]\nSolutions[ <Equation>, <Variable = starting value> ]\nSolutions[ <List of Equations>, <List of Variables> ]
Solve=Solve
SolveSyntaxCAS=Solve[ <Equation in x> ]\nSolve[ <Equation>, <Variable> ]\nSolve[ <Equation> , <Variable = starting value> ]\nSolve[ <List of Equations>, <List of Variables> ]
SolveODESyntaxCAS=SolveODE[ <Equation> ]\nSolveODE[ <Equation>, <Dependent Variable>, <Independent Variable> ]
Substitute=Substitute
SubstituteSyntaxCAS=Substitute[ <Expression>, <from>, <to> ]\n\
		Substitute[ <Expression>, <Substitution List> ]
Sum=Sum
SumSquaredErrors=SumSquaredErrors
SumSquaredErrorsSyntax=SumSquaredErrors[ <List of Points>, <Function> ]
SumSyntax=Sum[ <List> ]\n\
		Sum[ <List> , <Number of Elements> ]
SumSyntaxCAS=Sum[ <expression>, <variable>, <start value>, <end value> ]
SurfaceCartesian=Surface
# # continuous
TDistribution=TDistribution
TDistributionSyntax=TDistribution[ <Degrees of Freedom>, x ]\n\
		TDistribution[ <Degrees of Freedom>, x, <Boolean Cumulative>]\n\
		TDistribution[ <Degrees of Freedom>, <Variable Value> ]
TDistributionSyntaxCAS=TDistribution[ <Degrees of Freedom>, <Variable Value> ]
TMean2Estimate=TMean2Estimate
TMean2EstimateSyntax=TMean2Estimate[ <List of Sample Data 1>, <List of Sample Data 2>, <Level>, <Boolean Pooled> ]\n\
		TMean2Estimate[ <Sample Mean 1>, <Sample Standard Deviation 1>, <Sample Size 1>, <Sample Mean 2>, <Sample Standard Deviation 2>, <Sample Size 2>,  <Level>, <Boolean Pooled>]
TMeanEstimate=TMeanEstimate
TMeanEstimateSyntax=TMeanEstimate[ <List of Sample Data>, <Level>]\n\
		TMeanEstimate[ <Sample Mean>, <Sample Standard Deviation>, <Sample Size>, <Level>]
TTest=TTest
TTest2=TTest2
TTest2Syntax=TTest2[ <List of Sample Data 1>, <List of Sample Data 2>, <Tail>, <Boolean Pooled> ]\n\
		TTest2[ <Sample Mean 1>, <Sample Standard Deviation 1>, <Sample Size 1>, <Sample Mean 2>, <Sample Standard Deviation 2 >, <Sample Size 2>, <Tail>, <Boolean Pooled>]
TTestPaired=TTestPaired
TTestPairedSyntax=TTestPaired[ <List of Sample Data 1>, <List of Sample Data 2>, <Tail>]
TTestSyntax=TTest[ <List of Sample Data>, <Hypothesized Mean>, <Tail> ]\n\
		TTest[ <Sample Mean>, <Sample Standard Deviation>, <Sample Size>, <Hypothesized Mean>, <Tail>]
TableText=TableText
TableTextSyntax=TableText[ <List>, <List>, ... ]\n\
		TableText[ <List>, <List>, ..., <Alignment of Text> ]
Take=Take
TakeSyntax=Take[ <List> , <Start Position>, <End Position> ]\n\
		Take[ <Text> , <Start Position>, <End Position> ]
TakeSyntaxCAS=Take[ <List> ,<Start Position>, <End Position> ]
Tangent=Tangent
TangentSyntax=Tangent[ <Point>, <Conic> ]\n\
		Tangent[ <Point>, <Function> ]\n\
		Tangent[ <Point on Curve>, <Curve> ]\n\
		Tangent[ <x-Value>, <Function> ]\n\
		Tangent[ <Line>, <Conic> ]\n\
		Tangent[ <Circle>, <Circle> ]
TaylorSeries=TaylorPolynomial
TaylorSeriesSyntax=TaylorPolynomial[ <Function>, <x-Value>, <Order Number> ]
TaylorSeriesSyntaxCAS=TaylorPolynomial[ <Expression>, <x-Value>, <Order Number> ]\n\
		TaylorPolynomial[ <Expression>, <Variable>, <Variable-Value>, <Order Number> ]
Text=Text
TextSyntax=Text[ <Object> ]\n\
		Text[ <Object>, <Boolean for Substitution of Variables> ]\n\
		Text[ <Object>, <Point> ]\n\
		Text[ <Object>, <Point>, <Boolean for Substitution of Variables> ]\n\
		Text[ <Object>, <Point>, <Boolean for Substitution of Variables>, <Boolean for LaTeX formula> ]
TextToUnicode=TextToUnicode
TextToUnicodeSyntax=TextToUnicode[ <"Text"> ]
Textfield=InputBox
TextfieldSyntax=InputBox[]\n\
		InputBox[ <Linked Object> ]
TiedRank=TiedRank
TiedRankSyntax=TiedRank[ <List> ]
ToComplex=ToComplex
ToComplexSyntaxCAS=ToComplex[ <Vector> ]
ToExponential=ToExponential
ToExponentialSyntaxCAS=ToExponential[ < Complex Number> ]
ToPoint=ToPoint
ToPointSyntaxCAS=ToPoint[ <Complex Number> ]
ToPolar=ToPolar
ToPolarSyntaxCAS=ToPolar[ <Complex Number> ]\n\
		ToPolar[ <Vector> ]
ToolImage=ToolImage
ToolImageSyntax=ToolImage[ <Number> ]
Top=Top
Translate=Translate
# V2.5 changed
TranslateSyntax=Translate[ <Object>, <Vector> ]\n\
		Translate[ <Vector>, <Start Point> ]
Transpose=Transpose
TransposeSyntax=Transpose[ <Matrix> ]
TransposeSyntaxCAS=Transpose[ <Matrix> ]
TrapezoidalSum=TrapezoidalSum
TrapezoidalSumSyntax=TrapezoidalSum[ <Function>, <Start x-Value>, <End x-Value>, <Number of Trapezoids> ]
TravelingSalesman=TravelingSalesman
TravelingSalesmanSyntax=TravelingSalesman[ <List of Points> ]
Triangular=Triangular
TriangularSyntax=Triangular[ <Lower Bound>, <Upper Bound>, <Mode>, x ]\n\
		Triangular[ <Lower Bound>, <Upper Bound>, <Mode>, x, <Boolean Cumulative> ]\n\
		Triangular[ <Lower Bound>, <Upper Bound>, <Mode>, <Variable Value> ]
TrigCombine=TrigCombine
TrigCombineSyntaxCAS=TrigCombine[ <Expression> ]\n\
		TrigCombine[ <Expression>, <Target Function> ]
TrigExpand=TrigExpand
TrigExpandSyntaxCAS=TrigExpand[ <Expression> ]\n\
		TrigExpand[ <Expression>, <Target Function> ]\n\
		TrigExpand[ <Expression>, <Target Function>, <Target Variable> ]\n\
		TrigExpand[ <Expression>, <Target Function>, <Target Variable>, <Target Variable> ]
TrigSimplify=TrigSimplify
TrigSimplifySyntaxCAS=TrigSimplify[ <Expression> ]
TurningPoint=InflectionPoint
TurningPointSyntax=InflectionPoint[ <Polynomial> ]
UnicodeToLetter=UnicodeToLetter
UnicodeToLetterSyntax=UnicodeToLetter[ <Integer> ]
UnicodeToText=UnicodeToText
UnicodeToTextSyntax=UnicodeToText[ <List of Integers> ]
Uniform=Uniform
UniformSyntax=Uniform[ <Lower Bound>, <Upper Bound>, x ]\n\
		Uniform[ <Lower Bound>, <Upper Bound>, x, <Boolean Cumulative> ]\n\
		Uniform[ <Lower Bound>, <Upper Bound>, <Variable Value> ]
Union=Union
UnionSyntax=Union[ <List>, <List> ]\n\
		Union[ <Polygon>, <Polygon> ]
Unique=Unique
UniqueSyntax=Unique[ <List>]
UniqueSyntaxCAS=Unique[ <List> ]
UnitOrthogonalVector=UnitPerpendicularVector
UnitOrthogonalVectorSyntax=UnitPerpendicularVector[ <Line> ]\n\
		UnitPerpendicularVector[ <Segment> ]\n\
		UnitPerpendicularVector[ <Vector> ]
UnitOrthogonalVectorSyntaxCAS=UnitPerpendicularVector[ <Vector> ]
UnitVector=UnitVector
UnitVectorSyntax=UnitVector[ <Vector> ]\n\
		UnitVector[ <Line> ]\n\
		UnitVector[ <Segment> ]
UnitVectorSyntaxCAS=UnitVector[ <Vector> ]
UpdateConstruction=UpdateConstruction
UpdateConstructionSyntax=UpdateConstruction[]
UpperSum=UpperSum
UpperSumSyntax=UpperSum[ <Function>, <Start x-Value>, <End x-Value>, <Number of Rectangles> ]
Variance=Variance
VarianceSyntax=Variance[ <List of Numbers> ]
VarianceSyntaxCAS=Variance[ <List of Numbers> ]
Vector=Vector
VectorSyntax=Vector[ <Point> ]\n\
		Vector[ <Start Point>, <End Point> ]
Vertex=Vertex
VertexSyntax=Vertex[ <Conic> ]\n\
		Vertex[ <Polygon> ]\n\
		Vertex[ <Polygon>, <Index>]
VerticalText=VerticalText
VerticalTextSyntax=VerticalText[ <Text> ]
Voronoi=Voronoi
VoronoiSyntax=Voronoi[ <List of Points> ]
Weibull=Weibull
WeibullSyntax=Weibull[ <Shape>, <Scale>, x ]\n\
		Weibull[ <Shape>, <Scale>, x, <Boolean Cumulative> ]\n\
		Weibull[ <Shape>, <Scale>, <Variable Value> ]
WeibullSyntaxCAS=Weibull[ <Shape>, <Scale>, <Variable Value> ]
Zip=Zip
ZipSyntax=Zip[ <Expression>, <Var1>, <List1>, <Var2>, <List2>, ...]
Zipf=Zipf
ZipfSyntax=Zipf[ <Number of Elements>, <Exponent> ]\n\
		Zipf[ <Number of Elements>, <Exponent>, <Boolean Cumulative> ]\n\
		Zipf[ <Number of Elements>, <Exponent>, <Variable Value>, <Boolean Cumulative> ]
ZipfSyntaxCAS=Zipf[ <Number of Elements>, <Exponent>, <Variable Value>, <Boolean Cumulative> ]
ZoomIn=ZoomIn
ZoomInSyntax=ZoomIn[ <Scale Factor> ]\n\
		ZoomIn[ <Scale Factor>, <Center Point> ]\n\
		ZoomIn[ <Min x>, <Min y>, <Max x>, <Max y> ]
ZoomOut=ZoomOut
ZoomOutSyntax=ZoomOut[ <Scale Factor> ]\n\
		ZoomOut[ <Scale Factor>, <Center Point> ]
nPr=nPr
nPrSyntaxCAS=nPr[ <Number>, <Number> ]
