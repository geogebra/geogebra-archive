####
# Command translation table from GeoGebra to Maxima
# e.g. Factor[ 2(x+3) ] is translated to factor( 2*(x+3) );
###

Abs.1=if setp(%0) or listp(%0) then sqrt(sum(part(%0,i)^2,i,1,length(%0))) else abs(%0)
Length.3=first(quad\\_qags(sqrt(1+diff(%0,x)^2),x,%1,%2))
Length.4=first(quad\\_qags(sqrt(1+diff(%0,%1)^2),%1,%2,%3))
Argument.1=carg(%0)

#BinomCdf.3=sum((1-%1)^(%0-i)*(%1)^(i)*binomial(%0,i),i,0,%2), simpsum
#BinomCdf.2=makelist(ev(sum((1-%1)^(%0-i)*(%1)^(i)*binomial(%0,i),i,0,ind2), simpsum),ind2,0,%1)
Binomial.2=binomial(%0,%1)
#BinomPdf.3=(1-%1)^(%0-%2)*(%1)^(%2)*binomial(%0,%2)
#BinomPdf.2=makelist((1-%1)^(%0-i)*(%1)^(i)*binomial(%0,i),i,0,%1)

Cauchy.3=cdf\\_cauchy(%2,%0,%1)
Ceil.1=ceiling(%0)
CFactor.1=block([sol,realonlytemp:realonly], realonly:false, sol: solve(%0), realonly:realonlytmp,product((x-last(part(sol,i)))^part(multiplicities,i),i,1,length(sol)))
CFactor.2=block([sol,realonlytemp:realonly], realonly:false, sol: solve(%0,%1), realonly:realonlytmp,product((%1-last(part(sol,i)))^part(multiplicities,i),i,1,length(sol)))
ChiSquared.2=cdf\\_chi2(%1,%0)
Coefficients.1=coefflist(%0,x)
CommonDenominator.2=lcm(denom(%0),denom(%1))
Complex.2=(%0+%1*(%i))
ComplexPolar.2=(%0*cos(%1)+%0*%i*sin(%1))
ComplexRoot.1=block([realonlytmp, res], realonlytmp: realonly, realonly: false, res: solve(%0), realonly: realonlytmp, res)
Conjugate.1=realpart(%0)-imagpart(%0)*%i
Covariance.2=block([xdata,ydata,mux,muy], xdata:%0, ydata:%1, mux:mean(xdata), muy:mean(ydata), 1/length(xdata)*sum((part(xdata,i)-mux)*(part(ydata,i)-muy),i,1,length(xdata)))
Covariance.1=block([xdata,ydata,mux,muy, data], data:%0, xdata:makelist(part(part(data,i),1),i,1,length(data)), ydata:makelist(part(part(data,i),2),i,1,length(data)), mux:mean(xdata), muy:mean(ydata), 1/length(xdata)*sum((part(xdata,i)-mux)*(part(ydata,i)-muy),i,1,length(xdata)))
Cross.2=makelist(part(%0,mod(i,3)+1)*part(%1,mod(i+1,3)+1)-part(%0,mod(i+1,3)+1)*part(%1,mod(i,3)+1),i,[1,2,3])
CSolutions.1=flatten(stripequals(csolve(%0,x)))
CSolutions.2=stripequals(csolve(%0,%1))
CSolve.1=csolve(%0,x)
#CSolve.1=block([s, realonlytemp:realonly], realonly:false, s:solve(%0,x), realonly:realonlytemp, for i : 1 thru length (%rnum\\_list) do s : subst (simplode([t, i]), %rnum\\_list[i], s), return (if (length(s) = 1) then flatten(s) else (s)))
# Maxima always returns a set of solution-sets. If there's only 1 solution, 
# we should flatten it (MathPiper has flattened solution-lists!), otherwise we don't.
# Also, see the maxima-documentation about %rnum_list for the for-loop!
CSolve.2=csolve(%0,%1)
#CSolve.2=block([s, realonlytemp:realonly], realonly:false, s:solve(%0,%1), realonly:realonlytemp, for i : 1 thru length (%rnum\\_list) do s : subst (simplode([t, i]), %rnum\\_list[i], s), return (if (length(s) = 1) then flatten(s) else (s)))

Decimal.1=bfloat(%0)
Degree.1=degree(%0,x)
Delete.1=kill(%0)
Denominator.1=denom(%0)
Derivative.1=ggblexicalblock([x], diff(%0,x))
Derivative.2=ggblexicalblock([%1], diff(%0,%1))
Derivative.3=ggblexicalblock([%1], diff(%0,%1,%2))
Determinant.1=determinant(%0)
Dimension.1=length(%0)
Div.2=first(divide(%0, %1))
Division.2=divide(%0,%1)
Divisors.1=length(divisors(%0))
DivisorsList.1=divisors(%0)
DivisorsSum.1=divsum(%0)
Dot.2=sum(part(%0,i)*part(%1,i),i,1,length(%0))

Element.2=part(%0, %1)
Element.3=part(part( %0, %1 ), %2)
Expand.1=expand(%0)
ExpandComplex.1=trigrat(%0)
Exponential.2=cdf\\_exp(%1,%0)

Factor.1=factor(%0)
FDistribution.3=cdf\\_f(%2,%0,%1)
First.1=first(%0)
First.2=part(%0,makelist(i,i,1,%1))
Floor.1=floor(%0)
FractionalPart.1=%0-signum(%0)*floor(abs(%0))

Gamma.3=cdf\\_gamma(%2,%0,%1)
GCD.2=gcd(%0, %1)
GetPrecision.1=fpprec

HCF.2=gcd(%0, %1)

If.2=if (%0) then %1
If.3=if (%0) then %1 else %2
Imaginary.1=imagpart(%0)
ImplicitDerivative.3=-diff(%0,%1)/diff(%0,%2)
# TODO use this when we support constants of integration
#Integral.1=part(integrate(0=%0,x),2)

# for an explanation of intfudu, see http://www.geogebra.org/trac/ticket/501
Integral.1=block(r : intfudu(%0,x), return (if (r=false) then integrate(%0,x) else r))
Integral.2=block(r : intfudu(%0,%1), return (if (r=false) then integrate(%0,%1) else r))
Integral.4=integrate(%0,%1,%2,%3)
Intersect.2=stripequals(solve([%0,%1],[x,y]))
Invert.1=invert(%0)
IntegerPart.1=signum(%0)*floor(abs(%0))
IsPrime.1=primep(%0)

# TODO implement keep input like Hold in MathPiper
KeepInput.1=%0

Last.1=last(%0)
Last.2=part(reverse(%0),makelist(%1-i+1,i,1,%1))
LCM.2=lcm(%0, %1)
Ld.1=log(%0)/log(2)
LeftSide.1=part(%0,1)
Lg.1=log(%0)/log(10)
Limit.2=ggblexicalblock([x], limit(%0, x, %1))
Limit.3=ggblexicalblock([%1], limit(%0, %1, %2))
LimitAbove.2=ggblexicalblock([x], limit(%0,x,%1,plus))
LimitAbove.3=ggblexicalblock([%1], limit(%0,%1,%2,plus))
LimitBelow.2=ggblexicalblock([x], limit(%0,x,%1,minus))
LimitBelow.3=ggblexicalblock([%1], limit(%0,%1,%2,minus))
Ln.1=log(%0)
Log.1=log\\_a(%0,10)
Log.2=log(%1)/log(%0)

Max.N=lmax([%])
Mean.1=mean(%0)
Median.1=median(%0)
Min.N=lmin([%])
Mod.2=last(divide(%0, %1))

NextPrime.1=nextprime(%0)
NIntegral.3=block([result, d1,d2,d3],if %1=-inf or %2=inf then [result,d1,d2,d3]:(quad\\_qagi(%0,x,subst(-inf=minf,%1),%2)) else [result,d1,d2,d3]:(quad\\_qags(%0,x,%1,%2)),result)
NIntegral.4=block([result, d1,d2,d3],if %2=-inf or %3=inf then [result,d1,d2,d3]:(quad\\_qagi(%0,%1,subst(-inf=minf,%2),%3)) else [result,d1,d2,d3]:(quad\\_qags(%0,%1,%2,%3)),result)
Normal.3=cdf\\_normal(%2,%0,%1)
#NormalCdf.3=integrate(exp(-(xvar-%0)^2/(2*(%1)^2))/(sqrt(2*%pi)*(%1)),xvar,minf,%2)
#NormalCdf.4=integrate(exp(-(xvar-%0)^2/(2*(%1)^2))/(sqrt(2*%pi)*(%1)),xvar,%2,%3)
nPr.2=permutation(%0,%1)
NRoot.2=(if sign((-1)^(%1))=1 then abs(%0)^(1/%1) else (%0)^(1/%1))
NSolve.1=realroots(%0)
NRoots.1=realroots(%0)
NSolutions.1=block([roots:realroots(%0)],makelist(last(part(roots,i)),i,1,length(roots)))
Numerator.1=num(%0)
#ratsimp needed so that eg Numeric(1.01^8) gives the correct answer
Numeric.1=bfloat(ratsimp(%0)) 
Numeric.2=block([oldPrec, ret], simp:false, oldPrec:fpprec, fpprec:%1, fpprintprec:%1, ret:bfloat(ratsimp(%0)), fpprec:oldPrec, fpprintprec:oldPrec, ret)
N.1=bfloat(ratsimp(%0))
N.2=block([oldPrec, ret], simp:false, oldPrec:fpprec, fpprec:%1, fpprintprec:%1, ret:bfloat(ratsimp(%0)), fpprec:oldPrec, fpprintprec:oldPrec, ret)

OrthogonalVector.1=[-part(%0, 2), part(%0, 1)]

PartialFractions.1=partfrac(%0,x)
Pascal.4=if (%3) then cdf\\_negative\\_binomial(%2,%0,%1) else pdf\\_negative\\_binomial(%2,%0,%1)
PreviousPrime.1=prevprime(%0)
PrimeFactors.1=block(list:[],  number:%0, while number>1 do block(temp:2,while mod(number,temp)>0 do temp: temp+1, list : append(list,[temp]), number: number/temp), list)
Product.1=product(%0[i],i,1,length(%0)), simpproduct
Product.4=product(%0,%1,%2,%3), simpproduct
Prog.1=block(%0);
ProperFraction.1=ev(signum(%0)*floor(abs(%0)),simp)+ev(ratsimp(%0-signum(%0)*floor(abs(%0))),simp)

Random.2=(%0+random(%1-%0+1))
RandomBinomial.2=random\\_binomial(%0,%1)
RandomElement.1=part(%0,random\\_discrete\\_uniform(length(%0)))
RandomPoisson.1=random\\_poisson(%0)
RandomNormal.2=random\\_normal(%0,%1)
RandomPolynomial.3=sum(%1+random(%2-%1+1)*x^i,i,0,%0)
RandomPolynomial.4=sum(%2+random(%3-%2+1)*%0^i,i,0,%1)
Rank.1=rank(%0)
Rationalize.1=ratsimp(%0)
Real.1=realpart(%0)
# if %0 is a list, we need to flatten it first.
RightSide.1=block([x: %0], return (if (length(x) = 1) then part(first(x), 2) else (part(x, 2))))
Root.1=realroots(%0)
ReducedRowEchelonForm.1=rref(%0)

Sample.2=block( [nlength, sourcelist], sourcelist:%0, nlength:length(sourcelist), part(sourcelist,makelist(random\\_discrete\\_uniform(nlength),i,1,%1)))
Sample.3=if (not(%2)) then part(random\\_permutation(%0),makelist(i,i,1,%1)) else block( [nlength, sourcelist], sourcelist:%0, nlength:length(sourcelist), part(sourcelist,makelist(random\\_discrete\\_uniform(nlength),i,1,%1)))
SampleVariance.1=var1(%0)
SampleSD.1=std1(%0)
Sequence.4=makelist(%0,%1,%2,%3)
Sequence.3=makelist(%0,x,%1,%2)
SetPrecision.1=block(fpprec:%0,fpprintprec:%0)
SD.1=std(%0)
Shuffle.1=random\\_permutation(%0)
Sign.1=block([tmp:sign(%0)], if (tmp=pos or tmp=pz) then 1 else (if (tmp=zero) then 0 else (if (tmp=neg or tmp=nz) then -1 else Sgn(%0))))
Simplify.1=ratsimp(%0)
SimplifyFull.1=ratsimp(trigsimp(%0))
# Maxima always returns a set of solution-sets. If there's only 1 solution, 
# we should flatten it (MathPiper has flattened solution-lists!), otherwise we don't.
# Also, see the maxima-documentation about %rnum_list for the for-loop!
Solutions.1=stripequals(block([s : solve(%0, x)], for i : 1 thru length (%rnum\\_list) do s : subst (simplode([t, i]), %rnum\\_list[i], s), return (if (length(s) = 1) then flatten(s) else (s))))
Solutions.2=stripequals(block([s : solve(%0, %1)], for i : 1 thru length (%rnum\\_list) do s : subst (simplode([t, i]), %rnum\\_list[i], s), return (if (length(s) = 1) then flatten(s) else (s))))
Solve.1=block([s : solve(%0, x)], for i : 1 thru length (%rnum\\_list) do s : subst (simplode([t, i]), %rnum\\_list[i], s), return (if (length(s) = 1) then flatten(s) else (s)))
Solve.2=block([s : solve(%0, %1)], for i : 1 thru length (%rnum\\_list) do s : subst (simplode([t, i]), %rnum\\_list[i], s), return (if (length(s) = 1) then flatten(s) else (s)))
SolveODE.1=ode2('diff(y,x) - (%0),y,x) 
SolveODE.3=ode2('diff(%1,%2) - (%0),%1,%2) 
Sqrt.1=sqrt(%0)
#TODO: make substitute work for equation results
# substitute list of equations, e.g. Substitute[x + 5,  {x=-2, x=2}] gives {3, 7}
#Substitute.2=block(local(%1), map( lambda([eqn], subst(eqn, %0)), %1))
Substitute.2=block(local(c,equations), c:[], equations:(%1), equations: if listp(equations) or setp(equations) then equations else [equations], for s in equations do c:cons(subst(s,%0),c), if length(c)=1 then first(reverse(c)) else reverse(c))
Substitute.3=block(local(c,substitutions), c:[], substitutions:(%2), substitutions: if listp(substitutions) or setp(substitutions) then substitutions else [substitutions], for s in substitutions do c:cons(subst(s,%1,%0),c), if length(c)=1 then first(reverse(c)) else reverse(c))
#Substitute.3=subst(%2, %1 ,%0)
#psubst doesn't work with simp:false (psubst([a=2,b=3],a+3)) gives 5 not 2+3)
#SubstituteParallel.2=psubst(ev(makelist(%0[i][1]=%0[i][2],i,1,length(%0)),simp),%1)
#SubstituteParallel.2=subst(ev(makelist(%0[i][1]=%0[i][2],i,1,length(%0)),simp),%1)
#f%holdPar: needed for the substitution to be parallel
SubstituteParallel.2=subst(ev(makelist(f%holdPar[%0[i][1]]=%0[i][2],i,1,length(%0)),simp),subst(ev(makelist(%0[i][1]=f%holdPar[%0[i][1]],i,1,length(%0)),simp),%1))
Sum.1=sum(%0[i],i,1,length(%0)), simpsum
Sum.4=sum(%0,%1,%2,%3), simpsum

Take.3=part(%0,makelist(i,i,%1,%2))
Taylor.3=taylor(%0,x,%1,%2) 
Taylor.4=taylor(%0,%1,%2,%3)
TDistribution.2=cdf\\_student\\_t(%1,%0)
ToBinomial.1=realpart(%0)+%i*imagpart(%0) 
ToPolar.1=block([r,phi], r: ev(abs(%0),simp), phi: ev(carg(%0),simp), r*cos(phi)+r*%i*sin(phi))
ToExponential.1=polarform(%0)
Transpose.1=transpose(%0)

Unique.1=unique(%0)
UnitOrthogonalVector.1=unitvector([-part(%0, 2), part(%0, 1)])
UnitVector.1=unitvector(%0)

Variance.1=var(%0)

Weibull.3=cdf\\_weibull(%2,%0,%1)

Zipf.4=block([s:%1], if (%3) then (sum(1/(i^s),i,1,%2)/sum(1/(i^s),i,1,%0)) else 1/((%2)^s*sum(1/(i^s),i,1,%0)))