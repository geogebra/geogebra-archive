####
# Command translation table from GeoGebra to MathPiper
# e.g. Expand[ 2*(x+3) ] is translated to Expand( 2*(x+3) )
###
Derivative.1=(D(x) %0)
Derivative.2=(D(%1) %0)
Derivative.3=(D(%1, %2) %0)
Expand.1=ExpandBrackets(%0)
Factor.1=Factor(Rationalize(%0))
Floor.1=Floor(N(%1))
Integral.1=AntiDeriv(x, %0)
Integral.2=AntiDeriv(%1, %0)
Integral.4=(Integrate(%1, %2, %3) %0)
Limit.3=(Limit(%1, %2) %0)
Limit.4=(Limit(%1, %2, %3) %0)
Numeric.1=N(%0)
Numeric.2=N(%0, %1)
Simplify.1=Simplify(%0)
Solve.1=Solve(%0, x)
Solve.2=Solve(%0, %1)
Sum.4=Sum(%1, %2, %3, %0)
Substitute.3=(Subst(%1, %2) %0)

# documentation for later
Derivative.Syntax=Derivative[ <function>, <variable> ]\nDerivative[ <function>, <variable>, <n> ]
Expand.Syntax=Expand[ <expression> ]
Factor.Syntax=Factor[ <expression> ]
Integral.Syntax=Integral[ <function>, <variable> ]\nIntegral[ <function>, <variable>, <x1>, <x2> ]
Limit.Syntax=Limit[ <expression>, <variable>, <value or Infinity> ]\nLimit[ <expression>, <variable>, <value or Infinity>, <direction Left or Right> ]
Numeric.Syntax=Numeric[ <expression> ]\nNumeric[ <expression>, <precision> ]
Simplify.Syntax=Simplify[ <expression> ]
Solve.Syntax=Solve[ <equation in x> ]\nSolve[ <equation>, <variable> ]
Sum.Syntax=Sum[ <expression>, <variable>, <start value>, <end value> ]
Substitute.Syntax=Substitute[ <expression>, <from>, <to> ]