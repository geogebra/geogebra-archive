/* Generated By:JavaCC: Do not edit this line. Parser.java */
package geogebra.kernel.parser;

import geogebra.*;
import geogebra.main.*;
import geogebra.kernel.*;
import geogebra.kernel.arithmetic.*;
import geogebra.kernel.arithmetic3D.*;
import java.util.*;

public class Parser implements ParserConstants {

    private Kernel kernel;
    private Construction cons;
    private Application app;
    private boolean MathPiperParsing = false;

    public Parser(Kernel kernel, Construction cons) {
         this ( new java.io.StringReader("") ); // dummy stream for parser initing
         this.kernel = kernel;
         this.cons = cons;
         app = kernel.getApplication();
    }

    // reset for new parsing
    public void myReInit(String parseString) {
        ReInit(new java.io.StringReader(parseString));
        MathPiperParsing = false;
    }

    /**
     * Parses a String and returns a ValidExpression Object     
     */
    public ValidExpression parseGeoGebraExpression(String parseString) throws ParseException {
        myReInit( parseString );
        return buildValidExpression();
    }

     /**
     * Parses a String and returns a ValidExpression Object     
     */
    public ValidExpression parseGeoGebraCAS(String parseString) throws ParseException {
        myReInit( parseString );
        return buildCASExpression();
    }

    /**
     * Parses a MathPiper String and returns a ValidExpression Object     
     */
    public ValidExpression parseMathPiper(String parseString) throws ParseException {
        myReInit( parseString );
        // parse 3*x + 4*y == 2 as an equation 3x + 4y = 2
        MathPiperParsing = true;
        return buildMathPiperExpression();
    }

    /**
     * Parses a String and returns a Function Object     
     */
    public Function parseFunction(String parseString)
    throws ParseException {
        myReInit( parseString );
        return function();
    }

    /**
     * Parses a String and returns an ExpressionNode Object     
     */
    public ExpressionNode parseCmdExpression(String parseString)
    throws ParseException {
        myReInit(parseString );
        return cmdexpression();
    }

    /**
     * Parses a String and returns an ExpressionNode Object     
     */
    public ExpressionNode parseExpression(String parseString)
    throws ParseException {
        myReInit( parseString);
        return expression();
    }

    /**
     * Parses a String if it is a label
     */
    public String parseLabel(String parseString)
    throws ParseException {
        myReInit(parseString );
        return label();
    }

  final public String label() throws ParseException {
    Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SPREADSHEET_LABEL:
      t = jj_consume_token(SPREADSHEET_LABEL);
      break;
    case LABEL:
      t = jj_consume_token(LABEL);
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
           {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

/**
 * for GeoGebra input field
 * validexpression =    
 *                  labellist() = command() |           // e.g. {A,B} = Intersect[c, g]
 *                      <LABEL> : parametric() |        // e.g. X = (3,2) + t (2,1)              
 *                      <LABEL> = expression()      // arithmetic expression of floats, vectors and vars
 *                      <LABEL> : equation()        // equation in x an y
 						<LABEL>(x) = function()   // function in x, e.g. f(x) = 3x^3 - sqrt(x)
 */
  final public ValidExpression buildValidExpression() throws ParseException {
    ValidExpression ve;
    ExpressionNode lhs, rhs;
    Token l = new Token();
    Vector labels = new Vector();
    if (jj_2_1(2147483647)) {
      ve = functionExpressionnode();
    } else if (jj_2_2(3)) {
      ve = spreadsheetRange();
    } else if (jj_2_3(2147483647)) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SPREADSHEET_LABEL:
        l = jj_consume_token(SPREADSHEET_LABEL);
        break;
      case LABEL:
        l = jj_consume_token(LABEL);
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(90);
      ve = parametric();
    } else if (jj_2_4(2147483647)) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SPREADSHEET_LABEL:
        l = jj_consume_token(SPREADSHEET_LABEL);
        break;
      case LABEL:
        l = jj_consume_token(LABEL);
        break;
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(90);
      ve = equation();
    } else if (jj_2_5(2147483647)) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SPREADSHEET_LABEL:
        l = jj_consume_token(SPREADSHEET_LABEL);
        break;
      case LABEL:
        l = jj_consume_token(LABEL);
        break;
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 90:
        jj_consume_token(90);
        break;
      case ASSIGNMENT:
        jj_consume_token(ASSIGNMENT);
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      ve = expression();
    } else if (jj_2_6(2147483647)) {
      lhs = expressionnode();
      jj_consume_token(EQUAL);
      rhs = expressionnode();
            // maybe expression
            if (lhs.isSingleVariable() && !rhs.includesPolynomial()) {
                // it's an expression
                ve = rhs;
                ve.setLabel(((Variable)lhs.evaluate()).getName());
            } else {
                // it's a polynomial
                ve = new Equation(kernel, lhs, rhs);
            }
    } else if (jj_2_7(2147483647)) {
      ve = cmdexpression();
    } else if (jj_2_8(2147483647)) {
      labels = labellist();
      jj_consume_token(EQUAL);
      ve = command();
    } else if (jj_2_9(2147483647)) {
      ve = cartesianvector_special();
    } else if (jj_2_10(2147483647)) {
      ve = polarvector_special();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EOL:
      jj_consume_token(EOL);
      break;
    case 0:
      jj_consume_token(0);
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        if (labels.size() > 0) ve.addLabel(labels);  // command with ouput labels
        else if (ve.labelCount() == 0) ve.addLabel(l.image);  // standard case                         
        {if (true) return ve;}
    throw new Error("Missing return statement in function");
  }

/**
 *  parse GeoGebra CAS input
 */
  final public ValidExpression buildCASExpression() throws ParseException {
    ValidExpression ve;
    ExpressionNode lhs, rhs;
    Token l = new Token();
    Vector labels = new Vector();
    if (jj_2_11(2147483647)) {
      ve = casFunction();
    } else if (jj_2_12(2147483647)) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SPREADSHEET_LABEL:
        l = jj_consume_token(SPREADSHEET_LABEL);
        break;
      case LABEL:
        l = jj_consume_token(LABEL);
        break;
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(ASSIGNMENT);
      ve = expressionnode();
    } else if (jj_2_13(2147483647)) {
      ve = equation();
    } else if (jj_2_14(2147483647)) {
      ve = expressionnode();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EOL:
      jj_consume_token(EOL);
      break;
    case 0:
      jj_consume_token(0);
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        // remember label      
        if (l.image != null)
                ve.addLabel(l.image);
        {if (true) return ve;}
    throw new Error("Missing return statement in function");
  }

/**
 * convert MathPiper String to GeoGebra string
 */
  final public ValidExpression buildMathPiperExpression() throws ParseException {
    ValidExpression ve;
    ExpressionNode lhs, rhs;
    Token l = new Token();
    Vector labels = new Vector();
    if (jj_2_15(2147483647)) {
      ve = MathPiperSolveResult();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NOT:
      case PLUS:
      case MINUS:
      case FACTORIAL:
      case UNDEFINED:
      case PI:
      case E:
      case DEGREE:
      case INFINITY:
      case RAD:
      case TRUE:
      case FALSE:
      case VARX:
      case VARY:
      case FLOAT:
      case EFLOAT:
      case SPREADSHEET_LABEL:
      case LABEL:
      case X_FUNC:
      case Y_FUNC:
      case Z_FUNC:
      case COS_FUNC:
      case SIN_FUNC:
      case TAN_FUNC:
      case ACOS_FUNC:
      case ASIN_FUNC:
      case ATAN_FUNC:
      case COSH_FUNC:
      case SINH_FUNC:
      case TANH_FUNC:
      case ACOSH_FUNC:
      case ASINH_FUNC:
      case ATANH_FUNC:
      case EXP_FUNC:
      case LOG_FUNC:
      case LD_FUNC:
      case LG_FUNC:
      case SQRT_FUNC:
      case CBRT_FUNC:
      case ABS_FUNC:
      case SGN_FUNC:
      case FLOOR_FUNC:
      case CEIL_FUNC:
      case ROUND_FUNC:
      case GAMMA_FUNC:
      case RANDOM_FUNC:
      case FUNCTION_LABEL:
      case TEXT:
      case 91:
      case 97:
        // try to parse MathPiper string as standard GeoGebra expression 
                ve = expressionnode();
        break;
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EOL:
      jj_consume_token(EOL);
      break;
    case 0:
      jj_consume_token(0);
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        {if (true) return ve;}
    throw new Error("Missing return statement in function");
  }

/**
 * convert Solve results like {x==5, x==7} to simple list {5, 7} 
 */
  final public ValidExpression MathPiperSolveResult() throws ParseException {
        ExpressionValue ev;
        MyList myList;
    if (jj_2_16(5)) {
      jj_consume_token(91);
      jj_consume_token(92);
           {if (true) return new MyList(kernel);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 91:
        jj_consume_token(91);
        casLabel();
        jj_consume_token(EQUAL_BOOLEAN);
        ev = plusminusnode();
            myList = new MyList(kernel);
            myList.addListElement(ev);
        label_1:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 93:
            ;
            break;
          default:
            jj_la1[10] = jj_gen;
            break label_1;
          }
          jj_consume_token(93);
          casLabel();
          jj_consume_token(EQUAL_BOOLEAN);
          ev = plusminusnode();
                myList.addListElement(ev);
        }
        jj_consume_token(92);
       {if (true) return myList;}
        break;
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

/**
 * (<VARX> | <VARY> | <LABEL> | <SPREADSHEET_LABEL>) 
 */
  final public void casLabel() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VARX:
      jj_consume_token(VARX);
      break;
    case VARY:
      jj_consume_token(VARY);
      break;
    case LABEL:
      jj_consume_token(LABEL);
      break;
    case SPREADSHEET_LABEL:
      jj_consume_token(SPREADSHEET_LABEL);
      break;
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/**
 * command =     <LABEL> [ argument (, argument)* ]  
 */
  final public Command command() throws ParseException {
    Command c;
    Token t;
    ExpressionNode en;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SPREADSHEET_LABEL:
    case LABEL:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SPREADSHEET_LABEL:
        t = jj_consume_token(SPREADSHEET_LABEL);
        break;
      case LABEL:
        t = jj_consume_token(LABEL);
        break;
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                c = new Command(kernel, t.image, true );
      jj_consume_token(94);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NOT:
      case PLUS:
      case MINUS:
      case FACTORIAL:
      case UNDEFINED:
      case PI:
      case E:
      case DEGREE:
      case INFINITY:
      case RAD:
      case TRUE:
      case FALSE:
      case VARX:
      case VARY:
      case FLOAT:
      case EFLOAT:
      case SPREADSHEET_LABEL:
      case LABEL:
      case X_FUNC:
      case Y_FUNC:
      case Z_FUNC:
      case COS_FUNC:
      case SIN_FUNC:
      case TAN_FUNC:
      case ACOS_FUNC:
      case ASIN_FUNC:
      case ATAN_FUNC:
      case COSH_FUNC:
      case SINH_FUNC:
      case TANH_FUNC:
      case ACOSH_FUNC:
      case ASINH_FUNC:
      case ATANH_FUNC:
      case EXP_FUNC:
      case LOG_FUNC:
      case LD_FUNC:
      case LG_FUNC:
      case SQRT_FUNC:
      case CBRT_FUNC:
      case ABS_FUNC:
      case SGN_FUNC:
      case FLOOR_FUNC:
      case CEIL_FUNC:
      case ROUND_FUNC:
      case GAMMA_FUNC:
      case RANDOM_FUNC:
      case FUNCTION_LABEL:
      case TEXT:
      case 91:
      case 97:
        en = cmdexpression();
                                         c.addArgument( en );
        break;
      default:
        jj_la1[14] = jj_gen;
        ;
      }
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 93:
          ;
          break;
        default:
          jj_la1[15] = jj_gen;
          break label_2;
        }
        jj_consume_token(93);
        en = cmdexpression();
                                             c.addArgument( en );
      }
      jj_consume_token(95);
              {if (true) return c;}
      break;
    case FUNCTION_LABEL:
      t = jj_consume_token(FUNCTION_LABEL);
                c = new Command(kernel, t.image.substring(0,t.image.length()-1), true );
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NOT:
      case PLUS:
      case MINUS:
      case FACTORIAL:
      case UNDEFINED:
      case PI:
      case E:
      case DEGREE:
      case INFINITY:
      case RAD:
      case TRUE:
      case FALSE:
      case VARX:
      case VARY:
      case FLOAT:
      case EFLOAT:
      case SPREADSHEET_LABEL:
      case LABEL:
      case X_FUNC:
      case Y_FUNC:
      case Z_FUNC:
      case COS_FUNC:
      case SIN_FUNC:
      case TAN_FUNC:
      case ACOS_FUNC:
      case ASIN_FUNC:
      case ATAN_FUNC:
      case COSH_FUNC:
      case SINH_FUNC:
      case TANH_FUNC:
      case ACOSH_FUNC:
      case ASINH_FUNC:
      case ATANH_FUNC:
      case EXP_FUNC:
      case LOG_FUNC:
      case LD_FUNC:
      case LG_FUNC:
      case SQRT_FUNC:
      case CBRT_FUNC:
      case ABS_FUNC:
      case SGN_FUNC:
      case FLOOR_FUNC:
      case CEIL_FUNC:
      case ROUND_FUNC:
      case GAMMA_FUNC:
      case RANDOM_FUNC:
      case FUNCTION_LABEL:
      case TEXT:
      case 91:
      case 97:
        en = cmdexpression();
                                          c.addArgument( en );
        break;
      default:
        jj_la1[16] = jj_gen;
        ;
      }
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 93:
          ;
          break;
        default:
          jj_la1[17] = jj_gen;
          break label_3;
        }
        jj_consume_token(93);
        en = cmdexpression();
                                             c.addArgument( en );
      }
      jj_consume_token(96);
              {if (true) return c;}
      break;
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/**
 * labellist =    { <LABEL> (, <LABEL>)* }  
 */
  final public Vector labellist() throws ParseException {
    Token t;
    Vector labels;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 91:
      jj_consume_token(91);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SPREADSHEET_LABEL:
        t = jj_consume_token(SPREADSHEET_LABEL);
        break;
      case LABEL:
        t = jj_consume_token(LABEL);
        break;
      default:
        jj_la1[19] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
            labels = new Vector(); labels.add(t.image);
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 93:
          ;
          break;
        default:
          jj_la1[20] = jj_gen;
          break label_4;
        }
        jj_consume_token(93);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SPREADSHEET_LABEL:
          t = jj_consume_token(SPREADSHEET_LABEL);
          break;
        case LABEL:
          t = jj_consume_token(LABEL);
          break;
        default:
          jj_la1[21] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
                                                   labels.add(t.image);
      }
      jj_consume_token(92);
      break;
    case SPREADSHEET_LABEL:
    case LABEL:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SPREADSHEET_LABEL:
        t = jj_consume_token(SPREADSHEET_LABEL);
        break;
      case LABEL:
        t = jj_consume_token(LABEL);
        break;
      default:
        jj_la1[22] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
            labels = new Vector(); labels.add(t.image);
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 93:
          ;
          break;
        default:
          jj_la1[23] = jj_gen;
          break label_5;
        }
        jj_consume_token(93);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SPREADSHEET_LABEL:
          t = jj_consume_token(SPREADSHEET_LABEL);
          break;
        case LABEL:
          t = jj_consume_token(LABEL);
          break;
        default:
          jj_la1[24] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
                                                   labels.add(t.image);
      }
      break;
    default:
      jj_la1[25] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
       {if (true) return labels;}
    throw new Error("Missing return statement in function");
  }

/**
 * parametric =   <PARAMETRICVAR> = vector + <LABEL> * vector  |
 *                <PARAMETRICVAR> = vector - <LABEL> * vector |
 */
  final public Parametric parametric() throws ParseException {
    ExpressionValue P, v;
    ExpressionValue temp;
    Token s, par;
    jj_consume_token(LABEL);
    jj_consume_token(EQUAL);
    P = enterm();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
      s = jj_consume_token(PLUS);
      break;
    case MINUS:
      s = jj_consume_token(MINUS);
      break;
    default:
      jj_la1[26] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    par = jj_consume_token(LABEL);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MULTIPLY:
      jj_consume_token(MULTIPLY);
      break;
    default:
      jj_la1[27] = jj_gen;
      ;
    }
    v = expression();
            if (s.kind == MINUS)
                v = new ExpressionNode(kernel, new MyDouble(kernel, -1.0d), ExpressionNode.MULTIPLY, v);
            {if (true) return new Parametric(kernel, P, v, par.image );}
    throw new Error("Missing return statement in function");
  }

/** NOT USED BY NOW
 * normalvectorform =   <PARAMETRICVAR> vector  = vector 
 
NormalVectorForm normalvectorform():
{         
    ExpressionNode left, right;
    ExpressionValue temp;
}
{    
    <PARAMETRICVAR> (<MULTIPLY>)? left = enterm()  <EQUAL> right = expressionnode()           
         {                        
            // check if left is VectorValue and right is NumberValue
            temp = left.evaluate();
            if (!(temp instanceof VectorValue)) {
                String [] str = { "VectorExpected", temp.toString() };
                throw new MyParseError(app, str);
            }

            temp = right.evaluate();
            if (!(temp instanceof NumberValue)) {
                String [] str = { "NumberExpected", temp.toString() };
                throw new MyParseError(app, str);
            }        
            
            return new NormalVectorForm( left, right );                
         }   
}
*/

/******************************************************************
 * ARTIHMETIC FOR NUMBERS AND 2D VECTORS WITH VARIABLES
 * plus
 * ARTIHMETIC FOR POLYNOMIALS WITH VARIABLES "x" AND "y"
 * exponents must be integers >= 0
 * divisors must be simplifyable to numbers
 ******************************************************************/


/**
 * equation =       expression = expression
 */
  final public Equation equation() throws ParseException {
    ExpressionNode lhs, rhs;
    lhs = expressionnode();
    jj_consume_token(EQUAL);
    rhs = expressionnode();
            {if (true) return new Equation(kernel, lhs, rhs);}
    throw new Error("Missing return statement in function");
  }

/**
 * expression = expressionnode
 */
  final public ExpressionNode expression() throws ParseException {
    ExpressionNode rhs;
    rhs = expressionnode();
        if (rhs.includesPolynomial()) {
                // TODO: remove
                System.out.println("rhs includes polynomial:  " + rhs);

                {if (true) throw new MyError(app, "IncompleteEquation");}
        }

        // since v3.0: commands have to take care of resolving the variables of 
        // their arguments on their own, e.g. Sequence[ (i, i^2), i , 1, 10 ]       
                //rhs.resolveVariables();
        {if (true) return rhs;}
    throw new Error("Missing return statement in function");
  }

/**
 * cmdexpression = expressionnode 
 * (may only return Function)
 */
  final public ExpressionNode cmdexpression() throws ParseException {
    ExpressionValue ev;
    ExpressionNode en;
    if (jj_2_17(2147483647)) {
      ev = equation();
                // TODO: remove
                {if (true) return new ExpressionNode(kernel, ev);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NOT:
      case PLUS:
      case MINUS:
      case FACTORIAL:
      case UNDEFINED:
      case PI:
      case E:
      case DEGREE:
      case INFINITY:
      case RAD:
      case TRUE:
      case FALSE:
      case VARX:
      case VARY:
      case FLOAT:
      case EFLOAT:
      case SPREADSHEET_LABEL:
      case LABEL:
      case X_FUNC:
      case Y_FUNC:
      case Z_FUNC:
      case COS_FUNC:
      case SIN_FUNC:
      case TAN_FUNC:
      case ACOS_FUNC:
      case ASIN_FUNC:
      case ATAN_FUNC:
      case COSH_FUNC:
      case SINH_FUNC:
      case TANH_FUNC:
      case ACOSH_FUNC:
      case ASINH_FUNC:
      case ATANH_FUNC:
      case EXP_FUNC:
      case LOG_FUNC:
      case LD_FUNC:
      case LG_FUNC:
      case SQRT_FUNC:
      case CBRT_FUNC:
      case ABS_FUNC:
      case SGN_FUNC:
      case FLOOR_FUNC:
      case CEIL_FUNC:
      case ROUND_FUNC:
      case GAMMA_FUNC:
      case RANDOM_FUNC:
      case FUNCTION_LABEL:
      case TEXT:
      case 91:
      case 97:
        // expression 
            en = expressionnode();
        if (en.includesPolynomial()) {
                if (en.isFunctionInX())
                        {if (true) return new ExpressionNode(kernel, new Function(en));}
                else
                        {if (true) throw new MyError(app, "IncompleteEquation");}
        }

        // since v3.0: commands have to take care of resolving the variables of 
        // their arguments on their own, e.g. Sequence[ i^2, i , 1, 10 ]
        // rhs.resolveVariables();  
        {if (true) return en;}
        break;
      default:
        jj_la1[28] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

/**
 * function = functionExpressionnode 
 */
  final public Function function() throws ParseException {
    ExpressionNode rhs;
    Token l = null;
    Function f;
    // f(x) =  x^2 + 3	
                     rhs = functionExpressionnode();
                if (rhs.getLeft() instanceof Function) {
                        f = (Function) rhs.getLeft();
                }
                else {
                        f = new Function(rhs);
                    }
                    f.setLabel(rhs.getLabel());
                    {if (true) return f;}
    throw new Error("Missing return statement in function");
  }

/**
 * function = 	label(x) = expressionnode 
 * note: may also include commands in expressionnode
 */
  final public ExpressionNode functionExpressionnode() throws ParseException {
    ExpressionNode rhs;
    Token l = null;
    Token var;
    // f(x) =  x^2 + 3	
               l = jj_consume_token(FUNCTION_LABEL);
    jj_consume_token(VARX);
    jj_consume_token(96);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQUAL:
      jj_consume_token(EQUAL);
      break;
    case ASSIGNMENT:
      jj_consume_token(ASSIGNMENT);
      break;
    default:
      jj_la1[29] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    rhs = expressionnode();
                String label = l.image.substring(0,l.image.length()-1);

                // convert to function if not only command
                if (!(rhs.getLeft() instanceof Command)) {
                    Function fun = new Function(rhs);
                    fun.setLabel(label);
                        rhs = new ExpressionNode(kernel, fun);
                }

                rhs.setLabel(label);
                {if (true) return rhs;}
    throw new Error("Missing return statement in function");
  }

/**
 * CAS function = 	label(x) := expressionnode 
 */
  final public Function casFunction() throws ParseException {
    ExpressionNode rhs;
    Token funName = null;
    Token varName = null;
    Token var;
    // f(a) :=  a^2 + 3	
               funName = jj_consume_token(FUNCTION_LABEL);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VARX:
      varName = jj_consume_token(VARX);
      break;
    case VARY:
      varName = jj_consume_token(VARY);
      break;
    case SPREADSHEET_LABEL:
      varName = jj_consume_token(SPREADSHEET_LABEL);
      break;
    case LABEL:
      varName = jj_consume_token(LABEL);
      break;
    default:
      jj_la1[30] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(96);
    jj_consume_token(ASSIGNMENT);
    rhs = expressionnode();
                        FunctionVariable fVar = new FunctionVariable(kernel);
                        fVar.setVarString(varName.image);

                        Function fun = new Function(rhs, fVar);
                        String funLabel = funName.image.substring(0,funName.image.length()-1);
                fun.setLabel(funLabel);
                {if (true) return fun;}
    throw new Error("Missing return statement in function");
  }

/* 
functions of other variables than x not implemented yet
|
(
	// e.g. f(t) =  t^2	
	var = <LABEL> ")" "="	 rhs = expressionnode()
	    {
	        f = new Function(rhs, var.image);
	        f.setLabel(l.image.substring(0,l.image.length()-1));	       
	        return f;
	    }  	    
)
*/



/**
 * function = 	label(x) = ( expressionnode | command ) 
 *
ValidExpression  functionOrCommand():
{
    ExpressionNode rhs;
    Token l = null;
    Token var;
    Function f;
    Command c;
}
{   
    LOOKAHEAD(10)  
   (      
	// f(x) = Derivative[ 3 x^2 ]
	l = <FUNCTION_LABEL> <VARX> ")" "="  
	    c = command()
	    {	    		       
	        c.setLabel(l.image.substring(0,l.image.length()-1));	       
	        return c;
	    }   
	)
	|
	(
	   // f(x) =  x^2 + 3	
	    l = <FUNCTION_LABEL> <VARX> ")" "="  
	 	rhs = expressionnode()
	    {
	        f = new Function(rhs);
	        f.setLabel(l.image.substring(0,l.image.length()-1));	       
	        return f;
	    }   
    )	   

}
*/

/**
 *  expression =  term <OR> term
 */
  final public ExpressionNode expressionnode() throws ParseException {
    ExpressionValue ret, f;
    Token x;
    ret = ANDterm();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
        ;
        break;
      default:
        jj_la1[31] = jj_gen;
        break label_6;
      }
      jj_consume_token(OR);
      f = ANDterm();
                 ret = new ExpressionNode(kernel, ret, ExpressionNode.OR, f);
    }
        ExpressionNode en;
        if (ret.isExpressionNode())
                en = (ExpressionNode) ret;
        else
                en = new ExpressionNode(kernel, ret);

        en.expandEquationExpressions();
        if (MathPiperParsing)
                        en.simplifyLeafs();
        {if (true) return en;}
    throw new Error("Missing return statement in function");
  }

/**
 * ANDterm =   COMPAREterm <AND> COMPAREterm 
 */
  final public ExpressionValue ANDterm() throws ParseException {
    ExpressionValue ret, f;
    Token x;
    ret = COMPAREterm();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        ;
        break;
      default:
        jj_la1[32] = jj_gen;
        break label_7;
      }
      jj_consume_token(AND);
      f = COMPAREterm();
                ret = new ExpressionNode(kernel, ret, ExpressionNode.AND, f);
    }
      {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

/**
 * COMPAREterm =   plusminusnode ("==" | "<" | "<=" | ">" | ">=") plusminusnode 
 */
  final public ExpressionValue COMPAREterm() throws ParseException {
    ExpressionValue ret, f;
    Token x;
    ret = plusminusnode();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQUAL_BOOLEAN:
    case NOT_EQUAL:
    case IS_ELEMENT_OF:
    case CONTAINS:
    case CONTAINS_STRICT:
    case LESS:
    case GREATER:
    case LESS_EQUAL:
    case GREATER_EQUAL:
    case PARALLEL:
    case PERPENDICULAR:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQUAL_BOOLEAN:
        jj_consume_token(EQUAL_BOOLEAN);
        f = plusminusnode();
           if (MathPiperParsing)
               ret = new ExpressionNode(kernel, new Equation(kernel, ret, f));
           else
                        ret = new ExpressionNode(kernel, ret, ExpressionNode.EQUAL_BOOLEAN, f);
        break;
      case NOT_EQUAL:
        jj_consume_token(NOT_EQUAL);
        f = plusminusnode();
           ret = new ExpressionNode(kernel, ret, ExpressionNode.NOT_EQUAL, f);
        break;
      case IS_ELEMENT_OF:
        jj_consume_token(IS_ELEMENT_OF);
        f = plusminusnode();
           ret = new ExpressionNode(kernel, ret, ExpressionNode.IS_ELEMENT_OF, f);
        break;
      case CONTAINS:
        jj_consume_token(CONTAINS);
        f = plusminusnode();
           ret = new ExpressionNode(kernel, ret, ExpressionNode.CONTAINS, f);
        break;
      case CONTAINS_STRICT:
        jj_consume_token(CONTAINS_STRICT);
        f = plusminusnode();
           ret = new ExpressionNode(kernel, ret, ExpressionNode.CONTAINS_STRICT, f);
        break;
      case LESS:
        jj_consume_token(LESS);
        f = plusminusnode();
           ret = new ExpressionNode(kernel, ret, ExpressionNode.LESS, f);
        break;
      case GREATER:
        jj_consume_token(GREATER);
        f = plusminusnode();
           ret = new ExpressionNode(kernel, ret, ExpressionNode.GREATER, f);
        break;
      case LESS_EQUAL:
        jj_consume_token(LESS_EQUAL);
        f = plusminusnode();
           ret = new ExpressionNode(kernel, ret, ExpressionNode.LESS_EQUAL, f);
        break;
      case GREATER_EQUAL:
        jj_consume_token(GREATER_EQUAL);
        f = plusminusnode();
           ret = new ExpressionNode(kernel, ret, ExpressionNode.GREATER_EQUAL, f);
        break;
      case PARALLEL:
        jj_consume_token(PARALLEL);
        f = plusminusnode();
           ret = new ExpressionNode(kernel, ret, ExpressionNode.PARALLEL, f);
        break;
      case PERPENDICULAR:
        jj_consume_token(PERPENDICULAR);
        f = plusminusnode();
           ret = new ExpressionNode(kernel, ret, ExpressionNode.PERPENDICULAR, f);
        break;
      default:
        jj_la1[33] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[34] = jj_gen;
      ;
    }
      {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

/**
 *  expression =    term + term |
 *                  term - term
 */
  final public ExpressionValue plusminusnode() throws ParseException {
    ExpressionValue ret, f;
    Token x;
    ret = enterm();
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        jj_la1[35] = jj_gen;
        break label_8;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        x = jj_consume_token(PLUS);
        break;
      case MINUS:
        x = jj_consume_token(MINUS);
        break;
      default:
        jj_la1[36] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      f = enterm();
            if (x.kind == PLUS)
                ret = new ExpressionNode(kernel, ret, ExpressionNode.PLUS, f);
            else
                ret = new ExpressionNode(kernel, ret, ExpressionNode.MINUS, f);
    }
        //ret.simplifyLeafs();
        {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

/**
 * term =   unary * unary  |
 *          unary / unary
 */
  final public ExpressionValue enterm() throws ParseException {
    ExpressionValue ret, f;
    Token x;
    ret = enunary();
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NOT:
      case MULTIPLY:
      case VECTORPRODUCT:
      case DIVIDE:
      case FACTORIAL:
      case UNDEFINED:
      case PI:
      case E:
      case DEGREE:
      case INFINITY:
      case RAD:
      case TRUE:
      case FALSE:
      case VARX:
      case VARY:
      case FLOAT:
      case EFLOAT:
      case SPREADSHEET_LABEL:
      case LABEL:
      case X_FUNC:
      case Y_FUNC:
      case Z_FUNC:
      case COS_FUNC:
      case SIN_FUNC:
      case TAN_FUNC:
      case ACOS_FUNC:
      case ASIN_FUNC:
      case ATAN_FUNC:
      case COSH_FUNC:
      case SINH_FUNC:
      case TANH_FUNC:
      case ACOSH_FUNC:
      case ASINH_FUNC:
      case ATANH_FUNC:
      case EXP_FUNC:
      case LOG_FUNC:
      case LD_FUNC:
      case LG_FUNC:
      case SQRT_FUNC:
      case CBRT_FUNC:
      case ABS_FUNC:
      case SGN_FUNC:
      case FLOOR_FUNC:
      case CEIL_FUNC:
      case ROUND_FUNC:
      case GAMMA_FUNC:
      case RANDOM_FUNC:
      case FUNCTION_LABEL:
      case TEXT:
      case 91:
      case 97:
        ;
        break;
      default:
        jj_la1[37] = jj_gen;
        break label_9;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULTIPLY:
      case VECTORPRODUCT:
      case DIVIDE:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MULTIPLY:
          x = jj_consume_token(MULTIPLY);
          break;
        case DIVIDE:
          x = jj_consume_token(DIVIDE);
          break;
        case VECTORPRODUCT:
          x = jj_consume_token(VECTORPRODUCT);
          break;
        default:
          jj_la1[38] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        f = enunary();
            if (x.kind == MULTIPLY) {
                ret = new ExpressionNode(kernel, ret, ExpressionNode.MULTIPLY, f);
            } else if (x.kind == DIVIDE){
                ret = new ExpressionNode(kernel, ret, ExpressionNode.DIVIDE, f);
            } else {
                ret = new ExpressionNode(kernel, ret, ExpressionNode.VECTORPRODUCT, f);
            }
        break;
      case NOT:
      case FACTORIAL:
      case UNDEFINED:
      case PI:
      case E:
      case DEGREE:
      case INFINITY:
      case RAD:
      case TRUE:
      case FALSE:
      case VARX:
      case VARY:
      case FLOAT:
      case EFLOAT:
      case SPREADSHEET_LABEL:
      case LABEL:
      case X_FUNC:
      case Y_FUNC:
      case Z_FUNC:
      case COS_FUNC:
      case SIN_FUNC:
      case TAN_FUNC:
      case ACOS_FUNC:
      case ASIN_FUNC:
      case ATAN_FUNC:
      case COSH_FUNC:
      case SINH_FUNC:
      case TANH_FUNC:
      case ACOSH_FUNC:
      case ASINH_FUNC:
      case ATANH_FUNC:
      case EXP_FUNC:
      case LOG_FUNC:
      case LD_FUNC:
      case LG_FUNC:
      case SQRT_FUNC:
      case CBRT_FUNC:
      case ABS_FUNC:
      case SGN_FUNC:
      case FLOOR_FUNC:
      case CEIL_FUNC:
      case ROUND_FUNC:
      case GAMMA_FUNC:
      case RANDOM_FUNC:
      case FUNCTION_LABEL:
      case TEXT:
      case 91:
      case 97:
        f = enpower();
               ret = new ExpressionNode(kernel, ret, ExpressionNode.MULTIPLY, f);
        break;
      default:
        jj_la1[39] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
      {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

/**
 * unary =  -power    |
 * 	        +power    | 	
 *          power
 */
  final public ExpressionValue enunary() throws ParseException {
    ExpressionValue e;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MINUS:
      jj_consume_token(MINUS);
      e = enpower();
          // -e  = -1*e
          {if (true) return new ExpressionNode(kernel, new MyDouble(kernel, -1.0d), ExpressionNode.MULTIPLY, e);}
      break;
    case PLUS:
      jj_consume_token(PLUS);
      e = enpower();
          // +e  = e
          {if (true) return e;}
      break;
    case NOT:
    case FACTORIAL:
    case UNDEFINED:
    case PI:
    case E:
    case DEGREE:
    case INFINITY:
    case RAD:
    case TRUE:
    case FALSE:
    case VARX:
    case VARY:
    case FLOAT:
    case EFLOAT:
    case SPREADSHEET_LABEL:
    case LABEL:
    case X_FUNC:
    case Y_FUNC:
    case Z_FUNC:
    case COS_FUNC:
    case SIN_FUNC:
    case TAN_FUNC:
    case ACOS_FUNC:
    case ASIN_FUNC:
    case ATAN_FUNC:
    case COSH_FUNC:
    case SINH_FUNC:
    case TANH_FUNC:
    case ACOSH_FUNC:
    case ASINH_FUNC:
    case ATANH_FUNC:
    case EXP_FUNC:
    case LOG_FUNC:
    case LD_FUNC:
    case LG_FUNC:
    case SQRT_FUNC:
    case CBRT_FUNC:
    case ABS_FUNC:
    case SGN_FUNC:
    case FLOOR_FUNC:
    case CEIL_FUNC:
    case ROUND_FUNC:
    case GAMMA_FUNC:
    case RANDOM_FUNC:
    case FUNCTION_LABEL:
    case TEXT:
    case 91:
    case 97:
      e = enpower();
            {if (true) return e;}
      break;
    default:
      jj_la1[40] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/**
 * power =    element                 |
 *          element ^ power           
 */
  final public ExpressionValue enpower() throws ParseException {
    ExpressionValue ret, f;
    ret = enfactorial();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case POWER0:
      jj_consume_token(POWER0);
            {if (true) return new ExpressionNode(kernel, ret, ExpressionNode.POWER,
                                 new MyDouble(kernel, 0));}
      break;
    case POWER1:
      jj_consume_token(POWER1);
            {if (true) return new ExpressionNode(kernel, ret, ExpressionNode.POWER,
                                 new MyDouble(kernel, 1));}
      break;
    case SQUARED:
      jj_consume_token(SQUARED);
            {if (true) return new ExpressionNode(kernel, ret, ExpressionNode.POWER,
                                 new MyDouble(kernel, 2));}
      break;
    case CUBED:
      jj_consume_token(CUBED);
            {if (true) return new ExpressionNode(kernel, ret, ExpressionNode.POWER,
                                 new MyDouble(kernel, 3));}
      break;
    case POWER4:
      jj_consume_token(POWER4);
            {if (true) return new ExpressionNode(kernel, ret, ExpressionNode.POWER,
                                 new MyDouble(kernel, 4));}
      break;
    case POWER5:
      jj_consume_token(POWER5);
            {if (true) return new ExpressionNode(kernel, ret, ExpressionNode.POWER,
                                 new MyDouble(kernel, 5));}
      break;
    case POWER6:
      jj_consume_token(POWER6);
            {if (true) return new ExpressionNode(kernel, ret, ExpressionNode.POWER,
                                 new MyDouble(kernel, 6));}
      break;
    case POWER7:
      jj_consume_token(POWER7);
            {if (true) return new ExpressionNode(kernel, ret, ExpressionNode.POWER,
                                 new MyDouble(kernel, 7));}
      break;
    case POWER8:
      jj_consume_token(POWER8);
            {if (true) return new ExpressionNode(kernel, ret, ExpressionNode.POWER,
                                 new MyDouble(kernel, 8));}
      break;
    case POWER9:
      jj_consume_token(POWER9);
            {if (true) return new ExpressionNode(kernel, ret, ExpressionNode.POWER,
                                 new MyDouble(kernel, 9));}
      break;
    default:
      jj_la1[41] = jj_gen;
      label_10:
      while (true) {
        if (jj_2_18(2147483647)) {
          ;
        } else {
          break label_10;
        }
        jj_consume_token(POWER);
        f = enunary();
                // check if we have e^
                if (ret.isExpressionNode()) {
                        ExpressionNode en = (ExpressionNode) ret;
                        if (en.isLeaf() &&  en.getLeft() instanceof MyDouble) {
                                MyDouble num = (MyDouble) en.getLeft();
                                if (num.getDouble() == Math.E) {
                                {if (true) return new ExpressionNode(kernel, f, ExpressionNode.EXP, null);}
                                }
                        }
                }

                // standard case ret^f
            {if (true) return new ExpressionNode(kernel, ret, ExpressionNode.POWER, f);}
      }
    }
      {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

/**
 * factorial =  <NOTterm> |
 *              <NOTterm> !
 */
  final public ExpressionValue enfactorial() throws ParseException {
    ExpressionValue en;
    en = NOTterm();
    if (jj_2_19(2147483647)) {
      jj_consume_token(FACTORIAL);
                    en = new ExpressionNode(kernel, en, ExpressionNode.FACTORIAL, null);
    } else {
      ;
    }
               {if (true) return en;}
    throw new Error("Missing return statement in function");
  }

/**
 * NOTterm =  <NOT> <enelement> |
 *               	<enelement>
 */
  final public ExpressionValue NOTterm() throws ParseException {
    ExpressionValue en;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
    case FACTORIAL:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NOT:
        jj_consume_token(NOT);
        break;
      case FACTORIAL:
        jj_consume_token(FACTORIAL);
        break;
      default:
        jj_la1[42] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      en = enelement();
                    {if (true) return new ExpressionNode(kernel, en, ExpressionNode.NOT, null);}
      break;
    case UNDEFINED:
    case PI:
    case E:
    case DEGREE:
    case INFINITY:
    case RAD:
    case TRUE:
    case FALSE:
    case VARX:
    case VARY:
    case FLOAT:
    case EFLOAT:
    case SPREADSHEET_LABEL:
    case LABEL:
    case X_FUNC:
    case Y_FUNC:
    case Z_FUNC:
    case COS_FUNC:
    case SIN_FUNC:
    case TAN_FUNC:
    case ACOS_FUNC:
    case ASIN_FUNC:
    case ATAN_FUNC:
    case COSH_FUNC:
    case SINH_FUNC:
    case TANH_FUNC:
    case ACOSH_FUNC:
    case ASINH_FUNC:
    case ATANH_FUNC:
    case EXP_FUNC:
    case LOG_FUNC:
    case LD_FUNC:
    case LG_FUNC:
    case SQRT_FUNC:
    case CBRT_FUNC:
    case ABS_FUNC:
    case SGN_FUNC:
    case FLOOR_FUNC:
    case CEIL_FUNC:
    case ROUND_FUNC:
    case GAMMA_FUNC:
    case RANDOM_FUNC:
    case FUNCTION_LABEL:
    case TEXT:
    case 91:
    case 97:
      en = enelement();
               {if (true) return en;}
      break;
    default:
      jj_la1[43] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/**
 * element =    <variable>      |
 *              <float>         |
 *              ( expression )
 */
  final public ExpressionValue enelement() throws ParseException {
    ExpressionValue ev;
    double num;
    Token c;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
      jj_consume_token(TRUE);
           {if (true) return  new MyBoolean(true);}
      break;
    case FALSE:
      jj_consume_token(FALSE);
            {if (true) return new MyBoolean(false);}
      break;
    case UNDEFINED:
    case PI:
    case E:
    case DEGREE:
    case INFINITY:
    case RAD:
    case FLOAT:
    case EFLOAT:
      // number
          ev = myDouble();
          {if (true) return ev;}
      break;
    default:
      jj_la1[44] = jj_gen;
      if (jj_2_20(2147483647)) {
        ev = numberFunction();
           {if (true) return ev;}
      } else if (jj_2_21(2147483647)) {
        ev = command();
          {if (true) return ev;}
      } else if (jj_2_22(2147483647)) {
        ev = numVecVariable();
          {if (true) return ev;}
      } else if (jj_2_23(2147483647)) {
        ev = list();
              {if (true) return ev;}
      } else if (jj_2_24(2147483647)) {
        jj_consume_token(97);
        ev = equation();
        jj_consume_token(96);
          {if (true) return ev;}
      } else if (jj_2_25(2147483647)) {
        jj_consume_token(97);
        ev = expressionnode();
        jj_consume_token(96);
          {if (true) return  ev;}
      } else if (jj_2_26(2147483647)) {
        ev = cartesianvector();
          {if (true) return ev;}
      } else if (jj_2_27(2147483647)) {
        ev = cartesianvector3D();
          {if (true) return ev;}
      } else if (jj_2_28(2147483647)) {
        ev = polarvector();
          {if (true) return ev;}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TEXT:
          // text (between " ... ")
                  c = jj_consume_token(TEXT);
        // remove " (first and last character)
        String text = c.image.substring(1, c.image.length()-1);
        {if (true) return  new MyStringBuffer(text);}
          break;
        default:
          jj_la1[45] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public ExpressionValue list() throws ParseException {
    MyList myList;
    ExpressionValue ev;
    if (jj_2_29(5)) {
      jj_consume_token(91);
      jj_consume_token(92);
           {if (true) return new MyList(kernel);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 91:
        jj_consume_token(91);
        ev = cmdexpression();
            myList = new MyList(kernel);
            myList.addListElement(ev);
        label_11:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 93:
            ;
            break;
          default:
            jj_la1[46] = jj_gen;
            break label_11;
          }
          jj_consume_token(93);
          ev = cmdexpression();
                myList.addListElement(ev);
        }
        jj_consume_token(92);
       {if (true) return myList;}
        break;
      default:
        jj_la1[47] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public ExpressionValue numVecVariable() throws ParseException {
    GeoElement geo;
    Token c;
    ExpressionValue ev;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VARX:
      c = jj_consume_token(VARX);
        {if (true) return new Polynomial(kernel, c.image);}
      break;
    case VARY:
      c = jj_consume_token(VARY);
        {if (true) return new Polynomial(kernel, c.image);}
      break;
    default:
      jj_la1[49] = jj_gen;
      if (jj_2_30(3)) {
        ev = spreadsheetRange();
                {if (true) return ev;}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SPREADSHEET_LABEL:
        case LABEL:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case SPREADSHEET_LABEL:
            c = jj_consume_token(SPREADSHEET_LABEL);
            break;
          case LABEL:
            c = jj_consume_token(LABEL);
            break;
          default:
            jj_la1[48] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        // standard case for variable
        {if (true) return new ExpressionNode(kernel, new Variable(kernel, c.image));}
          break;
        default:
          jj_la1[50] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

/**
 * spreadsheet range, e.g. A3:B5
 */
  final public Command spreadsheetRange() throws ParseException {
    Token c, c2;
    // spreadsheet range like A1:B2
            c = jj_consume_token(SPREADSHEET_LABEL);
    jj_consume_token(90);
    c2 = jj_consume_token(SPREADSHEET_LABEL);
                // build command CellRange[ startCell, endCell ]
                ExpressionNode startCell = new ExpressionNode(kernel, new Variable(kernel, c.image));
                ExpressionNode endCell = new ExpressionNode(kernel, new Variable(kernel, c2.image));
                Command cmd = new Command(kernel, "CellRange", false ); // don't translate name
                cmd.addArgument(startCell);
                cmd.addArgument(endCell);
                {if (true) return cmd;}
    throw new Error("Missing return statement in function");
  }

/**
 * floating point number: angle or numeric are distinguished
 */
  final public ExpressionValue myDouble() throws ParseException {
    Token c;
    MyDouble d;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FLOAT:
    case EFLOAT:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FLOAT:
        c = jj_consume_token(FLOAT);
        break;
      case EFLOAT:
        c = jj_consume_token(EFLOAT);
        break;
      default:
        jj_la1[51] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
        double val =  Double.parseDouble( c.image );

        if (MathPiperParsing) {
                // preserve string from MathPiper: it may have higher
                // precision than double
           {if (true) return new MySpecialDouble(kernel, val, c.image);}
        }
        else {
          {if (true) return new MyDouble(kernel, val);}
        }
      break;
    case DEGREE:
      jj_consume_token(DEGREE);
       // constant for degree to radians 
        d = new MySpecialDouble(kernel, Math.PI / 180.0d, "\u00b0");
        d.setAngle();
        {if (true) return d;}
      break;
    case RAD:
      jj_consume_token(RAD);
       // constant for radians to radians 
        d = new MySpecialDouble(kernel, 1.0d, "rad");
        d.setAngle();
        {if (true) return d;}
      break;
    case PI:
      jj_consume_token(PI);
        {if (true) return new MySpecialDouble(kernel, Math.PI, Kernel.PI_STRING);}
      break;
    case E:
      jj_consume_token(E);
        {if (true) return new MySpecialDouble(kernel, Math.E, Kernel.EULER_STRING);}
      break;
    case INFINITY:
      jj_consume_token(INFINITY);
        {if (true) return new MyDouble(kernel, Double.POSITIVE_INFINITY);}
      break;
    case UNDEFINED:
      jj_consume_token(UNDEFINED);
        {if (true) return new MyDouble(kernel, Double.NaN);}
      break;
    default:
      jj_la1[52] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/**
 * mathematical Function (cos, sin, tan, ...)
 */
  final public ExpressionNode numberFunction() throws ParseException {
    ExpressionNode en;
    Token c;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case X_FUNC:
      jj_consume_token(X_FUNC);
      en = expressionnode();
      jj_consume_token(96);
        {if (true) return new ExpressionNode(kernel, en, ExpressionNode.XCOORD, null);}
      break;
    case Y_FUNC:
      jj_consume_token(Y_FUNC);
      en = expressionnode();
      jj_consume_token(96);
        {if (true) return new ExpressionNode(kernel, en, ExpressionNode.YCOORD, null);}
      break;
    case Z_FUNC:
      jj_consume_token(Z_FUNC);
      en = expressionnode();
      jj_consume_token(96);
        {if (true) return new ExpressionNode(kernel, en, ExpressionNode.ZCOORD, null);}
      break;
    case COS_FUNC:
      jj_consume_token(COS_FUNC);
      en = expressionnode();
      jj_consume_token(96);
        {if (true) return new ExpressionNode(kernel, en, ExpressionNode.COS, null);}
      break;
    case SIN_FUNC:
      jj_consume_token(SIN_FUNC);
      en = expressionnode();
      jj_consume_token(96);
        {if (true) return new ExpressionNode(kernel, en, ExpressionNode.SIN, null);}
      break;
    case TAN_FUNC:
      jj_consume_token(TAN_FUNC);
      en = expressionnode();
      jj_consume_token(96);
        {if (true) return new ExpressionNode(kernel, en, ExpressionNode.TAN, null);}
      break;
    case ACOS_FUNC:
      jj_consume_token(ACOS_FUNC);
      en = expressionnode();
      jj_consume_token(96);
        {if (true) return new ExpressionNode(kernel, en, ExpressionNode.ARCCOS, null);}
      break;
    case ASIN_FUNC:
      jj_consume_token(ASIN_FUNC);
      en = expressionnode();
      jj_consume_token(96);
        {if (true) return new ExpressionNode(kernel, en, ExpressionNode.ARCSIN, null);}
      break;
    case ATAN_FUNC:
      jj_consume_token(ATAN_FUNC);
      en = expressionnode();
      jj_consume_token(96);
        {if (true) return new ExpressionNode(kernel, en, ExpressionNode.ARCTAN, null);}
      break;
    case COSH_FUNC:
      jj_consume_token(COSH_FUNC);
      en = expressionnode();
      jj_consume_token(96);
        {if (true) return new ExpressionNode(kernel, en, ExpressionNode.COSH, null);}
      break;
    case SINH_FUNC:
      jj_consume_token(SINH_FUNC);
      en = expressionnode();
      jj_consume_token(96);
        {if (true) return new ExpressionNode(kernel, en, ExpressionNode.SINH, null);}
      break;
    case TANH_FUNC:
      jj_consume_token(TANH_FUNC);
      en = expressionnode();
      jj_consume_token(96);
        {if (true) return new ExpressionNode(kernel, en, ExpressionNode.TANH, null);}
      break;
    case ACOSH_FUNC:
      jj_consume_token(ACOSH_FUNC);
      en = expressionnode();
      jj_consume_token(96);
        {if (true) return new ExpressionNode(kernel, en, ExpressionNode.ACOSH, null);}
      break;
    case ASINH_FUNC:
      jj_consume_token(ASINH_FUNC);
      en = expressionnode();
      jj_consume_token(96);
        {if (true) return new ExpressionNode(kernel, en, ExpressionNode.ASINH, null);}
      break;
    case ATANH_FUNC:
      jj_consume_token(ATANH_FUNC);
      en = expressionnode();
      jj_consume_token(96);
        {if (true) return new ExpressionNode(kernel, en, ExpressionNode.ATANH, null);}
      break;
    case EXP_FUNC:
      jj_consume_token(EXP_FUNC);
      en = expressionnode();
      jj_consume_token(96);
        {if (true) return new ExpressionNode(kernel, en, ExpressionNode.EXP, null);}
      break;
    case LOG_FUNC:
      jj_consume_token(LOG_FUNC);
      en = expressionnode();
      jj_consume_token(96);
        {if (true) return new ExpressionNode(kernel, en, ExpressionNode.LOG, null);}
      break;
    case LG_FUNC:
      jj_consume_token(LG_FUNC);
      en = expressionnode();
      jj_consume_token(96);
        {if (true) return new ExpressionNode(kernel, en, ExpressionNode.LOG10, null);}
      break;
    case LD_FUNC:
      jj_consume_token(LD_FUNC);
      en = expressionnode();
      jj_consume_token(96);
        {if (true) return new ExpressionNode(kernel, en, ExpressionNode.LOG2, null);}
      break;
    case SQRT_FUNC:
      jj_consume_token(SQRT_FUNC);
      en = expressionnode();
      jj_consume_token(96);
        {if (true) return new ExpressionNode(kernel, en, ExpressionNode.SQRT, null);}
      break;
    case CBRT_FUNC:
      jj_consume_token(CBRT_FUNC);
      en = expressionnode();
      jj_consume_token(96);
        {if (true) return new ExpressionNode(kernel, en, ExpressionNode.CBRT, null);}
      break;
    case ABS_FUNC:
      jj_consume_token(ABS_FUNC);
      en = expressionnode();
      jj_consume_token(96);
        {if (true) return new ExpressionNode(kernel, en, ExpressionNode.ABS, null);}
      break;
    case SGN_FUNC:
      jj_consume_token(SGN_FUNC);
      en = expressionnode();
      jj_consume_token(96);
        {if (true) return new ExpressionNode(kernel, en, ExpressionNode.SGN, null);}
      break;
    case FLOOR_FUNC:
      jj_consume_token(FLOOR_FUNC);
      en = expressionnode();
      jj_consume_token(96);
        {if (true) return new ExpressionNode(kernel, en, ExpressionNode.FLOOR, null);}
      break;
    case CEIL_FUNC:
      jj_consume_token(CEIL_FUNC);
      en = expressionnode();
      jj_consume_token(96);
        {if (true) return new ExpressionNode(kernel, en, ExpressionNode.CEIL, null);}
      break;
    case ROUND_FUNC:
      jj_consume_token(ROUND_FUNC);
      en = expressionnode();
      jj_consume_token(96);
        {if (true) return new ExpressionNode(kernel, en, ExpressionNode.ROUND, null);}
      break;
    case GAMMA_FUNC:
      jj_consume_token(GAMMA_FUNC);
      en = expressionnode();
      jj_consume_token(96);
        {if (true) return new ExpressionNode(kernel, en, ExpressionNode.GAMMA, null);}
      break;
    case RANDOM_FUNC:
      jj_consume_token(RANDOM_FUNC);
         Construction cons = kernel.getConstruction();
         GeoNumeric randNum = new GeoNumeric(cons);
         cons.addRandomNumber(randNum);
         randNum.setValue(Math.random());
         {if (true) return new ExpressionNode(kernel, randNum, ExpressionNode.RANDOM, null);}
      break;
    case FUNCTION_LABEL:
      c = jj_consume_token(FUNCTION_LABEL);
      en = expressionnode();
      jj_consume_token(96);
                // remove the opening parenthesis
                String funcName = c.image.substring(0, c.image.length()-1);
                int order = 0;
                int index = funcName.length()-1;
                GeoElement geo = null;
                String label = null;
                while (index >= 0) {
                        label = funcName.substring(0, index+1);
                        geo = kernel.lookupLabel(label);
                        if (geo != null) break;
                        if (c.image.charAt(index) == '\'') {
                                order++;
                                index--;
                        } else break;
                }
                if (geo == null) {
                                // return command
                                Command cmd = new Command(kernel, funcName, true );
                                cmd.addArgument( en );
                                {if (true) return new ExpressionNode(kernel, cmd);}

//      		  	String [] str = { "UndefinedVariable", funcName };
//           	 	throw new MyParseError(app, str);    
                }

                        // create variable object for label to make sure
                        // to handle lables like $A$1 correctly and keep the expression
                        Variable geoVar = new Variable(kernel, label);
                        ExpressionValue geoExp = geoVar.resolveAsExpressionValue();

                if (order > 0) { // derivative
                        if (geo.isGeoFunction()) {// function 
                                // n-th derivative of geo
                                ExpressionNode derivative =  new ExpressionNode(kernel, geoExp, ExpressionNode.DERIVATIVE,
                                                                                                                                        new MyDouble(kernel, order));
                                {if (true) return new ExpressionNode(kernel, derivative, ExpressionNode.FUNCTION, en);}
                        }
                        else {
                        String [] str = { "FunctionExpected", funcName };
                        {if (true) throw new MyParseError(app, str);}
                        }
                }
                else { // no derivative
                        if (geo.isGeoFunction()) // function 
                                {if (true) return new ExpressionNode(kernel, geoExp, ExpressionNode.FUNCTION, en);}
                        else if (geo.isGeoCurveCartesian()) // vector function 
                                {if (true) return new ExpressionNode(kernel, geoExp, ExpressionNode.VEC_FUNCTION, en);}
                        else {// error: no function
                                String [] str = { "FunctionExpected", funcName };
                        {if (true) throw new MyParseError(app, str);}
                    }
                }
      break;
    default:
      jj_la1[53] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/**
 * cartesianvector =  ( expression, expression ) 
 */
  final public VectorValue cartesianvector() throws ParseException {
    ExpressionValue x, y;
    if (jj_2_31(2147483647)) {
      jj_consume_token(97);
      x = expression();
      jj_consume_token(93);
      y = expression();
      jj_consume_token(96);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 97:
        jj_consume_token(97);
        x = expression();
        jj_consume_token(CARTESIAN_SPECIAL_SEPERATOR);
        y = expression();
        jj_consume_token(96);
        break;
      default:
        jj_la1[54] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
           {if (true) return new MyVecNode(kernel, x, y);}
    throw new Error("Missing return statement in function");
  }

/**
 * cartesianvector3D =  ( expression, expression ) 
 */
  final public Vector3DValue cartesianvector3D() throws ParseException {
    ExpressionValue x, y, z;
    if (jj_2_32(2147483647)) {
      jj_consume_token(97);
      x = expression();
      jj_consume_token(93);
      y = expression();
      jj_consume_token(93);
      z = expression();
      jj_consume_token(96);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 97:
        jj_consume_token(97);
        x = expression();
        jj_consume_token(CARTESIAN_SPECIAL_SEPERATOR);
        y = expression();
        jj_consume_token(CARTESIAN_SPECIAL_SEPERATOR);
        z = expression();
        jj_consume_token(96);
        break;
      default:
        jj_la1[55] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
           {if (true) return new MyVec3DNode(kernel, x, y, z);}
    throw new Error("Missing return statement in function");
  }

/**
 * polarvector = ( expression ; expression )             
 */
  final public VectorValue polarvector() throws ParseException {
    ExpressionValue r, phi;
    MyVecNode v;
    jj_consume_token(97);
    r = expression();
    jj_consume_token(EOL);
    phi = expression();
    jj_consume_token(96);
             v = new MyVecNode(kernel);
             v.setPolarCoords(r, phi);
             {if (true) return v;}
    throw new Error("Missing return statement in function");
  }

/**
 * cartesianvector_special =  <LABEL>( expression | expression ) 
 */
  final public ExpressionNode cartesianvector_special() throws ParseException {
   Token l;
    ExpressionValue x, y;
    l = jj_consume_token(FUNCTION_LABEL);
    x = expression();
    jj_consume_token(CARTESIAN_SPECIAL_SEPERATOR);
    y = expression();
    jj_consume_token(96);
                ExpressionNode en =  new ExpressionNode(kernel, new MyVecNode(kernel, x, y));
                en.setLabel(l.image.substring(0,l.image.length()-1));
                {if (true) return en;}
    throw new Error("Missing return statement in function");
  }

/**
 * polarvector_special =  <LABEL>( expression ; expression ) 
 */
  final public ExpressionNode polarvector_special() throws ParseException {
   Token l;
    ExpressionValue r, phi;
    l = jj_consume_token(FUNCTION_LABEL);
    r = expression();
    jj_consume_token(EOL);
    phi = expression();
    jj_consume_token(96);
            MyVecNode v = new MyVecNode(kernel);
            v.setPolarCoords(r, phi);
                ExpressionNode en =  new ExpressionNode(kernel, v);
                en.setLabel(l.image.substring(0,l.image.length()-1));
                {if (true) return en;}
    throw new Error("Missing return statement in function");
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  final private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  final private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  final private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  final private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  final private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  final private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  final private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  final private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  final private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  final private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  final private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  final private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  final private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  final private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  final private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  final private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  final private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  final private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  final private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  final private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  final private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  final private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  final private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  final private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  final private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  final private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  final private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  final private boolean jj_2_30(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  final private boolean jj_2_31(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  final private boolean jj_2_32(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  final private boolean jj_3_7() {
    if (jj_3R_18()) return true;
    return false;
  }

  final private boolean jj_3_18() {
    if (jj_scan_token(POWER)) return true;
    return false;
  }

  final private boolean jj_3_6() {
    if (jj_3R_17()) return true;
    if (jj_scan_token(EQUAL)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  final private boolean jj_3_5() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(55)) {
    jj_scanpos = xsp;
    if (jj_scan_token(56)) return true;
    }
    xsp = jj_scanpos;
    if (jj_scan_token(90)) {
    jj_scanpos = xsp;
    if (jj_scan_token(6)) return true;
    }
    if (jj_3R_16()) return true;
    return false;
  }

  final private boolean jj_3R_122() {
    if (jj_scan_token(POWER)) return true;
    if (jj_3R_75()) return true;
    return false;
  }

  final private boolean jj_3R_119() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_122()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_68() {
    if (jj_scan_token(FUNCTION_LABEL)) return true;
    if (jj_3R_17()) return true;
    if (jj_scan_token(96)) return true;
    return false;
  }

  final private boolean jj_3R_118() {
    if (jj_scan_token(POWER9)) return true;
    return false;
  }

  final private boolean jj_3_2() {
    if (jj_3R_13()) return true;
    return false;
  }

  final private boolean jj_3_4() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(55)) {
    jj_scanpos = xsp;
    if (jj_scan_token(56)) return true;
    }
    if (jj_scan_token(90)) return true;
    if (jj_3R_15()) return true;
    return false;
  }

  final private boolean jj_3R_12() {
    if (jj_scan_token(FUNCTION_LABEL)) return true;
    if (jj_scan_token(VARX)) return true;
    if (jj_scan_token(96)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(22)) {
    jj_scanpos = xsp;
    if (jj_scan_token(6)) return true;
    }
    if (jj_3R_17()) return true;
    return false;
  }

  final private boolean jj_3R_117() {
    if (jj_scan_token(POWER8)) return true;
    return false;
  }

  final private boolean jj_3_3() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(55)) {
    jj_scanpos = xsp;
    if (jj_scan_token(56)) return true;
    }
    if (jj_scan_token(90)) return true;
    if (jj_3R_14()) return true;
    return false;
  }

  final private boolean jj_3R_67() {
    if (jj_scan_token(RANDOM_FUNC)) return true;
    return false;
  }

  final private boolean jj_3R_66() {
    if (jj_scan_token(GAMMA_FUNC)) return true;
    if (jj_3R_17()) return true;
    if (jj_scan_token(96)) return true;
    return false;
  }

  final private boolean jj_3R_116() {
    if (jj_scan_token(POWER7)) return true;
    return false;
  }

  final private boolean jj_3R_65() {
    if (jj_scan_token(ROUND_FUNC)) return true;
    if (jj_3R_17()) return true;
    if (jj_scan_token(96)) return true;
    return false;
  }

  final private boolean jj_3R_64() {
    if (jj_scan_token(CEIL_FUNC)) return true;
    if (jj_3R_17()) return true;
    if (jj_scan_token(96)) return true;
    return false;
  }

  final private boolean jj_3_1() {
    if (jj_3R_12()) return true;
    return false;
  }

  final private boolean jj_3R_115() {
    if (jj_scan_token(POWER6)) return true;
    return false;
  }

  final private boolean jj_3R_63() {
    if (jj_scan_token(FLOOR_FUNC)) return true;
    if (jj_3R_17()) return true;
    if (jj_scan_token(96)) return true;
    return false;
  }

  final private boolean jj_3R_62() {
    if (jj_scan_token(SGN_FUNC)) return true;
    if (jj_3R_17()) return true;
    if (jj_scan_token(96)) return true;
    return false;
  }

  final private boolean jj_3R_114() {
    if (jj_scan_token(POWER5)) return true;
    return false;
  }

  final private boolean jj_3R_61() {
    if (jj_scan_token(ABS_FUNC)) return true;
    if (jj_3R_17()) return true;
    if (jj_scan_token(96)) return true;
    return false;
  }

  final private boolean jj_3R_60() {
    if (jj_scan_token(CBRT_FUNC)) return true;
    if (jj_3R_17()) return true;
    if (jj_scan_token(96)) return true;
    return false;
  }

  final private boolean jj_3R_58() {
    if (jj_scan_token(LD_FUNC)) return true;
    if (jj_3R_17()) return true;
    if (jj_scan_token(96)) return true;
    return false;
  }

  final private boolean jj_3R_113() {
    if (jj_scan_token(POWER4)) return true;
    return false;
  }

  final private boolean jj_3R_59() {
    if (jj_scan_token(SQRT_FUNC)) return true;
    if (jj_3R_17()) return true;
    if (jj_scan_token(96)) return true;
    return false;
  }

  final private boolean jj_3R_57() {
    if (jj_scan_token(LG_FUNC)) return true;
    if (jj_3R_17()) return true;
    if (jj_scan_token(96)) return true;
    return false;
  }

  final private boolean jj_3R_112() {
    if (jj_scan_token(CUBED)) return true;
    return false;
  }

  final private boolean jj_3R_56() {
    if (jj_scan_token(LOG_FUNC)) return true;
    if (jj_3R_17()) return true;
    if (jj_scan_token(96)) return true;
    return false;
  }

  final private boolean jj_3R_111() {
    if (jj_scan_token(SQUARED)) return true;
    return false;
  }

  final private boolean jj_3R_55() {
    if (jj_scan_token(EXP_FUNC)) return true;
    if (jj_3R_17()) return true;
    if (jj_scan_token(96)) return true;
    return false;
  }

  final private boolean jj_3R_54() {
    if (jj_scan_token(ATANH_FUNC)) return true;
    if (jj_3R_17()) return true;
    if (jj_scan_token(96)) return true;
    return false;
  }

  final private boolean jj_3R_110() {
    if (jj_scan_token(POWER1)) return true;
    return false;
  }

  final private boolean jj_3R_53() {
    if (jj_scan_token(ASINH_FUNC)) return true;
    if (jj_3R_17()) return true;
    if (jj_scan_token(96)) return true;
    return false;
  }

  final private boolean jj_3R_52() {
    if (jj_scan_token(ACOSH_FUNC)) return true;
    if (jj_3R_17()) return true;
    if (jj_scan_token(96)) return true;
    return false;
  }

  final private boolean jj_3R_34() {
    if (jj_3R_17()) return true;
    return false;
  }

  final private boolean jj_3R_109() {
    if (jj_scan_token(POWER0)) return true;
    return false;
  }

  final private boolean jj_3R_51() {
    if (jj_scan_token(TANH_FUNC)) return true;
    if (jj_3R_17()) return true;
    if (jj_scan_token(96)) return true;
    return false;
  }

  final private boolean jj_3R_50() {
    if (jj_scan_token(SINH_FUNC)) return true;
    if (jj_3R_17()) return true;
    if (jj_scan_token(96)) return true;
    return false;
  }

  final private boolean jj_3_17() {
    if (jj_3R_15()) return true;
    return false;
  }

  final private boolean jj_3R_96() {
    if (jj_3R_108()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_109()) {
    jj_scanpos = xsp;
    if (jj_3R_110()) {
    jj_scanpos = xsp;
    if (jj_3R_111()) {
    jj_scanpos = xsp;
    if (jj_3R_112()) {
    jj_scanpos = xsp;
    if (jj_3R_113()) {
    jj_scanpos = xsp;
    if (jj_3R_114()) {
    jj_scanpos = xsp;
    if (jj_3R_115()) {
    jj_scanpos = xsp;
    if (jj_3R_116()) {
    jj_scanpos = xsp;
    if (jj_3R_117()) {
    jj_scanpos = xsp;
    if (jj_3R_118()) {
    jj_scanpos = xsp;
    if (jj_3R_119()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_49() {
    if (jj_scan_token(COSH_FUNC)) return true;
    if (jj_3R_17()) return true;
    if (jj_scan_token(96)) return true;
    return false;
  }

  final private boolean jj_3R_48() {
    if (jj_scan_token(ATAN_FUNC)) return true;
    if (jj_3R_17()) return true;
    if (jj_scan_token(96)) return true;
    return false;
  }

  final private boolean jj_3R_47() {
    if (jj_scan_token(ASIN_FUNC)) return true;
    if (jj_3R_17()) return true;
    if (jj_scan_token(96)) return true;
    return false;
  }

  final private boolean jj_3R_18() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_17()) {
    jj_scanpos = xsp;
    if (jj_3R_34()) return true;
    }
    return false;
  }

  final private boolean jj_3R_46() {
    if (jj_scan_token(ACOS_FUNC)) return true;
    if (jj_3R_17()) return true;
    if (jj_scan_token(96)) return true;
    return false;
  }

  final private boolean jj_3R_45() {
    if (jj_scan_token(TAN_FUNC)) return true;
    if (jj_3R_17()) return true;
    if (jj_scan_token(96)) return true;
    return false;
  }

  final private boolean jj_3R_91() {
    if (jj_3R_96()) return true;
    return false;
  }

  final private boolean jj_3R_44() {
    if (jj_scan_token(SIN_FUNC)) return true;
    if (jj_3R_17()) return true;
    if (jj_scan_token(96)) return true;
    return false;
  }

  final private boolean jj_3R_43() {
    if (jj_scan_token(COS_FUNC)) return true;
    if (jj_3R_17()) return true;
    if (jj_scan_token(96)) return true;
    return false;
  }

  final private boolean jj_3R_42() {
    if (jj_scan_token(Z_FUNC)) return true;
    if (jj_3R_17()) return true;
    if (jj_scan_token(96)) return true;
    return false;
  }

  final private boolean jj_3R_90() {
    if (jj_scan_token(PLUS)) return true;
    if (jj_3R_96()) return true;
    return false;
  }

  final private boolean jj_3R_41() {
    if (jj_scan_token(Y_FUNC)) return true;
    if (jj_3R_17()) return true;
    if (jj_scan_token(96)) return true;
    return false;
  }

  final private boolean jj_3R_75() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_89()) {
    jj_scanpos = xsp;
    if (jj_3R_90()) {
    jj_scanpos = xsp;
    if (jj_3R_91()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_89() {
    if (jj_scan_token(MINUS)) return true;
    if (jj_3R_96()) return true;
    return false;
  }

  final private boolean jj_3R_40() {
    if (jj_scan_token(X_FUNC)) return true;
    if (jj_3R_17()) return true;
    if (jj_scan_token(96)) return true;
    return false;
  }

  final private boolean jj_3R_25() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_40()) {
    jj_scanpos = xsp;
    if (jj_3R_41()) {
    jj_scanpos = xsp;
    if (jj_3R_42()) {
    jj_scanpos = xsp;
    if (jj_3R_43()) {
    jj_scanpos = xsp;
    if (jj_3R_44()) {
    jj_scanpos = xsp;
    if (jj_3R_45()) {
    jj_scanpos = xsp;
    if (jj_3R_46()) {
    jj_scanpos = xsp;
    if (jj_3R_47()) {
    jj_scanpos = xsp;
    if (jj_3R_48()) {
    jj_scanpos = xsp;
    if (jj_3R_49()) {
    jj_scanpos = xsp;
    if (jj_3R_50()) {
    jj_scanpos = xsp;
    if (jj_3R_51()) {
    jj_scanpos = xsp;
    if (jj_3R_52()) {
    jj_scanpos = xsp;
    if (jj_3R_53()) {
    jj_scanpos = xsp;
    if (jj_3R_54()) {
    jj_scanpos = xsp;
    if (jj_3R_55()) {
    jj_scanpos = xsp;
    if (jj_3R_56()) {
    jj_scanpos = xsp;
    if (jj_3R_57()) {
    jj_scanpos = xsp;
    if (jj_3R_58()) {
    jj_scanpos = xsp;
    if (jj_3R_59()) {
    jj_scanpos = xsp;
    if (jj_3R_60()) {
    jj_scanpos = xsp;
    if (jj_3R_61()) {
    jj_scanpos = xsp;
    if (jj_3R_62()) {
    jj_scanpos = xsp;
    if (jj_3R_63()) {
    jj_scanpos = xsp;
    if (jj_3R_64()) {
    jj_scanpos = xsp;
    if (jj_3R_65()) {
    jj_scanpos = xsp;
    if (jj_3R_66()) {
    jj_scanpos = xsp;
    if (jj_3R_67()) {
    jj_scanpos = xsp;
    if (jj_3R_68()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_16() {
    if (jj_3R_17()) return true;
    return false;
  }

  final private boolean jj_3R_137() {
    if (jj_scan_token(UNDEFINED)) return true;
    return false;
  }

  final private boolean jj_3R_93() {
    if (jj_3R_96()) return true;
    return false;
  }

  final private boolean jj_3R_15() {
    if (jj_3R_17()) return true;
    if (jj_scan_token(EQUAL)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  final private boolean jj_3R_136() {
    if (jj_scan_token(INFINITY)) return true;
    return false;
  }

  final private boolean jj_3R_135() {
    if (jj_scan_token(E)) return true;
    return false;
  }

  final private boolean jj_3R_76() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_92()) {
    jj_scanpos = xsp;
    if (jj_3R_93()) return true;
    }
    return false;
  }

  final private boolean jj_3R_92() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(25)) {
    jj_scanpos = xsp;
    if (jj_scan_token(27)) {
    jj_scanpos = xsp;
    if (jj_scan_token(26)) return true;
    }
    }
    if (jj_3R_75()) return true;
    return false;
  }

  final private boolean jj_3R_31() {
    if (jj_3R_75()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_76()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_134() {
    if (jj_scan_token(PI)) return true;
    return false;
  }

  final private boolean jj_3R_133() {
    if (jj_scan_token(RAD)) return true;
    return false;
  }

  final private boolean jj_3R_132() {
    if (jj_scan_token(DEGREE)) return true;
    return false;
  }

  final private boolean jj_3R_95() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(23)) {
    jj_scanpos = xsp;
    if (jj_scan_token(24)) return true;
    }
    if (jj_3R_31()) return true;
    return false;
  }

  final private boolean jj_3R_86() {
    if (jj_3R_31()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_95()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_131() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(51)) {
    jj_scanpos = xsp;
    if (jj_scan_token(52)) return true;
    }
    return false;
  }

  final private boolean jj_3R_130() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_131()) {
    jj_scanpos = xsp;
    if (jj_3R_132()) {
    jj_scanpos = xsp;
    if (jj_3R_133()) {
    jj_scanpos = xsp;
    if (jj_3R_134()) {
    jj_scanpos = xsp;
    if (jj_3R_135()) {
    jj_scanpos = xsp;
    if (jj_3R_136()) {
    jj_scanpos = xsp;
    if (jj_3R_137()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_107() {
    if (jj_scan_token(PERPENDICULAR)) return true;
    if (jj_3R_86()) return true;
    return false;
  }

  final private boolean jj_3R_106() {
    if (jj_scan_token(PARALLEL)) return true;
    if (jj_3R_86()) return true;
    return false;
  }

  final private boolean jj_3R_14() {
    if (jj_scan_token(LABEL)) return true;
    if (jj_scan_token(EQUAL)) return true;
    if (jj_3R_31()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(23)) {
    jj_scanpos = xsp;
    if (jj_scan_token(24)) return true;
    }
    if (jj_scan_token(LABEL)) return true;
    xsp = jj_scanpos;
    if (jj_scan_token(25)) jj_scanpos = xsp;
    if (jj_3R_16()) return true;
    return false;
  }

  final private boolean jj_3R_13() {
    if (jj_scan_token(SPREADSHEET_LABEL)) return true;
    if (jj_scan_token(90)) return true;
    if (jj_scan_token(SPREADSHEET_LABEL)) return true;
    return false;
  }

  final private boolean jj_3R_105() {
    if (jj_scan_token(GREATER_EQUAL)) return true;
    if (jj_3R_86()) return true;
    return false;
  }

  final private boolean jj_3R_104() {
    if (jj_scan_token(LESS_EQUAL)) return true;
    if (jj_3R_86()) return true;
    return false;
  }

  final private boolean jj_3R_80() {
    if (jj_scan_token(93)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(55)) {
    jj_scanpos = xsp;
    if (jj_scan_token(56)) return true;
    }
    return false;
  }

  final private boolean jj_3R_103() {
    if (jj_scan_token(GREATER)) return true;
    if (jj_3R_86()) return true;
    return false;
  }

  final private boolean jj_3R_71() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(55)) {
    jj_scanpos = xsp;
    if (jj_scan_token(56)) return true;
    }
    return false;
  }

  final private boolean jj_3R_79() {
    if (jj_scan_token(93)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(55)) {
    jj_scanpos = xsp;
    if (jj_scan_token(56)) return true;
    }
    return false;
  }

  final private boolean jj_3R_102() {
    if (jj_scan_token(LESS)) return true;
    if (jj_3R_86()) return true;
    return false;
  }

  final private boolean jj_3_30() {
    if (jj_3R_13()) return true;
    return false;
  }

  final private boolean jj_3R_36() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(55)) {
    jj_scanpos = xsp;
    if (jj_scan_token(56)) return true;
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_80()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_101() {
    if (jj_scan_token(CONTAINS_STRICT)) return true;
    if (jj_3R_86()) return true;
    return false;
  }

  final private boolean jj_3R_84() {
    if (jj_scan_token(93)) return true;
    if (jj_3R_18()) return true;
    return false;
  }

  final private boolean jj_3R_83() {
    if (jj_3R_18()) return true;
    return false;
  }

  final private boolean jj_3R_35() {
    if (jj_scan_token(91)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(55)) {
    jj_scanpos = xsp;
    if (jj_scan_token(56)) return true;
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_79()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(92)) return true;
    return false;
  }

  final private boolean jj_3R_70() {
    if (jj_scan_token(VARY)) return true;
    return false;
  }

  final private boolean jj_3R_19() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_35()) {
    jj_scanpos = xsp;
    if (jj_3R_36()) return true;
    }
    return false;
  }

  final private boolean jj_3R_100() {
    if (jj_scan_token(CONTAINS)) return true;
    if (jj_3R_86()) return true;
    return false;
  }

  final private boolean jj_3R_82() {
    if (jj_scan_token(93)) return true;
    if (jj_3R_18()) return true;
    return false;
  }

  final private boolean jj_3R_26() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_69()) {
    jj_scanpos = xsp;
    if (jj_3R_70()) {
    jj_scanpos = xsp;
    if (jj_3_30()) {
    jj_scanpos = xsp;
    if (jj_3R_71()) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_69() {
    if (jj_scan_token(VARX)) return true;
    return false;
  }

  final private boolean jj_3R_81() {
    if (jj_3R_18()) return true;
    return false;
  }

  final private boolean jj_3R_99() {
    if (jj_scan_token(IS_ELEMENT_OF)) return true;
    if (jj_3R_86()) return true;
    return false;
  }

  final private boolean jj_3R_38() {
    if (jj_scan_token(FUNCTION_LABEL)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_83()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_84()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(96)) return true;
    return false;
  }

  final private boolean jj_3R_98() {
    if (jj_scan_token(NOT_EQUAL)) return true;
    if (jj_3R_86()) return true;
    return false;
  }

  final private boolean jj_3R_37() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(55)) {
    jj_scanpos = xsp;
    if (jj_scan_token(56)) return true;
    }
    if (jj_scan_token(94)) return true;
    xsp = jj_scanpos;
    if (jj_3R_81()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_82()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(95)) return true;
    return false;
  }

  final private boolean jj_3R_88() {
    if (jj_scan_token(93)) return true;
    if (jj_3R_18()) return true;
    return false;
  }

  final private boolean jj_3R_20() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_37()) {
    jj_scanpos = xsp;
    if (jj_3R_38()) return true;
    }
    return false;
  }

  final private boolean jj_3R_94() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_97()) {
    jj_scanpos = xsp;
    if (jj_3R_98()) {
    jj_scanpos = xsp;
    if (jj_3R_99()) {
    jj_scanpos = xsp;
    if (jj_3R_100()) {
    jj_scanpos = xsp;
    if (jj_3R_101()) {
    jj_scanpos = xsp;
    if (jj_3R_102()) {
    jj_scanpos = xsp;
    if (jj_3R_103()) {
    jj_scanpos = xsp;
    if (jj_3R_104()) {
    jj_scanpos = xsp;
    if (jj_3R_105()) {
    jj_scanpos = xsp;
    if (jj_3R_106()) {
    jj_scanpos = xsp;
    if (jj_3R_107()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_97() {
    if (jj_scan_token(EQUAL_BOOLEAN)) return true;
    if (jj_3R_86()) return true;
    return false;
  }

  final private boolean jj_3R_77() {
    if (jj_3R_86()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_94()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_72() {
    if (jj_scan_token(91)) return true;
    if (jj_3R_18()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_88()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(92)) return true;
    return false;
  }

  final private boolean jj_3R_85() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(49)) {
    jj_scanpos = xsp;
    if (jj_scan_token(50)) {
    jj_scanpos = xsp;
    if (jj_scan_token(56)) {
    jj_scanpos = xsp;
    if (jj_scan_token(55)) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_27() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_29()) {
    jj_scanpos = xsp;
    if (jj_3R_72()) return true;
    }
    return false;
  }

  final private boolean jj_3_29() {
    if (jj_scan_token(91)) return true;
    if (jj_scan_token(92)) return true;
    return false;
  }

  final private boolean jj_3R_22() {
    if (jj_scan_token(FUNCTION_LABEL)) return true;
    if (jj_3R_16()) return true;
    if (jj_scan_token(EOL)) return true;
    if (jj_3R_16()) return true;
    if (jj_scan_token(96)) return true;
    return false;
  }

  final private boolean jj_3R_78() {
    if (jj_scan_token(AND)) return true;
    if (jj_3R_77()) return true;
    return false;
  }

  final private boolean jj_3R_32() {
    if (jj_3R_77()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_78()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_87() {
    if (jj_scan_token(93)) return true;
    if (jj_3R_85()) return true;
    if (jj_scan_token(EQUAL_BOOLEAN)) return true;
    if (jj_3R_86()) return true;
    return false;
  }

  final private boolean jj_3R_129() {
    if (jj_scan_token(TEXT)) return true;
    return false;
  }

  final private boolean jj_3_28() {
    if (jj_3R_30()) return true;
    return false;
  }

  final private boolean jj_3R_21() {
    if (jj_scan_token(FUNCTION_LABEL)) return true;
    if (jj_3R_16()) return true;
    if (jj_scan_token(CARTESIAN_SPECIAL_SEPERATOR)) return true;
    if (jj_3R_16()) return true;
    if (jj_scan_token(96)) return true;
    return false;
  }

  final private boolean jj_3R_39() {
    if (jj_scan_token(91)) return true;
    if (jj_3R_85()) return true;
    if (jj_scan_token(EQUAL_BOOLEAN)) return true;
    if (jj_3R_86()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_87()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(92)) return true;
    return false;
  }

  final private boolean jj_3_27() {
    if (jj_3R_29()) return true;
    return false;
  }

  final private boolean jj_3_26() {
    if (jj_3R_28()) return true;
    return false;
  }

  final private boolean jj_3R_24() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_16()) {
    jj_scanpos = xsp;
    if (jj_3R_39()) return true;
    }
    return false;
  }

  final private boolean jj_3_16() {
    if (jj_scan_token(91)) return true;
    if (jj_scan_token(92)) return true;
    return false;
  }

  final private boolean jj_3R_33() {
    if (jj_scan_token(OR)) return true;
    if (jj_3R_32()) return true;
    return false;
  }

  final private boolean jj_3_25() {
    if (jj_scan_token(97)) return true;
    if (jj_3R_17()) return true;
    if (jj_scan_token(96)) return true;
    return false;
  }

  final private boolean jj_3R_17() {
    if (jj_3R_32()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_33()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_24() {
    if (jj_scan_token(97)) return true;
    if (jj_3R_15()) return true;
    if (jj_scan_token(96)) return true;
    return false;
  }

  final private boolean jj_3R_30() {
    if (jj_scan_token(97)) return true;
    if (jj_3R_16()) return true;
    if (jj_scan_token(EOL)) return true;
    if (jj_3R_16()) return true;
    if (jj_scan_token(96)) return true;
    return false;
  }

  final private boolean jj_3_23() {
    if (jj_3R_27()) return true;
    return false;
  }

  final private boolean jj_3_15() {
    if (jj_3R_24()) return true;
    return false;
  }

  final private boolean jj_3_22() {
    if (jj_3R_26()) return true;
    return false;
  }

  final private boolean jj_3_21() {
    if (jj_3R_20()) return true;
    return false;
  }

  final private boolean jj_3_32() {
    if (jj_scan_token(97)) return true;
    if (jj_3R_16()) return true;
    if (jj_scan_token(93)) return true;
    if (jj_3R_16()) return true;
    if (jj_scan_token(93)) return true;
    if (jj_3R_16()) return true;
    if (jj_scan_token(96)) return true;
    return false;
  }

  final private boolean jj_3R_74() {
    if (jj_scan_token(97)) return true;
    if (jj_3R_16()) return true;
    if (jj_scan_token(CARTESIAN_SPECIAL_SEPERATOR)) return true;
    if (jj_3R_16()) return true;
    if (jj_scan_token(CARTESIAN_SPECIAL_SEPERATOR)) return true;
    if (jj_3R_16()) return true;
    if (jj_scan_token(96)) return true;
    return false;
  }

  final private boolean jj_3R_29() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_32()) {
    jj_scanpos = xsp;
    if (jj_3R_74()) return true;
    }
    return false;
  }

  final private boolean jj_3_20() {
    if (jj_3R_25()) return true;
    return false;
  }

  final private boolean jj_3R_128() {
    if (jj_3R_130()) return true;
    return false;
  }

  final private boolean jj_3R_127() {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  final private boolean jj_3R_126() {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  final private boolean jj_3R_125() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_126()) {
    jj_scanpos = xsp;
    if (jj_3R_127()) {
    jj_scanpos = xsp;
    if (jj_3R_128()) {
    jj_scanpos = xsp;
    if (jj_3_20()) {
    jj_scanpos = xsp;
    if (jj_3_21()) {
    jj_scanpos = xsp;
    if (jj_3_22()) {
    jj_scanpos = xsp;
    if (jj_3_23()) {
    jj_scanpos = xsp;
    if (jj_3_24()) {
    jj_scanpos = xsp;
    if (jj_3_25()) {
    jj_scanpos = xsp;
    if (jj_3_26()) {
    jj_scanpos = xsp;
    if (jj_3_27()) {
    jj_scanpos = xsp;
    if (jj_3_28()) {
    jj_scanpos = xsp;
    if (jj_3R_129()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3_14() {
    if (jj_3R_17()) return true;
    return false;
  }

  final private boolean jj_3_31() {
    if (jj_scan_token(97)) return true;
    if (jj_3R_16()) return true;
    if (jj_scan_token(93)) return true;
    if (jj_3R_16()) return true;
    if (jj_scan_token(96)) return true;
    return false;
  }

  final private boolean jj_3R_73() {
    if (jj_scan_token(97)) return true;
    if (jj_3R_16()) return true;
    if (jj_scan_token(CARTESIAN_SPECIAL_SEPERATOR)) return true;
    if (jj_3R_16()) return true;
    if (jj_scan_token(96)) return true;
    return false;
  }

  final private boolean jj_3R_28() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_31()) {
    jj_scanpos = xsp;
    if (jj_3R_73()) return true;
    }
    return false;
  }

  final private boolean jj_3_13() {
    if (jj_3R_15()) return true;
    return false;
  }

  final private boolean jj_3_12() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(55)) {
    jj_scanpos = xsp;
    if (jj_scan_token(56)) return true;
    }
    if (jj_scan_token(ASSIGNMENT)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  final private boolean jj_3R_124() {
    if (jj_3R_125()) return true;
    return false;
  }

  final private boolean jj_3_11() {
    if (jj_3R_23()) return true;
    return false;
  }

  final private boolean jj_3R_123() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(8)) {
    jj_scanpos = xsp;
    if (jj_scan_token(29)) return true;
    }
    if (jj_3R_125()) return true;
    return false;
  }

  final private boolean jj_3R_120() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_123()) {
    jj_scanpos = xsp;
    if (jj_3R_124()) return true;
    }
    return false;
  }

  final private boolean jj_3_19() {
    if (jj_scan_token(FACTORIAL)) return true;
    return false;
  }

  final private boolean jj_3R_121() {
    if (jj_scan_token(FACTORIAL)) return true;
    return false;
  }

  final private boolean jj_3_10() {
    if (jj_3R_22()) return true;
    return false;
  }

  final private boolean jj_3R_108() {
    if (jj_3R_120()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_121()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3_9() {
    if (jj_3R_21()) return true;
    return false;
  }

  final private boolean jj_3_8() {
    if (jj_3R_19()) return true;
    if (jj_scan_token(EQUAL)) return true;
    if (jj_3R_20()) return true;
    return false;
  }

  final private boolean jj_3R_23() {
    if (jj_scan_token(FUNCTION_LABEL)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(49)) {
    jj_scanpos = xsp;
    if (jj_scan_token(50)) {
    jj_scanpos = xsp;
    if (jj_scan_token(55)) {
    jj_scanpos = xsp;
    if (jj_scan_token(56)) return true;
    }
    }
    }
    if (jj_scan_token(96)) return true;
    if (jj_scan_token(ASSIGNMENT)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  public ParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[56];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static {
      jj_la1_0();
      jj_la1_1();
      jj_la1_2();
      jj_la1_3();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x0,0x0,0x0,0x0,0x40,0x21,0x0,0x21,0x61800100,0x21,0x0,0x0,0x0,0x0,0x61800100,0x0,0x61800100,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1800000,0x2000000,0x61800100,0x400040,0x0,0x200,0x400,0x3ff800,0x3ff800,0x1800000,0x1800000,0x6e000100,0xe000000,0x6e000100,0x61800100,0x80000000,0x20000100,0x60000100,0x40000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40000000,0x0,0x0,0x0,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x1800000,0x1800000,0x1800000,0x1800000,0x0,0x0,0x1800000,0x0,0xf99fbe00,0x0,0x0,0x0,0x1860000,0x1800000,0xf99fbe00,0x0,0xf99fbe00,0x0,0x1800000,0x1800000,0x0,0x1800000,0x1800000,0x0,0x1800000,0x1800000,0x0,0x0,0xf99fbe00,0x0,0x1860000,0x0,0x0,0x0,0x0,0x0,0x0,0xf99fbe00,0x0,0xf99fbe00,0xf99fbe00,0x1ff,0x0,0xf99fbe00,0x19be00,0x0,0x0,0x0,0x1800000,0x60000,0x1800000,0x180000,0x183e00,0xf8000000,0x0,0x0,};
   }
   private static void jj_la1_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x4000000,0x0,0x0,0x0,0x9ffffff,0x0,0x20000000,0x8000000,0x0,0x0,0x9ffffff,0x20000000,0x9ffffff,0x20000000,0x800000,0x0,0x20000000,0x0,0x0,0x20000000,0x0,0x8000000,0x0,0x0,0x9ffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x9ffffff,0x0,0x9ffffff,0x9ffffff,0x0,0x0,0x9ffffff,0x0,0x1000000,0x20000000,0x8000000,0x0,0x0,0x0,0x0,0x0,0xffffff,0x0,0x0,};
   }
   private static void jj_la1_3() {
      jj_la1_3 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x2,0x2,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[32];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  public Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  public Parser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 56; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 56; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public Parser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 56; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 56; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public Parser(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 56; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 56; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[98];
    for (int i = 0; i < 98; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 56; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 98; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

  final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 32; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
            case 30: jj_3_31(); break;
            case 31: jj_3_32(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
