/***
  * Neuroph  http://neuroph.sourceforge.net
 * Copyright by Neuroph Project (C) 2008
 *
 * This file is part of Neuroph framework.
 *
 * Neuroph is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * Neuroph is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with Neuroph. If not, see <http://www.gnu.org/licenses/>.
 */
package org.neuroph.contrib.jHRT.gui;
import geogebra.main.Application;
import geogebra.gui.virtualkeyboard.WindowsUnicodeKeyboard;

import java.awt.Dimension;
import java.awt.Font;
import java.awt.event.ActionListener;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.font.TextAttribute;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.Map;
import java.util.StringTokenizer;
import java.util.Vector;
import javax.swing.DefaultListModel;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.tree.TreePath;
import org.neuroph.contrib.imgrec.ColorMode;
import org.neuroph.contrib.imgrec.FractionRgbData;
import org.neuroph.contrib.imgrec.ImageRecognitionHelper;
import org.neuroph.contrib.jHRT.LetterRecognition;
import org.neuroph.contrib.jHRT.SaveImage;
import org.neuroph.core.NeuralNetwork;
import org.neuroph.core.learning.TrainingSet;
import org.neuroph.easyneurons.imgrec.ImagesLoader;
import org.neuroph.nnet.learning.MomentumBackpropagation;
import org.neuroph.util.TransferFunctionType;
import org.neuroph.util.VectorParser;

/**
 *
 * @author Mefistofeles
 */
public class HandwritingRecognitionTool extends javax.swing.JFrame {
	
	private Application app;
	private WindowsUnicodeKeyboard kb = null;
	
	private int widthNormal  = 600;
	private int heightNormal = 353;
	private int widthSmall   = 312;
	private int heightSmall  = 314;
	private int widthSplit   = 289;
	
	private int timer = 2;
	
	public WindowsUnicodeKeyboard getKeyboard() {
		try {
			kb = new WindowsUnicodeKeyboard();
		} catch (Exception e) {}
		return kb;
	}
	
    /** Creates new form GUI */
    public HandwritingRecognitionTool(final Application app) {

        super();
        
        this.app = app;
		this.setFocusableWindowState(false);
		this.setAlwaysOnTop(true);
		this.setResizable(false);
		
		int width  = widthNormal;
		int height = heightNormal;
        if (Application.isHandwritingRecognitionAutoAdd()) {
        	width = widthSmall;
        }
        if (Application.isHandwritingRecognitionTimedRecognise()) {
        	height = heightSmall;
        }
       	setSize(width, height);
       	setPreferredSize(new Dimension(width, height));
        
        initComponents();
        centerTabbedPane.remove(networkPanel);
        centerTabbedPane.remove(trainingPanel);
        TreeManager.setLettersTreeModel(jTree1);

        recognition = new LetterRecognition();
        
		if (app != null)
			setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
		else
			setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		//setVisible(true);
		addWindowListener(new WindowListener() {
			public void windowClosed(WindowEvent arg0) {
				//System.out.println("Window close event occur");
			}
			public void windowActivated(WindowEvent arg0) {
				//System.out.println("Window Activated");
			}
			public void windowClosing(WindowEvent arg0) {
				//System.out.println("Window Closing");
				// if closed with the X, stop it auto-opening
				Application.setHandwritingRecognitionActive(false);
				app.getGuiManager().updateMenubar();
			}
			public void windowDeactivated(WindowEvent arg0) {
				//System.out.println("Window Deactivated");
			}
			public void windowDeiconified(WindowEvent arg0) {
				//System.out.println("Window Deiconified");
			}
			public void windowIconified(WindowEvent arg0) {
				//System.out.println("Window Iconified");
			}
			public void windowOpened(WindowEvent arg0) {
				//System.out.println("Window Opened");
			}
		});
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        //aboutDialog = new javax.swing.JDialog();
        westAboutPanel = new javax.swing.JPanel();
        northAboutPanel = new javax.swing.JPanel();
        jPanel9 = new javax.swing.JPanel();
        logoAbout = new javax.swing.JLabel();
        jPanel10 = new javax.swing.JPanel();
        titleAbout = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        centerAboutPanel = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        jPanel11 = new javax.swing.JPanel();
        closeAboutButton = new javax.swing.JButton();
        southPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        centerTabbedPane = new javax.swing.JTabbedPane();
        trainingPanel = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jButton8 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        drawingPanelTrening = new org.neuroph.contrib.jHRT.gui.DrawingPanel();
        jPanel8 = new javax.swing.JPanel();
        jImagePanel = new org.neuroph.contrib.jHRT.gui.JImagePanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTree1 = new javax.swing.JTree();
        jLabel2 = new javax.swing.JLabel();
        trainingButton = new javax.swing.JButton();
        nextButton = new javax.swing.JButton();
        networkPanel = new javax.swing.JPanel();
        createNetworkButton = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        neuralNetworkNameTextField = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        NeuralNetworkFunctionTypeComboBox = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        hiddenLayerNeuronsTextField = new javax.swing.JTextField();
        recognitionPanel = new javax.swing.JPanel();
        jSplitPane1 = new javax.swing.JSplitPane();
        leftPanel = new javax.swing.JPanel();
        jSplitPane2 = new javax.swing.JSplitPane();
        upperPanel = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        //jCheckBox1 = new javax.swing.JCheckBox();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        probabilitiesList = new javax.swing.JList();
        botomPanel = new javax.swing.JPanel();
        bottomPanelII = new javax.swing.JPanel();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        drawingPanelRecognition = new org.neuroph.contrib.jHRT.gui.DrawingPanel();
        /*
        rightPanel = new javax.swing.JPanel();
        rightBotomPanel = new javax.swing.JPanel();
        jSpinner1 = new javax.swing.JSpinner();
        jToggleButton1 = new javax.swing.JToggleButton();
        jToggleButton2 = new javax.swing.JToggleButton();
        jToggleButton3 = new javax.swing.JToggleButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        exitMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        aboutMenuItem = new javax.swing.JMenuItem();

        aboutDialog.setTitle("About");
        aboutDialog.setAlwaysOnTop(true);
        aboutDialog.setMinimumSize(new java.awt.Dimension(440, 350));
        aboutDialog.setResizable(false);
        */

        org.jdesktop.layout.GroupLayout westAboutPanelLayout = new org.jdesktop.layout.GroupLayout(westAboutPanel);
        westAboutPanel.setLayout(westAboutPanelLayout);
        westAboutPanelLayout.setHorizontalGroup(
            westAboutPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 100, Short.MAX_VALUE)
        );
        westAboutPanelLayout.setVerticalGroup(
            westAboutPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 201, Short.MAX_VALUE)
        );

        //aboutDialog.getContentPane().add(westAboutPanel, java.awt.BorderLayout.LINE_START);

        northAboutPanel.setPreferredSize(new java.awt.Dimension(426, 60));
        northAboutPanel.setLayout(new javax.swing.BoxLayout(northAboutPanel, javax.swing.BoxLayout.LINE_AXIS));

        logoAbout.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/neuroph/contrib/jHRT/resources/Neuroph_OCR_logo_about.jpg"))); // NOI18N
        jPanel9.add(logoAbout);

        northAboutPanel.add(jPanel9);

        jPanel10.setLayout(new java.awt.GridLayout(2, 0));

        titleAbout.setFont(new java.awt.Font("Times New Roman", 1, 18));
        titleAbout.setText("Neuroph OCR - Handwriting Recognition");
        jPanel10.add(titleAbout);

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 12));
        jLabel3.setText("Version: 0.1 alpha");
        jPanel10.add(jLabel3);

        northAboutPanel.add(jPanel10);

        //aboutDialog.getContentPane().add(northAboutPanel, java.awt.BorderLayout.PAGE_START);

        centerAboutPanel.setLayout(new java.awt.BorderLayout());

        jTextPane1.setEditable(false);
        jTextPane1.setText("This software is part of Neuroph Project, and it\n" +
            "demonstrates how neural networks can be applied for\n" +
            "handwritting recognition.\n\n" +
            "See http://neuroph.sourceforge.net for more info\n\n" +
            "-----------Developers-----------\n" +
            "Boris Horvat\n " +
            "email: horvat.z.boris@gmail.com\n" +
            "Nemanja Jovanovic\n " +
            "email: nemanja.jovanovic.1987@gmail.com\n" +
            "Damir Kocic\n " +
            "email: kocicdamir87@gmail.com\n\n" +
            "--------------Mentor--------------\n" +
            "Zoran Sevarac\n " +
            "email: sevarac@gmail.com\n\n" +
            "----------Project page---------- " +
            "http://www.netbeans-serbia.org/projects/handwritingrecognition");
        jScrollPane4.setViewportView(jTextPane1);

        centerAboutPanel.add(jScrollPane4, java.awt.BorderLayout.CENTER);

        //aboutDialog.getContentPane().add(centerAboutPanel, java.awt.BorderLayout.CENTER);

        jPanel11.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        /*
        closeAboutButton.setText("Close");
        closeAboutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeAboutButtonActionPerformed(evt);
            }
        });
        jPanel11.add(closeAboutButton);

        aboutDialog.getContentPane().add(jPanel11, java.awt.BorderLayout.PAGE_END);

        aboutDialog.getAccessibleContext().setAccessibleParent(centerTabbedPane);
        */

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Handwriting Recognition");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setMinimumSize(new java.awt.Dimension(800, 600));

        southPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 0, 0));
        southPanel.add(jLabel1);

        getContentPane().add(southPanel, java.awt.BorderLayout.PAGE_END);

        centerTabbedPane.setPreferredSize(new java.awt.Dimension(300, 130));

        trainingPanel.setLayout(new java.awt.BorderLayout());

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Create picture"));
        jPanel5.setMinimumSize(new java.awt.Dimension(200, 50));
        jPanel5.setPreferredSize(new java.awt.Dimension(300, 200));

        jPanel7.setLayout(new java.awt.GridBagLayout());

        jButton8.setText("Save");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        jPanel7.add(jButton8, gridBagConstraints);

        jButton9.setText("Clear");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.insets = new java.awt.Insets(0, 1, 0, 1);
        jPanel7.add(jButton9, gridBagConstraints);

        jPanel6.setPreferredSize(new java.awt.Dimension(200, 250));
        jPanel6.setLayout(new java.awt.GridBagLayout());

        DrawingListener dl1 = new DrawingListener(drawingPanelTrening);
        drawingPanelTrening.addMouseMotionListener(dl1);
        drawingPanelTrening.addMouseListener(dl1);
        drawingPanelTrening.setPreferredSize(new java.awt.Dimension(200, 250));
        jPanel6.add(drawingPanelTrening, new java.awt.GridBagConstraints());

        org.jdesktop.layout.GroupLayout jPanel5Layout = new org.jdesktop.layout.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel5Layout.createSequentialGroup()
                .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(jPanel6, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 278, Short.MAX_VALUE)
                    .add(jPanel7, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 278, Short.MAX_VALUE))
                .add(10, 10, 10))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel5Layout.createSequentialGroup()
                .add(jPanel6, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 334, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jPanel7, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 55, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        trainingPanel.add(jPanel5, java.awt.BorderLayout.LINE_START);

        jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder("Training set pictures"));

        jImagePanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jImagePanel.setPreferredSize(new java.awt.Dimension(150, 150));

        org.jdesktop.layout.GroupLayout jImagePanelLayout = new org.jdesktop.layout.GroupLayout(jImagePanel);
        jImagePanel.setLayout(jImagePanelLayout);
        jImagePanelLayout.setHorizontalGroup(
            jImagePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 146, Short.MAX_VALUE)
        );
        jImagePanelLayout.setVerticalGroup(
            jImagePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 146, Short.MAX_VALUE)
        );

        jTree1.addTreeSelectionListener(new TreeSelectionListener() {
            public void valueChanged(TreeSelectionEvent evt) {
                TreePath[] paths = evt.getPaths();
                for (int i=0; i<paths.length; i++) {
                    if(!paths[i].getLastPathComponent().toString().contains("Lette")) {
                        if (evt.isAddedPath(i)) {
                            String path = new String();
                            String folder = TreeManager.getPath();
                            String file = paths[i].getLastPathComponent().toString();
                            path = folder + "/" + file;
                            jLabel2.setText(paths[i].getLastPathComponent().toString());
                            jImagePanel.setImage(path);
                            if(!jImagePanel.isVisible())
                            jImagePanel.setVisible(true);
                            break;
                        } else {

                            break;
                        }
                    } else {
                        jImagePanel.setVisible(false);
                        jLabel2.setText(new String());
                    }
                }
            }
        });
        jScrollPane3.setViewportView(jTree1);

        trainingButton.setText("Create Training set");
        trainingButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                trainingButtonActionPerformed(evt);
            }
        });

        nextButton.setText("Next > ");
        nextButton.setEnabled(false);
        nextButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextButtonActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel8Layout = new org.jdesktop.layout.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel8Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel8Layout.createSequentialGroup()
                        .add(jScrollPane3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 190, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(18, 18, 18)
                        .add(jPanel8Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jImagePanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jPanel8Layout.createSequentialGroup()
                                .add(14, 14, 14)
                                .add(jLabel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 71, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
                    .add(jPanel8Layout.createSequentialGroup()
                        .add(trainingButton)
                        .add(18, 18, 18)
                        .add(nextButton)))
                .addContainerGap(83, Short.MAX_VALUE))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel8Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jScrollPane3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jPanel8Layout.createSequentialGroup()
                        .add(jLabel2)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jImagePanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 58, Short.MAX_VALUE)
                .add(jPanel8Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(trainingButton)
                    .add(nextButton))
                .addContainerGap())
        );

        trainingPanel.add(jPanel8, java.awt.BorderLayout.CENTER);

        centerTabbedPane.addTab("Images & training set", trainingPanel);

        createNetworkButton.setText("Create Network");
        createNetworkButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createNetworkButtonActionPerformed(evt);
            }
        });

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Neural Netowrk Settings"));
        jPanel4.setLayout(new java.awt.GridBagLayout());

        jLabel6.setText("Neural network label:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.RELATIVE;
        gridBagConstraints.ipadx = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel4.add(jLabel6, gridBagConstraints);

        neuralNetworkNameTextField.setPreferredSize(new java.awt.Dimension(100, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 0);
        jPanel4.add(neuralNetworkNameTextField, gridBagConstraints);

        jLabel4.setText("Function:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel4.add(jLabel4, gridBagConstraints);

        NeuralNetworkFunctionTypeComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[]{ TransferFunctionType.valueOf("SIGMOID").getTypeLabel(),TransferFunctionType.valueOf("TANH").getTypeLabel()}));
        NeuralNetworkFunctionTypeComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NeuralNetworkFunctionTypeComboBoxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 0);
        jPanel4.add(NeuralNetworkFunctionTypeComboBox, gridBagConstraints);

        jLabel5.setText("Hidden Layers Neurons Count:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel4.add(jLabel5, gridBagConstraints);

        hiddenLayerNeuronsTextField.setPreferredSize(new java.awt.Dimension(100, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel4.add(hiddenLayerNeuronsTextField, gridBagConstraints);

        org.jdesktop.layout.GroupLayout networkPanelLayout = new org.jdesktop.layout.GroupLayout(networkPanel);
        networkPanel.setLayout(networkPanelLayout);
        networkPanelLayout.setHorizontalGroup(
            networkPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(networkPanelLayout.createSequentialGroup()
                .add(networkPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(networkPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .add(jPanel4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 210, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(networkPanelLayout.createSequentialGroup()
                        .add(59, 59, 59)
                        .add(createNetworkButton)))
                .addContainerGap(543, Short.MAX_VALUE))
        );
        networkPanelLayout.setVerticalGroup(
            networkPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(networkPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 202, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(createNetworkButton)
                .addContainerGap(210, Short.MAX_VALUE))
        );

        centerTabbedPane.addTab("Neural Network", networkPanel);

        recognitionPanel.setLayout(new java.awt.BorderLayout());

        //jSplitPane1.setDividerLocation(250);

        leftPanel.setLayout(new java.awt.BorderLayout());

        /*
        jSplitPane2.setDividerLocation(180);
        jSplitPane2.setDividerSize(3);
        jSplitPane2.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        jSplitPane2.setEnabled(false);
        */

        upperPanel.setLayout(new java.awt.BorderLayout());

        jButton6.setText("accept");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton6);

        jButton7.setText("discard");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton7);

        /*
        jCheckBox1.setText("auto add");
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });
        jPanel1.add(jCheckBox1);
        */

        upperPanel.add(jPanel1, java.awt.BorderLayout.PAGE_END);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Probabilites"));
        jPanel2.setLayout(new java.awt.BorderLayout());

        probabilitiesList.setModel(new javax.swing.DefaultListModel());
        probabilitiesList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane2.setViewportView(probabilitiesList);

        jPanel2.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        upperPanel.add(jPanel2, java.awt.BorderLayout.CENTER);

        //jSplitPane2.setTopComponent(upperPanel);

        botomPanel.setLayout(new java.awt.BorderLayout());

        jButton4.setText("recognize");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        bottomPanelII.add(jButton4);

        jButton5.setText("clear");
        jButton5.setPreferredSize(new java.awt.Dimension(79, 23));
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        bottomPanelII.add(jButton5);

        if (!Application.isHandwritingRecognitionTimedRecognise()) {
        	botomPanel.add(bottomPanelII, java.awt.BorderLayout.PAGE_END);
        }
        
        //jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Drawing area"));
        jPanel3.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                jPanel3ComponentResized(evt);
            }
        });
        jPanel3.setLayout(new java.awt.BorderLayout());

        DrawingListener dl = new DrawingListener(drawingPanelRecognition);
        drawingPanelRecognition.addMouseListener(dl);
        drawingPanelRecognition.addMouseMotionListener(dl);
        jPanel3.add(drawingPanelRecognition, java.awt.BorderLayout.CENTER);

        botomPanel.add(jPanel3, java.awt.BorderLayout.CENTER);

        /*
        jSplitPane2.setRightComponent(botomPanel);

        leftPanel.add(jSplitPane2, java.awt.BorderLayout.CENTER);
        */

        jSplitPane1.setLeftComponent(botomPanel);

        /*
        rightPanel.setLayout(new java.awt.BorderLayout());

        jSpinner1.setModel(new javax.swing.SpinnerListModel(new String[] {"20", "24", "28", "32", "36"}));
        jSpinner1.setEditor(new javax.swing.JSpinner.ListEditor(jSpinner1));
        jSpinner1.setFocusable(false);
        jSpinner1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinner1StateChanged(evt);
            }
        });
        jSpinner1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jSpinner1KeyReleased(evt);
            }
        });
        rightBotomPanel.add(jSpinner1);

        jToggleButton1.setText("B");
        jToggleButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton1ActionPerformed(evt);
            }
        });
        rightBotomPanel.add(jToggleButton1);

        jToggleButton2.setText("I");
        jToggleButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton2ActionPerformed(evt);
            }
        });
        rightBotomPanel.add(jToggleButton2);

        jToggleButton3.setText("U");
        jToggleButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton3ActionPerformed(evt);
            }
        });
        rightBotomPanel.add(jToggleButton3);

        rightPanel.add(rightBotomPanel, java.awt.BorderLayout.PAGE_END);

        jTextArea1.setFont(new java.awt.Font("Serif", 0, 20));
        jScrollPane1.setViewportView(jTextArea1);

        rightPanel.add(jScrollPane1, java.awt.BorderLayout.CENTER);
        */

        if (Application.isHandwritingRecognitionAutoAdd()) {
        	jSplitPane1.setRightComponent(null);
        	jSplitPane1.setDividerSize(0);
        } else {
        	jSplitPane1.setRightComponent(upperPanel);
        	jSplitPane1.setDividerSize(9);
        	jSplitPane1.setDividerLocation(widthSplit);
        }
        
        jSplitPane1.setResizeWeight(1.00);

        recognitionPanel.add(jSplitPane1, java.awt.BorderLayout.CENTER);

        centerTabbedPane.addTab("Drawing Area", recognitionPanel);

        getContentPane().add(centerTabbedPane, java.awt.BorderLayout.CENTER);

        /*
        fileMenu.setText("File");

        exitMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_MASK));
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        jMenuBar1.add(fileMenu);

        helpMenu.setText("Help");

        aboutMenuItem.setText("About");
        aboutMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutMenuItemActionPerformed(evt);
            }
        });
        helpMenu.add(aboutMenuItem);

        jMenuBar1.add(helpMenu);

        setJMenuBar(jMenuBar1);
        */

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    public void repaint() {
    	int width  = widthNormal;
    	int height = heightNormal;
        if (Application.isHandwritingRecognitionAutoAdd()) {
        	width = widthSmall;
        }
        if (Application.isHandwritingRecognitionTimedRecognise()) {
        	height = heightSmall;
        }
       	setSize(width, height);
       	setPreferredSize(new Dimension(width, height));
       	
        if (Application.isHandwritingRecognitionAutoAdd()) {
        	jSplitPane1.setRightComponent(null);
        	jSplitPane1.setDividerSize(0);
        } else {
        	jSplitPane1.setRightComponent(upperPanel);
        	jSplitPane1.setDividerSize(9);
        	jSplitPane1.setDividerLocation(widthSplit);
        }
        if (Application.isHandwritingRecognitionTimedRecognise()) {
        	botomPanel.remove(bottomPanelII);
        } else {
        	botomPanel.add(bottomPanelII,java.awt.BorderLayout.PAGE_END);
        }        
       	
        super.repaint();
    }

    /*
    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed
    */

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        DefaultListModel model = (DefaultListModel) probabilitiesList.getModel();
        model.clear();
        drawingPanelRecognition.clearDrawingArea();
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        drawingPanelRecognition.clearDrawingArea();
        ((DefaultListModel) probabilitiesList.getModel()).clear();
        new File("letter.png").delete();
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jPanel3ComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jPanel3ComponentResized
        drawingPanelRecognition.setPreferredSize(new Dimension(jPanel3.getWidth(), jPanel3.getHeight()));
}//GEN-LAST:event_jPanel3ComponentResized

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        ((DefaultListModel) probabilitiesList.getModel()).clear();
        drawingPanelRecognition.getDrawnLetter();
        recognition.recognize((DefaultListModel) probabilitiesList.getModel());
        probabilitiesList.setSelectedIndex(0);
     
        if (Application.isHandwritingRecognitionAutoAdd()) {
            DefaultListModel model = (DefaultListModel) probabilitiesList.getModel();
            String letter = model.getElementAt(0).toString().substring(0, 1);
            model.clear();
            if (app != null)
                app.getGuiManager().insertStringIntoTextfield(letter + "", false, false, false);
   	        else
               getKeyboard().doType(false, false, false,letter);
            drawingPanelRecognition.clearDrawingArea();
        } else if (Application.isHandwritingRecognitionTimedAdd()) {
                Thread delay = new Thread() {
                public void run() {
                 try {
                	 sleep(5000);
                	 if (probabilitiesList.getSelectedIndex() > -1) {
                		 DefaultListModel model = (DefaultListModel) probabilitiesList.getModel();
                		 String letter = model.getElementAt(probabilitiesList.getSelectedIndex()).toString().substring(0, 1);
                		 model.clear();
                     if (app != null)
                    	 app.getGuiManager().insertStringIntoTextfield(letter + "", false, false, false);
                     else
                    	 getKeyboard().doType(false, false, false,letter);
                     drawingPanelRecognition.clearDrawingArea();    } 
                 } catch (InterruptedException e) {
                 }
                }
               };
               delay.start();
        	
        }
        new File("letter.png").delete();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        drawingPanelTrening.clearDrawingArea();
    }//GEN-LAST:event_jButton9ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed

        SaveImage.createTrainingSetFolder();

        String letter = JOptionPane.showInputDialog("Enter the drawn letter!!!").toUpperCase();
        drawingPanelTrening.saveDrawnLetter(letter);
        JOptionPane.showMessageDialog(this, "Letter succesfully added!!!");
        drawingPanelTrening.clearDrawingArea();
        TreeManager.setLettersTreeModel(jTree1);
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        if (probabilitiesList.getSelectedIndex() > -1) {
            DefaultListModel model = (DefaultListModel) probabilitiesList.getModel();
            String letter = model.getElementAt(probabilitiesList.getSelectedIndex()).toString().substring(0, 1);
            model.clear();
            if (app != null)
                app.getGuiManager().insertStringIntoTextfield(letter + "", false, false, false);
   	        else
               getKeyboard().doType(false, false, false,letter);
            drawingPanelRecognition.clearDrawingArea();
        } else {
            //todo
        }
    }//GEN-LAST:event_jButton6ActionPerformed

    /*
    private void jToggleButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton1ActionPerformed
        if (evt.getActionCommand().equals("B")) {
            styles.put(TextAttribute.WEIGHT, TextAttribute.WEIGHT_BOLD);
            jToggleButton1.setText(" B");
        } else {
            styles.put(TextAttribute.WEIGHT, TextAttribute.WEIGHT_REGULAR);
            jToggleButton1.setText("B");
        }
        font = font.deriveFont(styles);
        jTextArea1.setFont(font);
    }//GEN-LAST:event_jToggleButton1ActionPerformed

    private void jToggleButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton2ActionPerformed
        if (evt.getActionCommand().equals("I")) {
            styles.put(TextAttribute.POSTURE, TextAttribute.POSTURE_OBLIQUE);
            jToggleButton2.setText(" I");
        } else {
            styles.put(TextAttribute.POSTURE, TextAttribute.POSTURE_REGULAR);
            jToggleButton2.setText("I");
        }
        font = font.deriveFont(styles);
        jTextArea1.setFont(font);
    }//GEN-LAST:event_jToggleButton2ActionPerformed

    private void jToggleButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton3ActionPerformed
        if (evt.getActionCommand().equals("U")) {
            styles.put(TextAttribute.UNDERLINE, TextAttribute.UNDERLINE_ON);
            jToggleButton3.setText(" U");
        } else {
            styles.put(TextAttribute.UNDERLINE, TextAttribute.UNDERLINE);
            jToggleButton3.setText("U");
        }
        font = font.deriveFont(styles);
        jTextArea1.setFont(font);
    }//GEN-LAST:event_jToggleButton3ActionPerformed

    private void jSpinner1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jSpinner1KeyReleased
        jSpinner1.setValue(20);
    }//GEN-LAST:event_jSpinner1KeyReleased

    private void jSpinner1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinner1StateChanged
        int i = Integer.parseInt((String) jSpinner1.getValue());
        styles.put(TextAttribute.SIZE, i);
        font = font.deriveFont(styles);
        jTextArea1.setFont(font);
    }//GEN-LAST:event_jSpinner1StateChanged

    private void aboutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutMenuItemActionPerformed
        aboutDialog.setBounds(350, 200, 0, 0);
        aboutDialog.setVisible(true);
    }//GEN-LAST:event_aboutMenuItemActionPerformed

    private void closeAboutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeAboutButtonActionPerformed
        aboutDialog.setVisible(false);
    }//GEN-LAST:event_closeAboutButtonActionPerformed
    */

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBox1ActionPerformed

    private void trainingButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_trainingButtonActionPerformed
        HashMap<String, FractionRgbData> rgbDataMap = new HashMap<String, FractionRgbData>();
        String imageDir = "Letters/Training Set/";
        try {
            File labeledImagesDir = new File(imageDir);
            rgbDataMap.putAll(ImagesLoader.getFractionRgbDataForDirectory(labeledImagesDir,
                    new Dimension(DrawingPanel.FIXED_WIDTH, DrawingPanel.FIXED_HIGHT)));

            for (String imgName : rgbDataMap.keySet()) {
                StringTokenizer st = new StringTokenizer(imgName, "._");
                String imageLabel = st.nextToken();
                if (!imageLabels.contains(imageLabel)) {
                    imageLabels.add(imageLabel);
                }
            }
            Collections.sort(imageLabels);
        } catch (IOException ioe) {
            System.err.println("Unable to load images from labeled images dir: '" + imageDir + "'");
            System.err.println(ioe.toString());
        }

        activeTrainingSet = ImageRecognitionHelper.createTrainingSet(imageLabels, rgbDataMap);

        int neurons = 0;
        if (imageLabels.size() < 12) {
            neurons = 12;
        } else {
            neurons = imageLabels.size();
        }

        hiddenLayerNeuronsTextField.setText(Integer.toString(neurons));

        nextButton.setEnabled(true);
    }//GEN-LAST:event_trainingButtonActionPerformed

    private void createNetworkButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createNetworkButtonActionPerformed
        TransferFunctionType transferFunctionType = TransferFunctionType.valueOf(NeuralNetworkFunctionTypeComboBox.getSelectedItem().toString().toUpperCase());
        String name = neuralNetworkNameTextField.getText();
        String hiddenLayersStr = hiddenLayerNeuronsTextField.getText();

        Vector<Integer> hiddenLayersNeuronsCount;

        try {
            hiddenLayersNeuronsCount = VectorParser.parseInteger(hiddenLayersStr);
        } catch (Exception ex) {
            JOptionPane.showConfirmDialog(null,
                    "Invalid input! Hidden Layers Neuron Counts must be entered as space separated integers.",
                    "Error", JOptionPane.DEFAULT_OPTION);
            return;
        }

        // create neural network
        NeuralNetwork activeNeuralNetwork = ImageRecognitionHelper.createNewNeuralNetwork(name, new Dimension(DrawingPanel.FIXED_WIDTH, DrawingPanel.FIXED_HIGHT), ColorMode.BLACK_AND_WHITE, imageLabels, hiddenLayersNeuronsCount, transferFunctionType);
        MomentumBackpropagation mbp = new MomentumBackpropagation();
        mbp.setLearningRate(0.1);
        mbp.setMaxError(0.01);
        mbp.setMomentum(0.0);
        activeNeuralNetwork.learnInNewThread(activeTrainingSet, mbp);
        activeNeuralNetwork.save(name + ".nnet");
        centerTabbedPane.setSelectedIndex(2);

        recognition = new LetterRecognition(name + ".nnet");

    }//GEN-LAST:event_createNetworkButtonActionPerformed

    private void nextButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextButtonActionPerformed
        centerTabbedPane.setSelectedIndex(1);
    }//GEN-LAST:event_nextButtonActionPerformed

    private void NeuralNetworkFunctionTypeComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NeuralNetworkFunctionTypeComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_NeuralNetworkFunctionTypeComboBoxActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox NeuralNetworkFunctionTypeComboBox;
    //private javax.swing.JDialog aboutDialog;
    //private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JPanel botomPanel;
    private javax.swing.JPanel bottomPanelII;
    private javax.swing.JPanel centerAboutPanel;
    private javax.swing.JTabbedPane centerTabbedPane;
    private javax.swing.JButton closeAboutButton;
    private javax.swing.JButton createNetworkButton;
    private org.neuroph.contrib.jHRT.gui.DrawingPanel drawingPanelRecognition;
    private org.neuroph.contrib.jHRT.gui.DrawingPanel drawingPanelTrening;
    //private javax.swing.JMenuItem exitMenuItem;
    //private javax.swing.JMenu fileMenu;
    //private javax.swing.JMenu helpMenu;
    private javax.swing.JTextField hiddenLayerNeuronsTextField;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    //private javax.swing.JCheckBox jCheckBox1;
    private org.neuroph.contrib.jHRT.gui.JImagePanel jImagePanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    //private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    //private javax.swing.JSpinner jSpinner1;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JSplitPane jSplitPane2;
    //private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextPane jTextPane1;
    //private javax.swing.JToggleButton jToggleButton1;
    //private javax.swing.JToggleButton jToggleButton2;
    //private javax.swing.JToggleButton jToggleButton3;
    private javax.swing.JTree jTree1;
    private javax.swing.JPanel leftPanel;
    private javax.swing.JLabel logoAbout;
    private javax.swing.JPanel networkPanel;
    private javax.swing.JTextField neuralNetworkNameTextField;
    private javax.swing.JButton nextButton;
    private javax.swing.JPanel northAboutPanel;
    private javax.swing.JList probabilitiesList;
    private javax.swing.JPanel recognitionPanel;
    //private javax.swing.JPanel rightBotomPanel;
    //private javax.swing.JPanel rightPanel;
    private javax.swing.JPanel southPanel;
    private javax.swing.JLabel titleAbout;
    private javax.swing.JButton trainingButton;
    private javax.swing.JPanel trainingPanel;
    private javax.swing.JPanel upperPanel;
    private javax.swing.JPanel westAboutPanel;
    // End of variables declaration//GEN-END:variables
    private LetterRecognition recognition;
    private Map<TextAttribute, Object> styles = new Hashtable<TextAttribute, Object>();
    private Font font = new Font("Serif", Font.PLAIN, 20);
    TrainingSet activeTrainingSet;
    ArrayList<String> imageLabels = new ArrayList<String>();
}
