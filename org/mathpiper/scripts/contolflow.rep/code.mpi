
10 # Apply(_applyoper,_applyargs) _ (Or(IsString(applyoper), IsList(applyoper))) <-- ApplyPure(applyoper,applyargs);
20 # Apply(applyoper_IsAtom,_applyargs) <-- ApplyPure(String(applyoper),applyargs);

30 # Apply(Lambda(_args,_body),_applyargs) <-- `ApplyPure(Hold({@args,@body}),applyargs);
UnFence("Apply",2);



TemplateFunction("For",{start,predicate,increment,body})
[
  Eval(start);
  While (Equals(Eval(predicate),True))
  [
    Eval(body);
    Eval(increment);
  ];
];
UnFence("For",4);
HoldArgNr("For",4,1);
HoldArgNr("For",4,2);
HoldArgNr("For",4,3);
HoldArgNr("For",4,4);


Retract("ForEach" , *);


TemplateFunction("ForEach",{item,listOrString,body})
[
  If(And(Equals(IsGeneric(listOrString),True),
         Equals(GenericTypeName(listOrString),"Array")
         ),
    `ForEachInArray(@item,listOrString,@body),
    [

      MacroLocal(item);
      
      If(IsString(listOrString),
      [
          
          Local(index, stringLength);
          
          stringLength := Length(listOrString);
          
          index := 1;
          While(index <= stringLength )
          [
             MacroSet(item,listOrString[index] );
             
             Eval(body);
             
             index++;
          ];

      ],
      [
          Local(foreachtail);
          Set(foreachtail,listOrString);
          While(Not(Equals(foreachtail,{})))
          [
            MacroSet(item,First(foreachtail));
            Eval(body);
            Set(foreachtail,Rest(foreachtail));
          ];
      ]);
    ]);
];
UnFence("ForEach",3);
HoldArgNr("ForEach",3,1);
HoldArgNr("ForEach",3,3);





LocalSymbols(i,nr)
[
  TemplateFunction("ForEachInArray",{item,list,body})
  [
    Local(i,nr);
    MacroLocal(item);
    Set(i,1);
    Set(nr,Length(list));
    While(i<=nr)
    [
      MacroSet(item,list[i]);
      Eval(body);
      Set(i,AddN(i,1));
    ];
  ];
];

UnFence("ForEachInArray",3);
HoldArgNr("ForEachInArray",3,1);
HoldArgNr("ForEachInArray",3,3);



DefMacroRuleBase("Lambda",{args,body});


TemplateFunction("Until",{predicate,body})
[
  Eval(body);
  While (Equals(Eval(predicate),False))
  [
    Eval(body);
  ];
  True;
];
UnFence("Until",2);
HoldArgNr("Until",2,1);
HoldArgNr("Until",2,2);

