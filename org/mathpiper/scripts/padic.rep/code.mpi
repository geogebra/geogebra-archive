



Expand(x); 

10 # PAdicExpand(_x,_y) <--
[
  Local(coefs);
  coefs:=PAdicExpandInternal(x,y);
  Subst(p,y)Add(coefs*(p^(0 .. Length(coefs))));
];
 
10 # PAdicExpandInternal(0,_y) <-- {};
20 # PAdicExpandInternal(_x,_y) <--
[
  Mod(x,y) : PAdicExpandInternal(Div(x,y),y);
];






ExtendedEuclidean(_f,_g) <--
[
   Local(r,s,t,i);

   
   r:={f,g};
   s:={1,0};
   t:={0,1};
   i:=1;

   Local(q,newr,news,newt);
   newr:=1;
   While(newr != 0)
   [
     newr:=Rem(r[i],r[i+1]);
     q   :=Div(r[i],r[i+1]);
     news  :=(s[i]-q*s[i+1]);
     newt  :=(t[i]-q*t[i+1]);
     DestructiveAppend(r  ,newr);
     DestructiveAppend(s,news);
     DestructiveAppend(t,newt);
     i++;
   ];
   {r[i],s[i],t[i]};
];

ExtendedEuclideanMonic(_f,_g) <--
[
   Local(rho,r,s,t,i);



   
   rho:={LeadingCoef(f),LeadingCoef(g)};
   r:={Monic(f),Monic(g)};
   s:={1/(rho[1]),0};
   t:={0,1/(rho[2])};
   i:=1;

   Local(q,newr,news,newt,newrho);
   newr:=r[2];
   While(newr != 0)
   [
     q   :=Div(r[i],r[i+1]);
     newr:=Mod(r[i],r[i+1]);
     newrho:=LeadingCoef(newr);


     If (newr != 0, newr:=Monic(newr));
     news  :=(s[i]-q*s[i+1]);
     newt  :=(t[i]-q*t[i+1]);
     If(newrho != 0,
       [
         news:=news/newrho;
         newt:=newt/newrho;
       ]);
     DestructiveAppend(rho,newrho);
     DestructiveAppend(r  ,newr);
     DestructiveAppend(s,news);
     DestructiveAppend(t,newt);
     i++;
   ];



   {r[i],s[i],t[i]};
];









ChineseRemainderInteger(mlist_IsList,vlist_IsList) <--
[
  Local(m,i,nr,result,msub,euclid,clist);
  clist:={};
  m:=Factorize(mlist);
  result:=0;
  
  nr:=Length(mlist);
  For(i:=1,i<=nr,i++)
  [
    msub:=Div(m,mlist[i]);
    euclid := ExtendedEuclidean(msub,mlist[i]);
    Local(c);
    c:=vlist[i] * euclid[2];
    c:=Rem(c, mlist[i]);
    DestructiveAppend(clist,c);
    result:=result + msub * c;
  ];
  {result,clist};
];
ChineseRemainderPoly(mlist_IsList,vlist_IsList) <--
[
  Local(m,i,nr,result,msub,euclid,clist);
  clist:={};
  m:=Factorize(mlist);
  result:=0;



  
  nr:=Length(mlist);
  For(i:=1,i<=nr,i++)
  [
    msub:=Div(m,mlist[i]);



    euclid := ExtendedEuclideanMonic(msub,mlist[i]);
    Local(c);

    c:=vlist[i] * euclid[2];

    c:=Mod(c, mlist[i]);

    DestructiveAppend(clist,c);
    result:=result + msub * c;
  ];
  {Expand(result),clist};
];


PartFracExpand(_g,_f) <--
[
  Local(mlist,vlist,res);



  mlist:=Map("^",Transpose(Factors(f)));



  vlist:=Map("Rem",{FillList(g,Length(mlist)),mlist});

  



  If(IsInteger(f),
    res:=ChineseRemainderInteger(mlist,vlist)[2],
    res:=ChineseRemainderPoly(mlist,vlist)[2]
    );



  Local(result,divlist);


  divlist:=Map("/",{res,mlist});

  If(Length(divlist)<2,
    Add(divlist),
    [
      result:=divlist[1];
      ForEach(item,Tail(divlist))
      [
        result:=UnList({Atom("+"),result,item});
      ];
      result;
    ]);
];


10 # RationalForm((g_CanBeUni(var))/(f_CanBeUni(var)),_var)
     <-- { MakeUni(g,var),MakeUni(f,var)};
20 # RationalForm(f_CanBeUni(var),_var)
     <-- { MakeUni(f,var),MakeUni(1,var)};

Apart(_f) <-- Apart(f,x);

Apart(_f,_var) <--
[
  Local(rat);
  rat:=RationalForm(f,var);
  If(Degree(rat[1],var) = 0 And Degree(rat[2],var) = 0,
     [
       rat:={Coef(rat[1],var,0),Coef(rat[2],var,0)};
       Local(summed,add);
       summed := Eval(PartFracExpand(Rem(rat[1],rat[2]),rat[2]));
       add:=(rat[1]/rat[2] - summed);
       add + summed;
     ]
     ,
     [
       
       Expand(Div(rat[1],rat[2])) + PartFracExpand(Rem(rat[1],rat[2]),rat[2]);
     ]
     );
];



10 # Together((_f/_g) + (_h/_i)) <--
     Expand(f*i+h*g)/Expand(g*i);
10 # Together((_f/_g) - (_h/_i)) <--
     Expand(f*i-h*g)/Expand(g*i);

20 # Together(_f + (_g / _h)) <--
     Expand(f*h+g)/h;
20 # Together((_f/_g) + _h) <--
     Expand(f+h*g)/g;

20 # Together(_f - (_g / _h)) <--
     Expand(f*h-g)/h;
20 # Together((_f/_g) - _h) <--
     Expand(f-h*g)/g;

20 # Together(- (_g / _h)) <-- (-g)/h;

20 # Together((_f/_g) * _h) <--
     Expand(f*h)/g;
20 # Together(_h * (_f/_g)) <--
     Expand(f*h)/g;

20 # Together((_f/_g) / _h) <--
     (f)/Expand(g*h);
20 # Together(_h / (_f/_g)) <--
     Expand(g*h)/f;

20 # Together(- _f) <-- - Together(f);
30 # Together(_f) <--  f;


GcdReduce(_f,_var)<--
[
  Local(rat,gcd); 
  rat:=RationalForm(f,var);
  gcd:=Gcd(rat[1],rat[2]);


  Local(numer,denom,lc);
  numer:=Div(rat[1],gcd);
  denom:=Div(rat[2],gcd);
  lc:=LeadingCoef(numer,var);
  numer:=numer/lc;
  denom:=denom/lc;
  Expand(numer)/Expand(denom);
];

