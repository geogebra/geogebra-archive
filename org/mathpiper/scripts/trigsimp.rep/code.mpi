





RuleBase("FSin",{f,x});
RuleBase("FCos",{f,x});
RuleBase(":*:",{x,y});
Infix(":*:",3);


IsTrig(f) := (Type(f) = "Sin" Or Type(f) = "Cos");
IsFTrig(f) := (Type(f) = "FSin" Or Type(f) = "FCos");
IsMul(f) := (Type(f) = "*");
IsMulF(f) := (Type(f) = ":*:");

IsPow(f):=
  (Type(f) = "^" And
   IsInteger(f[2]) And
   f[2] > 1
  );



RuleBase("TrigChange",{f});
Rule("TrigChange",1,1,Type(f)="Cos") FCos(1,f[1]);
Rule("TrigChange",1,1,Type(f)="Sin") FSin(1,f[1]);

RuleBase("TrigUnChange",{f});
Rule("TrigUnChange",1,1,Type(f)="FCos") Cos(f[2]);
Rule("TrigUnChange",1,1,Type(f)="FSin") Sin(f[2]);



RuleBase("FReplace",{f});
UnFence("FReplace",1);
Rule("FReplace",1,1,IsMul(f))  Substitute(f[1]) :*: Substitute(f[2]);
Rule("FReplace",1,2,IsPow(f))  (Substitute(f[1]) :*: Substitute(f[1])) :*: Substitute(f[1]^(f[2]-2));


Rule("FReplace",1,3,IsTrig(f)) TrigChange(f);
FTest(f):=(IsMul(f) Or IsPow(f) Or IsTrig(f));


FToInternal(f):=Substitute(f,"FTest","FReplace");

FReplaceBack(f):=(Substitute(f[1])*Substitute(f[2]));
UnFence("FReplaceBack",1);
FFromInternal(f):=Substitute(f,"IsMulF","FReplaceBack");



 FLog(s,f):=[];



RuleBase("FSimpTerm",{f,rlist});
UnFence("FSimpTerm",2);


Rule("FSimpTerm",2,1,Type(f) = "+")
[
  Local(result,lst);
  lst:=Flatten(f,"+");

  result:={{},{}};
FLog("simpadd",lst);

  ForEach(tt,lst)
  [
    Local(new);
    new:=FSimpTerm(tt,{{},{}});
    result:={Concat(result[1],new[1]),Concat(result[2],new[2])};
  ];
  result;
];


TrigNegate(f):=
[
  UnList({f[0],-(f[1]),f[2]});
];


FUnTrig(result) := Substitute(result,"IsFTrig","TrigUnChange");

Rule("FSimpTerm",2,1,Type(f) = "-" And NrArgs(f)=1)
[
  Local(result);
  result:=FSimpTerm(f[1],{{},{}});
  Substitute(result,"IsFTrig","TrigNegate");
];
Rule("FSimpTerm",2,1,Type(f) = "-" And NrArgs(f)=2)
[
  Local(result1,result2);
  result1:=FSimpTerm(f[1],{{},{}});
  result2:=FSimpTerm(-(f[2]),{{},{}});
  {Concat(result1[1],result2[1]),Concat(result1[2],result2[2])};
];

Rule("FSimpTerm",2,2,Type(f) = ":*:")
[
  FSimpFactor({Flatten(f,":*:")});
];
Rule("FSimpTerm",2,3,Type(f) = "FSin")
[
  {rlist[1],f:(rlist[2])};
];
Rule("FSimpTerm",2,3,Type(f) = "FCos")
[
  {f:(rlist[1]),rlist[2]};
];

Rule("FSimpTerm",2,4,True)
[
  {(FCos(f,0)):(rlist[1]),rlist[2]};
];


FSimpFactor(flist):=
[
  Local(rlist);
  rlist:={{},{}};
  
  While(flist != {})
  [
    Local(term);
FLog("simpfact",flist);
    term:=First(flist);
    flist:=Rest(flist);
    FProcessTerm(term);
  ];
FLog("simpfact",flist);

FLog("rlist",rlist);
  rlist;
];
UnFence("FSimpFactor",1);


RuleBase("FProcessTerm",{t});
UnFence("FProcessTerm",1);


Rule("FProcessTerm",1,1,Type(t[1]) = "+")
[
  Local(split,term1,term2);
  split:=t[1];
  term1:=FlatCopy(t);
  term2:=FlatCopy(t);
  term1[1]:=split[1];
  term2[1]:=split[2];
  DestructiveInsert(flist,1,term1);
  DestructiveInsert(flist,1,term2);
];
Rule("FProcessTerm",1,1,Type(t[1]) = "-" And NrArgs(t[1]) = 2)
[
  Local(split,term1,term2);
  split:=t[1];
  term1:=FlatCopy(t);
  term2:=FlatCopy(t);
  term1[1]:=split[1];
  term2[1]:=split[2];
  DestructiveInsert(term2,1,FCos(-1,0));
  DestructiveInsert(flist,1,term1);
  DestructiveInsert(flist,1,term2);
];

Rule("FProcessTerm",1,1,Length(t)>1 And Type(t[2]) = "-" And NrArgs(t[2]) = 2)
[
  Local(split,term1,term2);
  split:=t[2];
  term1:=FlatCopy(t);
  term2:=FlatCopy(t);
  term1[2]:=split[1];
  term2[2]:=split[2];
  DestructiveInsert(term2,1,FCos(-1,0));
  DestructiveInsert(flist,1,term1);
  DestructiveInsert(flist,1,term2);
];

Rule("FProcessTerm",1,1,Type(t[1]) = ":*:")
[
  Local(split,term);
  split:=t[1];
  term:=FlatCopy(t);
  term[1]:=split[1];
  DestructiveInsert(term,1,split[2]);
  DestructiveInsert(flist,1,term);
];

Rule("FProcessTerm",1,1,Length(t)>1 And Type(t[2]) = ":*:")
[
  Local(split,term);
  split:=t[2];
  term:=FlatCopy(t);
  term[2]:=split[1];
  DestructiveInsert(term,1,split[2]);
  DestructiveInsert(flist,1,term);
];

Rule("FProcessTerm",1,1,Type(t[1]) = "-" And NrArgs(t[1]) = 1)
[
  Local(split,term);
  split:=t[1];
  term:=FlatCopy(t);
  term[1]:=split[1];
  DestructiveInsert(term,1,FCos(-1,0));
  DestructiveInsert(flist,1,term);
];
Rule("FProcessTerm",1,1,Length(t)>1 And Type(t[2]) = "-" And NrArgs(t[2]) = 1)
[
  Local(split,term);
  split:=t[2];
  term:=FlatCopy(t);
  term[2]:=split[1];
  DestructiveInsert(term,1,FCos(-1,0));
  DestructiveInsert(flist,1,term);
];



Rule("FProcessTerm",1,1,Length(t)>1 And Type(t[2]) = "+")
[
  Local(split,term1,term2);
  split:=t[2];
  term1:=FlatCopy(t);
  term2:=FlatCopy(t);
  term1[2]:=split[1];
  term2[2]:=split[2];
  DestructiveInsert(flist,1,term1);
  DestructiveInsert(flist,1,term2);
];




Rule("FProcessTerm",1,2,Not(IsFTrig(t[1])) )
[
  t[1]:=FCos(t[1],0);
  DestructiveInsert(flist,1,t);
];
Rule("FProcessTerm",1,2,Length(t)>1 And Not(IsFTrig(t[2])) )
[
  t[2]:=FCos(t[2],0);
  DestructiveInsert(flist,1,t);
];


Rule("FProcessTerm",1,4,Length(t)=1 And Type(t[1]) = "FCos")
[
  DestructiveInsert(rlist[1],1,t[1]);
];
Rule("FProcessTerm",1,4,Length(t)=1 And Type(t[1]) = "FSin")
[
  DestructiveInsert(rlist[2],1,t[1]);
];


Rule("FProcessTerm",1,5,Length(t)>1)
[
  Local(x,y,term1,term2,news);
  x:=t[1];
  y:=t[2];
  news:=TrigSimpCombineB(x,y);
  
  t:=Rest(t);
  term1:=FlatCopy(t);
  term2:=FlatCopy(t);
  term1[1]:=news[1];
  term2[1]:=news[2];
  DestructiveInsert(flist,1,term1);
  DestructiveInsert(flist,1,term2);
];


RuleBase("TrigSimpCombineB",{x,y});
Rule("TrigSimpCombineB",2,1,Type(x) = "FCos" And Type(y) = "FCos")
     { FCos((x[1]*y[1])/2,x[2]+y[2]) , FCos((x[1]*y[1])/2,x[2]-y[2]) };
Rule("TrigSimpCombineB",2,1,Type(x) = "FSin" And Type(y) = "FSin")
     { FCos(-(x[1]*y[1])/2,x[2]+y[2]) , FCos((x[1]*y[1])/2,x[2]-y[2]) };
Rule("TrigSimpCombineB",2,1,Type(x) = "FSin" And Type(y) = "FCos")
     { FSin((x[1]*y[1])/2,x[2]+y[2]) , FSin( (x[1]*y[1])/2,x[2]-y[2]) };
Rule("TrigSimpCombineB",2,1,Type(x) = "FCos" And Type(y) = "FSin")
     { FSin((x[1]*y[1])/2,x[2]+y[2]) , FSin(-(x[1]*y[1])/2,x[2]-y[2]) };


RuleBase("TrigSimpCombine",{f});
Rule("TrigSimpCombine",1,1,IsList(f))
  Map("TrigSimpCombine",{f});

Rule("TrigSimpCombine",1,10,True)
[
  Local(new,varlist);
  new:=f;

  
  varlist:=VarList(f);


  new:=FToInternal(new);
FLog("Internal",new);

  

  
  Local(terms);
  terms:=FSimpTerm(new,{{},{}});
  
FLog("terms",terms);

  
  Local(cassoc,sassoc);
  cassoc:={};
  sassoc:={};
  ForEach(item,terms[1])
  [
    CosAdd(item);
  ];
  ForEach(item,terms[2])
  [
    SinAdd(item);
  ];
FLog("cassoc",cassoc);
FLog("sassoc",sassoc);

  
  Local(result);
  result:=0;



  ForEach(item,cassoc)
  [
Log("item",item);
    result:=result+Expand(FUnTrig(FFromInternal(item[2])))*Cos(item[1]);
  ];
  ForEach(item,sassoc)
  [
Log("item",item);
    result:=result+Expand(FUnTrig(FFromInternal(item[2])))*Sin(item[1]);
  ];

  result;
];



CosAdd(t):=
[
  Local(look,arg);
  arg:=Expand(t[2],varlist);
  look:=Assoc(arg,cassoc);
  If(look = Empty,
     [
       arg:=Expand(-arg,varlist);
       look:=Assoc(arg,cassoc);
       If(look = Empty,
         DestructiveInsert(cassoc,1,{arg,t[1]}),
         look[2]:=look[2]+t[1]
         );
     ]
     ,
     look[2]:=look[2]+t[1]
    );
];
UnFence("CosAdd",1);

SinAdd(t):=
[
  Local(look,arg);
  arg:=Expand(t[2],varlist);
  look:=Assoc(arg,sassoc);
  If(look = Empty,
     [
       arg:=Expand(-arg,varlist);
       look:=Assoc(arg,sassoc);
       If(look = Empty,
         DestructiveInsert(sassoc,1,{arg,-(t[1])}),
	 look[2]:=look[2]-(t[1])
         );
     ]
     ,
     look[2]:=look[2]+t[1]
    );
];
UnFence("SinAdd",1);






