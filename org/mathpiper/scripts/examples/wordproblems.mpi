






Prefix("a", 10);
Prefix("an", 10);
Infix("to", 15);
Prefix("the", 10);
Prefix("many", 35);	
Infix("is", 20);
Infix("had", 20);
Infix("has", 20);
Infix("ate", 20);
Infix("gave", 20);
Infix("made", 20);
Prefix("some", 10);
Infix("and", 30);
Infix("are", 40);


Knowledge := {
	{"objects", {} },
	{"countable objects", {} },
	{"persons", {} }
};


10 # (an _x) _(Not IsList(x) And IsCountableObject(PluralFromSingular(x)))  <-- {PluralFromSingular(x), 1};
10 # (a _x) _(Not IsList(x) And IsCountableObject(PluralFromSingular(x)))  <-- {PluralFromSingular(x), 1};

10 # (the _x) _(Not IsList(x) And IsCountableObject(PluralFromSingular(x)))  <-- {PluralFromSingular(x), 1};

20 # (the _x) _(Not IsList(x) And IsSomeObject(x))  <-- {x, 1};

20 # _x is a person <-- DeclarePerson(x);
20 # _x is an object <-- DeclareObject(x);


10 # x_IsList and _y <-- Concat(x, {y});
15 # _x and _y <-- Concat({x}, {y});


some _obj <-- {obj, True};


20 # x_IsList are persons <-- MapSingle("DeclarePerson", x);
20 # x_IsList are objects <-- MapSingle("DeclareObject", x);

10 # there are many xs_IsList <-- MapSingle("DeclareCountable", xs);
20 # there are many _xs <-- DeclareCountable(xs);


DeclarePerson(x) :=
	
	If (
		IsPerson(x),
		Echo({"Note: we already know that ", x, " is a person"}),
		[
			
			Knowledge["persons"][String(x)] := {};
			Echo({"OK, ", x, "is a person."});
		]
);


IsPerson(x) := Contains(AssocIndices(Knowledge["persons"]), String(x));

IsCountableObject(x) := Contains(Knowledge["countable objects"], String(x));

IsSomeObject(x) := Contains(Knowledge["objects"], String(x));


AssumeIsPerson(x) := If(IsPerson(x), True, DeclarePerson(x));


DeclareObject(x) :=
	
	If (
		IsSomeObject(x) Or IsCountableObject(x),
		Echo({"Note: we already know that ", x, " is an object"}),
		[
			
			Push(Knowledge["objects"], String(x));
			Echo({"OK, ", x, "is an object."});
		]
	);

DeclareCountable(x) := [
	Local(singular);
	singular := SingularFromPlural(x);
	DeclareObject(singular);
	
	If(
		IsCountableObject(x),
		Echo({"Note: we already know that there are many ", x}),
		[
			
			Push(Knowledge["countable objects"], String(x));
			MacroRuleBase(String(x), {n});
			MacroRule(String(x), 1, 1, True) {x, n};
			
			Eval(UnList({Postfix, String(x)} ));
			Echo({"OK, we assume that the plural of \"", singular, "\" is \"", x, "\"."});
		]
	);		
];





SingularFromPlural(x) := [
	Local(singular);
	singular := String(x);	
	singular := StringMidGet(1, Length(singular)-1, singular);
	Atom(singular);
];


PluralFromSingular(x) := [
	Local(plural);
	plural := ConcatStrings(String(x), "s");	
	Atom(plural);
];




10 # (_x has _obj)_(Not IsList(obj)) <-- [
	Local(quantity);
	
	quantity := Knowledge["persons"][String(x)][String(obj)];
	If(
		IsPerson(x),
		If(quantity=0 Or quantity=Empty, no, 
			If(IsSomeObject(obj), "some", quantity
			)
		)
		, False
	);
];


10 # _x has {_obj, True} <-- IsPerson(x) And Knowledge["persons"][String(x)][String(obj)] != Empty And Knowledge["persons"][String(x)][String(obj)] > 0;
20 # _x has {_obj, n_IsInteger} <-- IsPerson(x) And Knowledge["persons"][String(x)][String(obj)] = n;







10 # (x_AssumeIsPerson had {_obj, n_IsInteger}) _ (IsCountableObject(obj) Or n = 1 And IsSomeObject(obj)) <-- [
	
	If(
		x has some obj,	
		If(
			x has {obj, n},
			Echo({"Note: we already know that ", x, " had ", n, " ", obj, " at that time."}),
			[
				Echo({"Error: we know that ", x," had ", x has obj, " ", obj, " at that time."});
				False;
			]
		),
		[
			
			Knowledge["persons"][String(x)][String(obj)] := n;
			Synopsis(x, obj);
		]
	);
];


10 # (x_AssumeIsPerson ate {_obj, n_IsInteger}) _ (IsCountableObject(obj) Or n = 1 And IsSomeObject(obj)) <--
	
If(
	(x has some obj) And (IsCountableObject(obj) And (x has obj) >= n Or Not IsCountableObject(obj)),	
	[
		
		Knowledge["persons"][String(x)][String(obj)] := Knowledge["persons"][String(x)][String(obj)] - n;
		Synopsis(x, obj);
	],
	[
		Echo({"Error: ", x, " does not have enough ", obj, " at this time."});
		False;
	]
);


Synopsis(x, obj) := Echo({"OK, ", x, " has ", x has obj, " ", obj, " now."});


20 # (x_AssumeIsPerson ate {_obj, True}) _ (Not IsList(obj) And IsSomeObject(obj)) <--
	If(
		x has some obj,
		Echo({"OK, ", x, " still has some ", obj}),
		[
			Echo({"Error: ", x, " does not have any ", obj});
			False;
		]
	);

30 # (x_AssumeIsPerson ate _obj)_ (Not IsList(obj) And IsSomeObject(obj)) <-- x ate {If(IsCountableObject(PluralFromSingular(obj)), PluralFromSingular(obj), obj), 1};



20 # (x_AssumeIsPerson had {_obj, True}) _ (Not IsList(obj)) <-- x had {obj, 1};

30 # (x_AssumeIsPerson had _obj) _ (Not IsList(obj)) <-- x had {If(IsCountableObject(PluralFromSingular(obj)), PluralFromSingular(obj), obj), 1};


10 # (x_AssumeIsPerson made {_obj, n_IsInteger}) _ (IsCountableObject(obj) Or n = 1 And IsSomeObject(obj)) <-- [
	Local(quantity);
	quantity := Knowledge["persons"][String(x)][String(obj)];
	If(IsNumber(quantity),
		quantity := quantity + n,
		quantity := n
	);
	Knowledge["persons"][String(x)][String(obj)] := quantity;
	Synopsis(x, obj);
];


20 # (x_AssumeIsPerson made {_obj, True}) _ (Not IsList(obj) And IsSomeObject(obj) And Not IsCountableObject(PluralFromSingular(obj))) <-- x made {obj, 1};
30 # (x_AssumeIsPerson made _obj) _ (Not IsList(obj)) <-- x made {If(IsCountableObject(PluralFromSingular(obj)), PluralFromSingular(obj), obj), 1};


10 # _x gave _obj to _y <-- [
	x ate obj;
	y made obj;
];





Knowledge() := [
	Local(person, object);
	Echo("OK, this is what we know:");
	WriteString("Persons: ");
	WriteString(PrintList(AssocIndices(Knowledge["persons"])));
	NewLine();
	WriteString("Object names: ");
	WriteString(PrintList(Knowledge["objects"]));
	NewLine();
	WriteString("Countable objects: ");
	WriteString(PrintList(Knowledge["countable objects"]));
	NewLine();
	ForEach(person, AssocIndices(Knowledge["persons"]))
	[
		Echo({person, " has: "});
		ForEach(object, AssocIndices(Knowledge["persons"][person]))
			Echo({Atom(person) has Atom(object), Atom(object)});
		Echo("");
	];
];



