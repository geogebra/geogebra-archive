
Retract("RandomInteger", *);


10 # RandomInteger(_n) <--
[
    Check(IsPositiveInteger(n), "The argument must be a positive integer.");

    CeilN(Random() * n);
];



10 # RandomInteger(_lowerBoundInclusive, _upperBoundInclusive) <--
[
    Check(IsInteger(lowerBoundInclusive) And IsInteger(upperBoundInclusive), "Both arguments must be integers.");

    Check(lowerBoundInclusive < upperBoundInclusive, "The first argument must be less than the second argument.");

    FloorN(lowerBoundInclusive + Random() * (upperBoundInclusive + 1 - lowerBoundInclusive) );
];



RandomIntegerList(_count,_coefmin,_coefmax) <--
  Table(FloorN(coefmin+Random()*(coefmax+1-coefmin)),i,1,count,1);


RandomIntegerMatrix(_rows,_cols,_coefmin,_coefmax) <--
	GenMatrix({{i,j}, FloorN(coefmin+Random()*(coefmax+1-coefmin))}, rows, cols );


Retract("RandomInterestingPolynomial",*);
Retract("NewRandomPoly",*);
Retract("RandomIrreducibleQuadratic",*);
Retract("RandomIrreducibleQuadraticWithComplexRoots",*);
Retract("RandomIrreducibleQuadraticWithRealRoots",*);


10 # RandomInterestingPolynomial( deg_IsPositiveInteger, _var ) <--
[
    RandomSeed( SystemTimer() );   
    NewRandomPoly(deg,var);   
];


10 # NewRandomPoly( _deg, _var )_(IsEqual(deg,1)) <--
[
    Local(p,i1,i2);
    i1 := RandomInteger(1,10);
    i2 := RandomInteger(-10,10);
    p  := NormalForm(UniVariate(var,0,{i2,i1}));
];


10 # NewRandomPoly( _deg, _var )_(IsEqual(deg,2)) <--
[
    Local(ii,i1,i2,p,quadPoly);
    p := FillList(0,2);
    For(ii:=1,ii<=2,ii++)
    [
        i1 := RandomInteger(10);
        i2 := RandomInteger(-10,10);
        If( i1 > 1, i2 := i1*i2 );
        p[ii] := NormalForm(UniVariate(var,0,{i2,i1}));
    ];
    quadPoly := ExpandBrackets(p[1]*p[2]);
    quadPoly := Simplify(Quotient(quadPoly,LeadingCoef(quadPoly)));
];


10 # RandomIrreducibleQuadratic( _var ) <--
[
    Local(ii,coeffs,discrim,u,p,f);
    
    
    
    
    If(RandomInteger(2)=1,
        RandomIrreducibleQuadraticWithComplexRoots(var),
        RandomIrreducibleQuadraticWithRealRoots(var)
    );
];


10 # RandomIrreducibleQuadraticWithRealRoots(_var) <--
[
    Local(coeffs,ijk);
    coeffs    := FillList(1,3);
    coeffs[2] := RandomInteger(-10,10);
    coeffs[3] := RandomInteger(1,10);
    ijk := Floor(coeffs[2]^2 / (4*coeffs[3]));
    coeffs[1] := RandomInteger(-10,ijk);
    discrim := coeffs[2]^2-4*coeffs[1]*coeffs[3];
    NormalForm(UniVariate(var,0,coeffs));
];


10 # RandomIrreducibleQuadraticWithComplexRoots(_var) <--
[
    Local(coeffs,ijk);
    coeffs := {1,RandomInteger(-10,10),RandomInteger(1,10)};
    coeffs[1] := Ceil(N(coeffs[2]^2/(4*coeffs[3]))) + RandomInteger(1,5);
    NormalForm(UniVariate(var,0,coeffs));
];


10 # NewRandomPoly( _deg, _var )_(IsEqual(deg,3)) <--
[
    Local(ii,i1,i2,i3,p,CubicPoly);
    p := FillList(1,3);
    If( RandomInteger(3) = 1,
      [
        For(ii:=1,ii<=3,ii++)
        [
          i1 := RandomInteger(2);
          i2 := RandomInteger(-10,10);
          If( i1 > 1, i2 := i1*i2 );
          p[ii] := NormalForm(UniVariate(var,0,{i2,i1}));
        ];
      ],
      [
          i1 := RandomInteger(2);
          i2 := RandomInteger(-10,10);
          If( i1 > 1, i2 := i1*i2 );
          p[1] := NormalForm(UniVariate(var,0,{i2,i1}));
          p[2] := RandomIrreducibleQuadratic(var);
      ]
    );
    CubicPoly := ExpandBrackets(Product(p));
];


10 # NewRandomPoly( _deg, _var )_(IsEqual(deg,4)) <--
[
    Local(ii,i1,i2,i3,i4,p,QuarticPoly);
    p := FillList(1,4);
    If( RandomInteger(2) = 1,
      [
          p[1] := NewRandomPoly(3,x);
          i1 := RandomInteger(2);
          i2 := RandomInteger(-10,10);
          If( i1 > 1, i2 := i1*i2 );
          p[2] := NormalForm(UniVariate(var,0,{i2,i1}));
      ],
      [
          p[1] := NewRandomPoly(2,x);
          p[2] := NewRandomPoly(2,x);
      ]
    );
    QuarticPoly := ExpandBrackets(Product(p));
];


10 # NewRandomPoly( _deg, _var )_(IsEqual(deg,5)) <--
[
    Local(ii,i1,i2,i3,i4,p,QuinticPoly);
    p := FillList(1,4);
    p[1] := NewRandomPoly(1,x);
    p[2] := RandomIrreducibleQuadraticWithRealRoots(x);
    p[3] := RandomIrreducibleQuadraticWithComplexRoots(x);
    QuinticPoly := ExpandBrackets(Product(p));
];


11 # NewRandomPoly( deg_IsPositiveInteger, _var )_(deg > 5) <--
[
    Local(p,n,m);
    p := {};
    m := deg;
    Until( m < 3 )
    [
        n := RandomInteger(2,Floor(N(deg/2)));
        Tell("     ",{m,n});
        Push(p,NewRandomPoly(n,var));
        m := m - n;
    ];
    Tell("      ",m);
    If( m > 0, Push(p,NewRandomPoly(m,x)));
    Expand(Product(p));
];




RandomPoly(_var,_degree,_coefmin,_coefmax) <--
  NormalForm(UniVariate(var,0,RandomIntegerList(degree+1,coefmin,coefmax)));












LocalSymbols(knownRNGEngines, knownRNGDists) [
  knownRNGEngines :=
  {
    { "default", "RNGEngine'LCG'2"},
    { "advanced", "RNGEngine'L'Ecuyer"},
  };

  knownRNGDists :=
  {
    {"default", "FlatRNGDist"},
    {"flat", "FlatRNGDist"},
  
    {"gauss", "GaussianRNGDist"},
  };

  KnownRNGDists() := knownRNGDists;
  KnownRNGEngines() := knownRNGEngines;
];






Function() RngCreate();
Function() RngCreate(seed, ...);



Function() RngSeed(r, seed);


Function() Rng(r);



RngCreate() <-- RngCreate(0);

10 # RngCreate(a'seed_IsInteger) <-- (RngCreate @ {seed -> a'seed});


20 # RngCreate(_key -> _value) <-- `(RngCreate({@key -> value}));


30 # RngCreate(options_IsList) <--
[
	options := OptionsListToHash @ {options};

	
	If(
		options["seed"] = Empty Or options["seed"] <= 0,
		options["seed"] := 76544321	
	);
	If(
		options["engine"] = Empty Or Not (Assert("warning", {"RngCreate: invalid engine", options["engine"]}) KnownRNGEngines()[options["engine"] ] != Empty),
		options["engine"] := "default"
	);
	If(
		options["dist"] = Empty Or Not (Assert("warning", {"RngCreate: invalid distribution", options["dist"]}) KnownRNGDists()[options["dist"] ] != Empty),
		options["dist"] := "default"
	);

	
	
	{
		KnownRNGDists()[options["dist"] ], KnownRNGEngines()[options["engine"] ],
		
		KnownRNGEngines()[options["engine"] ] @ { options["seed"] }
	};
];


Rng(_r) <--
[
	Local(state, result);
	{state, result} := (r[1] @ {r});	
	DestructiveReplace(r, 3, state);	
	result;	
];


RngSeed(_r, seed_IsInteger) <--
[
	Local(state);
	(Assert("warning", {"RngSeed: seed must be positive", seed}) seed > 0
	) Or (seed:=76544321);
	state := (r[2] @ {seed});	
	DestructiveReplace(r, 3, state);	
	True;
];









FlatRNGDist(_r) <-- (r[2] @ {r[3]});	



GaussianRNGDist(_rng) <--
[
	
	
	
	Local(a,b,m, new'state, rnumber);
	new'state := rng[3];	
	m:=0;
	While(m=0 Or m>=1)	
	[
		{new'state, rnumber} := (rng[2] @ {new'state});
		a:=2*rnumber-1;
		{new'state, rnumber} := (rng[2] @ {new'state});
		b:=2*rnumber-1;
		m:=a*a+b*b;
	];
	{new'state, (a+I*b)*SqrtN(-2*DivideN(Internal'LnNum(m),m))};
];









RNGEngine'LCG'1(seed_IsInteger) <-- {seed};

RNGEngine'LCG'1(state_IsList) <-- LCG'1(state);


RNGEngine'LCG'2(seed_IsInteger) <-- {seed};

RNGEngine'LCG'2(state_IsList) <-- LCG'2(state);


RNGEngine'LCG'3(seed_IsInteger) <-- {seed};

RNGEngine'LCG'3(state_IsList) <-- LCG'3(state);


RNGEngine'LCG'4(seed_IsInteger) <-- {seed};

RNGEngine'LCG'4(state_IsList) <-- LCG'4(state);


LCG'1(state) := RandomLCG(state, 2147483647,950706376,0);
LCG'2(state) := RandomLCG(state, 4294967296,1099087573,0);
LCG'3(state) := RandomLCG(state, 281474976710656,68909602460261,0);
LCG'4(state) := RandomLCG(state, 18014398509481984,2783377640906189,0);



RandomLCG(_state, _im, _ia, _ic) <--
{
	DestructiveReplace(state,1, ModuloN(state[1]*ia+ic,im)),
	DivideN(state[1], im)	
};






RNGEngine'L'Ecuyer(a'seed_IsInteger) <--
[
	
	Local(rng'aux, result);
	rng'aux := (RngCreate @ {a'seed});
	
	result:=ZeroVector(6);
	
	Local(i);
	For(i:=1, i<=6, i++)
	[
		Rng(rng'aux);
		result[i] := rng'aux[3][1];	
	];
	
	result;
];


RNGEngine'L'Ecuyer(state_IsList) <--
[
	Local(new'state, result);
	new'state := {
		Modulo(1403580*state[2]-810728*state[3], 4294967087), state[1], state[2],
		Modulo(527612*state[4]-1370589*state[6], 4294944433), state[4], state[5]
	};
	result:=Modulo(state[1]-state[4], 4294967087);
	{
		new'state,
		DivideN(If(result=0, 4294967087, result), 4294967088)
	};
];






LocalSymbols(RandSeed) [
  
  RandSeed := SystemTimer(); 

  
  Function("RandomSeed", {seed}) Bind(RandSeed, seed);

  
  RandomLCG(_im, _ia, _ic) <--
  [
    RandSeed:=ModuloN(RandSeed*ia+ic,im);
    DivideN(RandSeed,im);	
  ];
]; 


Function("Random1",{}) RandomLCG(4294967296,1103515245,12345);
Function("Random6",{}) RandomLCG(1771875,2416,374441);

Function("Random2",{}) RandomLCG(2147483647,950706376,0);
Function("Random3",{}) RandomLCG(4294967296,1099087573,0);
Function("Random4",{}) RandomLCG(281474976710656,68909602460261,0);
Function("Random5",{}) RandomLCG(18014398509481984,2783377640906189,0);


Function("Random",{}) Random3();


