



ArcSinNum(x) :=
[
	
	If(
		239*Abs(x) >= 169,	
		
		Sign(x)*(Internal'Pi()/2-ArcSinN(Sqrt(1-x^2))),
		ArcSinN(x)
	);
];





ArcTanNum(x) :=
[
	
	If(
		Abs(x)>1,
		Sign(x)*(Internal'Pi()/2-ArcSin(1/Sqrt(x^2+1))),
		ArcSin(x/Sqrt(x^2+1))
	);
];





















CachedConstant(Ln2, Internal'LnNum(2));	



10 # BrentLn(x_IsInteger)_(BuiltinPrecisionGet()>40) <--
[
	Local(y, n, k, eps);
	n := BuiltinPrecisionGet();	
	
	k := 1 + Div(IntLog(4*10^n, x), 2);	
	BuiltinPrecisionSet(n+5);	
	eps := DivideN(1, 10^n);	
	y := PowerN(x, k);	
	
	y := DivideN(Internal'Pi()*y, (2*k)*AG'Mean(4, y, eps));
	BuiltinPrecisionSet(n);
	RoundTo(y, n);	
];

15 # BrentLn(x_IsInteger)  <-- LogN(x);


20 # BrentLn(_x)_(x<1) <-- -BrentLn(1/x);


30 # BrentLn(_x)_(BuiltinPrecisionGet()>85) <--
[
	Local(y, n, n1, k, eps);
  N([
    n := BuiltinPrecisionGet();	
    
    n1 := n + IntLog(n,10);	
    
    k := 2 + Div(n1*28738, 2*8651)	
    
    - IntLog(Floor(x), 2);
    
    BuiltinPrecisionSet(n1+2+Div(k*3361, 11165));	
    eps := DivideN(1, 10^(n1+1));	
    y := x*2^(k-2);	
    
    
    y:=Internal'Pi()*y/(2*AG'Mean(1,y,eps)) - k*Ln2();
    BuiltinPrecisionSet(n);
  ]);
	y;	
];

40 # BrentLn(x_IsNumber) <-- LogN(x);





CosNum(x) :=
[
  If(x<0 Or 113*x>710, x:=TruncRadian(x));
  CosN(x);
];






10 # ExpNum(x_IsNumber) _ (x > MathExpThreshold()) <-- [
	Local(i, y);
	i:=0;
	For(i:=0, x > MathExpThreshold(), i++)
		x := DivideN(x, 2.);
	For(y:= ExpN(x), i>0, i--)
		y := MultiplyN(y, y);
	y;

];

20 # ExpNum(x_IsNumber) _ (2*x < -MathExpThreshold()) <-- DivideN(1, ExpNum(-x));

30 # ExpNum(x_IsNumber) <-- ExpN(x);














Internal'LnNum(x_IsNumber)_(x>=1) <-- NewtonLn(x);

Internal'LnNum(x_IsNumber)_(0<x And x<1) <-- - Internal'LnNum(DivideN(1,x));






LogN(x) := Internal'LnNum(x);





NewtonLn(x) :=
	LocalSymbols(y)
[


	NewtonNum({{y}, 4*x/(ExpNum(y)+x)-2+y},
	
		DivideN(794*IntLog(Floor(x*x), 2), 2291), 10, 3);
];





SinNum(x) :=
[
  If(x<0 Or 113*x>710, x:=TruncRadian(x));	
  SinN(x);
];

TanNum(x) :=
[
  If(x<0 Or 113*x>710, x:=TruncRadian(x));
  TanN(x);
];






TruncRadian(_r) <--
[
  Local(twopi);
  
  N([
    r:=Eval(r);
    twopi:=2*Internal'Pi();
    r:=r-FloorN(r/twopi)*twopi;
  ], BuiltinPrecisionGet() + IntLog(Ceil(Abs(N(Eval(r), 1))), 10));
  r;
];
HoldArg("TruncRadian",r);











LocalSymbols(mathExpThreshold) [
  
  mathExpThreshold := If(Not IsBound(mathExpThreshold), 500);

  MathExpThreshold() := mathExpThreshold;
  SetMathExpThreshold(threshold) := [mathExpThreshold:= threshold; ];
];

