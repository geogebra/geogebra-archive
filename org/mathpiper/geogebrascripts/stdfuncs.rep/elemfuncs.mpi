








Defun("ArcSinN",{int1})
[
  Local(result,eps);
	Set(result,FastArcSin(int1));
  Local(x,q,s,c);
  Set(q,SubtractN(SinN(result),int1));
  Set(eps,MathIntPower(10,MathNegate(BuiltinPrecisionGet())));
  While(GreaterThan(AbsN(q),eps))
  [
		Set(s,SubtractN(int1,SinN(result)));
    Set(c,CosN(result));
    Set(q,DivideN(s,c));
    Set(result,AddN(result,q));
  ];
  result;
];








ArcTanN'Taylor(x) :=
[
	Local(num'terms);
	num'terms := DivN(BuiltinPrecisionGet()*1068, -643*MathBitCount(x))+1;
	
	
	x*SumTaylorNum(-MultiplyN(x,x), {{k}, 1/(2*k+1)}, num'terms);
];














	
10 # BisectSqrt(0) <-- 0;
10 # BisectSqrt(1) <-- 1;

20 # BisectSqrt(N_IsPositiveInteger) <--
[
  Local(l2,u,v,u2,v2,uv2,n);

  
  u  := N;
  l2 := MathBitCount(u)-1;

  
  
  
  
  l2 := l2>>1;

  
  u  := 1 << l2;
  u2 := u << l2;

  
  While( l2 != 0 )
  [
 	 l2--;
     
      v  := 1<<l2;
      v2 := v<<l2;

      
      
      
      uv2 := u<<(l2 + 1);

      
      
       n := u2 + uv2 + v2;

      
      
      
      
      if( n <= N )
      [
	u  := u+v;  
	u2 := n;    
      ];
    ];
    u; 
];




BitsToDigits(n, base) := FloorN(0.51+n*N(Ln(2)/Ln(base),10));







CosN'Doubling(value, n) :=
[
	Local(shift, result);
	shift := n;
	result := value;
	While (shift>0)	
	[
		result := MultiplyN(MathMul2Exp(result, 1), 2 - result);
		shift--;
	];
	result;
];





CosN'Taylor(x) :=
[
	Local(num'terms, prec, Bx);
	prec := DivN(BuiltinPrecisionGet()*3919, 1702); 
	Bx := -DivN(MathBitCount(x)*1143, 1649)-2; 
	num'terms := DivN( DivN( prec-1, DivN( MathBitCount( prec-1)*1588, 2291)+Bx), 2)+1;
	
	SumTaylorNum(MultiplyN(x,x), 1, {{k}, -1/(2*k*(2*k-1))}, num'terms);
];









DigitsToBits(n, base) := FloorN(0.51+n*N(Ln(base)/Ln(2),10));






ExpN'Doubling1(value, n) :=
[
	Local(shift, result);
	shift := n;
	result := value;
	While (shift>0)	
	[
		result := MathMul2Exp(result, 1) + MultiplyN(result, result);
		shift--;
	];
	result;
];









ExpN'Taylor(x) :=
[
	Local(num'terms, prec, Bx);
	prec := DivN(BuiltinPrecisionGet()*3919, 1702); 
	Bx := -DivN(MathBitCount(x)*1143, 1649)-2; 
	num'terms := DivN( prec-1, DivN( MathBitCount( prec-1)*1588, 2291)+Bx)+1;
	
	x*SumTaylorNum(x, 1, {{k}, 1/(k+1)}, num'terms);
];











10 # MathBitCount(0) <-- 1;
20 # MathBitCount(_x) _ (x<0) <-- MathBitCount(-x);

30 # MathBitCount(_value) <--
[
	Local(nbits);
	nbits:=0;
  	If(value<1,
	[	
		nbits := 1;
		While(value<1)
		[
			nbits--;
			value := MathMul2Exp(value,1);
		];
	],
	[	
		While(value>=1)
		[
			nbits++;
			value := MathMul2Exp(value, -1);
		];
	]);
	nbits;
];





MathLn'Doubling(value, n) :=
[
	Local(shift, result);
	shift := n;
	result := value;
	While (shift>0)	
	[
		result := MultiplyN(result, result);
		shift--;
	];
	result;
];





MathLn'Taylor(x) :=
[
	Local(num'terms, y);
	y := x-1;
	num'terms := DivN(BuiltinPrecisionGet()*2136, -643*MathBitCount(y))+1;
	
	
	y*SumTaylorNum(-y, {{k}, 1/(k+1)}, num'terms);
];








MathPi() :=
[
	Local(result, delta, deltasq, k, order, prec, curprec);
	order := 13;	
	prec := BuiltinPrecisionGet();
  N([
    
    curprec := 20;
    BuiltinPrecisionSet(curprec);
    result := 3.14159265358979323846*0.5;
    
    For(k:=prec, k>=curprec, k:=Div(k,order)+2) True;
    If(k<5, curprec:=5, curprec:=k);
  
    
    For(k:=0, curprec < prec, k := k+1) [
    
      curprec := Min(prec, curprec * order-2);	
      BuiltinPrecisionSet(curprec+2);
  
  
      [
      delta := CosN(result);
      ];
      [
      deltasq := MultiplyN(delta,delta);
      ];
      result := result + delta*(1 + deltasq*(1/6 + deltasq*(3/40 + deltasq*(5/112 + deltasq*(35/1152 + (deltasq*63)/2816)))));
    ];
  
  ]);
	result*2;
];






MathSqrtFloat(_A) <--
[
	Local(bitshift, a0, x0, x0sq, targetbits, subtargetbits, gotbits, targetprec);
	bitshift := ShiftRight(MathBitCount(A)-1,1);
	
	targetprec := BuiltinPrecisionGet();
	
	a0 := MathMul2Exp(A, -bitshift*2);	
	BuiltinPrecisionSet(10);	
	
	
	targetbits := Min(DigitsToBits(targetprec, 10), 1+GetExactBitsN(A));
	
	x0 := DivideN(14+22*a0, 31+5*a0);
	
	gotbits := 7;
	
	subtargetbits := DivN(targetbits+8, 9);
	If(gotbits >= subtargetbits, subtargetbits := DivN(targetbits+2, 3));
	If(gotbits >= subtargetbits, subtargetbits := targetbits*4);

	
	While(gotbits < targetbits)
	[
		gotbits := 3*gotbits+1;	
		
		If(gotbits >= subtargetbits,
		[	
			gotbits := subtargetbits;
			subtargetbits := targetbits*4;	
		]);
		BuiltinPrecisionSet(BitsToDigits(gotbits, 10)+2);	
		x0 := SetExactBitsN(x0, gotbits+6);	
		x0sq := MultiplyN(x0, x0);


		x0 := AddN(x0, MultiplyN(x0*2, DivideN(a0-x0sq, a0+3*x0sq)));

	];
	
	x0 := SetExactBitsN(MathMul2Exp(x0, bitshift), gotbits);
	BuiltinPrecisionSet(targetprec);

	x0;
];





SinN'Taylor(x) :=
[
	Local(num'terms, prec, Bx);
	prec := DivN(BuiltinPrecisionGet()*3919, 1702); 
	Bx := -DivN(MathBitCount(x)*1143, 1649)-2; 
	num'terms := DivN( DivN( prec+Bx, DivN( MathBitCount( prec+Bx)*1588, 2291)+Bx)+1, 2)+1;
	
	x*SumTaylorNum(MultiplyN(x,x), 1, {{k}, -1/(2*k*(2*k+1))}, num'terms);
];






SinN'Tripling(value, n) :=
[
	Local(shift, result);
	shift := n;
	result := value;
	While (shift>0)	
	[	
		result := MultiplyN(result, 3 - MathMul2Exp(MultiplyN(result,result), 2) );
		shift--;
	];
	result;
];








SqrtN(x) := MathSqrt1(x);	


10 # MathSqrt1(0) <-- 0;

100 # MathSqrt1(_x) <-- [ Echo("SqrtN: invalid argument: ", x); False;];


30 # MathSqrt1(x_IsPositiveNumber) <-- x*NewtonNum({{r}, r+r*(1-x*r^2)/2}, FastPower(x,-0.5), 4, 2);

30 # MathSqrt1(x_IsPositiveNumber) <-- MathSqrtFloat(x);


20 # MathSqrt1(x_IsInteger) _ (GreaterThan(x,0)) <--
[
	Local(result);
	If(ModN(x,4)<2 And ModN(x,3)<2 And ModN(x+1,5)<3,
		
		[
			

			GlobalPush(BuiltinPrecisionGet());
			If(MathBitCount(x)+3>DigitsToBits(BuiltinPrecisionGet(), 10),
			  BuiltinPrecisionSet(BitsToDigits(MathBitCount(x), 10)+1));
				
			

			
			result := MathSqrtFloat(x+0.);
			
			If(FloatIsInt(SetExactBitsN(result, GetExactBitsN(result)-3)), result:= Floor(result+0.5));
			BuiltinPrecisionSet(GlobalPop());
		],
		
		result := MathSqrtFloat(x+0.)
	);
	
	SetExactBitsN(result, DigitsToBits(BuiltinPrecisionGet(),10));
];




