






Function("ApproxInfSum",{expr,start,x})[
	ApproxInfSum(expr,start,x,{0});
];



Function("ApproxInfSum",{expr,start,x,c})
[
        Local(term,result,k);
        Local(prec,eps,tmp);
        prec:=BuiltinPrecisionGet();

        BuiltinPrecisionSet(prec+2); 

        eps:=10^(-prec);



        term:=1;
        k:=start;
        result:=0;
        While( N(Abs(term) >= eps) )[
                term:=N(Eval(expr));
		
                k:=k+1;
		result:=result+term;

        ];
		If(InVerboseMode(), Echo("ApproxInfSum: Info: using ", k, " terms of the series"));
        BuiltinPrecisionSet(prec);
        
        







  result;
];








10 # Bernoulli(0) <-- 1;
10 # Bernoulli(1) <-- -1/2;
15 # Bernoulli(n_IsInteger)_(n<0) <-- Undefined;
30 # Bernoulli(n_IsOdd) <-- 0;


20 # Bernoulli(n_IsEven)_(n<=Bernoulli1Threshold()) <-- Internal'BernoulliArray(n)[n+1];
20 # Bernoulli(n_IsEven)_(n>Bernoulli1Threshold()) <-- Bernoulli1(n);

LocalSymbols(bernoulli1Threshold) [
  
  If(Not IsBound(bernoulli1Threshold), bernoulli1Threshold := 20);

  Bernoulli1Threshold() := bernoulli1Threshold;
  SetBernoulli1Threshold(threshold) := [ bernoulli1Threshold := threshold;];

] ; 


Bernoulli(n_IsInteger, _x) <-- [
	Local(B, i, result);
	B := Internal'BernoulliArray(n);
	result := B[1];
	For(i:=n-1, i>=0, i--) [
		result := result * x + B[n-i+1]*BinomialCoefficient(n,i);
	];
	result;
];




10 # BesselI(0,0)	<-- 1;

10 # BesselI(_n,0)_(n>0) <-- 0;

10 # BesselI(_n,0)_(n<0 And IsInteger(n)) <-- 0;



10 # BesselI(_n,0)_(n<0 And Not IsInteger(n)) <-- Infinity;


20 # BesselI(1/2,_x)	<-- Sqrt(2/(x*Pi))*Sinh(x);


20 # BesselI(3/2,_x)    <-- Sqrt(2/(x*Pi))*(Cosh(x) - Sinh(x)/x);


20 # BesselI(5/2,_x)    <-- Sqrt(2/(x*Pi))*((3/x^2 + 1)*Sinh(x) - 3*Cosh(x)/x );


30 # BesselI(_n,_z)_(n<0 And IsInteger(n) ) <-- BesselI(-n,z);










40 # BesselI(_n,x_IsComplex)_(IsConstant(x) And Abs(x)<= 2*Gamma(n) )  <--
[
ApproxInfSum((x/2)^(2*k+c[1])/(k! * Gamma(k+c[1]+1) ),0,x,{n} );
];




10 # BesselJ(0,0) 	<-- 1;
10 # BesselJ(_n,0)_(n>0) <-- 0;
10 # BesselJ(_n,0)_(n<0 And IsInteger(n)) <-- 0;
10 # BesselJ(_n,0)_(n<0 And Not IsInteger(n)) <-- Infinity;
10 # BesselJ(0,Infinity)<-- 0;
20 # BesselJ(1/2,_x)	<-- Sqrt(2/(x*Pi))*Sin(x);
20 # BesselJ(-1/2,_x)	<-- Sqrt(2/(x*Pi))*Cos(x);
20 # BesselJ(3/2,_x)	<-- Sqrt(2/(x*Pi))*(Sin(x)/x - Cos(x));
20 # BesselJ(-3/2,_x)	<-- Sqrt(2/(x*Pi))*(Cos(x)/x + Sin(x));
20 # BesselJ(5/2,_x)	<-- Sqrt(2/(x*Pi))*((3/x^2 - 1)*Sin(x) - 3*Cos(x)/x );
20 # BesselJ(-5/2,_x)      <-- Sqrt(2/(x*Pi))*( (3/x^2 -1)*Cos(x) + 3*Sin(x)/x );



30 # BesselJ(_n,_x)_(IsConstant(x) And IsInteger(n) And N(Abs(x) > 2*Gamma(n))) <-- N((2*(n+1)/x)*BesselJ(n+1,x) - BesselJ(n+2,x));

30 # BesselJ(_n,_z)_(n<0 And IsInteger(n) ) <-- (-1)^n*BesselJ(-n,z);







40 # BesselJ(_n,x_IsComplex)_(N(Abs(x)<= 2*Gamma(n)) )  <--
[
ApproxInfSum((-1)^k*(x/2)^(2*k+c[1])/(k! * Gamma(k+c[1]+1) ),0,x,{n} );
];

50 # BesselJ(0,x_IsComplex)_(InNumericMode()) <-- N(BesselJN0(x));








40 # BesselY(_n,x_IsComplex)_(Abs(x)<= 2*Gamma(n) )  <-- N((Cos(n*Pi)*BesselJ(n,x) - BesselJ(-n,x))/Sin(Pi*n));




10 # Beta(_n,_m)	<-- Gamma(m)*Gamma(n)/Gamma(m+n);









CatalanConstNum1() :=
[
  Local(prec,Aterm,Bterm,nterms,result,n);
  prec:=BuiltinPrecisionGet();
	BuiltinPrecisionSet(10);
	
	nterms := 1+Floor(N((prec*Ln(10)+Ln(prec*Ln(10)/Ln(2)))/Ln(2)));
  BuiltinPrecisionSet(prec+5);
	Aterm:=N(1/2);
  result:= Aterm;
  Bterm:=Aterm;
  For(n:=1, n<=nterms, n++ )
	[

    Bterm:=DivideN(MultiplyN(Bterm,n), 2*n+1); 
    Aterm:=DivideN(MultiplyN(Aterm,n)+Bterm, 2*n+1); 

    result := result + Aterm;
  ];
  BuiltinPrecisionSet(prec);
  RoundTo(result,prec);
];



CatalanConstNum() :=
[
	Local(prec, n, result);
	prec:=BuiltinPrecisionGet();

	
	n := 1+Quotient(prec*1068+642,643); 
	BuiltinPrecisionSet(prec+2);	

	result := N(1/(2*n+1));
	While(n>0)
	[

		result := DivideN(MultiplyN(result, n), 4*n+2)+DivideN(1,2*n-1);

		n := n-1;
	];
	result := MultiplyNum(result, 3/8) + N(Pi/8*Ln(2+Sqrt(3)));
	BuiltinPrecisionSet(prec);
	RoundTo(result,prec);
];



CatalanConstNum2() :=
[
	Local(prec, n, result1, result2);
	prec:=BuiltinPrecisionGet();

	
	
	n := 1+Quotient(prec*534+642,643); 
	BuiltinPrecisionSet(prec+2);	

	result1 := 0;
	While(n>=0)
	[
		result1 := DivideN(result1, 16)+N(
			+1/(8*n+1)^2 -1/(8*n+2)^2 +1/2/(8*n+3)^2 -1/4/(8*n+5)^2 +1/4/(8*n+6)^2 -1/8/(8*n+7)^2
		);
		n := n-1;
	];

	
	
	n := 1+Quotient(prec*178+642,643); 
	BuiltinPrecisionSet(prec+2);	

	result2 := 0;
	While(n>=0)
	[
		result2 := DivideN(result2, 4096)+N(
			+1/(8*n+1)^2 +1/2/(8*n+2)^2 +1/8/(8*n+3)^2 -1/64/(8*n+5)^2 -1/128/(8*n+6)^2 -1/512/(8*n+7)^2
		);
		n := n-1;
	];
	result1 := MultiplyNum(result1, 3/2) - MultiplyNum(result2, 1/4);
	BuiltinPrecisionSet(prec);
	RoundTo(result1,prec);
];










10 # Digamma(_n)_(IsPositiveInteger(n)) <-- Sum(m,1,n-1,1/m) - gamma;





5  # DirichletBeta(1)		<-- Pi/4;
5  # DirichletBeta(2)		<-- Catalan;
5  # DirichletBeta(3)		<-- Pi^3/32;
6  # DirichletBeta(n_IsOdd)	<-- [
		Local(k);
		k:=(n-1)/2;
		(-1)^k*Euler(2*k)*(Pi/2)^(2*k+1)/(2*(2*k)!);
];


10 # DirichletBeta(x_IsRationalOrNumber)_(InNumericMode() And x>=1 ) <-- [
	Local(prec,eps,term,result,k);
	prec:=BuiltinPrecisionGet();
  BuiltinPrecisionSet(prec+3);
	eps:=10^(-prec);
	result:=0;
	term:=1;
	For(k:=0, Abs(term) > eps, k++ )[
		term:=(-1)^k/(2*k+1)^x;
		Echo("term is ",term);
		result:=result+term;
	];
	BuiltinPrecisionSet(prec);
	RoundTo(result,prec);
];




10 # DirichletEta(_z)	<-- (1-2/2^z)*Zeta(z);




10 # DirichletLambda(_z)<-- (1-1/2^z)*Zeta(z);








10 # Erf(0)		<-- 0;

10 # Erf(Infinity)	<-- 1;
10 # Erf(Undefined) <-- Undefined;

10 # Erf(x_IsNumber)_(x<0)	<-- -Erf(-x);


LocalSymbols(k)
[
	40 # Erf(_x)_(InNumericMode() And (IsNumber(x) Or IsComplex(x)) And Abs(x) <= 1) <--
[
  Local(prec);
  prec := BuiltinPrecisionGet(); 
  2 / SqrtN(Internal'Pi()) * x
	* SumTaylorNum(x^2, 1, {{k}, -(2*k-1)/(2*k+1)/k},
	

		N(1+87/32*Exp(LambertW(prec*421/497)), 20)
	);

];

];	


LocalSymbols(n'max, k)
[

	50 # Erf(_x)_(InNumericMode() And (IsNumber(x) Or IsComplex(x))
		And (
			[	
				n'max := 0;
				Re(x^2) > BuiltinPrecisionGet()*3295/1431+0.121;
			]
			Or
			[	
				n'max := N(Minimum((BuiltinPrecisionGet()*3295/1431+0.121)/Internal'LnNum(Abs(x)), 2*Internal'LnNum(Abs(x))), 10);
				2*Abs(x)+Re(x^2) > BuiltinPrecisionGet()*3295/1431+0.121;
			]
			Or
			[	
	
				n'max := N(({{k}, k+Internal'LnNum(k)} @ BuiltinPrecisionGet()*3295/1431)/2 - 3/2, 10);
				Abs(x) > n'max+3/2;
			]
		)
	) <-- If(Re(x)!=0, Sign(Re(x)), 0) - Exp(-x^2)/x/SqrtN(Internal'Pi())
	
	* SumTaylorNum(1/x^2, 1, {{k}, -(2*k-1)/2 }, Maximum(0, Floor(n'max)));

];	




10 # Erfc(_x)		<-- 1 - Erf(x);




10 # Erfi(_x)		<-- -I*Erf(x*I);




10 # FresnelCos(0)              <-- 0;
10 # FresnelCos(Infinity)       <-- 1/2;
10 # FresnelCos(x_IsNumber)_(x<0)       <-- -FresnelCos(x);

40 # FresnelCos(x_IsNumber)_(Abs(x) <= 1) <-- N(Sqrt(2/Pi)*ApproxInfSum((-1)^(k+1)*x^(4*k-3)/((4*k-3) * (2*k-2)! ),1,x));








10 # FresnelSin(0)		<-- 0;
10 # FresnelSin(Infinity)	<-- 1/2;
10 # FresnelSin(x_IsNumber)_(x<0)	<-- -FresnelSin(x);

40 # FresnelSin(x_IsNumber)_(Abs(x) <= 1) <-- N(Sqrt(2/Pi)*ApproxInfSum((-1)^(k+1)*x^(2*k+1)/(k! * (2*k+1)),1,x));










5 # Gamma(Infinity)	<-- Infinity;

10 # Gamma(_n)_(IsInteger(n) And n<=0) <-- Infinity;


20 # Gamma(n_IsRationalOrNumber)_(IsPositiveInteger(n) Or FloatIsInt(2*n)) <-- (Round(2*n)/2-1)!;


30 # Gamma(x_IsConstant)_(InNumericMode()) <-- Internal'GammaNum(N(Eval(x)));










10 # LambertW(0) <-- 0;
10 # LambertW(Infinity) <-- Infinity;
10 # LambertW(Undefined) <-- Undefined;
10 # LambertW(-Infinity) <-- Infinity + I*Pi;
10 # LambertW(-Exp(-1)) <-- -1;
20 # LambertW(_x * Ln(_x)) <-- Ln(x);
20 # LambertW(Ln(_x) * _x) <-- Ln(x);

30 # LambertW(x_IsConstant) _ InNumericMode() <-- Internal'LambertWNum(Eval(x));


10 # Internal'LambertWNum(x_IsNumber)_(x < -ExpN(-1)) <-- Undefined;
20 # Internal'LambertWNum(x_IsNumber) <--
[
	Local(W);
	NewtonNum(
	  `Hold(
	  {
	  {W},
	  [
	  	Local(a);
		a:=W- @x*ExpN(-W);
		W-a/(W+1-(W+2)/(W+1)*a/2.);
	  ]}),
	
	  If(
		x<0,
		x*ExpN(1) / (1+1 / (1 / SqrtN(2*(x*ExpN(1)+1)) - 1 / SqrtN(2) + 1/(ExpN(1)-1))),
		Internal'LnNum(1+x)*(1-Internal'LnNum(1+Internal'LnNum(1+x))/(2+Internal'LnNum(1+x)))
	  ),
	  10,	
	  3	
	);
];




10 # LnGamma(_n)_(IsInteger(n) And n<=0) <-- Infinity;

20 # LnGamma(n_IsRationalOrNumber)_(IsPositiveInteger(n) Or FloatIsInt(2*n)) <-- Ln((Round(2*n)/2-1)!);

30 # LnGamma(x_IsConstant)_(InNumericMode()) <-- Internal'LnGammaNum(N(Eval(x)));









10 # PolyLog(_n,0)		<-- 0;

10 # PolyLog(1,1/2)             <-- Ln(2);
10 # PolyLog(_n,1)		<-- Zeta(n);
10 # PolyLog(_n,_m)_(m= -1)	<-- DirichletEta(n);
10 # PolyLog(_n,_x)_(n< 0)	<-- (1/((1-x)^(-n+1)))*Sum(i,0,-n,Eulerian(-n,i)*x^(-n-i) );



10 # PolyLog(0,_x)		<-- x/(1-x);
10 # PolyLog(1,_x)		<-- -Ln(1-x);

10 # PolyLog(2,1/2)		<-- (Pi^2 - 6*Ln(2)^2)/12;
10 # PolyLog(3,1/2)		<-- (4*Ln(2)^3 - 2*Pi^2*Ln(2)+21*Zeta(3))/24;
10 # PolyLog(2,2)		<-- Pi^2/4 - Pi*I*Ln(2);

20 # PolyLog(_n,_x)_(InNumericMode() And  x < -1 )  <-- [
	Local(prec,result);
	prec:=BuiltinPrecisionGet();
	BuiltinPrecisionSet(prec+5);
	Echo("Warning: PolyLog is only currently accurate for x in [-1,1]");
	result:= (-1)^(n-1)*PolyLog(n,1/x) - ((Ln(-x))^n)/n! -
	Sum(r,1,Round(n/2),
		2^(2*r-2)*Pi^(2*r)*Abs(Bernoulli(2*r))*Ln(-x)^(n-2*r)/( (2*r)! * (n - 2*r)! ) );
	BuiltinPrecisionSet(prec);
	RoundTo(N(result),prec);
];
20 # PolyLog(_n,_x)_(InNumericMode() And x>= -1 And x < 0 ) <-- [
	
	
        Local(prec,result);
        prec:=BuiltinPrecisionGet();
        BuiltinPrecisionSet(prec+5);

	result:=PolyLog(n,x^2)/2^(n-1) - PolyLog(n,-x) ;
        BuiltinPrecisionSet(prec);
        RoundTo(N(result),prec);

];


20 # PolyLog(_n,_x)_(InNumericMode() And x > 0 And x < 1) <--
[	
	Local(prec, result, terms);
	prec:=BuiltinPrecisionGet();
	BuiltinPrecisionSet(15);	
	terms := Floor(-prec*Ln(10)/Ln(x));
	terms := Floor(-(prec*Ln(10)-(n-1)*Ln(terms))/Ln(x));

	If(terms < 4, terms := 4);
	BuiltinPrecisionSet(prec+2*IntLog(prec,10)+5);
	result := x*SumTaylorNum(x, {{k}, 1/(k+1)^n}, terms);
	BuiltinPrecisionSet(prec);
	RoundTo(result, prec);
];




10 # Sinc(_x)		<-- If(x=0,1,Sin(x)/x);









10 # Zeta(1) <-- Infinity;
10 # Zeta(0) <-- -1/2;	
10 # Zeta(3)_InNumericMode() <-- Zeta3();	
10 # Zeta(n_IsEven)_(n>0) <-- Pi^n*(2^(n-1)/n! *Abs(Bernoulli(n)));
10 # Zeta(n_IsInteger)_(n<0) <-- -Bernoulli(-n+1)/(-n+1);
11 # Zeta(n_IsInfinity) <-- 1;


20 # Zeta(s_IsConstant)_(InNumericMode()) <-- Internal'ZetaNum(N(Eval(s)));

