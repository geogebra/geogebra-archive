


Bernoulli1(n_IsEven)_(n>=2) <-- [
	Local(B, prec);
	prec := BuiltinPrecisionGet();
	
	
	BuiltinPrecisionSet(10);
	BuiltinPrecisionSet(
		Ceil(N((1/2*Ln(8*Pi*n)-n+n*Ln(n/2/Pi))/Ln(10)))+3	
	);
	If (InVerboseMode(), Echo({"Bernoulli: using zeta funcion, precision ", BuiltinPrecisionSet(), ", n = ", n}));
	B := Floor(N(	
		If(	
			n>250,	
			Internal'ZetaNum2(n, n/17+1),	
			
			
			Internal'ZetaNum1(n, n/17+1)	
		)
		*N(2*n! /(2*Pi)^n)))
		
		* (2*Mod(n/2,2)-1)	
		+ BernoulliFracPart(n);	
	BuiltinPrecisionSet(prec);	
	B;
];




BernoulliFracPart(n_IsEven)_(n>=2) <-- [
	Local(p, sum);
	
	sum := 1/2+1/3;
	
	If(IsPrime(n+1), sum := sum+1/(n+1));
	If(IsPrime(n/2+1), sum := sum+1/(n/2+1));
	
	
	For(p:=5, p<=n/3+1, p:=NextPrime(p))
		If(Mod(n, p-1)=0, sum := sum + 1/p);
	
	
	Div(Numerator(sum), Denominator(sum)) - sum
		 + Mod(n/2,2);	
		
];




10 # Internal'BernoulliArray(n_IsInteger)_(n=0 Or n=1) <-- [
	Local(B);
	B:=ArrayCreate(n+1,0);
	B[1] := 1;
	If(n=1, B[2] := -1/2);
	B;
];

20 # Internal'BernoulliArray(n_IsInteger) <-- [
	Local(B, i, k, k2, bin);
	If (InVerboseMode(), Echo({"Internal'BernoulliArray: using direct recursion, n = ", n}));
	B:=ArrayCreate(n+1, 0);	
	
	
	
	B[1] := 1;
	B[2] := -1/2;
	B[3] := 1/6;
	For(i:=4, i<=n, i := i+2)	
	[	
		bin := 1;	
		
		B[i+1] := 1/2-1/(i+1)*(1 + Sum(k, 1, i/2-1,
			[
				bin := bin * (i+3-2*k) * (i+2-2*k)/ (2*k-1) / (2*k);
				B[2*k+1]*bin;	
			]
		) );
	];
	B;
];







Internal'BernoulliArray1(n_IsEven) _ (n>=2) <--
[
	Local(C, f, k, j, denom, sum);
	C := ArrayCreate(n+1, 0);
	f := ArrayCreate(n/2, 0);
	C[1] := 1;
	C[2] := -1/2;
	C[3] := 1/12;	
	f[1] := 2;	
	For(k:=2, k<=n/2, k++)	
	[
		
		f[k] := f[k-1] * (2*k)*(2*k-1);
		
		C[2*k+1] := 1/(1-4^(-k))/2*(
			[
				denom := 4;	
				sum := 0;
				For(j:=1, j<=k-1, j++)
				[
					sum := sum + C[2*(k-j)+1]/denom/f[j];	
					denom := denom * 4;
				];
				(2*k-1)/denom/f[k] - sum;
			]
		);

	];
	
	For(k:=1, k<=n/2, k++)
		C[2*k+1] := C[2*k+1] * f[k];
	
	C;
];

