
Function("BenchCall",{expr})
[
  Echo("In&gt ",expr);
  WriteString("<font color=ff0000>");
  Eval(expr);
  WriteString("</font>");
  True;
];
HoldArgument("BenchCall",expr);


Function("BenchShow",{expr})
[
  Echo("In&gt ",expr);
  WriteString("<font color=ff0000> ");
  Echo("Out&gt ",Eval(expr),"</font>");
  True;
];
HoldArgument("BenchShow",expr);




10 # EqualAsSets( A_IsList, B_IsList )_(Length(A)=Length(B)) <--
[
    Local(Acopy,b,nba,result);
    Acopy  := FlatCopy(A);
    result := True;
    ForEach(b,B)
     [
         nba := Find(Acopy,b);
         If( nba < 0, [ result := False; Break(); ] );
         DestructiveDelete(Acopy,nba);
     ];
     If( Not result, result := Length(Acopy)=0 );
     result;
];

20 # EqualAsSets( _A, _B ) <-- False;


Function("KnownFailure",{expr})
[
  Local(rfail);
  Echo("Known failure: ", expr);
  Bind(rfail,Eval(expr));
  If(rfail,Echo({"Failure resolved!"}));
];
HoldArgument("KnownFailure",expr);



LocalSymbols(TrueFalse)
[
  MacroRulebase(TrueFalse,{var,expr});
  10 # TrueFalse(var_IsAtom,_expr) <-- `{(@expr) Where (@var)==False,(@expr) Where (@var)==True};
  20 # TrueFalse({},_expr) <-- `(@expr);
  30 # TrueFalse(var_IsList,_expr) <--
  `[
    Local(t,h);
    Bind(h,First(@var));
    Bind(t,Rest(@var));
    TrueFalse(h,TrueFalse(t,@expr));
  ];

  Macro(LogicTest,{vars,expr1,expr2}) Verify(TrueFalse((@vars),(@expr1)), TrueFalse((@vars),(@expr2)));
];


Function("LogicVerify",{aLeft,aRight})
[
  If(aLeft != aRight,
    Verify(CanProve(aLeft => aRight),True)
  );
];


Function("NextTest",{aLeft})
[

WriteString("
Test suite for ":aLeft:" : "
           );
  NewLine();
];




10 # NumericEqual(left_IsDecimal, right_IsDecimal, precision_IsPositiveInteger) <--
[
    If(InVerboseMode(),Tell("NumericEqual",{left,right}));
    Local(repL,repR,precL,precR,newL,newR,plo,phi,replo,rephi);
    Local(newhi,newrepL,newlo,newrepR,ans);
    repL     := NumberToRep(left);
    repR     := NumberToRep(right);
    precL    := repL[2];
    precR    := repR[2];
    If(InVerboseMode(),Tell("  ",{precL,precR,precision}));
    newL     := RoundToPrecision(left,  precision );
    newR     := RoundToPrecision(right, precision );
    If(InVerboseMode(),Tell("  ",{newL,newR}));
    newrepL  := NumberToRep( newL );
    newrepR  := NumberToRep( newR );
    If(InVerboseMode(),Tell("  ",{newrepL,newrepR}));
    ans      := Verify( newrepL[1] - newrepR[1], 0 );
    If(InVerboseMode(),Tell("        ",ans));
    ans;
];


15 # NumericEqual(left_IsInteger, right_IsInteger, precision_IsPositiveInteger) <--
[
    If(InVerboseMode(),Tell("NumericEqualInt",{left,right}));
    left = right;
];


20 # NumericEqual(left_IsNumber, right_IsNumber, precision_IsPositiveInteger) <--
[
    If(InVerboseMode(),Tell("NumericEqualNum",{left,right}));
    Local(nI,nD,repI,repD,precI,precD,intAsDec,newDec,newrepI,newrepD,ans);
    If( IsInteger(left), [nI:=left; nD:=right;], [nI:=right; nD:=left;]);
    
    repI  := NumberToRep(nI);
    repD  := NumberToRep(nD);
    precI := repI[2];
    precD := repD[2];
    intAsDec := RoundToPrecision(1.0*nI,precision);
    newDec   := RoundToPrecision( nD,   precision );
    newrepI  := NumberToRep( intAsDec );
    newrepD  := NumberToRep( newDec   );
    If(InVerboseMode(),
      [
          Tell("        ",{nI,nD});
          Tell("    ",{repI,repD});
          Tell("  ",{precI,precD});
          Tell("       ",{intAsDec,newDec});
          Tell("       ",{newrepI,newrepD});
       ]
    );
    ans      := Verify( newrepI[1] - newrepD[1], 0 );
    If(InVerboseMode(),Tell("        ",ans));
    ans;
];


25 # NumericEqual(left_IsComplex, right_IsComplex, precision_IsPositiveInteger) <--
[
    If(InVerboseMode(),Tell("NumericEqualC",{left,right}));
    Local(rrL,iiL,rrR,iiR,ans);
    rrL := Re(left);
    iiL := Im(left);
    rrR := Re(right);
    iiR := Im(right);
    If(InVerboseMode(),
      [
         Tell("  ",{left,right});
         Tell("  ",{rrL,rrR});
         Tell("  ",{iiL,iiR});
      ]
    );
    ans := (NumericEqual(rrL,rrR,precision) And NumericEqual(iiL,iiR,precision));
];


RandVerifyArithmetic(_n)<--
[
 While(n>0)
 [
   n--;
   VerifyArithmetic(FloorN(300*Random()),FloorN(80*Random()),FloorN(90*Random()));
 ];
];





10 # RoundTo(x_IsNumber, precision_IsPositiveInteger) <--
[
  Local(oldPrec,result);

  oldPrec:=BuiltinPrecisionGet();

  BuiltinPrecisionSet(precision);

  Bind(result,DivideN( Round( MultiplyN(x, 10^precision) ), 10^precision ));

  BuiltinPrecisionSet(oldPrec);

  result;
];




10 # RoundTo(Complex(r_IsNumber, i_IsNumber), precision_IsPositiveInteger) <-- Complex(RoundTo(r, precision), RoundTo(i, precision));





20 # RoundTo( Infinity,precision_IsPositiveInteger) <--  Infinity;

20 # RoundTo(-Infinity,precision_IsPositiveInteger) <-- -Infinity;







ShowLine() := [Echo(CurrentFile(),": ",CurrentLine());];





Macro("TestEquivalent",{left,right})
[
    Local(leftEval,rightEval,diff,vars,isEquiv);
    If(InVerboseMode(),[Tell(TestEquivalent,{left,right});]);
    leftEval  := @left;
    rightEval := @right;
    If(InVerboseMode(),
      [ NewLine(); Tell("    ",leftEval); Tell("   ",rightEval); ]);
    If( IsList(leftEval),
      [
          If( IsList(rightEval),
            [
                
                If(InVerboseMode(),Tell("     both are lists "));
                isEquiv := TestTwoLists(leftEval,rightEval);
            ],
            isEquiv := False
          );
      ],
      [
          If( IsList(rightEval), 
            isEquiv := False,
            [
                
                If(InVerboseMode(),Tell("     neither is list "));
                If(IsEquation(leftEval),
                  [
                      If(IsEquation(rightEval),
                        [
                            If(InVerboseMode(),Tell("      both are equations"));
                            Local(dLHs,dRHS);
                            dLHS := Simplify(EquationLeft(leftEval) - EquationLeft(rightEval));
                            dRHS := Simplify(EquationRight(leftEval) - EquationRight(rightEval));
                            If(InVerboseMode(),Tell("      ",{dLHS,dRHS}));
                            isEquiv := dLHS=0 And dRHS=0;
                        ],
                        isEquiv := False
                      );
                  ],
                  [
                     If(IsEquation(rightEval),
                        isEquiv := False,
                        [
                            If(InVerboseMode(),Tell("      neither is equation"));
                            diff := Simplify(leftEval - rightEval);
                            vars := VarList(diff);
                            If(InVerboseMode(),
                              [
                                 Tell("    ",{leftEval,rightEval});
                                 Tell("    ",vars);
                                 Tell("    ",diff);
                              ]
                            );
                            isEquiv   := ( IsZero(diff) Or IsZeroVector(diff) );
                        ]
                      );
                   ]
                );
            ]
          );
      ]
    );
    If(InVerboseMode(),Tell("     Equivalence = ",isEquiv));
    If ( Not isEquiv,
      [
		  WriteString("******************");          NewLine();
		  WriteString("L.H.S. evaluates to: ");
		  Write(leftEval);                            NewLine();
		  WriteString("which differs from   ");
		  Write(rightEval);                           NewLine();
		  WriteString(" by                  "); 
		  Write(diff);                                NewLine();
		  WriteString("******************");          NewLine();
      ]
    );
    isEquiv;
];


10 # TestTwoLists( L1_IsList, L2_IsList ) <--
[
    If(InVerboseMode(),[Tell("   TestTwoLists");Tell("     ",L1);Tell("     ",L2);]);
    If(Length(L1)=1 And Length(L2)=1,
      [
          TestEquivalent(L1[1],L2[1]);
      ],
      [
          EqualAsSets(L1,L2);
      ]
    );
];








Function ("TestMathPiper", {expr, ans})
[
	Local(diff);
	diff := Simplify(Eval(expr)-Eval(ans));
		If (Simplify(diff)=0, True,
			[
			  WriteString("******************");
			  NewLine();
			  ShowLine();
			  Write(expr);
			  WriteString(" evaluates to ");
			  NewLine();
			  Write(Eval(expr));
			  NewLine();
			  WriteString(" which differs from ");
			  NewLine();
			  Write(Eval(ans));
			  NewLine();
			  WriteString(" by ");
			  NewLine();
			  Write(diff);
			  NewLine();
			  WriteString("******************");
			  NewLine();
			  False;
			 ]
			);
];

HoldArgument("TestMathPiper", expr);
HoldArgument("TestMathPiper", ans);



Function("Testing",{aLeft})
[
 WriteString("--");
 WriteString(aLeft); NewLine();
];





Function("Verify",{aLeft,aRight})
[

	Local(result);
	result := Eval(aLeft);	
  If (Not(IsEqual(result,aRight)),
    [
      WriteString("******************");
      NewLine();
      ShowLine();
      NewLine();
      Write(aLeft);
      NewLine();
      WriteString(" evaluates to ");
      NewLine();
	  Write(result);
      NewLine();
	  WriteString(" which differs from ");
      NewLine();
      Write(aRight);
      NewLine();
      WriteString("******************");
      NewLine();
      False;
    ],
    True
  );
];
HoldArgument("Verify",aLeft);
UnFence("Verify",2);


Macro("Verify", {a,b,message})
[
	Echo("test ", @message);
	Verify(@a, @b);
];



LocalSymbols(f1,f2)
[
  
  f1(x,n,m):=(x^n-1)*(x^m-1);
  f2(x,n,m):=x^(n+m)-(x^n)-(x^m)+1;

  VerifyArithmetic(x,n,m):=
  [
    Verify(f1(x,n,m),f2(x,n,m));
  ];
];


VerifyDiv(_u,_v) <--
[
  Local(q,r);
  q:=Quotient(u,v);
  r:=Rem(u,v);

  Verify(Expand(u),Expand(q*v+r));
];





VerifySolve(_e1, _e2) <--
If (VerifySolve'Equal(Eval(e1), Eval(e2)), 
    True,
    [ 
      WriteString("******************");    NewLine();
      ShowLine();                           NewLine();
      Write(e1);                            NewLine();
      WriteString(" evaluates to ");        NewLine();
      Write(Eval(e1));                      NewLine();
      WriteString(" which differs from ");  NewLine();
      Write(e2);                            NewLine();
      WriteString("******************");    NewLine();
      False; 
    ]); 
HoldArgumentNumber("VerifySolve", 2, 1);

10 # VerifySolve'Equal({}, {}) <-- True;

20 # VerifySolve'Equal({}, e2_IsList) <-- False;

30 # VerifySolve'Equal(e1_IsList, e2_IsList) <--
[
  Local(i, found);
  found := False;
  i := 0;
  While(i < Length(e2) And Not found) [
    i++;
    found := VerifySolve'Equal(First(e1), e2[i]);
  ];
  If (found, VerifySolve'Equal(Rest(e1), Delete(e2, i)), False);
];

40 # VerifySolve'Equal(_l1 == _r1, _l2 == _r2) 
<-- IsEqual(l1,l2) And Simplify(r1-r2)=0;

50 # VerifySolve'Equal(_e1, _e2) <-- Simplify(e1-e2) = 0;

