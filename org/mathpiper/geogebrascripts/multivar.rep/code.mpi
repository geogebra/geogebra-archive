


10 # DisassembleExpression( _expr ) <--
[
    Local(vars);
    vars := MultiExpressionList( expr );
    DisassembleExpression( expr, vars );
];

10 # DisassembleExpression( _expr, vars_IsList ) <--
[
    Local(mexpr,func,termList,result,powers,coeffs);
    mexpr    := MakeMultiNomial(expr,vars);
    func     := Lambda({x,y},If(y!=0,DestructiveAppend(termList,{x,y})));
    termList := {};
    ScanMultiNomial(func,mexpr);
    result   := Concat({vars},Transpose(termList));
];




Groebner(f_IsList) <--
[
  Local(vars,i,j,S,nr,r);
  nr:=Length(f);
  vars:=VarList(f);
  For(i:=1,i<=nr,i++)
  [
    f[i] := MakeMultiNomial(f[i],vars);
  ];
  S:={};
  For(i:=1,i<nr,i++)
  For(j:=i+1,j<=nr,j++)
  [
    r := (MultiDivide(MultiS(f[i],f[j],f[i]),f)[2]);
    If(NormalForm(r) != 0, S:= r:S);
    f:=Concat(f,S);
    S:={};
    nr:=Length(f);
  ];
  MapSingle("NormalForm",Concat(f));
];







10 # ListTerms(_expr) <--
[
    If(InVerboseMode(),Tell("ListTerms",expr));
    Local(termList);
    Local(op,x2,x3);
    termList := {};
    If(IsFunction(expr),
      [
         {op,x2,x3} := FunctionToList(expr);
         If(InVerboseMode(),Tell("          ",{op,x2,x3})); 
         terms(op,x2,x3);
      ],
      [
         Push(termList,expr);
      ]
    );
    termList;
];


10 # terms(_op,_x2,_x3)_(op=ToAtom("+") Or op=ToAtom("-")) <--
[
    If(InVerboseMode(),[Tell("   terms10",op);Tell("         ",{x2,x3});]);
    Local(sgn);
    If(op=ToAtom("+"),sgn:=1,sgn:=-1);
    Push(termList,sgn*x3);
    If(InVerboseMode(),Tell("         ",termList));
    If(IsFunction(x2),
      [
         Local(L);
         L := FunctionToList(x2);
         If(InVerboseMode(),Tell("               ",L));
         If(Length(L)=3,terms(L[1],L[2],L[3]),Push(termList,x2));
      ],
      [
         Push(termList,x2);
      ]
    );
];
UnFence("terms",3);


20 # terms(_op,_x2,_x3) <--
[
    If(InVerboseMode(),[Tell("   terms20",op);Tell("         ",{x2,x3});]);
    Local(F);
    F := ListToFunction({op,x2,x3});
    Push(termList,F);
    If(InVerboseMode(),Tell("         ",termList));
    termList;
];
UnFence("terms",3);



MM(_expr) <--  MM(expr,MultiExpressionList(expr));
MM(_expr,_vars) <--  MakeMultiNomial(expr,vars);


MultiDivTerm(MultiNomial(_vars,_term1),MultiNomial(_vars,_term2)) <--
[
  Local(lm1,lm2);
  Bind(lm1,MultiLeadingTerm(MultiNomial(vars,term1)) );
  Bind(lm2,MultiLeadingTerm(MultiNomial(vars,term2)) );
  CreateTerm(vars,{lm1[1]-lm2[1],lm1[2] / lm2[2]});
];
MultiS(_g,_h,MultiNomial(_vars,_terms)) <--
[
  Local(gamma);

  gamma :=Maximum(MultiDegree(g),MultiDegree(h));
  Local(result,topterm);
  topterm := MM(Product(vars^gamma));

  result :=
    MultiDivTerm(topterm,MultiLT(g))*g -
    MultiDivTerm(topterm,MultiLT(h))*h;

  result;
];



20 # MultiDivide(_f,g_IsList) <--
[
  Local(i,v,q,r,nr);
  v:=MultiExpressionList(f+Sum(g));
  f:=MakeMultiNomial(f,v);
  nr := Length(g);
  For(i:=1,i<=nr,i++)
  [
    g[i] := MakeMultiNomial(g[i],v);
  ];
  {q,r}:=MultiDivide(f,g);
  q:=MapSingle("NormalForm",q);
  r:=NormalForm(r);
  {q,r};
];

10 # MultiDivide(f_IsMulti,g_IsList) <--
[
  Local(i,nr,q,r,p,v,finished);
  Bind(nr, Length(g));
  Bind(v, MultiVars(f));
  Bind(q, FillList(0,nr));
  Bind(r, 0);
  Bind(p, f);
  Bind(finished,MultiZero(p));
  Local(plt,glt);
  While (Not finished)
  [
    Bind(plt, MultiLT(p));
    For(i:=1,i<=nr,i++)
    [
      Bind(glt, MultiLT(g[i]));

      if (MultiLM(glt) = MultiLM(plt) Or MultiTermLess({MultiLM(glt),1}, {MultiLM(plt),1}))
      if (Select(MultiLM(plt)-MultiLM(glt)) = {}, {{n},n<0})
      [
        Local(ff);
      Bind(ff, CreateTerm(v,{MultiLM(plt)-MultiLM(glt),MultiLC(plt)/MultiLC(glt)}));
        q[i] := q[i] + ff;
        Local(ltbefore,ltafter);
        Bind(ltbefore,MultiLeadingTerm(p));

        Bind(p, p - ff*g[i]);
        Bind(ltafter,MultiLeadingTerm(p));

        if (ltbefore[1] = ltafter[1])
        [
          Bind(ltafter,MultiLT(p));
          Bind(p,p-ltafter);
        ];

        Bind(i,nr+2);
      ];
    ];

    If (i = nr+1,
    [
      Bind(r, r + LocalSymbols(a,b)(Subst(a,b)plt));
      Bind(p,  p - LocalSymbols(a,b)(Subst(a,b)plt));
    ]);

    Bind(finished,MultiZero(p));
  ];
  {q,r};
];




10 # MultiGcd( 0,_g) <-- g;
10 # MultiGcd(_f, 0) <-- f;

20 # MultiGcd(_f,_g) <--
[
  Local(v);
  v:=MultiExpressionList(f+g);  
  NormalForm(MultiGcd(MakeMultiNomial(f,v),MakeMultiNomial(g,v)));
];


5 # MultiGcd(f_IsMulti,g_IsMulti)_(MultiTermLess({MultiLM(f),1},{MultiLM(g),1})) <--
[

  MultiGcd(g,f);
];

5  # MultiGcd(MultiNomial(_vars,_terms),g_IsMulti)_(MultiLM(MultiNomial(vars,terms)) = MultiLM(g))
     <-- CreateTerm(vars,{FillList(0,Length(vars)),1});

5  # MultiGcd(MultiNomial(_vars,_terms),g_IsMulti)_( Select(MultiLM(MultiNomial(vars,terms))-MultiLM(g), {{n},n<0} ) != {})
     <-- CreateTerm(vars,{FillList(0,Length(vars)),1});

5  # MultiGcd(MultiNomial(_vars,_terms),g_IsMulti)_(NormalForm(g) = 0)
     <-- CreateTerm(vars,{FillList(0,Length(vars)),1});
10 # MultiGcd(f_IsMulti,g_IsMulti) <--
[
  LocalSymbols(a)
  [
    Bind(f,Subst(a,a)f);
    Bind(g,Subst(a,a)g);
  ];
  Local(new);
  While(g != 0)
  [


    Bind(new, MultiDivide(f,{g}));

If(new[1][1]=0,
[
  g:=MakeMultiNomial(1,MultiVars(f));

  new[2]:=0;
]);
    Bind(new, new[2]);
    Bind(f,g);
    Bind(g,new);



  ];
  MultiPrimitivePart(f);
];



Rulebase("MultiNomial",{vars,terms});





If(IsBound(MultiNomialDriver),
  `LoadScriptOnce(@MultiNomialDriver),
  LoadScriptOnce("multivar.rep/sparsenomial.mpi"));


LoadScriptOnce("multivar.rep/makemulti.mpi");


MultiSimp(_expr) <--
[
  Local(vars);
  vars:=MultiExpressionList(expr);

  MultiSimp2(MM(expr,vars));
];

10 # MultiSimp2(_a / _b) <--
[
  Local(c1,c2,gcd,cmn,vars);


  c1 := MultiContentTerm(a);
  c2 := MultiContentTerm(b);
  gcd:=Gcd(c1[2],c2[2]);
  c1[2] := c1[2]/gcd;
  c2[2] := c2[2]/gcd;

  cmn:=Minimum(c1[1],c2[1]);
  c1[1] := c1[1] - cmn;
  c2[1] := c2[1] - cmn;

  vars:=MultiVars(a);
  Check(vars = MultiVars(b), "Argument", "incompatible Multivars to simplify");

  (NormalForm(CreateTerm(vars,c1))/NormalForm(CreateTerm(vars,c2)))
    *(NormalForm(MultiPrimitivePart(a))/NormalForm(MultiPrimitivePart(b)));
];

20 # MultiSimp2(expr_IsMulti) <--
[
  NormalForm(MultiContent(expr))*NormalForm(MultiPrimitivePart(expr));
];
30 # MultiSimp2(_expr) <-- expr;

MultiContent(multi_IsMulti)
<--
[
  Local(least,gcd);
  Bind(least, MultiDegree(multi));
  Bind(gcd,MultiLeadingCoef(multi));
  ScanMultiNomial("MultiContentScan",multi);
  CreateTerm(MultiVars(multi),MultiContentTerm(multi));
];

MultiContentTerm(multi_IsMulti)
<--
[
  Local(least,gcd);
  Bind(least, MultiDegree(multi));
  Bind(gcd,MultiLeadingCoef(multi));
  ScanMultiNomial("MultiContentScan",multi);
  {least,gcd};
];

MultiContentScan(_coefs,_fact) <--
[
  Bind(least,Minimum({least,coefs}));
  Bind(gcd,Gcd(gcd,fact));
];
UnFence("MultiContentScan",2);

MultiPrimitivePart(MultiNomial(vars_IsList,_terms))
<--
[
  Local(cont);
  Bind(cont,MultiContentTerm(MultiNomial(vars,terms)));
  Bind(cont,CreateTerm(vars,{-cont[1],1/Rationalize(cont[2])}));
  MultiNomialMultiply(MultiNomial(vars,terms), cont);
];

10 # MultiRemoveGcd(x_IsMulti/y_IsMulti) <--
[
  Local(gcd);
  Bind(gcd,MultiGcd(x,y));
  Bind(x,MultiDivide(x,{gcd})[1][1]);
  Bind(y,MultiDivide(y,{gcd})[1][1]);
  x/y;
];
20 # MultiRemoveGcd(_x) <-- x;



5 # MultiDegree(MultiNomial(_vars,_term))_(Not(IsList(term))) <-- {};
10 # MultiDegree(MultiNomial(_vars,{})) <-- FillList(-Infinity,Length(vars));
20 # MultiDegree(MultiNomial(_vars,_terms))
   <-- (MultiLeadingTerm(MultiNomial(vars,terms))[1]);


10 # MultiLeadingCoef(MultiNomial(_vars,_terms))
   <-- (MultiLeadingTerm(MultiNomial(vars,terms))[2]);

10 # MultiLeadingMono(MultiNomial(_vars,{})) <-- 0;
20 # MultiLeadingMono(MultiNomial(_vars,_terms))
   <-- Product(vars^(MultiDegree(MultiNomial(vars,terms))));

20 # MultiLeadingTerm(_m) <-- MultiLeadingCoef(m) * MultiLeadingMono(m);

MultiVars(MultiNomial(_vars,_terms)) <-- vars;

20 # MultiLT(multi_IsMulti)
   <-- CreateTerm(MultiVars(multi),MultiLeadingTerm(multi));

10 # MultiLM(multi_IsMulti) <-- MultiDegree(multi);

10 # MultiLC(MultiNomial(_vars,{})) <-- 0;
20 # MultiLC(multi_IsMulti) <-- MultiLeadingCoef(multi);

DropZeroLC(multi_IsMulti) <-- MultiDropLeadingZeroes(multi);




10 # ReassembleListTerms( disassembly_IsList ) <--
[
    Local(vars,lst,powers,coeffs,ii,pows,coef,term);
    vars   := disassembly[1];
    powers := disassembly[2];
    coeffs := disassembly[3];
    lst    := {};
    For(ii:=1,ii<=Length(powers),ii++)
    [
        pows := powers[ii];
        coef := coeffs[ii];
        
        term  := coef*Product(vars^pows);
        
        DestructiveAppend(lst,term);
    ];
    lst;
];

