








LoadScriptOnce("initialization.rep/stdopers.mpi");


DefMacroRulebase("Defun",{func,args,body});
Rule("Defun",3,0,True)
[
  Local(nrargs);
  Set(nrargs,Length(@args));
  Retract(@func, `(@nrargs));
  Rulebase(@func,@args);
  Local(fn,bd);
  Set(fn,Hold(@func)); Set(bd,Hold(@body));
  `Rule(@fn, @nrargs, 0,True)(@bd);
];



LoadScriptOnce("patterns.rep/code.mpi");


LoadScriptOnce("deffunc.rep/code.mpi");



LoadScriptOnce("constants.rep/code.mpi");
LoadScriptOnce("initialization.rep/standard.mpi");
LoadScriptOnce("initialization.rep/stdarith.mpi");





Rulebase(LoadPackages,{packages});
Rule(LoadPackages, 1, 1, True)
[
	If(IsEqual(packages,{}), True,
	[
		DefLoad(First(packages));
		LoadPackages(Rest(packages));
	]);
];

LoadScriptOnce("initialization.rep/packages.mpi");
LoadPackages(DefFileList());



Rulebase("REP",{});
LocalSymbols(input,stringOut,result,errorString)
Rule("REP",0,1,True)
[
  Local(input,stringOut,result);
  While(Not(IsExitRequested()))
  [
    Set(errorString, "");
    If(And(IsString(PrettyReaderGet()),Not(PrettyReaderGet() = "")),
      TrapError(Set(input, PipeFromString(ReadCmdLineString("In> "))ApplyPure(PrettyReaderGet(),{})),Set(errorString,GetCoreError())),
      TrapError(Set(input, PipeFromString(ConcatStrings(ReadCmdLineString("In> "),";"))Read()),Set(errorString,GetCoreError())));
    If(Not(errorString = ""), WriteString(errorString));
    If (Not(IsExitRequested()) And errorString="",
    [
      Set(stringOut,"");
      Set(result,False);
      Set(stringOut,PipeToString()[TrapError(Set(result,Eval(input)),Set(errorString,GetCoreError()));]);
      If(Not(stringOut = ""), WriteString(stringOut));
      If(Not(errorString = ""), WriteString(errorString));
      SetGlobalLazyVariable(%,result);
      If(PrettyPrinterGet()="",
      [
        Write(ToAtom("Out> "),result);
        NewLine();
      ],
      Apply(PrettyPrinterGet(),{result}));
    ]);
  ];
];



