

Rulebase("Nth",{alist,aindex});
Rule("Nth",2,10,
    And(IsEqual(IsFunction(alist),True),
            IsEqual(IsInteger(aindex),True),
            Not(IsEqual(First(FunctionToList(alist)),Nth))
            ))
     MathNth(alist,aindex);




Rule("Nth",2,14,
     And(IsEqual(IsString(alist),True),IsList(aindex))
    )
[
  Local(result);
  result:="";
  ForEach(i,aindex) [ result := result : StringMidGet(i,1,alist); ];
  result;
];

Rule("Nth",2,15,IsEqual(IsString(alist),True))
[
  StringMidGet(aindex,1,alist);
];


Rule("Nth",2,20,IsEqual(IsList(aindex),True))
[
  Map({{ii},alist[ii]},{aindex});
];

Rule("Nth",2,30,
   And(
           IsEqual(IsGeneric(alist),True),
           IsEqual(GenericTypeName(alist),"Array"),
           IsEqual(IsInteger(aindex),True)
          )
    )
[
  ArrayGet(alist,aindex);
];



Rule("Nth",2,40,IsEqual(IsString(aindex),True))
[
  Local(as);
  as := Assoc(aindex,alist);
  If (Not(IsEqual(as,Empty)),Bind(as,Nth(as,2)));
  as;
];



Function("ArgumentsCount",{aLeft}) Length(FunctionToList(aLeft))-1;


Retract("Denominator",*);

1 # Denominator(_x / _y)      <-- y;
1 # Denominator(-_x/ _y)      <-- y;
2 # Denominator(x_IsNumber)   <-- 1;


10 # IsNonObject(Object(_x)) <-- False;
20 # IsNonObject(_x)         <-- True;


Rulebase("NormalForm",{expression});
Rule("NormalForm",1,1000,True) expression;


Retract("Numerator",*);

1 # Numerator(_x / _y)      <-- x;
1 # Numerator(-_x/ _y)      <-- -x;
2 # Numerator(x_IsNumber)   <-- x;


a_IsNonNegativeInteger & b_IsNonNegativeInteger <-- BitAnd(a,b);


Rulebase("==",{left,right});


Rulebase("!==",{left,right});


Function("--",{aVar})
[
   MacroBind(aVar,SubtractN(Eval(aVar),1));

   Eval(aVar);
];

UnFence("--",1);

HoldArgument("--",aVar);










Retract("N",*);

LocalSymbols(numericMode)
[

  numericMode := False;

  
  LocalSymbols(previousNumericMode, previousPrecision, numericResult) 
  Macro("N",{expression, precision})
  [
    
    
    
    
    
    Local(previousNumericMode, previousPrecision, numericResult, exception);

    previousPrecision := BuiltinPrecisionGet();
    
    BuiltinPrecisionSet(@precision+5);

    AssignCachedConstantsN();

    previousNumericMode := numericMode;
    numericMode         := True;
    exception         := False;

    

    ExceptionCatch( numericResult:=Eval(@expression), exception := ExceptionGet() );
    

    If(IsDecimal(numericResult), numericResult := RoundToN(numericResult, @precision));
    

    numericMode := previousNumericMode;

    If(Not numericMode, [ ClearCachedConstantsN(); ] );

    BuiltinPrecisionSet(previousPrecision);

    Check(exception = False, exception["type"], exception["message"]);

    numericResult;

  ];




  
  LocalSymbols(precision,heldExpression) 
  Macro("N",{expression})
  [
     Local(precision, heldExpression);
     precision      :=  BuiltinPrecisionGet();
     heldExpression :=  Hold(@expression);

     `N(@heldExpression, @precision);
  ];

  
  
  LocalSymbols(result) 
  Macro("NonN",{expression})
  [
    Local(result);
    GlobalPush(numericMode);
    numericMode := False;
    result      := (@expression);
    numericMode := GlobalPop();
    result;
  ];


  
  Function("InNumericMode",{}) numericMode;

]; 


a_IsNonNegativeInteger % b_IsPositiveInteger <-- Modulo(a,b);


Function("++",{aVar})
[
   MacroBind(aVar,AddN(Eval(aVar),1));

   Eval(aVar);
];

UnFence("++",1);

HoldArgument("++",aVar);


a_IsNonNegativeInteger | b_IsNonNegativeInteger <-- BitOr(a,b);

