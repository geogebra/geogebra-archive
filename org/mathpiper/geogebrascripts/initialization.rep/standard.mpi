

RuleBase("Nth",{alist,aindex});
Rule("Nth",2,10,
    And(Equals(IsFunction(alist),True),
            Equals(IsInteger(aindex),True),
            Not(Equals(First(Listify(alist)),Nth))
            ))
     MathNth(alist,aindex);




Rule("Nth",2,14,
     And(Equals(IsString(alist),True),IsList(aindex))
    )
[
  Local(result);
  result:="";
  ForEach(i,aindex) [ result := result : StringMidGet(i,1,alist); ];
  result;
];

Rule("Nth",2,15,Equals(IsString(alist),True))
[
  StringMidGet(aindex,1,alist);
];


Rule("Nth",2,20,Equals(IsList(aindex),True))
[
  Map({{ii},alist[ii]},{aindex});
];

Rule("Nth",2,30,
   And(
           Equals(IsGeneric(alist),True),
           Equals(GenericTypeName(alist),"Array"),
           Equals(IsInteger(aindex),True)
          )
    )
[
  ArrayGet(alist,aindex);
];



Rule("Nth",2,40,Equals(IsString(aindex),True))
[
  Local(as);
  as := Assoc(aindex,alist);
  If (Not(Equals(as,Empty)),Set(as,Nth(as,2)));
  as;
];



Function("NrArgs",{aLeft}) Length(Listify(aLeft))-1;


1 # Denominator(_x / _y)      <-- y;
2 # Denominator(x_IsNumber)   <-- 1;


10 # IsNonObject(Object(_x)) <-- False;
20 # IsNonObject(_x)         <-- True;


RuleBase("NormalForm",{expression});
Rule("NormalForm",1,1000,True) expression;


1 # Numerator(_x / _y)      <-- x;
2 # Numerator(x_IsNumber)   <-- x;


a_IsNonNegativeInteger & b_IsNonNegativeInteger <-- BitAnd(a,b);


RuleBase("==",{left,right});


RuleBase("!==",{left,right});


Function("--",{aVar})
[
   MacroSet(aVar,SubtractN(Eval(aVar),1));
];

UnFence("--",1);

HoldArg("--",aVar);















LocalSymbols(numericMode)
[

  Set(numericMode, False);


  
  LocalSymbols(previousNumericMode, previousPrecision, numericResult) Macro("N",{expression, precision})
  [ 
    

    Local(previousNumericMode, previousPrecision, numericResult, errorString);

    Set(previousPrecision, BuiltinPrecisionGet());

    BuiltinPrecisionSet(@precision);

    AssignCachedConstantsN();

    Set(previousNumericMode, numericMode);

    Set(numericMode, True);

    Set(errorString,"");

    TrapError(Set(numericResult, Eval(@expression)),Set(errorString,GetCoreError()));

    Set(numericMode,previousNumericMode);

    If(Not numericMode,
    [
        
        ClearCachedConstantsN();
    ]);

    BuiltinPrecisionSet(previousPrecision);

    Check(errorString="",errorString);

    numericResult;

  ];




  
  LocalSymbols(precision,heldExpression) Macro("N",{expression})
  [
    Local(precision, heldExpression);

    Set(precision, BuiltinPrecisionGet());

    Set(heldExpression, Hold(@expression));

    `N(@heldExpression, @precision);
  ];





  
  LocalSymbols(result) Macro("NonN",{expression})
  [
    Local(result);

    GlobalPush(numericMode);

    numericMode := False;

    result := (@expression);

    numericMode := GlobalPop();

    result;
  ];


  
  Function("InNumericMode",{}) numericMode;



]; 







a_IsNonNegativeInteger % b_IsPositiveInteger <-- Mod(a,b);


Function("++",{aVar})
[
   MacroSet(aVar,AddN(Eval(aVar),1));
];

UnFence("++",1);

HoldArg("++",aVar);


a_IsNonNegativeInteger | b_IsNonNegativeInteger <-- BitOr(a,b);

