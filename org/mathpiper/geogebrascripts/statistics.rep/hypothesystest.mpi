



Retract(ChiSquareTest,*);


10 # ChiSquareTest( observedFrequenciesMatrix_IsMatrix, expectedFrequenciesMatrix_IsMatrix) <--
[

    Local(observedFrequenciesList, expectedFrequenciesList);
    
    observedFrequenciesList := Flatten(observedFrequenciesMatrix,"List");
    
    expectedFrequenciesList := Flatten(expectedFrequenciesMatrix,"List");
    
    Check(Length(observedFrequenciesList) > 0, "The first argument must be a nonempty matrix.");
    
    Check(Length(expectedFrequenciesList) > 0, "The second argument must be a nonempty matrix.");
    
    Check(Length(expectedFrequenciesList) = Length(expectedFrequenciesList), "The matrices must be of equal length.");

    Local( numerator, chi2, pValue, categoriesCount, degreesOfFreedom, resultList);
   
    resultList := {};

    categoriesCount := Length(observedFrequenciesList);

    numerator := (observedFrequenciesList - expectedFrequenciesList)^2; 

    chi2 := Sum(i,1,categoriesCount,numerator[i]/(expectedFrequenciesList[i]));

    degreesOfFreedom := (Dimensions(observedFrequenciesMatrix)[1] - 1)*(Dimensions(observedFrequenciesMatrix)[2] - 1);

    pValue := 1-N(IncompleteGamma(degreesOfFreedom/2,chi2/2)/Gamma(degreesOfFreedom/2));

    resultList["degreesOfFreedom"] := degreesOfFreedom;
    
    resultList["pValue"] := pValue;
   
    resultList["chiSquareScore"] := chi2;
    
    N(resultList);
];




20 # ChiSquareTest( observedFrequenciesList_IsList, expectedFrequenciesList_IsList) <--
[
    Check(Length(observedFrequenciesList) > 0, "The first argument must be a nonempty list.");
    
    Check(Length(expectedFrequenciesList) > 0, "The second argument must be a nonempty list.");
    
    Check(Length(expectedFrequenciesList) = Length(expectedFrequenciesList), "The lists must be of equal length.");

    Local( numerator, chi2, pValue, categoriesCount, degreesOfFreedom, resultList);
   
    resultList := {};

    categoriesCount := Length(observedFrequenciesList);

    numerator := (observedFrequenciesList - expectedFrequenciesList)^2; 

    chi2 := Sum(i,1,categoriesCount,numerator[i]/(expectedFrequenciesList[i]));

    degreesOfFreedom := categoriesCount - 1;

    pValue := 1-N(IncompleteGamma(degreesOfFreedom/2,chi2/2)/Gamma(degreesOfFreedom/2));

    resultList["degreesOfFreedom"] := degreesOfFreedom;
    
    resultList["pValue"] := pValue;
   
    resultList["chiSquareScore"] := chi2;
    
    N(resultList);
];

