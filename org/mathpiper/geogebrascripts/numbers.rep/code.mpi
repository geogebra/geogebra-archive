
10 # BellNumber(n_IsInteger)		<-- Sum(k,1,n,StirlingNumber2(n,k));


CatalanNumber(_n) <--
[
	Check( IsPositiveInteger(n), "Argument", "CatalanNumber: Error: argument must be positive" );
	BinomialCoefficient(2*n,n)/(n+1);
];






CheckIntPower(n, limit) :=
[
	Local(s0, s, root);
	If(limit<=1, limit:=2);	
	
	s0 := IntLog(n, limit);
	
	root := 0;
	s := 0;
	While(root = 0 And NextPseudoPrime(s)<=s0)	
	[
		s := NextPseudoPrime(s);
		root := IntNthRoot(n, s);
		If(
			root^s = n,	
			True,
			root := 0
		);
	];
	
	If(
		root=0,
		{n, 1},
		{root, s}
	);
];



10 # DigitalRoot(n_IsPositiveInteger) <-- If(n%9=0,9,n%9);





5  # Divisors(0)	<-- 0;
5  # Divisors(1)	<-- 1;


10 # Divisors(_n)	<--
[
	Check(IsPositiveInteger(n), "Argument", "Divisors: argument must be positive integer");
	Local(len,sum,factors,i);
	sum:=1;
	factors:=Factors(n);
	len:=Length(factors);
	For(i:=1,i<=len,i++)[
		sum:=sum*(factors[i][2]+1);
	];
	sum;
];





5  # DivisorsSum(0)	<-- 0;
5  # DivisorsSum(1)	<-- 1;
10 # DivisorsSum(_n) 	<--
[
	Check(IsPositiveInteger(n), "Argument", "DivisorsSum: argument must be positive integer");
	Local(factors,i,sum,len,p,k);
	p:=0;k:=0;
	factors:={};
	factors:=Factors(n);
	len:=Length(factors);
	sum:=1;
	For(i:=1,i<=len,i++)[
		p:=factors[i][1];
		k:=factors[i][2];
		sum:=sum*(p^(k+1)-1)/(p-1);
	];
	sum;
];


5  # Euler(0)		<-- 1;
10 # Euler(n_IsOdd)	<-- 0;
10 # Euler(n_IsEven)	<-- - Sum(r,0,n/2-1,BinomialCoefficient(n,2*r)*Euler(2*r));
10 # Euler(n_IsNonNegativeInteger,_x)	<-- Sum(i,0,Round(n/2),BinomialCoefficient(n,2*i)*Euler(2*i)*(x-1/2)^(n-2*i)/2^(2*i));



10 # EulerArray(n_IsInteger) <--
[
	Local(E,i,sum,r);
	E:=ZeroVector(n+1);
	E[1]:=1;
	For(i:=1,2*i<=n,i++)[
		sum:=0;
		For(r:=0,r<=i-1,r++)[
			sum:=sum+BinomialCoefficient(2*i,2*r)*E[2*r+1];
		];
		E[2*i+1] := -sum;
	];
	E;
];


Eulerian(n_IsInteger,k_IsInteger) <-- Sum(j,0,k+1,(-1)^j*BinomialCoefficient(n+1,j)*(k-j+1)^n);


Function("FermatNumber",{n})[
	Check(IsPositiveInteger(n), "Argument", "FermatNumber: argument must be a positive integer");
	2^(2^n)+1;
];






20 # GetPrimePower(n_IsPositiveInteger) <--
[
	Local(s, factors, new'factors);
	
	factors := TrialFactorize(n, 257);	
	If(
		Length(factors) > 1,	
		
		If(
			factors[1] = 1 And Length(factors) = 2,	
			factors[2],
			{n, 1}
		),
		
		[
			factors := CheckIntPower(n, 257);	
			If(
				factors[2] > 1,	
				
				If(
					IsPrime(factors[1]),
					factors,	
					[	
						new'factors := GetPrimePower(factors[1]);	
						If(
							new'factors[2] > 1,
							{new'factors[1], new'factors[2]*factors[2]},	
							{n, 1}	
						);
					]
				),
				
				{n, 1}
			);
		]
	);
];


10 # 	HarmonicNumber(n_IsInteger)	<-- HarmonicNumber(n,1);
HarmonicNumber(n_IsInteger,r_IsPositiveInteger) <--
[
	
	if( r=1 )[
		Sum(k,1,n,1/k);
	] else [
		Sum(k,1,n,1/k^r);
	];
];



10 # IntLog(_x, _base) _ (base<=1) <-- Undefined;

20 # IntLog(_x, _base) <--
[
	Local(result, step, old'step, factor, old'factor);
	result := 0;
	old'step := step := 1;
	old'factor := factor := base;
	
	While (x >= factor)
	[
		old'factor := factor;
		factor := factor*factor;
		old'step := step;
		step := step*2;
	];
	If(x >= base,
	  [
		step := old'step;
		result := step;
		x := Quotient(x, old'factor);
	  ],
	  step := 0
	);
	
	While (step > 0 And x != 1)
	[
		step := Quotient(step,2);	
		factor := base^step;
		If(
			x >= factor,
			[
				x:=Quotient(x, factor);
				result := result + step;
			]
		);
	];
	result;
];




10 # IntNthRoot(_n, 2) <-- Floor(SqrtN(n));
20 # IntNthRoot(_n, s_IsInteger) <--
[
	Local(result, k);
	GlobalPush(BuiltinPrecisionGet());
	
	k := Quotient(IntLog(n, 2), s);
	
	BuiltinPrecisionSet(2+Quotient(k*3361, 11165));	
	result := Round(ExpN(DivideN(Internal'LnNum(DivideN(n, 2^(k*s))), s))*2^k);
	BuiltinPrecisionSet(GlobalPop());
	
	If(result^s>n, result-1, result);
];




IsAmicablePair(m_IsPositiveInteger,n_IsPositiveInteger) <-- ( ProperDivisorsSum(m)=n And ProperDivisorsSum(n)=m );



5  # IsCarmichaelNumber(n_IsEven)		<-- False;
5  # IsCarmichaelNumber(_n)_(n<561)		<-- False;
10 # IsCarmichaelNumber(n_IsPositiveInteger)	<--
[
	Local(i,factors,length,carmichael);

	factors:=Factors(n);
	carmichael:=True;
	length:=Length(factors);
	if( length < 3)[
		 carmichael:=False;
	] else [
		For(i:=1,i<=length And carmichael,i++)[
			
			If( Modulo(n-1,factors[i][1]-1) != 0, carmichael:=False );
			If(factors[i][2]>1,carmichael:=False);	
		];
	];
	carmichael;
];

IsCarmichaelNumber(n_IsList) <-- MapSingle("IsCarmichaelNumber",n);


5  # IsComposite(1)			<-- False;
10 # IsComposite(n_IsPositiveInteger) 	<-- (Not IsPrime(n));


5  # IsCoprime(list_IsList)                     <-- (Lcm(list) = Product(list));
10 # IsCoprime(n_IsInteger,m_IsInteger)		<-- (Gcd(n,m) = 1);


5  # IsIrregularPrime(p_IsComposite)	<-- False;

5  # IsIrregularPrime(_p)_(p<37)	<-- False;



10 # IsIrregularPrime(p_IsPositiveInteger) <--
[
	Local(i,irregular);

	i:=1;
	irregular:=False;

	While( 2*i + 1 < p And (irregular = False) )[
		If( Abs(Numerator(Bernoulli(2*i))) % p = 0, irregular:=True );
		i++;
	];
	irregular;

];


IsPerfect(n_IsPositiveInteger) <-- ProperDivisorsSum(n)=n;


2 # IsPrime(_n)_(Not IsInteger(n) Or n<=1) <-- False;
3 # IsPrime(n_IsInteger)_(n<=FastIsPrime(0)) <-- IsSmallPrime(n);


5 # IsPrime(n_IsPositiveInteger)_(n > 4 And Modulo(n^2-1,24)!=0) <-- False;


10 # IsPrime(n_IsPositiveInteger) <-- RabinMiller(n);



10 # IsPrimePower(n_IsPrime) <-- True;
10 # IsPrimePower(0) <-- False;
10 # IsPrimePower(1) <-- False;
20 # IsPrimePower(n_IsPositiveInteger) <-- (GetPrimePower(n)[2] > 1);





10 # IsQuadraticResidue(_a,_p) <--
[
        Check( IsInteger(a) And IsInteger(p) And p>2 And IsCoprime(a,p) And IsPrime(p),
                "Argument", "IsQuadraticResidue: Invalid arguments");
        If(a^((p-1)/2) % p = 1, True, False);
];




2 # IsSmallPrime(0) <-- False;
3 # IsSmallPrime(n_IsInteger) <-- (FastIsPrime(n)>0);


IsSquareFree(n_IsInteger)	<-- ( Moebius(n) != 0 );


IsTwinPrime(n_IsPositiveInteger)	<-- (IsPrime(n) And IsPrime(n+2));






10 # LegendreSymbol(_a,_p)	<--
[
        Check( IsInteger(a) And IsInteger(p) And p>2 And IsCoprime(a,p) And IsPrime(p),
                "Argument", "LegendreSymbol: Invalid arguments");
	If(IsQuadraticResidue(a,p), 1, -1 );
];






5  # Moebius(1)	<-- 1;

10 # Moebius(_n)	<--
[
	Check(IsPositiveInteger(n), "Argument", "Moebius: argument must be positive integer");
        Local(factors,i,repeat);
	repeat:=0;
        factors:=Factors(n);
        len:=Length(factors);
        For(i:=1,i<=len,i++)[
		If(factors[i][2]>1,repeat:=1);
        ];
	If(repeat=0,(-1)^len,0);

];



1# NextPrime(_i) <--
[
	Until(IsPrime(i)) i := NextPseudoPrime(i);
	i;
];



1# NextPseudoPrime(i_IsInteger)_(i<=1) <-- 2;
2# NextPseudoPrime(2) <-- 3;

3# NextPseudoPrime(i_IsOdd) <--
[
	
	i := i+2;
	If(Modulo(i,3)=0, i:=i+2, i);

];

4# NextPseudoPrime(i_IsEven) <-- NextPseudoPrime(i-1);






















LocalSymbols(m,n,r,
             NthRoot'Table)
[




NthRoot(m_IsNonNegativeInteger,n_IsInteger)_(n>1) <--
[
   Local(r);
   r:=NthRoot'Restore(m,n);
   If(Length(r)=0,
   [
      r:=NthRoot'Calc(m,n);
      NthRoot'Save(m,n,r);
   ]);
   r;
];


Function("NthRoot'Calc",{m,n})
[
   Local(i,j,f,r,in);
   Bind(i,2);
   Bind(j,Ceil(FastPower(m,N(1.0/n))+1));
   Bind(f,1);
   Bind(r,m);
   
   
   
   

   While(IsLessThan(i,j))
   [
      Bind(in,PowerN(i,n));

      While(IsEqual(ModuloN(r,in),0))
      [
	 Bind(f,MultiplyN(f,i));
	 Bind(r,QuotientN(r,in));
      ];
      While(IsEqual(ModuloN(r,i),0))   
	 Bind(r,QuotientN(r,i));         
      
      Bind(i,NextPseudoPrime(i));
      Bind(j,Ceil(FastPower(r,N(1.0/n))+1));
   ];
   
   List(f,QuotientN(m,PowerN(f,n))); 
];


Function("NthRoot'List",{n})
[
   If(Length(NthRoot'Table)>0,
   [
      Local(p,xx);
      p:=Select(NthRoot'Table, {{xx},First(xx)=n});
      If(Length(p)=1,Rest(p[1]),List());
   ],
   List());
];

Function("NthRoot'Restore",{m,n})
[
   Local(p);
   p:=NthRoot'List(n);
   If(Length(p)>0,
   [
      Local(r,xx);
      r:=Select(p, {{xx},First(xx)=m});
      If(Length(r)=1,First(Rest(r[1])),List());
   ],
   List());
];

Function("NthRoot'Save",{m,n,r})
[
   Local(p);
   p:=NthRoot'List(n);
   If(Length(p)=0,
   
   DestructiveInsert(NthRoot'Table,1,List(n,List(m,r))),
   [
      Local(rr,xx);
      rr:=Select(p, {{xx},First(xx)=m});
      If(Length(rr)=0,
      [
	 
	 DestructiveAppend(p,List(m,r));
      ],
      
      False);
   ]);
];


Function("NthRoot'Clear",{}) SetGlobalLazyVariable(NthRoot'Table,List());


NthRoot'Clear();

]; 









10 # NumberToRep( N_IsNumber ) <--
[
    
    Local(oldPrec,sgn,assoc,typ,val,prec,rep);
    oldPrec  := BuiltinPrecisionGet();
    BuiltinPrecisionSet(300);
    
     
    sgn      := Sign(N); 
    assoc    := DumpNumber(Abs(N));
    
    typ := Assoc("type",assoc)[2];
    
    If( typ = "BigDecimal",
       [
          rep := { sgn*Assoc("unscaledValue",assoc)[2],
                   Assoc("precision",    assoc)[2],
                   Assoc("scale",        assoc)[2] 
                 };
       ],
       [
          Local(val,prec);
          val  := Assoc("value",assoc)[2];
          prec := Length(ExpressionToString(val));
          rep := { sgn*val, prec };
       ]
    );
    
    BuiltinPrecisionSet(oldPrec);
    rep;
];



12 # NumberToRep( N_IsComplex ) <-- 
[
    If(IsZero(Re(N)),
        {NumberToRep(0.0),NumberToRep(Im(N))},
        {NumberToRep(Re(N)),NumberToRep(Im(N))}
    );
];





5  # PartitionsP(n_IsInteger,0)		  	<-- 0;
5  # PartitionsP(n_IsInteger,n_IsInteger)	<-- 1;
5  # PartitionsP(n_IsInteger,1)			<-- 1;
5  # PartitionsP(n_IsInteger,2)			<-- Floor(n/2);
5  # PartitionsP(n_IsInteger,3)			<-- Round(n^2/12);
6  # PartitionsP(n_IsInteger,k_IsInteger)_(k>n) <-- 0;
10 # PartitionsP(n_IsInteger,k_IsInteger)	<-- PartitionsP(n-1,k-1)+PartitionsP(n-k,k);


5  # PartitionsP(0)	<-- 1;
5  # PartitionsP(1)	<-- 1;

10 # PartitionsP(n_IsInteger)_(n<250) <-- PartitionsP'recur(n);
20 # PartitionsP(n_IsInteger) <-- PartitionsP'HR(n);


10 # PartitionsP'HR(n_IsPositiveInteger) <--
[
	Local(P0, A, lambda, mu, mu'k, result, term, j, k, l, prec, epsilon);
	result:=0;
	term:=1;	
	GlobalPush(BuiltinPrecisionGet());
	
	
	prec := 2+Quotient(IntNthRoot(Quotient(2*n+2,3),2)*161+117,118);
	BuiltinPrecisionSet(prec);	
	epsilon := PowerN(10,-prec)*n*10;	

	
	lambda := N(Sqrt(n - 1/24));
	mu := N(Pi*lambda*Sqrt(2/3));
	
	
	P0 := N(1-1/mu)*DivideN(ExpN(mu),(n-DivideN(1,24))*4*SqrtN(3));
	

	A := 0;	
	
	
	
	For(k:=1, k<=5+Quotient(IntNthRoot(n,2),2) And (A=0 Or Abs(term)>epsilon), k++)
	[
		
		A:=0;
		For(l:=1,l<=k,l++)
		[
			If(
				Gcd(l,k)=1,
				A := A + Cos(Pi*
				  (	
					Sum(j,1,k-1, j*(Modulo(l*j,k)/k-1/2)) - 2*l*n
					
				  )/k)
			);
			A:=N(A);	
		];

		term := If(
			A=0,	
			0,
			N( A*Sqrt(k)*(
			  [
			  	mu'k := mu/k;	
			    Exp(mu'k-mu)*(mu'k-1) + Exp(-mu'k-mu)*(mu'k+1);
			  ]
			)/(mu-1) )
		);

		result := result + term;

	];
	result := result * P0;
	BuiltinPrecisionSet(GlobalPop());
	Round(result);
];



10 # PartitionsP1(n_IsPositiveInteger) <--
 [
		 Local(C,A,lambda,m,pa,k,h,term);
	   GlobalPush(BuiltinPrecisionGet());
	   
	   BuiltinPrecisionSet(10 + Floor(N(Sqrt(n))) );
	   pa:=0;
		 C:=Pi*Sqrt(2/3)/k;
		 lambda:=Sqrt(m - 1/24);
	   term:=1;
	   
	   
	   For(k:=1,k<=5+Floor(SqrtN(n)*0.5) And ( term=0 Or Abs(term)>0.1) ,k++)[
			   A:=0;
			   For(h:=1,h<=k,h++)[
					   if( Gcd(h,k)=1 )[
							   A:=A+Exp(I*Pi*Sum(j,1,k-1,(j/k)*((h*j)/k - Floor((h*j)/k) -1/2))
- 2*Pi*I*h*n/k );
					   ];
			   ];
			   If(A!=0, term:= N(A*Sqrt(k)*(Deriv(m) Sinh(C*lambda)/lambda) Where m==n ),term:=0 );

			   pa:=pa+term;

	   ];
	   pa:=N(pa/(Pi*Sqrt(2)));
	   BuiltinPrecisionSet(GlobalPop());
	   Round(pa);
 ];




PartitionsP'recur(number_IsPositiveInteger) <--
[
	
	Local(sign, cache, n, k, pentagonal, P);
	cache:=ArrayCreate(number+1,1);	
	n := 1;
	While(n<number)	
	[
		n++;
		
		P := 0;
		k := 1;
		pentagonal := 1;	
		sign := 1;
		While(pentagonal<=n)
		[
			P := P + (cache[n-pentagonal+1]+If(pentagonal+k<=n, cache[n-pentagonal-k+1], 0))*sign;
			pentagonal := pentagonal + 3*k+1;
			k++;
			sign := -sign;
		];
		cache[n+1] := P;	
	];
	cache[number+1];
];
PartitionsP'recur(0) <-- 1;



LocalSymbols(p, q)
[
	
	ProductPrimesTo257() := 2*3*[
		If(
			IsInteger(p),
			p,
			p := Product(Select( 5 .. 257, {{q}, Modulo(q^2,24)=1 And IsSmallPrime(q)}))
		);

	];
];


10 # ProperDivisors(_n) <--
[
        Check(IsPositiveInteger(n), "Argument", "ProperDivisors: argument must be positive integer");
	Divisors(n)-1;
];


10 # ProperDivisorsSum(_n) <--
[
        Check(IsPositiveInteger(n), "Argument", "ProperDivisorsSum: argument must be positive integer");
        DivisorsSum(n)-n;
];




10 # Rationalize(aNumber_IsList) <-- Rationalize /@ aNumber;

20 # Rationalize( _aNumber ) <--
[
    Local(result,n,d);
    result:=Substitute(aNumber,{{x},IsNumber(x) And Not(IsInteger(x))},"RationalizeNumber");
    If(InVerboseMode(),Tell("",result));
    If(Length(VarList(aNumber))=0,
      [
        n:=Numerator(result);
        If(Type(n)="Numerator",n:=result);
        d:=Denominator(result);
        If(Type(d)="Denominator",d:=1);
        result := n*(1/d);
      ]
    );
    result;
];

Function("RationalizeNumber",{x})
[
  Check(IsNumber(x), "Argument", "RationalizeNumber: Error: " : (PipeToString()Write(x)) :" is not a number");
  Local(n,i,bip,m);
  n   := 1;
  i   := 0;
  bip := BuiltinPrecisionGet();
  
  While(i<=bip And Not(FloatIsInt(x)))
  [
    n := n*10; 
    x := x*10;
    i := i+1;
  ];
  m := Floor(x+0.5);
  (m/n);
];





10 # RepToNumber( rep_IsListOfLists ) <--
[
    
    RepToNumber(rep[1])+I*RepToNumber(rep[2]);
];


12 # RepToNumber( rep_IsList ) <--
[
    
    Local(bigInt,precision,scale,strBI,sgn,index,ans);
    Local(first,secnd,third,LS,numStr);
    precision := rep[2];
    scale     := 0;
    bigInt    := rep[1];
    precision := rep[2];
    sgn       := Sign(bigInt);
    If( Length(rep) > 2, scale := rep[3] );
    strBI     := ExpressionToString(Abs(bigInt));
    LS        := Length(strBI);
    
    If( Length(rep)=2, 
       [ numStr := strBI; ],
       [
           index := precision-scale;
           first := strBI[1];
           secnd := StringMidGet(2,LS-1,strBI);   
           third := ExpressionToString(index-1);
           
           if ( index > 0 )
               [
                   if ( index < precision )
                       [
                           
                           numStr := ConcatStrings(first,".",secnd,"E",third);
                       ]
                   else if ( index >= precision )
                       [
                           
                           numStr := ConcatStrings(first,".",secnd,"E+",third);
                       ];
               ]
           else if ( index < 0 )
               [
                   
                   numStr := ConcatStrings(first,".",secnd,"E",third);
               ]
           else
               [
                   
                   first  := "0." ; 
                   secnd  := strBI;
                   numStr := ConcatStrings(first,secnd);
               ];
        ]
     );
     ans := sgn * ToAtom(numStr);
     
     ans;
];


10 # 	Repunit(0)	<-- 0;

Repunit(n_IsPositiveInteger) <--
[
	(10^n-1)/9;
];




10 # RoundToPlace( N_IsDecimal, place_IsInteger ) <--
[
    
    Local(rep,sgn,oldInt,oldPrec,oldScale,oldPlaces,strOInt,LS);
    Local(newInt,newScale,newRep,ans);
    sgn      := Sign(N);
    rep      := NumberToRep( Abs(N) );
    oldInt   := rep[1];
    oldPrec  := rep[2];
    oldScale := rep[3];
    oldPlaces:= oldPrec - oldScale;
    strOInt  := ExpressionToString(oldInt);
    LS       := Length(strOInt);
    
    
    
    
    
    
    
    
    
    
    If(oldPlaces+place>0,
        ans := RoundToPrecision(N,oldPlaces+place),
        ans := 0.
    );
    ans;
];


15 # RoundToPlace( N_IsInteger, place_IsInteger )_(place <= 0) <--
[
    
    Local(oldRep,oldPrec,decN,newDecN,ans);
    oldRep   := NumberToRep(N);
    oldPrec  := oldRep[2];
    decN     := N*1.0;
    newDecN  := RoundToPlace( decN, place );
    
    
    
    
    If( place <= oldPrec, 
        ans := Round(newDecN),
        ans := Round(newDecN*10^(place-oldPrec))
    );
    ans;
];



20 # RoundToPlace( N_IsComplex, place_IsInteger )_(Not IsInteger(N)) <--
[
    
    Local(rr,ii);
    rr := Re(N);
    ii := Im(N);
    Complex(RoundToPlace(rr,place),RoundToPlace(ii,place));
];




10 # RoundToPrecision( N_IsDecimal, newPrec_IsPositiveInteger ) <--
[
    
    Local(rep,sgn,oldInt,oldPrec,oldScale,strOInt,LS,BIP0);
    Local(newInt,newScale,newRep,ans);
    BIP0     := BuiltinPrecisionGet();
    sgn      := Sign(N);
    rep      := NumberToRep( If(sgn<0,-N,N) );
    oldInt   := rep[1];
    oldPrec  := rep[2];
    oldScale := rep[3];
    If( newPrec > oldPrec, BuiltinPrecisionSet(newPrec) );
    strOInt  := ExpressionToString(oldInt);
    LS       := Length(strOInt);
    
    
    
    
    
    
    
    
    
    
    Local(first,secnd,rem,ad);
    if ( newPrec = oldPrec )
        [ ans := N; ]
    else if ( newPrec < oldPrec )
        [
            first    := StringMidGet(1, newPrec, strOInt); 
            secnd    := StringMidGet(newPrec+1, LS-newPrec, strOInt);
            rem      := ToAtom(ConcatStrings(".",secnd));
            ad       := If(rem>=0.5, 1, 0 );
            newInt   := sgn * ( ToAtom(first) + ad );
            newScale := oldScale - ( oldPrec - newPrec ); 
            newRep   := {newInt,newPrec,newScale};
            ans      := RepToNumber(newRep);
            
            
            
            
            
            
            
            
        ]
    else
        [
            
            Local(diffPrec);
            diffPrec := oldPrec - newPrec;
            newInt   := sgn * ToAtom(strOInt) * 10^(-diffPrec) ;
            newScale := oldScale - diffPrec;
            newRep   := {newInt,newPrec,newScale};
            
            ans      := RepToNumber(newRep);
        ];
    BuiltinPrecisionSet(BIP0);
    ans;
];


15 # RoundToPrecision( N_IsInteger, newPrec_IsPositiveInteger ) <--
[
    
    Local(oldRep,oldPrec,decN,newDecN,ans);
    oldRep   := NumberToRep(N);
    oldPrec  := oldRep[2];
    decN     := N*1.0;
    newDecN  := RoundToPrecision( decN, newPrec );
    
    
    
    
    If( newPrec <= oldPrec, 
        ans := Round(newDecN),
        ans := Round(newDecN*10^(newPrec-oldPrec))
    );
    ans;
];


20 # RoundToPrecision( N_IsComplex, newPrec_IsPositiveInteger ) <--
[
    
    Local(rr,ii);
    rr := Re(N);
    ii := Im(N);
    Complex(RoundToPrecision(rr,newPrec),RoundToPrecision(ii,newPrec));
];


10 # StirlingNumber1(n_IsInteger,0) <-- If(n=0,1,0);
10 # StirlingNumber1(n_IsInteger,1) <-- (-1)^(n-1)*(n-1)!;
10 # StirlingNumber1(n_IsInteger,2) <-- (-1)^n*(n-1)! * HarmonicNumber(n-1);
10 # StirlingNumber1(n_IsInteger,n-1) <-- -BinomialCoefficient(n,2);
10 # StirlingNumber1(n_IsInteger,3) <-- (-1)^(n-1)*(n-1)! * (HarmonicNumber(n-1)^2 - HarmonicNumber(n-1,2))/2;
20 # StirlingNumber1(n_IsInteger,m_IsInteger) <--
	Sum(k,0,n-m,(-1)^k*BinomialCoefficient(k+n-1,k+n-m)*BinomialCoefficient(2*n-m,n-k-m)*StirlingNumber2(k-m+n,k));


10 # StirlingNumber2(n_IsInteger,0) <-- If(n=0,1,0);
20 # StirlingNumber2(n_IsInteger,k_IsInteger) <-- Sum(i,0,k-1,(-1)^i*BinomialCoefficient(k,i)*(k-i)^n)/ k! ;






10 # Totient(_n)	<--
[
	Check(IsPositiveInteger(n), "Argument", "Totient: argument must be positive integer");
	Local(i,sum,factors,len);
	sum:=n;
        factors:=Factors(n);
        len:=Length(factors);
        For(i:=1,i<=len,i++)[
		sum:=sum*(1-1/factors[i][1]);
        ];
	sum;
];

