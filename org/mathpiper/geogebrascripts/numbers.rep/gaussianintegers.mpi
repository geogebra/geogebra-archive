











Function("FactorGaussianInteger",{x}) [
	Check( IsGaussianInteger(x), "Argument", "FactorGaussianInteger: argument must be a Gaussian integer");
	Local(re,im,norm,a,b,d,i,j);

	re:=Re(x);im:=Im(x);

	If(re<0, re:=(-re) );
	If(im<0, im:=(-im) );
	norm:=re^2+im^2;

	if( IsComposite(norm) )[
		For(i:=0, i^2 <= norm, i++ )[	
			For(j:=0, i^2 + j^2 <= norm, j++)[	
				if( Not( (i = re And j = im) Or
					 (i = im And j = re) ) )[ 
					d:=i^2+j^2;
					if( d > 1 )[
						a := re * i + im * j;
						b := im * i - re * j;
						While( (Modulo(a,d) = 0) And  (Modulo(b,d) = 0) ) [
							FactorGaussianInteger(Complex(i,j));
							re:= a/d;
							im:= b/d;
							a := re * i + im * j;
							b := im * i - re * j;
							norm := re^2 + im^2;
						];
					];
				];
			];
		];
		If( re != 1 Or im != 0, Echo(Complex(re,im)) );
	] else [
		Echo(Complex(re,im));
	];
];




GaussianFactorPrime(p_IsInteger) <-- [
 Local(a,i);
 a := 1;
 For (i:=2,i<=(p-1)/2,i++) a := Modulo(a*i,p);
 GaussianGcd(a+I,p);
];







AddGaussianFactor(L_IsList,z_IsGaussianInteger,p_IsGaussianInteger) <--
[
 Local(e);
 e :=0;
 While (IsGaussianInteger(z:= z/p)) e++;
 If (e != 0, DestructiveAppend(L,{p,e}));
];






10 # GaussianFactors(n_IsInteger) <--
[
  
  Local(ifactors,gfactors,p,alpha);
  ifactors := FactorizeInt(n);  
  gfactors := {};
  ForEach(p,ifactors)
  [
     If (p[1]=2, [ DestructiveAppend(gfactors,{1+I,p[2]});
                   DestructiveAppend(gfactors,{1-I,p[2]}); ]);
     If (Modulo(p[1],4)=3, DestructiveAppend(gfactors,p));
     If (Modulo(p[1],4)=1, [ alpha := GaussianFactorPrime(p[1]);
                          DestructiveAppend(gfactors,{alpha,p[2]});
                          DestructiveAppend(gfactors,{Conjugate(alpha),p[2]});
                        ]);
  ];
gfactors;
];



20 # GaussianFactors(z_IsGaussianInteger) <--
[
 Local(n,nfactors,gfactors,p);
  gfactors :={};
  n := GaussianNorm(z);
  nfactors := Factors(n);
  ForEach(p,nfactors)
  [
   If (p[1]=2, [ AddGaussianFactor(gfactors,z,1+I);]);
   If (Modulo(p[1],4)=3, AddGaussianFactor(gfactors,z,p[1]));
   If (Modulo(p[1],4)=1, [ Local(alpha);
                        alpha := GaussianFactorPrime(p[1]);
                        AddGaussianFactor(gfactors,z,alpha);
                        AddGaussianFactor(gfactors,z,Conjugate(alpha));
                      ]);
 ];
 gfactors;
];


10 # GaussianGcd(n_IsGaussianInteger,m_IsGaussianInteger) <--
[
	If(N(Abs(m))=0,n, GaussianGcd(m,n - m*Round(n/m) ) );
];


GaussianMod(z_IsGaussianInteger,w_IsGaussianInteger) <-- z - w * Round(z/w);


GaussianNorm(z_IsGaussianInteger) <-- Re(z)^2+Im(z)^2;


5  # IsGaussianInteger(x_IsList)	<-- False;




10 # IsGaussianInteger(x_IsComplex)  	<-- (IsInteger(Re(x)) And IsInteger(Im(x)));

15 # IsGaussianInteger(_x)	<-- False;


Function("IsGaussianPrime",{x})
[
        if( IsGaussianInteger(x) )[
                if( IsZero(Re(x)) )[
                        ( Abs(Im(x)) % 4 = 3 And IsPrime(Abs(Im(x))) );
                ] else if ( IsZero(Im(x)) ) [
                        ( Abs(Re(x)) % 4 = 3 And IsPrime(Abs(Re(x))) );
                ] else [
                        IsPrime(Re(x)^2 + Im(x)^2);
                ];
        ] else [
                False;
        ];

];





IsGaussianUnit(z_IsGaussianInteger) <-- GaussianNorm(z)=1;

