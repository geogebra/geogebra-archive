
BoundRealRoots(_p) <--
[
  BoundRealRoots(p,MinimumBound(p),MaximumBound(p));
];

BoundRealRoots(_p,_Mmin,_Mmax) <--
[
  Local(S,N,work,result,Vmin,Vmax,a,b,Va,Vb,c,Vc,x);

  result:={};
  if (IsZero(p Where x==0))
  [
    p:=Simplify(p/x);
    result:={{0,0}};
  ];
  S:=SturmSequence(p);
  Vmin := SturmVariations(S,-Infinity);
  Vmax := SturmVariations(S,Infinity);



  N:=Vmin - Vmax;




  work:={};
  if (N=1)
  [
    result:={{-Mmax,Mmax}};
  ];
  if (N>1)
  [
    work :=
    {
      {-Mmax,-Mmin,Vmin,SturmVariations(S,-Mmin)},
      { Mmin, Mmax,SturmVariations(S, Mmin),Vmax}
    };
  ];


    While(work != {})
    [
      {a,b,Va,Vb} := First(work);
      work := Rest(work);
      c:=(a+b)/2;

      Vc := SturmVariations(S,c);
      if (IsZero(p Where x == c))
      [
        Local(M,Vcmin,Vcplus,pnew);
        pnew := Simplify((p Where x == x+c)/x);
        M:=MinimumBound(pnew);

        Vcmin  := SturmVariations(S, c-M);
        Vcplus := SturmVariations(S, c+M);
        result:=Concat(result,{{c,c}});

        if (Va = Vcmin+1)
        [
          result:=Concat(result,{{a,c-M}});
        ];
        if (Va > Vcmin+1)
        [
          work:=Concat(work,{{a,c-M,Va,Vcmin}});
        ];
        if (Vb = Vcplus-1)
        [
          result:=Concat(result,{{c+M,b}});
        ];
        if (Vb < Vcplus-1)
        [
          work:=Concat(work,{{c+M,b,Vcplus,Vb}});
        ];
      ]
      else
      [
        if (Va = Vc+1)
        [
          result:=Concat(result,{{a,c}});
        ];
        if (Va > Vc+1)
        [
          work:=Concat(work,{{a,c,Va,Vc}});
        ];
        if (Vb = Vc-1)
        [
          result:=Concat(result,{{c,b}});
        ];
        if (Vb < Vc-1)
        [
          work:=Concat(work,{{c,b,Vc,Vb}});
        ];
      ];
    ];
    result;
];


iDebug:=False;

Retract("FindRealRoots",*);

FindRealRoots(_p) <--
[
    If(iDebug,Tell("FindRealRoots",p));
    Local(vars,var,cc,pp,vlcc,zeroRoot,minb,maxb,rr);
    vars := VarList(p);
    var  := vars[1];
    cc   := Content(p);
    pp   := PrimitivePart(p);
    If(iDebug,Tell("   ",{cc,pp}));
    vlcc := VarList(cc);
    If(Length(vlcc)>0 And Contains(vlcc,var), zeroRoot:=True,zeroRoot:=False);
    p:=SquareFree(Rationalize(pp));
    If(iDebug,Tell("   after sqf",p));
    minb := MinimumBound(p);
    maxb := MaximumBound(p);
    If(iDebug,Tell("   ",{minb,maxb}));
    rr := FindRealRoots(p,minb,maxb);
    If(zeroRoot,DestructiveAppend(rr,0));
    rr;
];


FindRealRoots(_p,_Mmin,_Mmax) <--
[
    If(iDebug,Tell("  FindRealRoots3",{p,Mmin,Mmax}));
    Local(bounds,result,i,prec,requiredPrec);
    bounds := BoundRealRoots(p,Mmin,Mmax);
    If(iDebug,Tell("      ",{bounds,Length(bounds)}));
    result:=FillList(0,Length(bounds));
    requiredPrec := BuiltinPrecisionGet();
    BuiltinPrecisionSet(BuiltinPrecisionGet()+4);
    prec:=10^-(requiredPrec+1);

    For(i:=1,i<=Length(bounds),i++)
    [
        If(iDebug,Tell(i));
        Local(a,b,c,r);
        {a,b} := bounds[i];
        c:=N(Eval((a+b)/2));
        If(iDebug,Tell("         ",{a,b,c}));
        r := Fail;
        If(iDebug,Tell("         newt1",`Hold(Newton(@p,x,@c,@prec,@a,@b))));
        if (a != b) [r := `Newton(@p,x,@c,prec,a,b);];
        If(iDebug,Tell("         newt2",r));
        if (r = Fail)
          [
             Local(c,cold,pa,pb,pc);
             pa:=(p Where x==a);
             pb:=(p Where x==b);
             c:=((a+b)/2);
             cold := a;
             While (Abs(cold-c)>prec)
             [
                 pc:=(p Where x==c);
                 If(iDebug,Tell("              ",{a,b,c}));
                 if (Abs(pc) < prec)
                   [ a:=c; b:=c; ]
                 else if (pa*pc < 0)
                   [ b:=c; pb:=pc; ]
                 else
                   [ a:=c; pa:=pc; ];
                   cold:=c;
                   c:=((a+b)/2);
             ];
             r:=c;
          ];
        result[i] := N(Eval((r/10)*(10)),requiredPrec);
    ];
    BuiltinPrecisionSet(requiredPrec);
    result;
];



 5 # MaximumBound(_p)_(IsZero(p Where x==0)) <-- MaximumBound(Simplify(p/x));
10 # MaximumBound(_p)_(Degree(p)>0) <--
[
  Local(an);
  an:=Coef(p,(Degree(p)-1) .. 0)/Coef(p,Degree(p));
  an := N(Eval(Abs(an)^(1/(1 .. Degree(p)))));
  Rationalize(2*Maximum(an));
];

20 # MaximumBound(_p) <-- Infinity;


10 # MinimumBound(_p)_(IsZero(p Where x==0)) <-- 0;

20 # MinimumBound(_p)_(Degree(p)>0) <--
[
  Local(an,result);
  an:=Coef(p,1 .. (Degree(p)))/Coef(p,0);
  an := N(Eval(Abs(an)^(1/(1 .. Degree(p)))));

  result:=0;
  an:=2*Maximum(an);
  if(Not IsZero(an)) [result := 1/an;];
  Simplify(Rationalize(result));
];
30 # MinimumBound(_p) <-- -Infinity;


RealRootsCount(_p) <--
[
  Local(S);
  p:=SquareFree(Rationalize(p));
  S:=SturmSequence(p);
  SturmVariations(S,-Infinity)-SturmVariations(S,Infinity);
];


SquareFree(_p) <--
[
  Local(dp,gcd);

  dp:=MakeMultiNomial(`(Differentiate(x)(@p)),{x});



  p:=MakeMultiNomial(p,{x});


  gcd:=MultiGcd(p,dp);


  NormalForm(MultiDivide(p,{gcd})[1][1]);

];



SturmSequence(_p) <--
[
  Local(result,i,deg,nt);
  result:={p,`Differentiate(@x)(@p)};
  deg:=Degree(p);
  For(i:=3,i<=deg+1,i++)
  [
    nt := -NormalForm(MultiDivide(MM(result[i-2],{x}),{MM(result[i-1],{x})})[2]);
    DestructiveAppend(result,nt);
  ];
  result;
];


10 # SturmVariations(_S,Infinity) <--
[
  Local(i,s);
  s:=FillList(0,Length(S));
  For(i:=1,i<=Length(S),i++)
  [
    s[i] := LeadingCoef(S[i]);
  ];
  SturmVariations(s);
];

10 # SturmVariations(_S,-Infinity) <--
[
  Local(i,s);
  s:=FillList(0,Length(S));
  For(i:=1,i<=Length(S),i++)
  [
    s[i] := ((-1)^Degree(S[i]))*LeadingCoef(S[i]);
  ];
  SturmVariations(s);
];

20 # SturmVariations(_S,_x) <-- SturmVariations(Eval(S));
SturmVariations(_S) <--
[
  Local(result,prev);

  result:=0;
  While(Length(S)>0 And IsZero(S[1])) S:=Rest(S);

  if (Length(S)>0)
  [
    prev:=S[1];
    ForEach(item,Rest(S))
    [
      if(Not IsZero(item))
      [
        if (prev*item < 0) [result++;];
        prev:=item;
      ];
    ];
  ];
  result;
];

