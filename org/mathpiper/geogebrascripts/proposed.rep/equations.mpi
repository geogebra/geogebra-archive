
Retract("IsEquation",*);

Retract("*==",*);
Retract("/==",*);
Retract("+==",*);
Retract("-==",*);
Retract("==+",*);
Retract("==-",*);

10 # IsEquation(expr_IsAtom) <-- False;
12 # IsEquation(_expr) <-- 
[
    Local(EL,res);
    EL  := FunctionToList(expr);
    res := (EL[1] = == ); 
];

10 # *==(_num,eqn_IsEquation) <-- 
[
    Local(EL,LHS,RHS);
    EL  := FunctionToList(eqn);
    LHS := Expand(Simplify( num * EL[2] ));
    RHS := Expand(Simplify( num * EL[3] ));
    LHS == RHS;
];

10 # *==(eqn_IsEquation,_num) <-- 
[
    Local(EL,LHS,RHS);
    EL  := FunctionToList(eqn);
    LHS := Expand(Simplify( num * EL[2] ));
    RHS := Expand(Simplify( num * EL[3] ));
    LHS == RHS;
];

10 # /==(eqn_IsEquation,_num) <-- 
[
    Local(EL,LHS,RHS);
    EL  := FunctionToList(eqn);
    LHS := Expand(Simplify( EL[2] / num ));
    RHS := Expand(Simplify( EL[3] / num ));
    LHS == RHS;
];

10 # +==(_num,eqn_IsEquation) <-- 
[
    Local(EL,LHS,RHS);
    EL  := FunctionToList(eqn);
    LHS := Expand(Simplify( EL[2] + num ));
    RHS := Expand(Simplify( EL[3] + num ));
    LHS == RHS;
];

10 # +==(eqn_IsEquation,_num) <-- 
[
    Local(EL,LHS,RHS);
    EL  := FunctionToList(eqn);
    LHS := Expand(Simplify( EL[2] + num ));
    RHS := Expand(Simplify( EL[3] + num ));
    LHS == RHS;
];

10 # -==(eqn_IsEquation,_num) <-- 
[
    Local(EL,LHS,RHS);
    EL  := FunctionToList(eqn);
    LHS := Expand(Simplify( EL[2] - num ));
    RHS := Expand(Simplify( EL[3] - num ));
    LHS == RHS;
];

10 # -==(_num,eqn_IsEquation) <-- 
[
    Local(EL,LHS,RHS);
    EL  := FunctionToList(eqn);
    LHS := Expand(Simplify( num - EL[2] ));
    RHS := Expand(Simplify( num - EL[3] ));
    LHS == RHS;
];

12 # ==+(eqn1_IsEquation,eqn2_IsEquation) <-- 
[
    Local(EL1,LHS,RHS,EL2);
    EL1 := FunctionToList(eqn1);
    EL2 := FunctionToList(eqn2);
    LHS := Expand(Simplify( EL1[2] + EL2[2] ));
    RHS := Expand(Simplify( EL1[3] + EL2[3] ));
    LHS == RHS;
];

12 # ==-(eqn1_IsEquation,eqn2_IsEquation) <-- 
[
    Local(EL1,LHS,RHS,EL2);
    EL1 := FunctionToList(eqn1);
    EL2 := FunctionToList(eqn2);
    LHS := Expand(Simplify( EL1[2] - EL2[2] ));
    RHS := Expand(Simplify( EL1[3] - EL2[3] ));
    LHS == RHS;
];


Retract("Manipulate",*);

Rulebase("Manipulate",{symbolicEquation});
HoldArgument("Manipulate",symbolicEquation);
10 # Manipulate(_symbolicEquation)_HasFunc(Eval(symbolicEquation), "==") <--
[
    Local(listForm, operator, operand, left, right, leftManipulated, rightManipulated, operandIndex, equationIndex, leftOrder, rightOrder);

    listForm := FunctionToList(symbolicEquation);
    
    operator := listForm[1];
    
    If(HasFunc(Eval(listForm[2]),"==" ), [operandIndex := 3; equationIndex := 2; ], [ operandIndex := 2; equationIndex := 3;]);
    
    operand := listForm[operandIndex];
    equation := Eval(listForm[equationIndex]);
    left := EquLeft(equation);
    right := EquRight(equation);
    
    If(operandIndex = 3, [ leftOrder := `({left,operand});rightOrder := `({right,operand});],  [leftOrder := `({operand,left}); rightOrder := `({operand,right});]);
    
    
    leftManipulated := ExpandBrackets(Simplify(Apply(ToString(operator), leftOrder)));
    rightManipulated := ExpandBrackets(Simplify(Apply(ToString(operator), rightOrder)));   
    
    leftManipulated == rightManipulated;

];


LoadScriptOnce("proposed.rep/equations.mpi");

Retract("SolveLinearSysViaMatrix",*);

Retract("SolveLinearSystemViaGauss",*);

Retract("CheckEquationSolution",*);



10 # SolveLinearSysViaMatrix( eqns_IsList, vars_IsList ) <--
[
    
    
     

    Local(LE,LV,E,LHS,X,M,RHS,LL,eqn,row,ans,Det);
    If(InVerboseMode(),Tell(SolveLinearSysViaMatrix,{eqns,vars}));
    LE := Length(eqns);
    LV := Length(vars);
    E  := Assert() LE=LV;
    Check(E,"Number of equations != Number of variables");
    
    LHS := {};
    RHS := {};
    X   := vars;
    M   := FillList(1,LE);
    ForEach(eqn,eqns) 
    [
        E   := FunctionToList(eqn);
        LL  := E[2];
        RHS := E[3]:RHS;
        row := Map("Coef",{FillList(LL,LE),X,M});
        LHS := row:LHS;   
    ];
    LHS := DestructiveReverse(LHS);
    RHS := DestructiveReverse(RHS);
    Det := Determinant(LHS);
    
    
    ans :=MatrixSolve(LHS,RHS);
];

12 # SolveLinearSysViaMatrix( _eqns, _vars ) <-- False;




10 # SolveLinearSystemViaGauss( eqns_IsList, vars_IsList ) <--
[
    

    Local(LE,LV,E,E2,s,s1,s2,s3,ans);
    If(InVerboseMode(),Tell(SolveLinearSysViaGauss,{eqns,vars}));
    LE := Length(eqns);
    LV := Length(vars);
    E  := Assert() LE=LV;
    Check(E,"Number of equations != Number of variables");
    
    If(InVerboseMode(),Tell(0,{LE,LV,E}));
    s  := Solve( eqns, vars )[1];
    If(InVerboseMode(),Tell(1,s));
    s1 := s[1];
    s2 := s[2];
    s3 := s[3];
    E2 := FunctionToList(s3);
    s2 := (s2 Where s3);
    s1 := (s1 Where s2 And s3);
    If( E2[2]=E2[3], ans:=Inconsistent-Set, ans:=List(s1,s2,s3));
    ans;
];

12 # SolveLinearSystemViaGauss( _eqns, _vars ) <-- False;




10 # CheckEquationSolution( eqn_IsEquation, soln_IsList ) <--
[
    Local(EL,LHS,RHS,L,svar,sval);
    If(InVerboseMode(),Tell(CheckOneEq,{eqn,soln}));
    EL   := FunctionToList(eqn);
    LHS  := Expand(Simplify( EL[2] ));
    RHS  := Expand(Simplify( EL[3] ));
    L    := FunctionToList(soln[1]);
    svar := L[2];
    sval := L[3];
    If( InVerboseMode(), [Tell(2,{LHS,RHS}); Tell(3,{svar,sval});]);
    V    := Eliminate(svar,sval,LHS);
    If(InVerboseMode(),Tell(4,V));
    V = RHS;
];

12 # CheckEquationSolution( eqns_IsList, solns_IsList ) <--
[
    Tell(CheckSetOfEqns,{eqns,solns});
    Check(False,"Not implemented yet");
];

14 # CheckEquationSolution( _eq, _soln ) <-- 
[
    Tell(CheckEqnLeftovers,{eq,soln});
    False;
];


