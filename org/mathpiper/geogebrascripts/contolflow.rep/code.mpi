
10 # Apply(_applyoper,_applyargs) _ (Or(IsString(applyoper), IsList(applyoper))) <-- ApplyPure(applyoper,applyargs);
20 # Apply(applyoper_IsAtom,_applyargs) <-- ApplyPure(ToString(applyoper),applyargs);

30 # Apply(Lambda(_args,_body),_applyargs) <-- `ApplyPure(Hold({@args,@body}),applyargs);
UnFence("Apply",2);



TemplateFunction("For",{start,predicate,increment,body})
[
  Eval(start);
  While (IsEqual(Eval(predicate),True))
  [
    Eval(body);
    Eval(increment);
  ];
];
UnFence("For",4);
HoldArgumentNumber("For",4,1);
HoldArgumentNumber("For",4,2);
HoldArgumentNumber("For",4,3);
HoldArgumentNumber("For",4,4);


Retract("ForEach" , *);


TemplateFunction("ForEach",{item,listOrString,body})
[
  If(And(IsEqual(IsGeneric(listOrString),True),
         IsEqual(GenericTypeName(listOrString),"Array")
         ),
    `ForEachInArray(@item,listOrString,@body),
    [

      MacroLocal(item);
      
      If(IsString(listOrString),
      [
          
          Local(index, stringLength);
          
          stringLength := Length(listOrString);
          
          index := 1;
          While(index <= stringLength )
          [
             MacroBind(item,listOrString[index] );
             
             Eval(body);
             
             index++;
          ];

      ],
      [
          Local(foreachtail);
          Bind(foreachtail,listOrString);
          While(Not(IsEqual(foreachtail,{})))
          [
            MacroBind(item,First(foreachtail));
            Eval(body);
            Bind(foreachtail,Rest(foreachtail));
          ];
      ]);
    ]);
];
UnFence("ForEach",3);
HoldArgumentNumber("ForEach",3,1);
HoldArgumentNumber("ForEach",3,3);





LocalSymbols(i,nr)
[
  TemplateFunction("ForEachInArray",{item,list,body})
  [
    Local(i,nr);
    MacroLocal(item);
    Bind(i,1);
    Bind(nr,Length(list));
    While(i<=nr)
    [
      MacroBind(item,list[i]);
      Eval(body);
      Bind(i,AddN(i,1));
    ];
  ];
];

UnFence("ForEachInArray",3);
HoldArgumentNumber("ForEachInArray",3,1);
HoldArgumentNumber("ForEachInArray",3,3);



DefMacroRulebase("Lambda",{args,body});


TemplateFunction("Until",{predicate,body})
[
  Eval(body);
  While (IsEqual(Eval(predicate),False))
  [
    Eval(body);
  ];
  True;
];
UnFence("Until",2);
HoldArgumentNumber("Until",2,1);
HoldArgumentNumber("Until",2,2);


Rulebase("else",{ifthen,otherwise});

0 # (if (_predicate) _body else _otherwise)_(Eval(predicate) = True) <-- Eval(body);

0 # (if (_predicate) _body else _otherwise)_(Eval(predicate) = False) <-- Eval(otherwise);

1 # (if (_predicate) _body else _otherwise) <--
    ListToFunction({ToAtom("else"),
            ListToFunction({ToAtom("if"), (Eval(predicate)), body}),
            otherwise});

HoldArgument("else",ifthen);

HoldArgument("else",otherwise);

UnFence("else",2);


Rulebase("if",{predicate,body});

(if(True) _body) <-- Eval(body);

HoldArgument("if",body);

UnFence("if",2);

