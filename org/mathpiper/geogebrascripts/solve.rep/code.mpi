
Retract("Assume",*);
Retract("AssumptionsAbout",*);
Retract("UnAssume",*);
Retract("IsAssumed",*);
Retract("AssumptionsGet",*);

LocalSymbols(assumptions) [

assumptions := {};

10 # Assume( L_IsList ) <--
[
    If(InVerboseMode(),Tell("AssumeLst",L));
    Local(len,s);
    len := Length(L);
    If( len > 0, ForEach(s,L) [ Assume(s); ] );
    assumptions;
];


10 # Assume( _x -> _y ) <--
[ 
    If(InVerboseMode(),Tell("AssumeItem",{x,y}));
    Local(key,value);
    key   := Hold(x); 
    value := Hold(y);
    If(InVerboseMode(),Tell("       ",{key,value}));
    
    DestructiveAppend(assumptions,{Eval(key),Eval(value)});
    assumptions;
];


10 # AssumptionsGet() <-- assumptions;


10 # AssumptionsAbout(_key) <--
[
    Local(props);
    props := Select(assumptions,Lambda({X},X[1]=key));
    If( Length(props) > 0, Transpose(props)[2], {} );
];


10 # IsAssumed( _key, _valueExpected ) <-- Contains(AssumptionsAbout(key),valueExpected);


10 # UnAssume( _x )_(Contains(AssocIndices(assumptions),x)) <--
[
    Local(lst,len,jj);
    lst := Lambda({X},If(IsList(X),X[1])) /@ assumptions;
    jj := Find(lst,x);
    If( jj > 0, DestructiveDelete(assumptions,jj) );
    lst := Lambda({X},If(IsList(X),X[1])) /@ assumptions;
    jj := Find(lst,x);
    If( jj > 0, UnAssume(x), True );
];

];  


Retract("CheckSolution",*);

10 # CheckSolution( _expr, _var, solution_IsList )_(Not IsFreeOf(var,expr)) <--
  [
      Local(expr0,result,s,r);
      If( IsEquation(expr),
          Bind(expr0,EquationLeft(expr)-EquationRight(expr)),
          Bind(expr0,expr)
      );
      result := {};
      ForEach(s,solution) 
        [
            r := ( expr0 Where s );
            If(r=0,Push(result,s));
        ];
        Reverse(result);
  ];
  
  
20 # CheckSolution( _expr, _var, _solution ) <-- False;


Function("Newton",{function,variable,initial,accuracy})
[	
  `Newton(@function,@variable,initial,accuracy,-Infinity,Infinity);
];

Function("Newton",{function,variable,initial,accuracy,min,max})
[
  Local(result,adjust,delta,requiredPrec);
  MacroLocal(variable);
  requiredPrec := BuiltinPrecisionGet();
  accuracy:=N((accuracy/10)*10); 
  BuiltinPrecisionSet(requiredPrec+2);
  function:=N(function);
  adjust:= -function/Apply("Differentiate",{variable,function});
  delta:=10000;
  result:=initial;
  While (result > min And result < max
      
      And N(Eval( Maximum(Re(delta), -Re(delta), Im(delta), -Im(delta)) ) ) > accuracy)
  [
    MacroBind(variable,result);
    delta:=N(Eval(adjust));
    result:=result+delta;
  ];

  BuiltinPrecisionSet(requiredPrec);
  result:=N(Eval((result/10)*10)); 
  if (result <= min Or result >= max) [result := Fail;];
  result;
];




Solve'System(_eqns, _vars) <-- Solve'SimpleBackSubstitution(eqns,vars);



10 # Solve'SimpleBackSubstitution'FindAlternativeForms((_lx) == (_rx)) <--
[
  Local(newEq);
  newEq := (Simplify(lx) == Simplify(rx));
  If (newEq != (lx == rx) And newEq != (0==0),DestructiveAppend(eq,newEq));
  newEq := (Simplify(lx - rx) == 0);
  If (newEq != (lx == rx) And newEq != (0==0),DestructiveAppend(eq,newEq));
];
20 # Solve'SimpleBackSubstitution'FindAlternativeForms(_equation) <--
[
];
UnFence("Solve'SimpleBackSubstitution'FindAlternativeForms",1);


10 # Solve'SimpleBackSubstitution(eq_IsList,var_IsList) <--
[
 If(InVerboseMode(), Echo({"Entering Solve'SimpleBackSubstitution"}));

  Local(result,i,j,nrvar,nreq,sub,nrSet,origEq);
  eq:=FlatCopy(eq);
  origEq:=FlatCopy(eq);
  nrvar:=Length(var);
  result:={FlatCopy(var)};
  nrSet := 0;


  ForEach(equation,origEq)
  [

    Solve'SimpleBackSubstitution'FindAlternativeForms(equation);
  ];



  nreq:=Length(eq);

  



  For(j:=1,j<=nreq And nrSet < nrvar,j++)
  [
    Local(vlist);
    vlist:=VarListAll(eq[j],`Lambda({pt},Contains(@var,pt)));
    For(i:=1,i<=nrvar And nrSet < nrvar,i++)
    [






      If(Count(vlist,var[i]) = 1,
         [
           sub := FunctionToList(eq[j]);
           sub := sub[2]-sub[3];

           sub:=SuchThat(sub,var[i]);
           If(InVerboseMode(), Echo({"From ",eq[j]," it follows that ",var[i]," = ",sub}));
           If(SolveFullSimplify=True,
             result:=Simplify(Subst(var[i],sub)result),
             result[1][i]:=sub
             );

           nrSet++;


           Local(k,reset);
           reset:=False;
           For(k:=1,k<=nreq  And nrSet < nrvar,k++)
           If(Contains(VarListAll(eq[k],`Lambda({pt},Contains(@var,pt))),var[i]),
           [
             Local(original);
             original:=eq[k];
             eq[k]:=Subst(var[i],sub)eq[k];
             If(Simplify(Simplify(eq[k])) = (0 == 0),
               eq[k] := (0 == 0),
               Solve'SimpleBackSubstitution'FindAlternativeForms(eq[k])
               );


             If(original!=(0==0) And eq[k] = (0 == 0),reset:=True);
             If(InVerboseMode(), Echo({"   ",original," simplifies to ",eq[k]}));
           ]);
           nreq:=Length(eq);
           vlist:=VarListAll(eq[j],`Lambda({pt},Contains(@var,pt)));
           i:=nrvar+1;
           
           If(reset,j:=1);
         ]);
    ];
  ];





  Local(zeroeq,tested);
  tested:={};


  ForEach(item,result)
  [

    DestructiveAppend(tested,Map("==",{var,item}));
  ];




 If(InVerboseMode(), Echo({"Leaving Solve'SimpleBackSubstitution"}));
  tested;
];





10 # OldSolve(eq_IsList,var_IsList) <-- Solve'SimpleBackSubstitution(eq,var);


90 # OldSolve((left_IsList) == right_IsList,_var) <--
      OldSolve(Map("==",{left,right}),var);


100 # OldSolve(_left == _right,_var) <--
     SuchThat(left - right , 0 , var);





PSolve( _uni ) <-- YacasPSolve( uni );

PSolve( _uni, _var ) <-- YacasPSolve( uni, var );


Function("SolveMatrix",{matrix,vector})
[
  If(InVerboseMode(),Tell("   SolveMatrix",{matrix,vector}));
  Local(perms,indices,inv,det,n);
  n:=Length(matrix);
  indices:=Table(i,i,1,n,1);
  perms:=PermutationsList(indices);
  inv:=ZeroVector(n);
  det:=0;
  ForEach(item,perms)
  [
    Local(i,lc);
    lc := LeviCivita(item);
    det:=det+Product(i,1,n,matrix[i][item[i] ])* lc;
    For(i:=1,i<=n,i++)
        [
         inv[i] := inv[i]+
           Product(j,1,n,
           If(item[j] =i,vector[j ],matrix[j][item[j] ]))*lc;
        ];
  ];
  Check(det != 0, "Math", "Zero determinant");
  (1/det)*inv;
];




Retract("SolveSystem",*);
Retract("VarsAndDegs",*);
Retract("MakeCoefMatrix",*);
Retract("SolveLinearSystem",*);
Retract("SolveNonlinearSystem",*);



10 # SolveSystem( eqns_IsList, vars_IsList )_(Length(eqns)=1 And Length(vars)=1) <--
[
    {Solve(eqns[1],vars[1])};
];

12 # SolveSystem( eqns_IsList, vars_IsList ) <--
[
    
    If(InVerboseMode(),Tell("SolveSystem",{eqns,vars}));
    
    Local(eq,expr,exprns,VaD,isLinearSet,ans);
    
    exprns := {};
    ForEach(eq,eqns)
     [
         expr := If( IsEquation(eq), EquationLeft(eq)-EquationRight(eq), eq );
         DestructiveAppend(exprns,expr);
     ];
    If(InVerboseMode(),Tell(" ",exprns));
    
    
    VaD := VarsAndDegs(exprns,vars);
    If(InVerboseMode(),Tell(" ",VaD));
    isLinearSet := Maximum(Flatten(VaD,"List"))=1;
    If(InVerboseMode(),Tell(" ",isLinearSet));
    
    If( isLinearSet,
        ans:=SolveLinearSystem( exprns, vars ),
        ans:=SolveNonlinearSystem( exprns, vars )
    );
    ans := Map("==",{vars,ans});
    If(InVerboseMode(),Tell("",ans));
    ans;
];


10 # VarsAndDegs(exs_IsList,vars_IsList) <--
[
    Local(ex,v,result);
    result := {};
    ForEach(ex,exs)
     [
         Local(res);
         res := {};
         ForEach(v,vars)
          [
              DestructiveAppend(res,Apply("Degree",{ex,v}));
          ];
          DestructiveAppend(result,res);
     ];
    result;
];



10 # SolveLinearSystem( polys_IsList, vars_IsList ) <--
[
    If(InVerboseMode(),Tell("   SolveLinearSystem",{polys,vars}));
    
    Local(lhs,rhs,zeros);
    lhs := MakeCoefMatrix(polys,vars);
    If(InVerboseMode(),Tell("       ",lhs));
    zeros := ZeroVector(Length(vars));
    rhs := -WithValue(vars,zeros,polys);
    If(InVerboseMode(),Tell("       ",rhs));
    
    
    MatrixSolve(lhs,rhs);
];



10 # MakeCoefMatrix(polys_IsList,vars_IsList) <--
[
    If(InVerboseMode(),Tell("      MakeCoefMatrix",{polys,vars}));
    Local(p,v,result);
    result := {};
    ForEach(p,polys)
     [
         Local(res);
         res := {};
         ForEach(v,vars)
          [
              DestructiveAppend(res,Apply("Coef",{p,v,1}));
          ];
          DestructiveAppend(result,res);
     ];
    result;
];




10 # ContainsExpression(_body,_body) <-- True;
15 # ContainsExpression(body_IsAtom,_expr) <-- False;
20 # ContainsExpression(body_IsFunction,_expr) <--
[
  Local(result,args);
  result:=False;
  args:=Rest(FunctionToList(body));
  While(args != {})
  [
    result:=ContainsExpression(First(args),expr);
    args:=Rest(args);
    if (result = True) (args:={});
  ];
  result;
];


SuchThat(_function,_var) <-- SuchThat(function,0,var);

10 # SuchThat(_left,_right,_var)_(left = var) <-- right;



20 # SuchThat(left_IsAtom,_right,_var) <-- var;

30 # SuchThat((_x) + (_y),_right,_var)_ContainsExpression(x,var) <--
    SuchThat(x , right-y , var);
30 # SuchThat((_y) + (_x),_right,_var)_ContainsExpression(x,var) <--
    SuchThat(x , right-y , var);

30 # SuchThat(Complex(_r,_i),_right,_var)_ContainsExpression(r,var) <--
    SuchThat(r , right-I*i , var);
30 # SuchThat(Complex(_r,_i),_right,_var)_ContainsExpression(i,var) <--
    SuchThat(i , right+I*r , var);

30 # SuchThat(_x * _y,_right,_var)_ContainsExpression(x,var) <--
    SuchThat(x , right/y , var);
30 # SuchThat(_y * _x,_right,_var)_ContainsExpression(x,var) <--
    SuchThat(x , right/y , var);

30 # SuchThat(_x ^ _y,_right,_var)_ContainsExpression(x,var) <--
    SuchThat(x , right^(1/y) , var);
30 # SuchThat(_x ^ _y,_right,_var)_ContainsExpression(y,var) <--
    SuchThat(y , Ln(right)/Ln(x) , var);

30 # SuchThat(Sin(_x),_right,_var) <--
    SuchThat(x , ArcSin(right) , var);
30 # SuchThat(ArcSin(_x),_right,_var) <--
    SuchThat(x , Sin(right) , var);

30 # SuchThat(Cos(_x),_right,_var) <--
    SuchThat(x , ArcCos(right) , var);
30 # SuchThat(ArcCos(_x),_right,_var) <--
    SuchThat(x , Cos(right) , var);

30 # SuchThat(Tan(_x),_right,_var) <--
    SuchThat(x , ArcTan(right) , var);
30 # SuchThat(ArcTan(_x),_right,_var) <--
    SuchThat(x , Tan(right) , var);

30 # SuchThat(Exp(_x),_right,_var) <--
    SuchThat(x , Ln(right) , var);
30 # SuchThat(Ln(_x),_right,_var) <--
    SuchThat(x , Exp(right) , var);

30 # SuchThat(_x / _y,_right,_var)_ContainsExpression(x,var) <--
    SuchThat(x , right*y , var);
30 # SuchThat(_y / _x,_right,_var)_ContainsExpression(x,var) <--
    SuchThat(x , y/right , var);

30 # SuchThat(- (_x),_right,_var) <--
    SuchThat(x , -right , var);

30 # SuchThat((_x) - (_y),_right,_var)_ContainsExpression(x,var) <--
    SuchThat(x , right+y , var);
30 # SuchThat((_y) - (_x),_right,_var)_ContainsExpression(x,var) <--
    SuchThat(x , y-right , var);

30 # SuchThat(Sqrt(_x),_right,_var) <--
    SuchThat(x , right^2 , var);


Rulebase("YacasPSolve",{uni});

Rule("YacasPSolve",1,1,IsUniVar(uni) And Degree(uni) = 1)
    -Coef(uni,0)/Coef(uni,1);


Rule("YacasPSolve",1,1,IsUniVar(uni) And Degree(uni) = 2)
    [
     Local(a,b,c,d,q,r);
     c:=Coef(uni,0);
     b:=Coef(uni,1);
     a:=Coef(uni,2);
     d:=b*b-4*a*c;
     q:=RadSimp(Sqrt(d)/(2*a));
     r:=Simplify(-b/(2*a));
     If(InVerboseMode(),[ Tell("   ",{c,b,a,d}); Tell("   ",{q,r}); ]);
     {r+q,r-q};
    ];


Rule("YacasPSolve",1,1,IsUniVar(uni) And Degree(uni) = 3 )
    [
     Local(p,q,r,w,ww,a,b);
     Local(coef0,coef1,coef3,adjust);



     adjust := (-Coef(uni,2))/(3*Coef(uni,3));
     coef3 := Coef(uni,3);
     coef1 := 2*Coef(uni,2)*adjust+3*Coef(uni,3)*adjust^2+Coef(uni,1);
     coef0 := Coef(uni,2)*adjust^2+Coef(uni,3)*adjust^3+
              adjust*Coef(uni,1)+Coef(uni,0);

     p:=coef3;
     q:=coef1/p;
     r:=coef0/p;
    w:=Complex(-1/2,Sqrt(3/4));
    ww:=Complex(-1/2,-Sqrt(3/4));




  a:=(-r/2 + Sqrt(q^3/27+ r*r/4))^(1/3);
  b:=(-r/2 - Sqrt(q^3/27+ r*r/4))^(1/3);

  {a+b+adjust,w*a+ww*b+adjust,ww*a+w*b+adjust};
];



Rule("YacasPSolve",1,1,IsUniVar(uni) And Degree(uni) = 4 )
[
    Local(coef4,a1,a2,a3,a4,y,y1,z,t,s);

    coef4:=Coef(uni,4);
    a1:=Coef(uni,3)/coef4;
    a2:=Coef(uni,2)/coef4;
    a3:=Coef(uni,1)/coef4;
    a4:=Coef(uni,0)/coef4;

    
    y1:=First(YacasPSolve(y^3-a2*y^2+(a1*a3-4*a4)*y+(4*a2*a4-a3^2-a1^2*a4),y));
    t := Sqrt(y1^2/4-a4);
    If(t=0, s:=Sqrt(y1+a1^2/4-a2), s:=(a1*y1-2*a3)/(4*t));
    Concat(YacasPSolve(z^2+(a1/2+s)*z+y1/2+t,z),
           YacasPSolve(z^2+(a1/2-s)*z+y1/2-t,z));
];

Function("YacasPSolve",{uni,var})
    [
     YacasPSolve(MakeUni(uni,var));
     ];


Retract("jSolveUniPoly",*);

10 # jSolveUniPoly( _lhs==_rhs, var_IsAtom ) <--
[
   jSolveUniPoly(lhs-rhs,var);
];

15 # jSolveUniPoly( poly_IsPolynomial, var_IsAtom )_(Length(VarList(poly))=1) <--
[
   If(InVerboseMode(),Tell(jSolveUniPoly,{poly,var}));
   Local(factorList,f,fac,mult,ii,answer);
   factorList := Factors(poly);
   If(InVerboseMode(),Tell("   ",factorList));
   answer := {};
   ForEach(f,factorList)
    [
        {fac,mult} := f;
        soln := Solve(fac,var);
        If(InVerboseMode(),[Tell("      ",{fac,mult});Tell("      ",soln);]);
        ForEach(ii,1 .. mult)
         [  DestructiveAppend(answer,soln); ];
    ];
    answer;
];

20 # jSolveUniPoly( poly_IsPolynomial, var_IsAtom ) <-- Failed;



Retract("Solve",*);



LocalSymbols(res)
[
  10  # Solve(expr_IsList, var_IsList) <-- SolveSystem(expr, var);
  12  # Solve(_expr, var_IsList)_(Length(var)=1) <--
        [ {Solve(expr,var[1])}; ];
  
  20  # Solve(_expr, _var)_(IsNumber(var) Or IsString(var)) <--
        [ Assert("Solve'TypeError", "Second argument, ":(PipeToString() Write(var)):", is not the name of a variable") False; {}; ];
  22  # Solve(_expr, _var)_(Not IsAtom(var) And Not HasExpr(expr,var)) <--
        [ Assert("Solve'TypeError", "Second argument, ":(PipeToString() Write(var)):", is not the name of a variable") False; {}; ];
  24  # Solve(False,_var) <-- Check(False, "Argument", "Bad input: possibly '=' instead of '==' ");

  30  # Solve(_lhs == _rhs, _var) <-- Solve(lhs - rhs, var);
  40  # Solve(0, _var) <-- {var == var};
  41  # Solve(a_IsConstant, _var) <-- {};
  42  # Solve(_expr, _var)_(Not HasExpr(expr,var)) <--
        [ Assert("Solve", "expression ":(PipeToString() Write(expr)):" does not depend on ":PipeToString() Write(var)) False; {}; ];
  50  # Solve(_expr, _var)_((res := Solve'Poly(expr, var)) != Failed) <-- res;
  60  # Solve(_e1 * _e2, _var) <-- [
      Local(t,u,s);
      t := Union(Solve(e1,var), Solve(e2,var));
      u := {};
      ForEach(s, t) [
         Local(v1,v2);
         v1 := WithValue(var, s[2], e1);
         v2 := WithValue(var, s[2], e2);
         If(Not (IsInfinity(v1) Or (v1 = Undefined) Or
                 IsInfinity(v2) Or (v2 = Undefined)), 
             DestructiveAppend(u, s));
      ];
      u;
  ];
  70  # Solve(_e1 / _e2, _var) <-- [
      Local(tn, t, s);
      tn := Solve(e1, var);
      t := {};
      ForEach(s, tn)
          If(Not(IsZero(WithValue(var, s[2], e2))), 
              DestructiveAppend(t, s)
          );
      t;
  ];
  80  # Solve(_e1 + _e2, _var)_(Not HasExpr(e2,var) And (res := Solve'Simple(e1,-e2,var)) != Failed) <-- res;
  80  # Solve(_e1 + _e2, _var)_(Not HasExpr(e1,var) And (res := Solve'Simple(e2,-e1,var)) != Failed) <-- res;
  80  # Solve(_e1 - _e2, _var)_(Not HasExpr(e2,var) And (res := Solve'Simple(e1,e2,var)) != Failed) <-- res;
  80  # Solve(_e1 - _e2, _var)_(Not HasExpr(e1,var) And (res := Solve'Simple(e2,e1,var)) != Failed) <-- res;
  85  # Solve(_expr, _var)_((res := Solve'Simple(expr, 0, var)) != Failed) <-- res;
  90  # Solve(_expr, _var)_((res := Solve'Reduce(expr, var)) != Failed) <-- res;
  95  # Solve(_expr, _var)_((res := Solve'Divide(expr, var)) != Failed) <-- res;
  100 # Solve(_expr, _var)_((res := Simplify(expr)) != expr) <-- Solve(res, var);
  110 # Solve(_expr, _var) <--
        [ Assert("Solve'Fails", "cannot solve equation ":(PipeToString() Write(expr)):" for ":PipeToString() Write(var)) False; {}; ];
];









10 # Solve'Poly(_expr, _var)_(Not CanBeUni(var, expr)) <-- Failed;



20 # Solve'Poly(_expr, _var) <--
LocalSymbols(x)
[
  Local(roots);
  roots := PSolve(expr, var);
  If(Type(roots) = "PSolve",
     Failed,                              
     If(Type(roots) = "List",
        MapSingle({{x},var==x}, roots),   
        {var == roots}));                 
];






10 # Solve'Reduce(_expr, _var) <--
[
  ClearError("Solve'Fails"); 
  Local(context, expr2, var2, res, sol, sol2, i);
  context := Solve'Context(expr, var);
  If(context = False,
     res := Failed,
     [
       expr2 := Eval(Subst(context, var2) expr);
       If(CanBeUni(var2, expr2) And (Degree(expr2, var2) = 0 Or (Degree(expr2, var2) = 1 And Coef(expr2, var2, 1) = 1)),
          res := Failed, 
          [
    	    sol2 := Solve(expr2, var2);
	    If(IsError("Solve'Fails"),
	       [
	         ClearError("Solve'Fails");
		 res := Failed;
               ],
    	       [
    		 res := {};
    		 i := 1;
    		 While(i <= Length(sol2) And res != Failed) [
    		   sol := Solve(context == (var2 Where sol2[i]), var);
	           If(IsError("Solve'Fails"),
		      [
		        ClearError("Solve'Fails");
		        res := Failed;
                      ],
    		      res := Union(res, sol));
    		   i++;
    		 ];
    	       ]);
      	   ]);
     ]);
  res;
];







10 # Solve'Context(expr_IsAtom, _var) <-- If(expr=var, var, {});

20 # Solve'Context(_expr, _var) <--
[
  Local(lst, foundVarP, context, i, res);
  lst := FunctionToList(expr);
  foundVarP := False;
  i := 2;
  While(i <= Length(lst) And Not foundVarP) [
    foundVarP := (lst[i] = var);
    i++;
  ];
  If(foundVarP,
     context := expr,
     [
       context := {};
       i := 2;
       While(i <= Length(lst) And context != False) [
         res := Solve'Context(lst[i], var);
	 If(res != {} And context != {} And res != context, context := False);
	 If(res != {} And context = {}, context := res);
	 i++;
       ];
     ]);
  context;
];





20 # Solve'Simple(_e1 + _e2, _rhs, _var)_(e1 = var And Not HasExpr(e2,var)) <-- { var == rhs-e2 };
20 # Solve'Simple(_e1 + _e2, _rhs, _var)_(e2 = var And Not HasExpr(e1,var)) <-- { var == rhs-e1 };

20 # Solve'Simple(_e1 - _e2, _rhs, _var)_(e1 = var And Not HasExpr(e2,var)) <-- { var == rhs+e2 };
20 # Solve'Simple(_e1 - _e2, _rhs, _var)_(e2 = var And Not HasExpr(e1,var)) <-- { var == e1-rhs };
20 # Solve'Simple(-(_e1), _rhs, _var)_(e1 = var) <-- { var == -rhs };

20 # Solve'Simple(_e1 * _e2, _rhs, _var)_(e1 = var And Not HasExpr(e2,var)) <-- { var == rhs/e2 };
20 # Solve'Simple(_e1 * _e2, _rhs, _var)_(e2 = var And Not HasExpr(e1,var)) <-- { var == rhs/e1 };

20 # Solve'Simple(_e1 / _e2, _rhs, _var)_(e1 = var And Not HasExpr(e2,var)) <-- { var == rhs*e2 };
10 # Solve'Simple(_e1 / _e2, 0,    _var)_(e2 = var And Not HasExpr(e1,var)) <-- { };
20 # Solve'Simple(_e1 / _e2, _rhs, _var)_(e2 = var And Not HasExpr(e1,var)) <-- { var == e1/rhs };

LocalSymbols(x)
[
  20 # Solve'Simple(_e1 ^ _n, _rhs, _var)_(e1 = var And IsPositiveInteger(n))
       <-- MapSingle({{x}, var == rhs^(1/n)*x}, Exp(2*Pi*I*(1 .. n)/n));
  20 # Solve'Simple(_e1 ^ _n, _rhs, _var)_(e1 = var And IsNegativeInteger(n))
       <-- MapSingle({{x}, var == rhs^(1/n)*x}, Exp(2*Pi*I*(1 .. (-n))/(-n)));
];

20 # Solve'Simple(_e1 ^ _e2, _rhs, _var)
     _ (IsPositiveReal(e1) And e1 != 0 And e2 = var And IsPositiveReal(rhs) And rhs != 0)
     <-- { var == Ln(rhs)/Ln(e1) };


10 # Solve'Simple(Sin(_e1), 1,    _var)_(e1 = var) <-- { var == 1/2*Pi };
10 # Solve'Simple(Sin(_e1), _rhs, _var)_(e1 = var And rhs = -1) <-- { var == 3/2*Pi };
20 # Solve'Simple(Sin(_e1), _rhs, _var)_(e1 = var) <-- { var == ArcSin(rhs), var == Pi-ArcSin(rhs) };
10 # Solve'Simple(Cos(_e1), 1,    _var)_(e1 = var) <-- { var == 0 };
10 # Solve'Simple(Cos(_e1), _rhs, _var)_(e1 = var And rhs = -1) <-- { var == Pi };
20 # Solve'Simple(Cos(_e1), _rhs, _var)_(e1 = var) <-- { var == ArcCos(rhs), var == -ArcCos(rhs) };
20 # Solve'Simple(Tan(_e1), _rhs, _var)_(e1 = var) <-- { var == ArcTan(rhs) };

20 # Solve'Simple(ArcSin(_e1), _rhs, _var)_(e1 = var) <-- { var == Sin(rhs) };
20 # Solve'Simple(ArcCos(_e1), _rhs, _var)_(e1 = var) <-- { var == Cos(rhs) };
20 # Solve'Simple(ArcTan(_e1), _rhs, _var)_(e1 = var) <-- { var == Tan(rhs) };


10 # Solve'Simple(Exp(_e1), 0,    _var)_(e1 = var) <-- { };
20 # Solve'Simple(Exp(_e1), _rhs, _var)_(e1 = var) <-- { var == Ln(rhs) };
20 # Solve'Simple(Ln(_e1),  _rhs, _var)_(e1 = var) <-- { var == Exp(rhs) };


20 # Solve'Simple(Sqrt(_e1), _rhs, _var)_(e1 = var And IsPositiveReal(Re(rhs)) And Re(rhs) != 0) <-- { var == rhs^2 };
20 # Solve'Simple(Sqrt(_e1), _rhs, _var)_(e1 = var And Re(rhs)=0 And IsPositiveReal(Im(rhs))) <-- { var == rhs^2 };
20 # Solve'Simple(Sqrt(_e1), _rhs, _var)_(e1 = var And Re(rhs)=0 And IsNegativeReal(Im(rhs)) And Im(rhs) != 0) <-- { };
20 # Solve'Simple(Sqrt(_e1), _rhs, _var)_(e1 = var And IsNegativeReal(Re(rhs)) And Re(rhs) != 0) <-- { };

30 # Solve'Simple(_lhs, _rhs, _var) <-- Failed;





10 # Solve'Divide(_e1 + _e2, _var)_(HasExpr(e1, var) And HasExpr(e2, var)
		And Not (HasExpr(Simplify(1 + (e2/e1)), e1)
		      Or HasExpr(Simplify(1 + (e2/e1)), e2)))
                                           <-- Solve(1 + (e2/e1), var);
10 # Solve'Divide(_e1 - _e2, _var)_(HasExpr(e1, var) And HasExpr(e2, var)
		And Not (HasExpr(Simplify(1 - (e2/e1)), e1)
		      Or HasExpr(Simplify(1 - (e2/e1)), e2)))
                                           <-- Solve(1 - (e2/e1), var);

20 # Solve'Divide(_e, _v) <-- Failed;



Retract("xPSolve",*);
Retract("xPSolveCubic",*);
Retract("xPSC1",*);
Retract("xPSC2",*);



 
Rulebase("xPSolve",{uni});

Rule("xPSolve",1,1,IsUniVar(uni) And Degree(uni) = 1)
[
    If(iDebug,Tell("   xPSolve_1",uni));
    {-Coef(uni,0)/Coef(uni,1)};
];

Rule("xPSolve",1,1,IsUniVar(uni) And Degree(uni) = 2)
[
     If(iDebug,Tell("   xPSolve_2",uni));
     Local(a,b,c,d,q,r);
     c:=Coef(uni,0);
     b:=Coef(uni,1);
     a:=Coef(uni,2);
     If(iDebug,Tell("        ",{a,b,c}));
     d:=b*b-4*a*c;
     If(iDebug,Tell("              ",d));
     
     q:=Sqrt(d)/(2*a);
     If(iDebug,Tell("              ",q));
     r:=Simplify(-b/(2*a));
     If(iDebug,Tell("              ",r));
     {r+q,r-q};
];



Rule("xPSolve",1,1,IsUniVar(uni) And Degree(uni) = 3 )
[
     If(iDebug,Tell("   xPSolve_3",uni));
     Local(p,q,r,s,t,w1,w2,a,b);
     Local(c0,c1,c3,adjust);

     
     w1 := (1/2)*Complex(-1, Sqrt(3));
     w2 := Conjugate(w1);
     If( iDebug, Tell("   ",{w1,w2}) );
     
     
     adjust := (-uni[3][3])/(3*uni[3][4]);
     If( iDebug, Tell("   ",adjust));
     c3  := uni[3][4];
     c1  := (3*uni[3][4]*adjust+2*uni[3][3])*adjust+uni[3][2];
     c0  :=((uni[3][4]*adjust+uni[3][3])*adjust+uni[3][2])*adjust+uni[3][1];
     If( iDebug, Tell("   ",{c0,c1,c3})); 

     
     Assert("Invariant", "Coefficients Must be Real") And(Im(c0)=0,Im(c1)=0,Im(c2)=0);
     If( IsError("Invariant"), DumpErrors() );

     p :=c3;
     q :=c1/p;
     r :=c0/p;
     If( iDebug, Tell("   ",{p,q,r}));
     Local(a3,b3,qq,r1,r2,r3);
     qq := Sqrt(q^3/27 + r^2/4);
     a3 := -r/2 + qq;
     b3 := -r/2 - qq;
     
     If( iDebug, [Tell("   ",{qq,a3,b3}); Tell("   ",N(a3+b3+r)); Tell("   ",N(a3-b3-2*qq));]);
     a  := (a3)^(1/3);
     b  := (b3)^(1/3);
     If( iDebug, Tell("   ",{a,b}));
     r1 := a+b+adjust;
     r2 := w1*a+w2*b+adjust;
     r3 := w2*a+w1*b+adjust;
     
     If( iDebug,
       [
          Tell("   ",r1);
          Tell("   ",r2);
          Tell("   ",r3);
       ]
     );
     {r1,r2,r3};
];




Rule("xPSolve",1,1,IsUniVar(uni) And Degree(uni) = 4 )
[
    If(iDebug,Tell("   xPSolve_4",uni));
    Local(coef4,a1,a2,a3,a4,y,y1,z,t,s);

    coef4:=Coef(uni,4);
    a1:=Coef(uni,3)/coef4;
    a2:=Coef(uni,2)/coef4;
    a3:=Coef(uni,1)/coef4;
    a4:=Coef(uni,0)/coef4;
    If( iDebug, Tell("        ",{a1,a2,a3,a4}));

    
    Local(ys);
    ys := xPSolveCubic(y^3-a2*y^2+(a1*a3-4*a4)*y+(4*a2*a4-a3^2-a1^2*a4));
    If( iDebug, [NewLine(); Tell("        ",ys[1]);] );
    y1:=First(ys);
    If( iDebug, Tell("        ",y1));
    t := Sqrt(y1^2/4-a4);
    If( iDebug, Tell("        ",t));
    If(t=0, s:=Sqrt(y1+a1^2/4-a2), s:=(a1*y1-2*a3)/(4*t));
    If( iDebug, Tell("        ",s));
    
    Local(q11,q12,q21,q2,quad1,quad2);
    q11 := a1/2+s;    q12 := y1/2+t;
    q21 := a1/2-s;    q22 := y1/2-t;
    If( iDebug, Tell("        ",{q11,q12}));
    If( iDebug, Tell("        ",{q21,q22}));
    quad1 := z^2 + q11*z + q12;
    quad2 := z^2 + q21*z + q22;
    If( iDebug, Tell("        ",{quad1,quad2}));
    
    Local(r1,r2,r3,r4);
    {r1,r2} := xPSolve( quad1, z );
    {r3,r4} := xPSolve( quad2, z );
    r1 := NearRational(N(r1,10),8);
    r2 := NearRational(N(r2,10),8);
    r3 := NearRational(N(r3,10),8);
    r4 := NearRational(N(r4,10),8);
    
    {r1,r2,r3,r4};
];


Function("xPSolve",{expr,var})
[
    If( Not IsBound(iDebug), iDebug := False );
    If(iDebug,Tell("xPSolve_notUni",{expr,var}));  
    Local(lhs,rhs,cc,pp,uni,solnpp,solncc,soln);
    If( IsEquation(expr), 
      [
         If(iDebug,Tell("   is Equation"));
         lhs  := EquationLeft(expr);
         rhs  := EquationRight(expr);
         expr := lhs - rhs;
      ]
    );
    If(iDebug,Tell("   ",expr));
    cc := xContent(expr);
    pp := xPrimitivePart(expr,cc);
    If(iDebug,Tell("   ",{cc,pp}));
    solnpp := xPSolve(MakeUni(pp,var));
    If(iDebug,Tell("   ",solnpp));
    If( Length(VarList(cc)) > 0 And Contains(VarList(cc),var ),
      [
         solncc := xPSolve(MakeUni(cc,var));
         If(iDebug,Tell("   ",solncc));
         soln   := Concat(solncc,solnpp);
      ],
      [
         soln   := solnpp;
      ]
    );
    soln;
];


10 # xPSolveCubic( poly_IsPolynomial )_
                   (Length(VarList(poly))=1 And Degree(poly)=3) <--
[
    If( iDebug, Tell("  xPSolveCubic",poly) );
    Local(var,coeffs,ans);
    var    := VarList(poly)[1];
    coeffs := Coef(poly,var,3 .. 0);
    If( iDebug, Tell("     ",{var,coeffs}));
    ans    := xPSC1(coeffs);    
];
UnFence("xPSolveCubic",1);


10 # xPSC1( coeffs_IsList ) <--
[
    If( iDebug, Tell("    xPSC1",coeffs) );
    
     Local(f,g,h,j,iType,ans);
     f := coeffs[2]/coeffs[1]/3;
     g := coeffs[3]/coeffs[1]/3 - f^2;
     h := coeffs[4]/coeffs[1]/2 + f^3 - f * coeffs[3]/coeffs[1]/2;
     j := g^3 + h^2;
     If( iDebug, Tell("     ",{f,g,h,j}) );
     ans := xPSC2( {f,g,h,j} );
];


10 # xPSC2( xs_IsList )_(xs[4]=0) <--
[
    If( iDebug, Tell("        Type 1",xs) );                 
    Local(f,g,h,j,m,r1,r2,r3,ans);
    {f,g,h,j} := FlatCopy(xs);
    m   := 2*(-h)^(1/3);
    r1  := NearRational(N(m - f,10),8);
    r2  := NearRational(N(-m/2 - f,10),8);
    r3  := NearRational(N(-m/2 - f,10),8);
    ans := {r1,r2,r3};
];

10 # xPSC2( xs_IsList )_(xs[4]>0) <--
[
    If( iDebug, Tell("        Type 2",xs) ); 
    Local(f,g,h,j,k,l1,l2,m,n,r1,r2,r3,ans); 
    {f,g,h,j} := FlatCopy(xs);
    k   := Sqrt(j);
    l1  := (-h + k)^(1/3);
    l2  := (-h - k)^(1/3);
    m   := l1 + l2;
    n   := (l1 - l2)*Sqrt(3)/2;
    r1  := NearRational(N(m - f,10),8);
    r2  := NearRational(N(-m/2 - f + I*n,10),8);
    r3  := NearRational(N(Conjugate(r2),10),8);
    ans := {r1,r2,r3};
    
];

10 # xPSC2( xs_IsList )_(xs[4]<0 And xs[3]=0) <--
[
    If( iDebug, Tell("        Type 3a",xs) );
    Local(f,g,h,j,p,r1,r2,r3,ans);
    {f,g,h,j} := FlatCopy(xs);
    p   := 2*Sqrt(-g);
    r1  := NearRational(N(-f,10),8);
    r2  := NearRational(N( p*Sqrt(3)/2 - f,10),8);
    r3  := NearRational(N(-p*Sqrt(3)/2 - f,10),8);
    ans := {r1,r2,r3};
];

10 # xPSC2( xs_IsList )_(xs[4]<0 And xs[3]>0) <--
[
    If( iDebug, Tell("        Type 3b",xs) );
    Local(p,x,alpha,beta,gama,r1,r2,r3,ans);
    {f,g,h,j} := FlatCopy(xs);
    p     := 2*Sqrt(-g);
    k     := Sqrt(-j);
    alpha := ArcTan(k/(-h));   
    beta  := Pi + alpha;
    gama  := beta / 3;
    If( iDebug,
      [
         Tell("          ",{p,k});
         Tell("          ",{alpha,beta,gama});
         Tell("          ",57.2957795*N({alpha,beta,gama}));
         Tell("          ",N(Cos(gama)));
      ]
    );
    r1    := NearRational(N(p * Cos(gama) - f,10),8);
    r2    := NearRational(N(p * Cos(gama+2*Pi/3) - f,10),8);
    r3    := NearRational(N(p * Cos(gama+4*Pi/3) - f,10),8);
    ans   := {r1,r2,r3};
];

10 # xPSC2( xs_IsList )_(xs[4]<0 And xs[3]<0) <--
[
    If( iDebug, Tell("        Type 3c",xs) );
    Local(f,g,h,j,p,k,alpha,beta,gama,r1,r2,r3,ans);
    {f,g,h,j} := FlatCopy(xs);
    p     := 2*Sqrt(-g);
    k     := Sqrt(-j);
    alpha := ArcTan(k/(-h));   
    beta  := alpha;
    gama  := beta / 3;
    If(iDebug,[Tell("          ",{p,k}); Tell("          ",{alpha,beta,gama});]);
    r1    := NearRational(N(p * Cos(gama) - f,10),8);
    r2    := NearRational(N(p * Cos(gama+2*Pi/3) - f,10),8);
    r3    := NearRational(N(p * Cos(gama+4*Pi/3) - f,10),8);
    ans   := {r1,r2,r3};
];

