





Use("univar.rep/code.mpi");




Function ("UniVariateBinomial",{x,q,a}) 
[ 
Local(L,i);
L := {a};
For (i:=1,i<q,i++)
 DestructiveAppend(L,0);
DestructiveAppend(L,1);
UniVariate(x,0,L); 
];





Function("SubstituteInUniVar",{p,k})
[
 Local(c,i,d,j,NL);
 L  := p[3];  
 NL := {};    
 d  := Degree(p);
 i  :=d;
 ForEach(c,L) [
  
  
  If (i<d, For (j:=1,j<k,j++) DestructiveAppend(NL,0));
  
  DestructiveAppend(NL,If(IsEven(i),c,-c));  
  i--; 
 ];
 UniVariate(Head(p),0,NL);
];







Function("SubstituteAndExpandInUniVar",{p,k})
[
  Local(result,i,var,first,coefs,c,nc,exponent);
  result:=0;
  var := p[1];
  first:= p[2];
  coefs:= p[3];
  For(i:=Length(coefs),i>0,i--)
  [
    Local(term);
    exponent := first+i-1;
    c:= coefs[i];
    nc := If(IsEven(exponent),c,-c);
    term:=NormalForm(nc*var^(exponent*k));
    result:=result+term;
  ];
  result;
];








CyclotomicDivisorsList(n_IsPositiveInteger) <--
[
 Local(nFactors,f,result,oldresult,x);
 nFactors:= Factors(n);
 result := {{1,nFactors[1][1],1}};
 nFactors := Tail(nFactors);
 ForEach (f,nFactors)   
    [ 
      oldresult := result;
        ForEach (x,oldresult) 
	  result:=Append(result,{x[1]*f[1],x[2]*f[1],-x[3]});
    ]; 
  result;
];








CyclotomicFactor(_a,_b) <--
[
 Local(coef,p,i,j,result); p := a/b; result:= {{b*(p-1),1}}; For (i:=
 p-2,i>=0,i--)
   DestructiveAppend(result,{b*i,1});
 result; 	
];












10 # OldInternalCyclotomic(n_IsEven,_x,WantNormalForm_IsBoolean) <--
     [
      Local(k,m,p); 
       k := 1;
       m := n;
	While(IsEven(m))
       [
	k := k*2;
        m := m/2;
       ];
       k := k/2 ;
       If(m>1, [
	         p := OldInternalCyclotomic(m,x,False);
                 If (WantNormalForm, SubstituteAndExpandInUniVar(p,k),SubstituteInUniVar(p,k)); 
               ],
	         If (WantNormalForm, x^k+1, UniVariateBinomial(x,k,1))
        );
     ]; 

20 # OldInternalCyclotomic(n_IsOdd,_x,WantNormalForm_IsBoolean)_(n>1) <--
[
 Local(divisors,poly1,poly2,q,d,f,result);
 divisors := MoebiusDivisorsList(n); 
 poly1 :=1 ;
 poly2 := 1;
 ForEach (d,divisors)
 [ 
   q:=n/d[1];
   f:=UniVariateBinomial(x,q,-1);
   If (d[2]=1,poly1:=poly1*f,poly2:=poly2*f);
 ];
 result := Div(poly1,poly2);
 If(WantNormalForm,NormalForm(result),result);
];

10  # OldCyclotomic(1,_x) <-- _x-1;
20  # OldCyclotomic(n_IsInteger,_x) <-- OldInternalCyclotomic(n,x,True);













10 # InternalCyclotomic(n_IsEven,_x) <--
     [
      Local(k,m,result,p,t); 
       k := 1;
       m := n;
	While(IsEven(m))
       [
	k := k*2;
        m := m/2;
       ];
       k := k/2 ;
       If(m>1, [
	         p:= InternalCyclotomic(m,x)[2];
                 
                 result:={};
                 ForEach(t,p)
                    DestructiveAppend(result, {t[1]*k,If(IsEven(t[1]),t[2],-t[2])}); 
               ],
	         result := {{k,1},{0,1}} 
        );
	SparseUniVar(x,result);
     ]; 

















20 # InternalCyclotomic(n_IsOdd,_x)_(n>1) <--
[
 Local(divisors,poly1,poly2,q,d,f,coef,i,j,result);
 divisors := CyclotomicDivisorsList(n); 
 poly1 := {{0,1}};
 poly2 := {{0,1}};
 ForEach (d,divisors)
 [ 
   If(InVerboseMode(),Echo("d=",d));
   f:= CyclotomicFactor(n/d[1],n/d[2]);
   If (d[3]=1,poly1:=MultiplyTerms(poly1,f),poly2:=MultiplyTerms(poly2,f));
   If(InVerboseMode(), 
     [ 
       Echo("poly1=",poly1);
       Echo("poly2=",poly2);
     ]);
 ];
 If(InVerboseMode(),Echo("End ForEach"));
 result := If(poly2={{0,1}},poly1,DivTermList(poly1,poly2));
 SparseUniVar(x,result); 
];


10  # Cyclotomic(1,_x) <-- x-1;
20  # Cyclotomic(n_IsInteger,_x) <-- ExpandSparseUniVar(InternalCyclotomic(n,x));





10  # UniVariateCyclotomic(1,_x) <-- UniVariate(x,0,{-1,1});
20  # UniVariateCyclotomic(n_IsInteger,_x) <-- OldInternalCyclotomic(n,x,False);

       

