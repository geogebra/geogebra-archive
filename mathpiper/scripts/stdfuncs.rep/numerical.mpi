







TruncRadian(_r) <--
[
  Local(twopi);
  
  N([
    r:=Eval(r);
    twopi:=2*Internal'Pi();
    r:=r-FloorN(r/twopi)*twopi;
  ], BuiltinPrecisionGet() + IntLog(Ceil(Abs(N(Eval(r), 1))), 10));
  r;
];
HoldArg("TruncRadian",r);

SinNum(x) :=
[
  If(x<0 Or 113*x>710, x:=TruncRadian(x));	
  SinN(x);
];
CosNum(x) :=
[
  If(x<0 Or 113*x>710, x:=TruncRadian(x));
  CosN(x);
];
TanNum(x) :=
[
  If(x<0 Or 113*x>710, x:=TruncRadian(x));
  TanN(x);
];

ArcSinNum(x) :=
[
	
	If(
		239*Abs(x) >= 169,	
		
		Sign(x)*(Internal'Pi()/2-ArcSinN(Sqrt(1-x^2))),
		ArcSinN(x)
	);
];





LocalSymbols(mathExpThreshold) [
  
  mathExpThreshold := If(Not IsBound(mathExpThreshold), 500);

  MathExpThreshold() := mathExpThreshold;
  SetMathExpThreshold(threshold) := [mathExpThreshold:= threshold; ]; 
];


10 # ExpNum(x_IsNumber) _ (x > MathExpThreshold()) <-- [
	Local(i, y);
	i:=0;
	For(i:=0, x > MathExpThreshold(), i++)
		x := DivideN(x, 2.);
	For(y:= ExpN(x), i>0, i--)
		y := MultiplyN(y, y);
	y;
	
];

20 # ExpNum(x_IsNumber) _ (2*x < -MathExpThreshold()) <-- DivideN(1, ExpNum(-x));

30 # ExpNum(x_IsNumber) <-- ExpN(x);






LogN(x) := Internal'LnNum(x);







Internal'LnNum(x_IsNumber)_(x>=1) <-- NewtonLn(x);

Internal'LnNum(x_IsNumber)_(0<x And x<1) <-- - Internal'LnNum(DivideN(1,x));

NewtonLn(x) :=
	LocalSymbols(y)
[


	NewtonNum({{y}, 4*x/(ExpNum(y)+x)-2+y},
	
		DivideN(794*IntLog(Floor(x*x), 2), 2291), 10, 3);
];








ArcTanNum(x) :=
[
	
	If(
		Abs(x)>1,
		Sign(x)*(Internal'Pi()/2-ArcSin(1/Sqrt(x^2+1))),
		ArcSin(x/Sqrt(x^2+1))
	);
];







