




Use("plots.rep/backends_2d.mpi");



	LocalSymbols(var, func, range, option, options'list, delta, options'hash, c, fc, all'values, dummy)
[


Function() Plot2D(func);
Function() Plot2D(func, range);
Function() Plot2D(func, range, options, ...);


1 # Plot2D(_func) <-- ("Plot2D" @ {func, -5:5});
2 # Plot2D(_func, _range) <-- ("Plot2D" @ {func, range, {}});
3 # Plot2D(_func, _range, option_IsFunction) _ (Type(option) = "=" Or Type(option) = "==") <-- ("Plot2D" @ {func, range, {option}});


5 # Plot2D(_func, _range, options'list_IsList)_(Not IsList(func)) <-- ("Plot2D" @ {{func}, range, options'list});



4 # Plot2D(func'list_IsList, _range, options'list_IsList) <--
[
	Local(var, func, delta, options'hash, c, fc, all'values, dummy);
	all'values := {};
	options'hash := "ListToHash" @ {options'list};
	
	options'hash["xname"] := "";
	
	options'hash["yname"] := {};
	
	If (
		Type(range) = "=" Or Type(range) = "==",	
		[
			
			options'hash["xname"] := String(range[1]);
			range := range[2];
		]
	);
	If(
		Type(range) = ":",	
		range := N(Eval({range[1], range[2]}))
	);
	
	If(
		options'hash["points"] = Empty,
		options'hash["points"] := 23
	);
	If(
		options'hash["depth"] = Empty,
		options'hash["depth"] := 5
	);
	If(
		options'hash["precision"] = Empty,
		options'hash["precision"] := 0.0001
	);
	If(
		options'hash["output"] = Empty Or IsString(options'hash["output"]) And Plot2D'outputs()[options'hash["output"]] = Empty,
		options'hash["output"] := Plot2D'outputs()["default"]
	);
	
	If(
		options'hash["output"] = "datafile" And options'hash["filename"] = Empty,
		options'hash["filename"] := "output.data"
	);
	
	options'hash["points"] := N(Eval(Div(options'hash["points"]+3, 4)));
	
	options'hash["precision"] := N(Eval(options'hash["precision"]));
	
	options'hash["xrange"] := {range[1], range[2]};
	
	delta := N(Eval( (range[2] - range[1]) / (options'hash["points"]) ));
	
	Check(IsNumber(range[1]) And IsNumber(range[2]) And IsNumber(options'hash["points"]) And IsNumber(options'hash["precision"]),
		"Plot2D: Error: plotting range '"
		:(ToString()Write(range))
		:"' and/or the number of points '"
		:(ToString()Write(options'hash["points"]))
		:"' and/or precision '"
		:(ToString()Write(options'hash["precision"]))
		:"' is not numeric"
	);
	
	ForEach(func, func'list)
	[
		
		var := VarList(func);        
    	Check(Length(var)<=1,
			"Plot2D: Error: expression is not a function of one variable: "
			:(ToString()Write(func))
		);
		
		If(Length(var)=0, var:={dummy});
		
		If(
			options'hash["xname"] = "",
			options'hash["xname"] := String(VarList(var)[1])
		);
		
		DestructiveAppend(options'hash["yname"], ToString()Write(func));
		
		c := range[1];
		fc := N(Eval(Apply({var, func}, {c})));
		Check(IsNumber(fc) Or fc=Infinity Or fc= -Infinity Or fc=Undefined,
			"Plot2D: Error: cannot evaluate function '"
			:(ToString()Write(func))
			:"' at point '"
			:(ToString()Write(c))
			:"' to a number, instead got '"
			:(ToString()Write(fc))
			:"'"
		);
		
		DestructiveAppend(all'values, Plot2D'get'data(func, var, c, fc, delta, options'hash));
		If(InVerboseMode(), Echo({"Plot2D: using ", Length(all'values[Length(all'values)]), " points for function ", func}), True);
	];
	
	Plot2D'outputs()[options'hash["output"]] @ {all'values, options'hash};
];



HoldArgNr("Plot2D", 2, 2);
HoldArgNr("Plot2D", 3, 2);
HoldArgNr("Plot2D", 3, 3);




Plot2D'get'data(_func, _var, _x'init, _y'init, _delta'x, _options'hash) <--
[
	Local(i, a, fa, b, fb, c, fc, result);
	
	result := { {c,fc} := {x'init, y'init} };
	For(i:=0, i<options'hash["points"], i++)
	[
		{a,fa} := {c, fc};	
		
		{b, c} := N(Eval({x'init + (i+1/2)*delta'x, x'init + (i+1)*delta'x}));	
		{fb, fc} := N(Eval(MapSingle({var, func}, {b, c})));
		result := Concat(result,
			Tail(Plot2D'adaptive(func, var, {a,b,c}, {fa, fb, fc}, options'hash["depth"],
				
				options'hash["precision"]*options'hash["points"] )));
	];
	result;
];






Plot2D'adaptive(_func, _var, {_a,_b,_c}, {_fa, _fb, _fc}, _depth, _epsilon) <--
[
	Local(a1, b1, fa1, fb1);

	a1 := N(Eval((a+b)/2));
	b1 := N(Eval((b+c)/2));
	{fa1, fb1} := N(Eval(MapSingle({var, func}, {a1, b1})));
	If(
		depth<=0 Or
		(
		  
		  sign'change(fa, fa1, fb) + sign'change(fa1, fb, fb1) + sign'change(fb, fb1, fc) <= 2
		  And
		  
		  N(Eval(Abs( (fa-5*fa1+9*fb-7*fb1+2*fc)/24 ) ))	
		  	<= N(Eval( epsilon*(	
		    
			(5*fb+8*fb1-fc)/12	
			- Min({fa,fa1,fb,fb1,fc}) ) ) )
		),
		
		{{a,fa}, {a1,fa1}, {b,fb}, {b1,fb1}, {c,fc}},
		
		Concat(
			
			Plot2D'adaptive(func, var, {a, a1, b}, {fa, fa1, fb}, depth-1, epsilon*2),	
			Tail(Plot2D'adaptive(func, var, {b, b1, c}, {fb, fb1, fc}, depth-1, epsilon*2))
		)
	);
];

];	
