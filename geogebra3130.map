geogebra.Application -> geogebra.Application:
    java.lang.String[] JAR_FILES -> a
    java.util.ArrayList supportedLocales -> a
    java.util.Hashtable specialLanguageNames -> a
    java.awt.Color COLOR_SELECTION -> a
    geogebra.GeoGebra frame -> a
    geogebra.GeoGebraAppletBase applet -> a
    java.awt.Component mainComp -> a
    boolean isApplet -> a
    boolean showResetIcon -> b
    java.net.URL codebase -> a
    geogebra.algebra.AlgebraView algebraView -> a
    geogebra.spreadsheet.SpreadsheetView spreadsheetView -> a
    geogebra.euclidian.EuclidianView euclidianView -> a
    geogebra.kernel.Kernel kernel -> a
    geogebra.io.MyXMLio myXMLio -> a
    geogebra.algebra.AlgebraController algebraController -> a
    geogebra.euclidian.EuclidianController euclidianController -> a
    geogebra.GeoElementSelectionListener currentSelectionListener -> a
    java.util.Locale currentLocale -> a
    java.util.ResourceBundle rbmenu -> a
    java.util.ResourceBundle rbcommand -> b
    java.util.ResourceBundle rberror -> c
    java.util.ResourceBundle rbplain -> d
    java.util.ResourceBundle rbsettings -> e
    java.util.Hashtable translateCommandTable -> b
    javax.swing.AbstractAction showAxesAction -> a
    javax.swing.AbstractAction showGridAction -> b
    javax.swing.AbstractAction undoAction -> c
    javax.swing.AbstractAction redoAction -> d
    geogebra.gui.PropertiesDialogGeoElement propDialog -> a
    geogebra.gui.ConstructionProtocol constProtocol -> a
    geogebra.gui.ConstructionProtocolNavigation constProtocolNavigation -> a
    geogebra.util.ImageManager imageManager -> a
    boolean INITING -> c
    boolean showAlgebraView -> d
    boolean showAuxiliaryObjects -> e
    boolean showAlgebraInput -> f
    boolean showCmdList -> g
    boolean showToolBar -> h
    boolean showMenuBar -> i
    boolean showConsProtNavigation -> j
    boolean[] showAxes -> a
    boolean showGrid -> k
    boolean showSpreadsheet -> l
    boolean showCAS -> m
    boolean printScaleString -> n
    int labelingStyle -> a
    boolean undoActive -> o
    boolean rightClickEnabled -> p
    boolean shiftDragZoomEnabled -> q
    boolean isErrorDialogsActive -> r
    java.util.LinkedList fileList -> a
    java.io.File currentPath -> a
    java.io.File currentImagePath -> b
    java.io.File currentFile -> c
    boolean isSaved -> s
    int appFontSize -> b
    java.awt.Font boldFont -> a
    java.awt.Font plainFont -> b
    java.awt.Font smallFont -> c
    java.lang.String FONT_NAME -> a
    java.lang.String strCustomToolbarDefinition -> b
    geogebra.gui.toolbar.MyToolbar appToolbarPanel -> a
    javax.swing.JFileChooser fileChooser -> a
    geogebra.gui.menubar.Menubar menuBar -> a
    geogebra.algebra.AlgebraInput algebraInput -> a
    javax.swing.JPanel centerPanel -> a
    javax.swing.JSplitPane sp -> a
    javax.swing.JSplitPane sp2 -> b
    int initSplitDividerLocationHOR -> c
    int initSplitDividerLocationVER -> d
    int initSplitDividerLocationHOR2 -> e
    int initSplitDividerLocationVER2 -> f
    boolean horizontalSplit -> t
    java.util.ArrayList selectedGeos -> b
    geogebra.algebra.autocomplete.LowerCaseDictionary commandDict -> a
    geogebra.plugin.GgbAPI ggbapi -> a
    geogebra.plugin.PluginManager pluginmanager -> a
    int oldMode -> g
    boolean reverseNameDescription -> u
    java.util.ArrayList tempGeos -> c
    geogebra.GlassPaneListener glassPaneListener -> a
    java.lang.Class class$0 -> a
    void openCAS(geogebra.Application) -> openCAS
    void initInBackground() -> initInBackground
    void initFileChooser() -> initFileChooser
    void initPropertiesDialog() -> initPropertiesDialog
    void setUnsaved() -> setUnsaved
    boolean isIniting() -> isIniting
    int getToolBarHeight() -> getToolBarHeight
    java.lang.String getDefaultToolbarString() -> getDefaultToolbarString
    int getMenuBarHeight() -> getMenuBarHeight
    int getAlgebraInputHeight() -> getAlgebraInputHeight
    int getLabelingStyle() -> getLabelingStyle
    void setLabelingStyle(int) -> setLabelingStyle
    void updateContentPane() -> updateContentPane
    void updateContentPaneAndSize() -> updateContentPaneAndSize
    void updateContentPane(boolean) -> updateContentPane
    void updateComponentTreeUI() -> updateComponentTreeUI
    javax.swing.JPanel buildApplicationPanel() -> buildApplicationPanel
    void updateCenterPanel(boolean) -> updateCenterPanel
    javax.swing.JPanel getCenterPanel() -> getCenterPanel
    javax.swing.AbstractAction getShowAxesAction() -> getShowAxesAction
    javax.swing.AbstractAction getShowGridAction() -> getShowGridAction
    geogebra.algebra.autocomplete.LowerCaseDictionary getCommandDictionary() -> getCommandDictionary
    void showAboutDialog() -> showAboutDialog
    void showPrintPreview() -> showPrintPreview
    void handleOptionArgs(java.lang.String[]) -> handleOptionArgs
    boolean handleFileArg(java.lang.String[]) -> handleFileArg
    geogebra.kernel.Kernel getKernel() -> getKernel
    void setApplet(geogebra.GeoGebraAppletBase) -> setApplet
    void setShowResetIcon(boolean) -> setShowResetIcon
    boolean showResetIcon() -> showResetIcon
    void reset() -> reset
    void refreshViews() -> refreshViews
    void setFrame(geogebra.GeoGebra) -> setFrame
    boolean isApplet() -> isApplet
    geogebra.GeoGebraAppletBase getApplet() -> getApplet
    geogebra.GeoGebra getFrame() -> getFrame
    java.awt.Component getMainComponent() -> getMainComponent
    geogebra.euclidian.EuclidianView getEuclidianView() -> getEuclidianView
    geogebra.algebra.AlgebraView getAlgebraView() -> getAlgebraView
    geogebra.algebra.AlgebraController getAlgebraController() -> getAlgebraController
    geogebra.algebra.AlgebraInput getAlgebraInput() -> getAlgebraInput
    void geoElementSelected(geogebra.kernel.GeoElement,boolean) -> geoElementSelected
    void setSelectionListenerMode(geogebra.GeoElementSelectionListener) -> setSelectionListenerMode
    geogebra.GeoElementSelectionListener getCurrentSelectionListener() -> getCurrentSelectionListener
    void setAglebraInputMode() -> setAglebraInputMode
    void setMoveMode() -> setMoveMode
    javax.swing.ImageIcon getImageIcon(java.lang.String) -> getImageIcon
    javax.swing.ImageIcon getImageIcon(java.lang.String,java.awt.Color) -> getImageIcon
    javax.swing.ImageIcon getEmptyIcon() -> getEmptyIcon
    java.awt.Image getInternalImage(java.lang.String) -> getInternalImage
    java.awt.image.BufferedImage getExternalImage(java.lang.String) -> getExternalImage
    void addExternalImage(java.lang.String,java.awt.image.BufferedImage) -> addExternalImage
    void startEditing(geogebra.kernel.GeoElement) -> startEditing
    void zoom(double,double,double) -> zoom
    void zoomAxesRatio(double) -> zoomAxesRatio
    void setStandardView() -> setStandardView
    java.util.Locale getLocale(java.lang.String) -> getLocale
    void setLanguage(java.util.Locale) -> setLanguage
    boolean isReverseNameDescriptionLanguage() -> isReverseNameDescriptionLanguage
    void updateReverseLanguage(java.util.Locale) -> updateReverseLanguage
    boolean languageIs(java.util.Locale,java.lang.String) -> languageIs
    java.lang.String getLanguageFontName(java.util.Locale) -> getLanguageFontName
    java.lang.String getFontCanDisplay(char) -> getFontCanDisplay
    boolean testFontCanDisplay(java.lang.String,char) -> testFontCanDisplay
    void setLocale(java.util.Locale) -> setLocale
    java.util.Locale getClosestSupportedLocale(java.util.Locale) -> getClosestSupportedLocale
    java.util.ResourceBundle initAlgo2CommandBundle() -> initAlgo2CommandBundle
    void updateResourceBundles() -> updateResourceBundles
    boolean propertiesFilesPresent() -> propertiesFilesPresent
    void initCommandResources() -> initCommandResources
    void fillCommandDict() -> fillCommandDict
    void addMacroCommands() -> addMacroCommands
    void removeMacroCommands() -> removeMacroCommands
    java.util.Locale getLocale() -> getLocale
    java.lang.String getPlain(java.lang.String) -> getPlain
    java.lang.String getPlain(java.lang.String,java.lang.String) -> getPlain
    java.lang.String getPlain(java.lang.String,java.lang.String,java.lang.String) -> getPlain
    java.lang.String getPlain(java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> getPlain
    java.lang.String getPlain(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> getPlain
    java.lang.String getPlain(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> getPlain
    java.lang.String getPlain(java.lang.String,java.lang.String[]) -> getPlain
    java.lang.String getMenu(java.lang.String) -> getMenu
    java.lang.String getSetting(java.lang.String) -> getSetting
    java.lang.String getError(java.lang.String) -> getError
    java.lang.String getCommand(java.lang.String) -> getCommand
    java.lang.String translateCommand(java.lang.String) -> translateCommand
    void showRelation(geogebra.kernel.GeoElement,geogebra.kernel.GeoElement) -> showRelation
    void showHelp(java.lang.String) -> showHelp
    void showError(java.lang.String) -> showError
    void showError(geogebra.MyError) -> showError
    void showErrorDialog(java.lang.String) -> showErrorDialog
    void showMessage(java.lang.String) -> showMessage
    void showDrawingPadPopup(java.awt.Component,java.awt.Point) -> showDrawingPadPopup
    void showPopupMenu(geogebra.kernel.GeoElement,java.awt.Component,java.awt.Point) -> showPopupMenu
    void showPropertiesDialog(java.util.ArrayList) -> showPropertiesDialog
    void showPropertiesDialog() -> showPropertiesDialog
    void showDrawingPadPropertiesDialog() -> showDrawingPadPropertiesDialog
    void showToolbarConfigDialog() -> showToolbarConfigDialog
    void showConstructionProtocol() -> showConstructionProtocol
    geogebra.gui.ConstructionProtocol getConstructionProtocol() -> getConstructionProtocol
    void showRenameDialog(geogebra.kernel.GeoElement,boolean,java.lang.String,boolean) -> showRenameDialog
    void showRedefineDialog(geogebra.kernel.GeoElement) -> showRedefineDialog
    boolean showSliderCreationDialog(int,int) -> showSliderCreationDialog
    boolean loadImage(geogebra.kernel.GeoPoint,boolean) -> loadImage
    java.awt.Color showColorChooser(java.awt.Color) -> showColorChooser
    java.lang.String getStringFromClipboard() -> getStringFromClipboard
    java.lang.String getImageFromClipboard() -> getImageFromClipboard
    java.lang.String getImageFromFile() -> getImageFromFile
    java.lang.String createImage(java.awt.image.BufferedImage,java.lang.String) -> createImage
    java.lang.String convertToHex(byte[]) -> convertToHex
    void setWaitCursor() -> setWaitCursor
    void setDefaultCursor() -> setDefaultCursor
    void showTextDialog(geogebra.kernel.GeoText) -> showTextDialog
    void showTextCreationDialog(geogebra.kernel.GeoPoint) -> showTextCreationDialog
    void showTextDialog(geogebra.kernel.GeoText,geogebra.kernel.GeoPoint) -> showTextDialog
    geogebra.gui.TextInputDialog createTextDialog(geogebra.kernel.GeoText,geogebra.kernel.GeoPoint) -> createTextDialog
    void doAfterRedefine(geogebra.kernel.GeoElement) -> doAfterRedefine
    void showBooleanCheckboxCreationDialog(java.awt.Point,geogebra.kernel.GeoBoolean) -> showBooleanCheckboxCreationDialog
    geogebra.kernel.arithmetic.NumberValue showNumberInputDialog(java.lang.String,java.lang.String,java.lang.String) -> showNumberInputDialog
    java.lang.Object[] showAngleInputDialog(java.lang.String,java.lang.String,java.lang.String) -> showAngleInputDialog
    java.io.File getCurrentFile() -> getCurrentFile
    void setCurrentFile(java.io.File) -> setCurrentFile
    void addToFileList(java.io.File) -> addToFileList
    java.io.File getFromFileList(int) -> getFromFileList
    int getFileListSize() -> getFileListSize
    void updateTitle() -> updateTitle
    void setFontSize(int) -> setFontSize
    int getInitFontSize() -> getInitFontSize
    void resetFonts() -> resetFonts
    void updateFonts() -> updateFonts
    java.awt.Font getBoldFont() -> getBoldFont
    java.awt.Font getPlainFont() -> getPlainFont
    java.awt.Font getSmallFont() -> getSmallFont
    void setLAFFontSize() -> setLAFFontSize
    int getFontSize() -> getFontSize
    void setLabels() -> setLabels
    void clearPreferences() -> clearPreferences
    void setToolBarDefinition(java.lang.String) -> setToolBarDefinition
    java.lang.String getToolBarDefinition() -> getToolBarDefinition
    java.lang.String getModeText(int) -> getModeText
    javax.swing.ImageIcon getModeIcon(int) -> getModeIcon
    void setSplitDividerLocationHOR(int) -> setSplitDividerLocationHOR
    void setSplitDividerLocationVER(int) -> setSplitDividerLocationVER
    void setSplitDividerLocationHOR2(int) -> setSplitDividerLocationHOR2
    void setSplitDividerLocationVER2(int) -> setSplitDividerLocationVER2
    void setHorizontalSplit(boolean) -> setHorizontalSplit
    boolean isHorizontalSplit() -> isHorizontalSplit
    void setShowAlgebraView(boolean) -> setShowAlgebraView
    void setShowSpreadsheet(boolean) -> setShowSpreadsheet
    boolean showAlgebraView() -> showAlgebraView
    boolean showSpreadsheet() -> showSpreadsheet
    boolean showAlgebraInput() -> showAlgebraInput
    void setShowAlgebraInput(boolean) -> setShowAlgebraInput
    boolean showCmdList() -> showCmdList
    void setShowCmdList(boolean) -> setShowCmdList
    void setShowConstructionProtocolNavigation(boolean) -> setShowConstructionProtocolNavigation
    boolean showConsProtNavigation() -> showConsProtNavigation
    geogebra.gui.ConstructionProtocolNavigation getConstructionProtocolNavigation() -> getConstructionProtocolNavigation
    boolean isConsProtNavigationPlayButtonVisible() -> isConsProtNavigationPlayButtonVisible
    boolean isConsProtNavigationProtButtonVisible() -> isConsProtNavigationProtButtonVisible
    boolean showAuxiliaryObjects() -> showAuxiliaryObjects
    void setShowAuxiliaryObjects(boolean) -> setShowAuxiliaryObjects
    void setShowMenuBar(boolean) -> setShowMenuBar
    void initMenubar() -> initMenubar
    geogebra.gui.menubar.Menubar getMenuBar() -> getMenuBar
    void setMenubar(geogebra.gui.menubar.Menubar) -> setMenubar
    void setShowToolBar(boolean,boolean) -> setShowToolBar
    boolean showToolBar() -> showToolBar
    void setUndoActive(boolean) -> setUndoActive
    boolean isUndoActive() -> isUndoActive
    void setRightClickEnabled(boolean) -> setRightClickEnabled
    boolean isRightClickEnabled() -> isRightClickEnabled
    boolean letRename() -> letRename
    boolean letDelete() -> letDelete
    boolean letRedefine() -> letRedefine
    boolean letShowPopupMenu() -> letShowPopupMenu
    boolean letShowPropertiesDialog() -> letShowPropertiesDialog
    void updateToolBar() -> updateToolBar
    void removeFromToolbarDefinition(int) -> removeFromToolbarDefinition
    void addToToolbarDefinition(int) -> addToToolbarDefinition
    void updateMenubar() -> updateMenubar
    void updateSelection() -> updateSelection
    void updateMenuWindow() -> updateMenuWindow
    void updateCommandDictionary() -> updateCommandDictionary
    void initShowAxesGridActions() -> initShowAxesGridActions
    void updateActions() -> updateActions
    void openHelp() -> openHelp
    void showURLinBrowser(java.lang.String) -> showURLinBrowser
    void showURLinBrowser(java.net.URL) -> showURLinBrowser
    java.net.URL getHelpURL(java.util.Locale) -> getHelpURL
    java.net.URL getHelpURL(java.lang.String) -> getHelpURL
    java.lang.String getCreatedWithHTML() -> getCreatedWithHTML
    boolean save() -> save
    boolean saveAs() -> saveAs
    java.io.File showSaveDialog(java.lang.String,java.io.File,java.lang.String) -> showSaveDialog
    java.io.File addExtension(java.io.File,java.lang.String) -> addExtension
    java.io.File removeExtension(java.io.File) -> removeExtension
    java.lang.String getExtension(java.io.File) -> getExtension
    void openFile() -> openFile
    void doOpenFiles(java.io.File[],boolean) -> doOpenFiles
    boolean loadFile(java.io.File,boolean) -> loadFile
    void deleteAllGeoElements() -> deleteAllGeoElements
    void exit() -> exit
    void exitAll() -> exitAll
    boolean saveCurrentFile() -> saveCurrentFile
    void setMode(int) -> setMode
    int getMode() -> getMode
    void exportConstructionProtocolHTML() -> exportConstructionProtocolHTML
    boolean saveGeoGebraFile(java.io.File) -> saveGeoGebraFile
    boolean saveMacroFile(java.io.File,java.util.ArrayList) -> saveMacroFile
    boolean loadXML(java.io.File,boolean) -> loadXML
    boolean loadXML(java.net.URL,boolean) -> loadXML
    boolean loadXML(java.io.InputStream,boolean) -> loadXML
    java.lang.String getXML() -> getXML
    void setXML(java.lang.String,boolean) -> setXML
    java.lang.String getPreferencesXML() -> getPreferencesXML
    byte[] getMacroFileAsByteArray() -> getMacroFileAsByteArray
    void loadMacroFileFromByteArray(byte[],boolean) -> loadMacroFileFromByteArray
    geogebra.io.MyXMLio getXMLio() -> getXMLio
    boolean isSaved() -> isSaved
    void storeUndoInfo() -> storeUndoInfo
    void restoreCurrentUndoInfo() -> restoreCurrentUndoInfo
    java.lang.String getUserInterfaceXML() -> getUserInterfaceXML
    java.lang.String getConsProtocolXML() -> getConsProtocolXML
    java.net.URL getCodeBase() -> getCodeBase
    void initCodeBase() -> initCodeBase
    geogebra.gui.PropertiesDialogGeoElement getPropDialog() -> getPropDialog
    int selectedGeosSize() -> selectedGeosSize
    java.util.ArrayList getSelectedGeos() -> getSelectedGeos
    geogebra.kernel.GeoElement getLastCreatedGeoElement() -> getLastCreatedGeoElement
    void setSelectedGeos(java.util.ArrayList) -> setSelectedGeos
    void selectAll(int) -> selectAll
    void clearSelectedGeos() -> clearSelectedGeos
    void clearSelectedGeos(boolean) -> clearSelectedGeos
    void toggleSelectedGeo(geogebra.kernel.GeoElement) -> toggleSelectedGeo
    void toggleSelectedGeo(geogebra.kernel.GeoElement,boolean) -> toggleSelectedGeo
    boolean containsSelectedGeo(geogebra.kernel.GeoElement) -> containsSelectedGeo
    void removeSelectedGeo(geogebra.kernel.GeoElement) -> removeSelectedGeo
    void removeSelectedGeo(geogebra.kernel.GeoElement,boolean) -> removeSelectedGeo
    void addSelectedGeo(geogebra.kernel.GeoElement) -> addSelectedGeo
    void addSelectedGeo(geogebra.kernel.GeoElement,boolean) -> addSelectedGeo
    void startDispatchingEventsTo(javax.swing.JComponent) -> startDispatchingEventsTo
    void stopDispatchingEvents() -> stopDispatchingEvents
    java.awt.Component getGlassPane() -> getGlassPane
    java.awt.Container getContentPane() -> getContentPane
    javax.swing.AbstractAction getRedoAction() -> getRedoAction
    javax.swing.AbstractAction getUndoAction() -> getUndoAction
    boolean dispatchKeyEvent(java.awt.event.KeyEvent) -> dispatchKeyEvent
    boolean isPrintScaleString() -> isPrintScaleString
    void setPrintScaleString(boolean) -> setPrintScaleString
    java.io.File getCurrentImagePath() -> getCurrentImagePath
    void setCurrentImagePath(java.io.File) -> setCurrentImagePath
    void copyJarsToTempDir() -> copyJarsToTempDir
    void copyJarsTo(java.lang.String,boolean) -> copyJarsTo
    boolean isErrorDialogsActive() -> isErrorDialogsActive
    void setErrorDialogsActive(boolean) -> setErrorDialogsActive
    boolean isShiftDragZoomEnabled() -> isShiftDragZoomEnabled
    void setShiftDragZoomEnabled(boolean) -> setShiftDragZoomEnabled
    geogebra.plugin.GgbAPI getGgbApi() -> getGgbApi
    javax.swing.JMenu getPluginMenu() -> getPluginMenu
    geogebra.plugin.PluginManager getPluginManager() -> getPluginManager
    geogebra.kernel.Kernel access$0(geogebra.Application) -> access$0
    javax.swing.JSplitPane access$1(geogebra.Application) -> access$1
    void access$2(geogebra.Application,int) -> access$2
    void access$3(geogebra.Application,int) -> access$3
    void access$4(geogebra.Application,boolean) -> access$4
    geogebra.GeoGebraAppletBase access$5(geogebra.Application) -> access$5
    geogebra.GeoGebra access$6(geogebra.Application) -> access$6
    javax.swing.JSplitPane access$7(geogebra.Application) -> access$7
    void access$8(geogebra.Application,int) -> access$8
    void access$9(geogebra.Application,int) -> access$9
    void access$10(geogebra.Application) -> access$10
    boolean access$11(geogebra.Application) -> access$11
    void access$12(geogebra.Application) -> access$12
    void access$13(geogebra.Application) -> access$13
    geogebra.euclidian.EuclidianView access$14(geogebra.Application) -> access$14
    void access$15(geogebra.Application) -> access$15
geogebra.Application$1 -> geogebra.i:
    geogebra.Application this$0 -> a
    void run() -> run
geogebra.Application$2 -> geogebra.h:
    geogebra.Application this$0 -> a
    void run() -> run
geogebra.Application$3 -> geogebra.g:
    geogebra.Application this$0 -> a
    void windowClosing(java.awt.event.WindowEvent) -> windowClosing
geogebra.Application$4 -> geogebra.f:
    geogebra.Application this$0 -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
geogebra.Application$5 -> geogebra.e:
    geogebra.Application this$0 -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
geogebra.Application$6 -> geogebra.d:
    geogebra.Application this$0 -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
geogebra.Application$7 -> geogebra.c:
    geogebra.Application this$0 -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
geogebra.Application$DividerChangeListener -> geogebra.p:
    geogebra.Application this$0 -> a
    void propertyChange(java.beans.PropertyChangeEvent) -> propertyChange
geogebra.Application$DividerChangeListener2 -> geogebra.o:
    geogebra.Application this$0 -> a
    void propertyChange(java.beans.PropertyChangeEvent) -> propertyChange
geogebra.Application$NumberInputHandler -> geogebra.w:
    geogebra.kernel.arithmetic.NumberValue num -> a
    geogebra.Application this$0 -> a
    boolean processInput(java.lang.String) -> a
geogebra.GeoElementSelectionListener -> geogebra.u:
    void geoElementSelected(geogebra.kernel.GeoElement,boolean) -> a
geogebra.GeoGebra -> geogebra.GeoGebra:
    java.util.ArrayList instances -> a
    geogebra.GeoGebra activeInstance -> a
    geogebra.Application app -> a
    boolean MAC_OS -> a
    boolean WINDOWS -> b
    geogebra.Application getApplication() -> a
    void setApplication(geogebra.Application) -> a
    int getInstanceNumber() -> a
    void windowGainedFocus(java.awt.event.WindowEvent) -> windowGainedFocus
    void windowLostFocus(java.awt.event.WindowEvent) -> windowLostFocus
    java.util.Locale getLocale() -> getLocale
    void setVisible(boolean) -> setVisible
    void updateSize() -> a
    void main(java.lang.String[]) -> main
    geogebra.GeoGebra getActiveInstance() -> a
    void initMacSpecifics() -> b
    geogebra.GeoGebra createNewWindow(java.lang.String[]) -> a
    int getInstanceCount() -> b
    java.util.ArrayList getInstances() -> a
    geogebra.GeoGebra getInstance(int) -> a
    void updateAllTitles() -> c
    geogebra.GeoGebra getInstanceWithFile(java.io.File) -> a
    boolean isIconified() -> a
geogebra.GeoGebraApplet -> geogebra.GeoGebraApplet:
    geogebra.Application buildApplication(java.lang.String[],boolean) -> buildApplication
geogebra.GeoGebraAppletBase -> geogebra.GeoGebraAppletBase:
    geogebra.Application app -> a
    geogebra.kernel.Kernel kernel -> a
    javax.swing.JButton btOpen -> a
    geogebra.GeoGebraAppletBase$DoubleClickListener dcListener -> a
    geogebra.euclidian.EuclidianView ev -> a
    boolean showOpenButton -> a
    boolean showToolBar -> b
    boolean showToolBarHelp -> c
    boolean showAlgebraInput -> d
    boolean undoActive -> e
    boolean enableRightClick -> f
    boolean enableShiftDragZoom -> g
    boolean showMenuBar -> h
    boolean showResetIcon -> i
    boolean firstAppOpen -> j
    java.awt.Color bgColor -> a
    java.awt.Color borderColor -> b
    java.lang.String fileStr -> a
    java.lang.String customToolBar -> b
    boolean showFrame -> k
    geogebra.GeoGebra wnd -> a
    netscape.javascript.JSObject browserWindow -> a
    boolean javascriptLoadFile -> l
    boolean javascriptReset -> m
    java.lang.String javascriptLoadFileName -> c
    geogebra.plugin.GgbAPI ggbApi -> a
    java.util.HashMap updateListenerMap -> a
    java.util.ArrayList addListeners -> a
    java.util.ArrayList removeListeners -> b
    java.util.ArrayList renameListeners -> c
    java.util.ArrayList updateListeners -> d
    java.util.ArrayList clearListeners -> e
    geogebra.GeoGebraAppletBase$JavaToJavaScriptView javaToJavaScriptView -> a
    void init() -> init
    geogebra.Application buildApplication(java.lang.String[],boolean) -> buildApplication
    void start() -> start
    void stop() -> stop
    void destroy() -> destroy
    void initGUI() -> initGUI
    javax.swing.JPanel createGeoGebraAppletPanel() -> createGeoGebraAppletPanel
    void showFrame() -> showFrame
    void showApplet() -> showApplet
    void reinitGUI() -> reinitGUI
    byte[] getGGBfile() -> getGGBfile
    java.lang.String getXML() -> getXML
    void setXML(java.lang.String) -> setXML
    void evalXML(java.lang.String) -> evalXML
    boolean evalCommand(java.lang.String) -> evalCommand
    java.lang.String evalYacas(java.lang.String) -> evalYacas
    void setErrorDialogsActive(boolean) -> setErrorDialogsActive
    void reset() -> reset
    void resetNoThread() -> resetNoThread
    void refreshViews() -> refreshViews
    void openFile(java.lang.String) -> openFile
    void openFileNoThread(java.lang.String) -> openFileNoThread
    void setVisible(java.lang.String,boolean) -> setVisible
    void setLayer(java.lang.String,int) -> setLayer
    int getLayer(java.lang.String) -> getLayer
    void setLayerVisible(int,boolean) -> setLayerVisible
    void setFixed(java.lang.String,boolean) -> setFixed
    void setTrace(java.lang.String,boolean) -> setTrace
    void setLabelVisible(java.lang.String,boolean) -> setLabelVisible
    void setLabelStyle(java.lang.String,int) -> setLabelStyle
    void setLabelMode(java.lang.String,boolean) -> setLabelMode
    void setColor(java.lang.String,int,int,int) -> setColor
    java.lang.String getColor(java.lang.String) -> getColor
    void deleteObject(java.lang.String) -> deleteObject
    boolean exists(java.lang.String) -> exists
    boolean isDefined(java.lang.String) -> isDefined
    java.lang.String getValueString(java.lang.String) -> getValueString
    java.lang.String getDefinitionString(java.lang.String) -> getDefinitionString
    java.lang.String getCommandString(java.lang.String) -> getCommandString
    double getXcoord(java.lang.String) -> getXcoord
    double getYcoord(java.lang.String) -> getYcoord
    void setCoords(java.lang.String,double,double) -> setCoords
    double getValue(java.lang.String) -> getValue
    void setValue(java.lang.String,double) -> setValue
    void setRepaintingActive(boolean) -> setRepaintingActive
    void setCoordSystem(double,double,double,double) -> setCoordSystem
    void setAxesVisible(boolean,boolean) -> setAxesVisible
    void setGridVisible(boolean) -> setGridVisible
    java.lang.String[] getAllObjectNames() -> getAllObjectNames
    int getObjectNumber() -> getObjectNumber
    java.lang.String getObjectName(int) -> getObjectName
    java.lang.String getObjectType(java.lang.String) -> getObjectType
    void setMode(int) -> setMode
    void registerAddListener(java.lang.String) -> registerAddListener
    void unregisterAddListener(java.lang.String) -> unregisterAddListener
    void registerRemoveListener(java.lang.String) -> registerRemoveListener
    void unregisterRemoveListener(java.lang.String) -> unregisterRemoveListener
    void registerClearListener(java.lang.String) -> registerClearListener
    void unregisterClearListener(java.lang.String) -> unregisterClearListener
    void registerRenameListener(java.lang.String) -> registerRenameListener
    void unregisterRenameListener(java.lang.String) -> unregisterRenameListener
    void registerUpdateListener(java.lang.String) -> registerUpdateListener
    void unregisterUpdateListener(java.lang.String) -> unregisterUpdateListener
    void registerObjectUpdateListener(java.lang.String,java.lang.String) -> registerObjectUpdateListener
    void unregisterObjectUpdateListener(java.lang.String) -> unregisterObjectUpdateListener
    void initJavaScriptView() -> initJavaScriptView
    void callJavaScript(java.lang.String,java.lang.Object[]) -> callJavaScript
    void access$0(geogebra.GeoGebraAppletBase) -> access$0
    java.util.ArrayList access$1(geogebra.GeoGebraAppletBase) -> access$1
    java.util.ArrayList access$2(geogebra.GeoGebraAppletBase) -> access$2
    geogebra.plugin.GgbAPI access$3(geogebra.GeoGebraAppletBase) -> access$3
    void access$4(geogebra.GeoGebraAppletBase,java.util.HashMap) -> access$4
    java.util.ArrayList access$5(geogebra.GeoGebraAppletBase) -> access$5
    java.util.ArrayList access$6(geogebra.GeoGebraAppletBase) -> access$6
    void access$7(geogebra.GeoGebraAppletBase,java.lang.String,java.lang.Object[]) -> access$7
    java.util.ArrayList access$8(geogebra.GeoGebraAppletBase) -> access$8
    java.util.HashMap access$9(geogebra.GeoGebraAppletBase) -> access$9
    boolean access$10(geogebra.GeoGebraAppletBase) -> access$10
    boolean access$11(geogebra.GeoGebraAppletBase) -> access$11
    java.lang.String access$12(geogebra.GeoGebraAppletBase) -> access$12
    void access$13(geogebra.GeoGebraAppletBase,boolean) -> access$13
    void access$14(geogebra.GeoGebraAppletBase,boolean) -> access$14
geogebra.GeoGebraAppletBase$1 -> geogebra.b:
    geogebra.GeoGebraAppletBase this$0 -> a
    void run() -> run
geogebra.GeoGebraAppletBase$ButtonClickListener -> geogebra.m:
    geogebra.GeoGebraAppletBase this$0 -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
geogebra.GeoGebraAppletBase$DoubleClickListener -> geogebra.j:
    geogebra.GeoGebraAppletBase this$0 -> a
    void mouseClicked(java.awt.event.MouseEvent) -> mouseClicked
geogebra.GeoGebraAppletBase$JavaToJavaScriptView -> geogebra.a:
    geogebra.GeoGebraAppletBase this$0 -> a
    void add(geogebra.kernel.GeoElement) -> a
    void remove(geogebra.kernel.GeoElement) -> b
    void clearView() -> d
    void rename(geogebra.kernel.GeoElement) -> c
    void notifyListeners(java.util.ArrayList,java.lang.Object[]) -> a
    void update(geogebra.kernel.GeoElement) -> d
    void updateAuxiliaryObject(geogebra.kernel.GeoElement) -> e
    void reset() -> c
    void repaintView() -> e
geogebra.GeoGebraApplication -> geogebra.v:
geogebra.GlassPaneListener -> geogebra.s:
    java.awt.Component glassPane -> a
    java.awt.Component destComp -> b
    java.awt.Container contentPane -> a
    void mouseMoved(java.awt.event.MouseEvent) -> mouseMoved
    void mouseDragged(java.awt.event.MouseEvent) -> mouseDragged
    void mouseClicked(java.awt.event.MouseEvent) -> mouseClicked
    void mouseEntered(java.awt.event.MouseEvent) -> mouseEntered
    void mouseExited(java.awt.event.MouseEvent) -> mouseExited
    void mousePressed(java.awt.event.MouseEvent) -> mousePressed
    void mouseReleased(java.awt.event.MouseEvent) -> mouseReleased
    void redispatchMouseEvent(java.awt.event.MouseEvent) -> a
    boolean dispatchKeyEvent(java.awt.event.KeyEvent) -> dispatchKeyEvent
geogebra.MacApplicationListener -> geogebra.k:
    void initMacApplicationListener() -> a
    geogebra.GeoGebra getGGBInstance() -> a
    void handleQuit(com.apple.eawt.ApplicationEvent) -> handleQuit
    void handleAbout(com.apple.eawt.ApplicationEvent) -> handleAbout
    void handleOpenFile(com.apple.eawt.ApplicationEvent) -> handleOpenFile
    void handlePrintFile(com.apple.eawt.ApplicationEvent) -> handlePrintFile
    void handleOpenApplication(com.apple.eawt.ApplicationEvent) -> handleOpenApplication
    void handlePreferences(com.apple.eawt.ApplicationEvent) -> handlePreferences
    void handleReOpenApplication(com.apple.eawt.ApplicationEvent) -> handleReOpenApplication
geogebra.MyError -> geogebra.l:
    geogebra.Application app -> a
    java.lang.String[] strs -> a
    java.lang.String getLocalizedMessage() -> getLocalizedMessage
    java.lang.String toString() -> toString
geogebra.MyFileFilter -> geogebra.n:
    java.util.Hashtable filters -> a
    java.lang.String description -> a
    java.lang.String fullDescription -> b
    boolean useExtensionsInDescription -> a
    boolean accept(java.io.File) -> accept
    java.lang.String getExtension(java.io.File) -> a
    void addExtension(java.lang.String) -> a
    java.lang.String getDescription() -> getDescription
    void setDescription(java.lang.String) -> b
    boolean isExtensionListInDescription() -> a
geogebra.MyParseError -> geogebra.q:
    java.lang.String getLocalizedMessage() -> getLocalizedMessage
geogebra.MyResourceBundle -> geogebra.t:
    java.lang.Class class$0 -> a
    java.util.ResourceBundle createBundle(java.lang.String,java.util.Locale) -> a
    geogebra.MyResourceBundle loadSingleBundleFile(java.lang.String) -> a
geogebra.View -> geogebra.r:
    void add(geogebra.kernel.GeoElement) -> a
    void remove(geogebra.kernel.GeoElement) -> b
    void rename(geogebra.kernel.GeoElement) -> c
    void update(geogebra.kernel.GeoElement) -> d
    void updateAuxiliaryObject(geogebra.kernel.GeoElement) -> e
    void repaintView() -> e
    void reset() -> c
    void clearView() -> d
geogebra.algebra.AlgebraController -> geogebra.c.a:
    geogebra.kernel.Kernel kernel -> a
    geogebra.kernel.Construction cons -> a
    geogebra.Application app -> a
    geogebra.algebra.AlgebraView view -> a
    geogebra.kernel.GeoVector tempVec -> a
    boolean kernelChanged -> a
    void setView(geogebra.algebra.AlgebraView) -> a
    geogebra.Application getApplication() -> a
    geogebra.kernel.Kernel getKernel() -> a
    void keyReleased(java.awt.event.KeyEvent) -> keyReleased
    void keyTyped(java.awt.event.KeyEvent) -> keyTyped
    void keyPressed(java.awt.event.KeyEvent) -> keyPressed
    boolean keyPressedConsumed(java.awt.event.KeyEvent) -> a
    boolean handleKeyPressed(java.awt.event.KeyEvent,geogebra.kernel.GeoElement) -> a
    boolean handleArrowKeyMovement(geogebra.kernel.GeoElement,geogebra.kernel.GeoVector) -> a
    void mouseClicked(java.awt.event.MouseEvent) -> mouseClicked
    void mousePressed(java.awt.event.MouseEvent) -> mousePressed
    void mouseReleased(java.awt.event.MouseEvent) -> mouseReleased
    void mouseEntered(java.awt.event.MouseEvent) -> mouseEntered
    void mouseExited(java.awt.event.MouseEvent) -> mouseExited
    void mouseDragged(java.awt.event.MouseEvent) -> mouseDragged
    void mouseMoved(java.awt.event.MouseEvent) -> mouseMoved
geogebra.algebra.AlgebraInput -> geogebra.c.b:
    geogebra.Application app -> a
    javax.swing.JLabel helpButton -> a
    javax.swing.JToggleButton inputButton -> a
    javax.swing.JComboBox cmdCB -> a
    geogebra.algebra.autocomplete.AutoCompleteTextField inputField -> a
    void initGUI() -> a
    javax.swing.JToggleButton getInputButton() -> a
    void setFocus() -> b
    boolean hasFocus() -> hasFocus
    geogebra.algebra.autocomplete.AutoCompleteTextField getTextField() -> a
    void setLabels() -> c
    void updateFonts() -> d
    void insertCommand(java.lang.String) -> a
    void setCommandNames() -> e
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
    void mouseClicked(java.awt.event.MouseEvent) -> mouseClicked
    void mouseEntered(java.awt.event.MouseEvent) -> mouseEntered
    void mouseExited(java.awt.event.MouseEvent) -> mouseExited
    void mousePressed(java.awt.event.MouseEvent) -> mousePressed
    void mouseReleased(java.awt.event.MouseEvent) -> mouseReleased
    void keyPressed(java.awt.event.KeyEvent) -> keyPressed
    void keyReleased(java.awt.event.KeyEvent) -> keyReleased
    void keyTyped(java.awt.event.KeyEvent) -> keyTyped
geogebra.algebra.AlgebraView -> geogebra.c.f:
    javax.swing.ImageIcon iconShown -> a
    javax.swing.ImageIcon iconHidden -> b
    geogebra.Application app -> a
    geogebra.kernel.Kernel kernel -> a
    javax.swing.tree.DefaultTreeModel model -> a
    geogebra.algebra.AlgebraView$MyRenderer renderer -> a
    geogebra.algebra.AlgebraView$MyDefaultTreeCellEditor editor -> a
    javax.swing.JTextField editTF -> a
    geogebra.util.FastHashMapKeyless nodeTable -> a
    javax.swing.tree.DefaultMutableTreeNode root -> a
    javax.swing.tree.DefaultMutableTreeNode depNode -> b
    javax.swing.tree.DefaultMutableTreeNode indNode -> c
    javax.swing.tree.DefaultMutableTreeNode auxiliaryNode -> d
    javax.swing.tree.TreePath tpInd -> a
    javax.swing.tree.TreePath tpDep -> b
    javax.swing.tree.TreePath tpAux -> c
    geogebra.kernel.GeoElement selectedGeoElement -> a
    javax.swing.tree.DefaultMutableTreeNode selectedNode -> e
    java.awt.BasicStroke crossStroke -> a
    int crossBorder -> a
    int crossOffset -> b
    boolean highlightCross -> a
    void attachView() -> a
    void detachView() -> b
    void updateFonts() -> f
    void initTreeCellRendererEditor() -> h
    void clearSelection() -> clearSelection
    boolean showAuxiliaryObjects() -> a
    void setShowAuxiliaryObjects(boolean) -> a
    void paint(java.awt.Graphics) -> paint
    void drawClosingCross(java.awt.Graphics2D) -> a
    boolean hitClosingCross(int,int) -> a
    void setClosingCrossHighlighted(boolean) -> b
    geogebra.kernel.GeoElement getGeoElementForLocation(javax.swing.JTree,int,int) -> a
    void setToolTipText(java.lang.String) -> setToolTipText
    void startEditing(geogebra.kernel.GeoElement) -> f
    void setLabels() -> g
    void setNodeLabel(javax.swing.tree.DefaultMutableTreeNode,java.lang.String) -> a
    void add(geogebra.kernel.GeoElement) -> a
    int getInsertPosition(javax.swing.tree.DefaultMutableTreeNode,geogebra.kernel.GeoElement) -> a
    int binarySearchGeo(javax.swing.tree.DefaultMutableTreeNode,java.lang.String) -> a
    int linearSearchGeo(javax.swing.tree.DefaultMutableTreeNode,java.lang.String) -> b
    void remove(geogebra.kernel.GeoElement) -> b
    void clearView() -> d
    void repaintView() -> e
    void rename(geogebra.kernel.GeoElement) -> c
    void reset() -> c
    void removeFromModel(javax.swing.tree.DefaultMutableTreeNode) -> a
    void update(geogebra.kernel.GeoElement) -> d
    void updateAuxiliaryObject(geogebra.kernel.GeoElement) -> e
    geogebra.Application access$0(geogebra.algebra.AlgebraView) -> a
    javax.swing.ImageIcon access$1(geogebra.algebra.AlgebraView) -> a
    javax.swing.ImageIcon access$2(geogebra.algebra.AlgebraView) -> b
    javax.swing.tree.DefaultMutableTreeNode access$3(geogebra.algebra.AlgebraView) -> a
    geogebra.kernel.GeoElement access$4(geogebra.algebra.AlgebraView) -> a
    geogebra.kernel.Kernel access$5(geogebra.algebra.AlgebraView) -> a
    void access$6(geogebra.algebra.AlgebraView,geogebra.kernel.GeoElement) -> a
    javax.swing.tree.DefaultTreeModel access$7(geogebra.algebra.AlgebraView) -> a
    void access$8(geogebra.algebra.AlgebraView,javax.swing.tree.DefaultMutableTreeNode) -> a
geogebra.algebra.AlgebraView$MyDefaultTreeCellEditor -> geogebra.c.c:
    geogebra.algebra.AlgebraView this$0 -> a
    void editingCanceled(javax.swing.event.ChangeEvent) -> editingCanceled
    void editingStopped(javax.swing.event.ChangeEvent) -> editingStopped
    boolean isCellEditable(java.util.EventObject) -> isCellEditable
    void valueChanged(javax.swing.event.TreeSelectionEvent) -> valueChanged
    void storeSelection(javax.swing.tree.TreePath) -> a
geogebra.algebra.AlgebraView$MyRenderer -> geogebra.c.e:
    geogebra.algebra.AlgebraView this$0 -> a
    java.awt.Component getTreeCellRendererComponent(javax.swing.JTree,java.lang.Object,boolean,boolean,boolean,int,boolean) -> getTreeCellRendererComponent
geogebra.algebra.MyCellEditor -> geogebra.c.d:
    java.awt.Component getTreeCellEditorComponent(javax.swing.JTree,java.lang.Object,boolean,boolean,boolean,int) -> getTreeCellEditorComponent
geogebra.algebra.autocomplete.AutoCompleteDictionary -> geogebra.c.a.b:
    java.lang.String lookup(java.lang.String) -> a
geogebra.algebra.autocomplete.AutoCompleteTextField -> geogebra.c.a.a:
    geogebra.Application app -> a
    java.lang.StringBuffer curWord -> a
    int curWordStart -> a
    geogebra.algebra.autocomplete.AutoCompleteDictionary dict -> a
    boolean autoComplete -> a
    int historyIndex -> b
    java.util.ArrayList history -> a
    void setDictionary(geogebra.algebra.autocomplete.AutoCompleteDictionary) -> a
    void setAutoComplete(boolean) -> a
    java.lang.String getCurrentWord() -> a
    void geoElementSelected(geogebra.kernel.GeoElement,boolean) -> a
    void keyPressed(java.awt.event.KeyEvent) -> keyPressed
    void keyReleased(java.awt.event.KeyEvent) -> keyReleased
    void keyTyped(java.awt.event.KeyEvent) -> keyTyped
    java.lang.String lookup(java.lang.String) -> a
    void updateCurrentWord() -> a
    java.lang.String getWordAtPos(java.lang.String,int) -> a
    void updateAutoCompletion() -> b
    boolean processAutoCompletionKey() -> a
    void addToHistory(java.lang.String) -> a
    java.lang.String getPreviousInput() -> b
    java.lang.String getNextInput() -> c
    void showCommandHelp() -> c
    java.lang.String getCmdSyntax(java.lang.String) -> b
geogebra.algebra.autocomplete.LowerCaseDictionary -> geogebra.c.a.c:
    java.util.TreeSet treeSet -> a
    void addEntry(java.lang.String) -> a
    boolean removeEntry(java.lang.String) -> a
    java.util.Iterator getLowerCaseIterator() -> a
    java.lang.String lookup(java.lang.String) -> a
geogebra.algebra.parser.ParseException -> geogebra.c.b.b:
    boolean specialConstructor -> a
    geogebra.algebra.parser.Token currentToken -> a
    int[][] expectedTokenSequences -> a
    java.lang.String[] tokenImage -> a
    java.lang.String eol -> a
    java.lang.String getMessage() -> getMessage
    java.lang.String add_escapes(java.lang.String) -> a
geogebra.algebra.parser.Parser -> geogebra.c.b.f:
    geogebra.kernel.Kernel kernel -> a
    geogebra.kernel.Construction cons -> a
    geogebra.Application app -> a
    geogebra.algebra.parser.ParserTokenManager token_source -> a
    geogebra.algebra.parser.SimpleCharStream jj_input_stream -> a
    geogebra.algebra.parser.Token token -> a
    geogebra.algebra.parser.Token jj_nt -> b
    int jj_ntk -> a
    geogebra.algebra.parser.Token jj_scanpos -> c
    geogebra.algebra.parser.Token jj_lastpos -> d
    int jj_la -> b
    boolean lookingAhead -> a
    int jj_gen -> c
    int[] jj_la1 -> a
    int[] jj_la1_0 -> b
    int[] jj_la1_1 -> c
    int[] jj_la1_2 -> d
    geogebra.algebra.parser.Parser$JJCalls[] jj_2_rtns -> a
    boolean jj_rescan -> b
    int jj_gc -> d
    geogebra.algebra.parser.Parser$LookaheadSuccess jj_ls -> a
    java.util.Vector jj_expentries -> a
    int[] jj_expentry -> e
    int jj_kind -> e
    int[] jj_lasttokens -> f
    int jj_endpos -> f
    geogebra.kernel.arithmetic.ValidExpression parse(java.lang.String) -> a
    geogebra.kernel.arithmetic.Function parseFunction(java.lang.String) -> a
    geogebra.kernel.arithmetic.ExpressionNode parseCmdExpression(java.lang.String) -> a
    geogebra.kernel.arithmetic.ExpressionNode parseExpression(java.lang.String) -> b
    java.lang.String parseLabel(java.lang.String) -> a
    java.lang.String label() -> a
    geogebra.kernel.arithmetic.ValidExpression buildValidExpression() -> a
    geogebra.kernel.arithmetic.Assignment assignment() -> a
    geogebra.kernel.arithmetic.Command command() -> a
    java.util.Vector labellist() -> a
    geogebra.kernel.arithmetic.Parametric parametric() -> a
    geogebra.kernel.arithmetic.Equation equation() -> a
    geogebra.kernel.arithmetic.ExpressionNode expression() -> a
    geogebra.kernel.arithmetic.ExpressionNode cmdexpression() -> b
    geogebra.kernel.arithmetic.Function function() -> a
    geogebra.kernel.arithmetic.ExpressionNode functionExpressionnode() -> c
    geogebra.kernel.arithmetic.ExpressionNode expressionnode() -> d
    geogebra.kernel.arithmetic.ExpressionNode ANDterm() -> e
    geogebra.kernel.arithmetic.ExpressionNode COMPAREterm() -> f
    geogebra.kernel.arithmetic.ExpressionNode plusminusnode() -> g
    geogebra.kernel.arithmetic.ExpressionNode enterm() -> h
    geogebra.kernel.arithmetic.ExpressionNode enunary() -> i
    geogebra.kernel.arithmetic.ExpressionNode enpower() -> j
    geogebra.kernel.arithmetic.ExpressionNode enfactorial() -> k
    geogebra.kernel.arithmetic.ExpressionNode NOTterm() -> l
    geogebra.kernel.arithmetic.ExpressionNode enelement() -> m
    geogebra.kernel.arithmetic.ExpressionValue list() -> a
    geogebra.kernel.arithmetic.ExpressionNode numVecVariable() -> n
    geogebra.kernel.arithmetic.MyDouble myDouble() -> a
    geogebra.kernel.arithmetic.ExpressionNode numberFunction() -> o
    geogebra.kernel.arithmetic.VectorValue cartesianvector() -> a
    geogebra.kernel.arithmetic.VectorValue polarvector() -> b
    geogebra.kernel.arithmetic.ExpressionNode cartesianvector_special() -> p
    geogebra.kernel.arithmetic.ExpressionNode polarvector_special() -> q
    boolean jj_2_1(int) -> a
    boolean jj_2_2(int) -> b
    boolean jj_2_3(int) -> c
    boolean jj_2_4(int) -> d
    boolean jj_2_5(int) -> e
    boolean jj_2_6(int) -> f
    boolean jj_2_7(int) -> g
    boolean jj_2_8(int) -> h
    boolean jj_2_9(int) -> i
    boolean jj_2_10(int) -> j
    boolean jj_2_11(int) -> k
    boolean jj_2_12(int) -> l
    boolean jj_2_13(int) -> m
    boolean jj_2_14(int) -> n
    boolean jj_2_15(int) -> o
    boolean jj_2_16(int) -> p
    boolean jj_2_17(int) -> q
    boolean jj_2_18(int) -> r
    boolean jj_2_19(int) -> s
    boolean jj_2_20(int) -> t
    boolean jj_2_21(int) -> u
    boolean jj_2_22(int) -> v
    boolean jj_3R_44() -> a
    boolean jj_3R_43() -> b
    boolean jj_3R_10() -> c
    boolean jj_3_14() -> d
    boolean jj_3R_42() -> e
    boolean jj_3R_80() -> f
    boolean jj_3R_41() -> g
    boolean jj_3R_104() -> h
    boolean jj_3R_103() -> i
    boolean jj_3R_77() -> j
    boolean jj_3R_17() -> k
    boolean jj_3R_40() -> l
    boolean jj_3R_102() -> m
    boolean jj_3R_101() -> n
    boolean jj_3R_39() -> o
    boolean jj_3R_38() -> p
    boolean jj_3R_88() -> q
    boolean jj_3R_37() -> r
    boolean jj_3R_11() -> s
    boolean jj_3R_36() -> t
    boolean jj_3R_87() -> u
    boolean jj_3R_35() -> v
    boolean jj_3R_34() -> w
    boolean jj_3R_19() -> x
    boolean jj_3_11() -> y
    boolean jj_3R_33() -> z
    boolean jj_3R_100() -> A
    boolean jj_3R_20() -> B
    boolean jj_3R_32() -> C
    boolean jj_3R_86() -> D
    boolean jj_3R_99() -> E
    boolean jj_3R_96() -> F
    boolean jj_3_10() -> G
    boolean jj_3_13() -> H
    boolean jj_3R_85() -> I
    boolean jj_3R_113() -> J
    boolean jj_3R_18() -> K
    boolean jj_3_9() -> L
    boolean jj_3R_84() -> M
    boolean jj_3_8() -> N
    boolean jj_3R_97() -> O
    boolean jj_3R_89() -> P
    boolean jj_3R_15() -> Q
    boolean jj_3R_83() -> R
    boolean jj_3R_112() -> S
    boolean jj_3R_111() -> T
    boolean jj_3R_82() -> U
    boolean jj_3_7() -> V
    boolean jj_3R_110() -> W
    boolean jj_3R_81() -> X
    boolean jj_3R_78() -> Y
    boolean jj_3R_24() -> Z
    boolean jj_3R_67() -> aa
    boolean jj_3R_109() -> ab
    boolean jj_3_6() -> ac
    boolean jj_3_12() -> ad
    boolean jj_3_2() -> ae
    boolean jj_3R_25() -> af
    boolean jj_3_5() -> ag
    boolean jj_3_1() -> ah
    boolean jj_3R_108() -> ai
    boolean jj_3_4() -> aj
    boolean jj_3R_64() -> ak
    boolean jj_3_22() -> al
    boolean jj_3_3() -> am
    boolean jj_3R_98() -> an
    boolean jj_3R_23() -> ao
    boolean jj_3R_95() -> ap
    boolean jj_3R_68() -> aq
    boolean jj_3R_107() -> ar
    boolean jj_3R_106() -> as
    boolean jj_3R_27() -> at
    boolean jj_3R_94() -> au
    boolean jj_3R_13() -> av
    boolean jj_3R_93() -> aw
    boolean jj_3R_92() -> ax
    boolean jj_3R_62() -> ay
    boolean jj_3R_61() -> az
    boolean jj_3R_28() -> aA
    boolean jj_3R_91() -> aB
    boolean jj_3R_14() -> aC
    boolean jj_3R_60() -> aD
    boolean jj_3R_21() -> aE
    boolean jj_3R_90() -> aF
    boolean jj_3R_79() -> aG
    boolean jj_3R_71() -> aH
    boolean jj_3R_74() -> aI
    boolean jj_3R_59() -> aJ
    boolean jj_3R_63() -> aK
    boolean jj_3R_73() -> aL
    boolean jj_3R_72() -> aM
    boolean jj_3R_65() -> aN
    boolean jj_3R_22() -> aO
    boolean jj_3_21() -> aP
    boolean jj_3R_12() -> aQ
    boolean jj_3R_58() -> aR
    boolean jj_3R_57() -> aS
    boolean jj_3R_56() -> aT
    boolean jj_3R_105() -> aU
    boolean jj_3R_55() -> aV
    boolean jj_3R_54() -> aW
    boolean jj_3R_76() -> aX
    boolean jj_3R_53() -> aY
    boolean jj_3R_70() -> aZ
    boolean jj_3_20() -> ba
    boolean jj_3R_52() -> bb
    boolean jj_3R_51() -> bc
    boolean jj_3_19() -> bd
    boolean jj_3R_49() -> be
    boolean jj_3R_75() -> bf
    boolean jj_3R_66() -> bg
    boolean jj_3R_50() -> bh
    boolean jj_3R_69() -> bi
    boolean jj_3R_48() -> bj
    boolean jj_3R_26() -> bk
    boolean jj_3R_30() -> bl
    boolean jj_3_18() -> bm
    boolean jj_3_17() -> bn
    boolean jj_3R_47() -> bo
    boolean jj_3R_29() -> bp
    boolean jj_3R_46() -> bq
    boolean jj_3R_16() -> br
    boolean jj_3_16() -> bs
    boolean jj_3_15() -> bt
    boolean jj_3R_45() -> bu
    boolean jj_3R_31() -> bv
    void jj_la1_0() -> a
    void jj_la1_1() -> b
    void jj_la1_2() -> c
    void ReInit(java.io.Reader) -> a
    geogebra.algebra.parser.Token jj_consume_token(int) -> a
    boolean jj_scan_token(int) -> w
    int jj_ntk() -> a
    void jj_add_error_token(int,int) -> a
    geogebra.algebra.parser.ParseException generateParseException() -> a
    void jj_rescan_token() -> d
    void jj_save(int,int) -> b
geogebra.algebra.parser.Parser$JJCalls -> geogebra.c.b.c:
    int gen -> a
    geogebra.algebra.parser.Token first -> a
    int arg -> b
    geogebra.algebra.parser.Parser$JJCalls next -> a
geogebra.algebra.parser.Parser$LookaheadSuccess -> geogebra.c.b.h:
geogebra.algebra.parser.ParserConstants -> geogebra.c.b.a:
    java.lang.String[] tokenImage -> a
geogebra.algebra.parser.ParserTokenManager -> geogebra.c.b.i:
    java.io.PrintStream debugStream -> a
    long[] jjbitVec0 -> a
    long[] jjbitVec1 -> b
    long[] jjbitVec2 -> c
    long[] jjbitVec3 -> d
    long[] jjbitVec4 -> e
    long[] jjbitVec5 -> f
    long[] jjbitVec6 -> g
    long[] jjbitVec7 -> h
    long[] jjbitVec8 -> i
    long[] jjbitVec9 -> j
    long[] jjbitVec10 -> k
    long[] jjbitVec11 -> l
    long[] jjbitVec13 -> m
    long[] jjbitVec14 -> n
    long[] jjbitVec15 -> o
    long[] jjbitVec16 -> p
    long[] jjbitVec17 -> q
    long[] jjbitVec18 -> r
    long[] jjbitVec19 -> s
    long[] jjbitVec20 -> t
    long[] jjbitVec21 -> u
    long[] jjbitVec22 -> v
    long[] jjbitVec23 -> w
    long[] jjbitVec24 -> x
    long[] jjbitVec25 -> y
    long[] jjbitVec26 -> z
    long[] jjbitVec27 -> A
    long[] jjbitVec28 -> B
    long[] jjbitVec29 -> C
    long[] jjbitVec30 -> D
    long[] jjbitVec31 -> E
    long[] jjbitVec32 -> F
    long[] jjbitVec33 -> G
    long[] jjbitVec34 -> H
    long[] jjbitVec35 -> I
    long[] jjbitVec36 -> J
    long[] jjbitVec37 -> K
    int[] jjnextStates -> a
    java.lang.String[] jjstrLiteralImages -> b
    java.lang.String[] lexStateNames -> c
    long[] jjtoToken -> L
    long[] jjtoSkip -> M
    geogebra.algebra.parser.SimpleCharStream input_stream -> a
    int[] jjrounds -> b
    int[] jjstateSet -> c
    char curChar -> a
    int curLexState -> a
    int defaultLexState -> b
    int jjnewStateCnt -> c
    int jjround -> d
    int jjmatchedPos -> e
    int jjmatchedKind -> f
    int jjStopStringLiteralDfa_0(int,long,long) -> a
    int jjStartNfa_0(int,long,long) -> b
    int jjStopAtPos(int,int) -> a
    int jjStartNfaWithStates_0(int,int,int) -> a
    int jjMoveStringLiteralDfa0_0() -> a
    int jjMoveStringLiteralDfa1_0(long,long) -> a
    int jjMoveStringLiteralDfa2_0(long,long,long,long) -> a
    int jjMoveStringLiteralDfa3_0(long,long,long,long) -> b
    int jjMoveStringLiteralDfa4_0(long,long) -> b
    int jjMoveStringLiteralDfa5_0(long,long) -> c
    int jjMoveStringLiteralDfa6_0(long,long) -> d
    int jjMoveStringLiteralDfa7_0(long,long) -> e
    void jjCheckNAdd(int) -> a
    void jjAddStates(int,int) -> a
    void jjCheckNAddTwoStates(int,int) -> b
    void jjCheckNAddStates(int,int) -> c
    int jjMoveNfa_0(int,int) -> b
    boolean jjCanMove_0(int,int,int,long,long) -> a
    boolean jjCanMove_1(int,int,int,long,long) -> b
    boolean jjCanMove_2(int,int,int,long,long) -> c
    boolean jjCanMove_3(int,int,int,long,long) -> d
    boolean jjCanMove_4(int,int,int,long,long) -> e
    boolean jjCanMove_5(int,int,int,long,long) -> f
    boolean jjCanMove_6(int,int,int,long,long) -> g
    boolean jjCanMove_7(int,int,int,long,long) -> h
    boolean jjCanMove_8(int,int,int,long,long) -> i
    boolean jjCanMove_9(int,int,int,long,long) -> j
    boolean jjCanMove_10(int,int,int,long,long) -> k
    boolean jjCanMove_11(int,int,int,long,long) -> l
    boolean jjCanMove_12(int,int,int,long,long) -> m
    void ReInit(geogebra.algebra.parser.SimpleCharStream) -> a
    void ReInitRounds() -> a
    geogebra.algebra.parser.Token jjFillToken() -> a
    geogebra.algebra.parser.Token getNextToken() -> b
geogebra.algebra.parser.SimpleCharStream -> geogebra.c.b.e:
    int bufsize -> a
    int available -> b
    int tokenBegin -> c
    int bufpos -> d
    int[] bufline -> a
    int[] bufcolumn -> b
    int column -> e
    int line -> f
    boolean prevCharIsCR -> a
    boolean prevCharIsLF -> b
    java.io.Reader inputStream -> a
    char[] buffer -> a
    int maxNextCharInd -> g
    int inBuf -> h
    int tabSize -> i
    void ExpandBuff(boolean) -> a
    void FillBuff() -> a
    char BeginToken() -> a
    void UpdateLineColumn(char) -> a
    char readChar() -> b
    int getEndColumn() -> a
    int getEndLine() -> b
    int getBeginColumn() -> c
    int getBeginLine() -> d
    void backup(int) -> a
    void ReInit(java.io.Reader,int,int,int) -> a
    void ReInit(java.io.Reader,int,int) -> a
    java.lang.String GetImage() -> a
geogebra.algebra.parser.Token -> geogebra.c.b.g:
    int kind -> a
    int beginLine -> b
    int beginColumn -> c
    int endLine -> d
    int endColumn -> e
    java.lang.String image -> a
    geogebra.algebra.parser.Token next -> a
    java.lang.String toString() -> toString
    geogebra.algebra.parser.Token newToken(int) -> a
geogebra.algebra.parser.TokenMgrError -> geogebra.c.b.d:
    int errorCode -> a
    java.lang.String addEscapes(java.lang.String) -> a
    java.lang.String LexicalError(boolean,int,int,int,java.lang.String,char) -> a
    java.lang.String getMessage() -> getMessage
geogebra.cas.GeoGebraCAS -> geogebra.cas.GeoGebraCAS:
    yacas.YacasInterpreter yacas -> a
    jasymca.GeoGebraJasymca ggbJasymca -> a
    java.lang.StringBuffer sbInsertSpecial -> a
    java.lang.StringBuffer sbRemoveSpecial -> b
    java.lang.String evaluateJASYMCA(java.lang.String) -> a
    java.lang.String[] getPolynomialCoeffs(java.lang.String,java.lang.String) -> a
    java.lang.String evaluateYACAS(java.lang.String) -> b
    java.lang.String evaluateYACASRaw(java.lang.String) -> c
    java.lang.String removeSpecialChars(java.lang.String) -> d
    java.lang.String insertSpecialChars(java.lang.String) -> e
    void main(java.lang.String[]) -> main
    java.lang.String readLine(java.io.InputStream) -> a
geogebra.euclidian.DrawAngle -> geogebra.a.s:
    geogebra.kernel.GeoAngle angle -> a
    geogebra.kernel.GeoPoint vertex -> a
    geogebra.kernel.GeoPoint point -> b
    geogebra.kernel.GeoLine line -> a
    geogebra.kernel.GeoLine line2 -> b
    geogebra.kernel.GeoVector vector -> a
    boolean isVisible -> a
    boolean labelVisible -> b
    boolean show90degrees -> c
    int angleDrawMode -> d
    java.awt.geom.Arc2D$Double drawArc -> a
    java.awt.geom.GeneralPath polygon -> a
    java.awt.geom.Ellipse2D$Double dot90degree -> a
    java.awt.Shape shape -> c
    double[] m -> a
    double[] coords -> b
    double[] firstVec -> c
    geogebra.kernel.GeoPoint tempPoint -> c
    boolean drawDot -> d
    geogebra.kernel.Kernel kernel -> a
    java.awt.Shape shapeArc1 -> d
    java.awt.Shape shapeArc2 -> e
    java.awt.geom.Arc2D$Double decoArc -> b
    java.awt.geom.Line2D$Double[] tick -> a
    double[] angleTick -> d
    double MAX_TICK_DISTANCE -> a
    java.awt.geom.GeneralPath square -> b
    void update() -> a
    void draw(java.awt.Graphics2D) -> a
    void updateTick(double,int,int) -> a
    boolean hit(int,int) -> a
    boolean isInside(java.awt.Rectangle) -> a
    geogebra.kernel.GeoElement getGeoElement() -> a
geogebra.euclidian.DrawBoolean -> geogebra.a.E:
    geogebra.kernel.GeoBoolean geoBool -> a
    boolean isVisible -> a
    javax.swing.JCheckBox checkBox -> a
    boolean hit -> b
    java.lang.String oldCaption -> b
    geogebra.euclidian.DrawBoolean$BooleanCheckBoxListener cbl -> a
    void update() -> a
    void draw(java.awt.Graphics2D) -> a
    void remove() -> b
    boolean hit(int,int) -> a
    boolean isInside(java.awt.Rectangle) -> a
    boolean hitLabel(int,int) -> b
    geogebra.kernel.GeoElement getGeoElement() -> a
    javax.swing.JCheckBox access$0(geogebra.euclidian.DrawBoolean) -> a
    geogebra.kernel.GeoBoolean access$1(geogebra.euclidian.DrawBoolean) -> a
    void access$2(geogebra.euclidian.DrawBoolean,boolean) -> a
geogebra.euclidian.DrawBoolean$BooleanCheckBoxListener -> geogebra.a.h:
    boolean dragging -> a
    geogebra.euclidian.EuclidianController ec -> a
    geogebra.euclidian.DrawBoolean this$0 -> a
    void itemStateChanged(java.awt.event.ItemEvent) -> itemStateChanged
    void mouseDragged(java.awt.event.MouseEvent) -> mouseDragged
    void mouseMoved(java.awt.event.MouseEvent) -> mouseMoved
    void mouseClicked(java.awt.event.MouseEvent) -> mouseClicked
    void mousePressed(java.awt.event.MouseEvent) -> mousePressed
    void mouseReleased(java.awt.event.MouseEvent) -> mouseReleased
    void mouseEntered(java.awt.event.MouseEvent) -> mouseEntered
    void mouseExited(java.awt.event.MouseEvent) -> mouseExited
geogebra.euclidian.DrawBoolean$CheckBoxIcon -> geogebra.a.K:
    geogebra.euclidian.EuclidianView ev -> a
    void paintIcon(java.awt.Component,java.awt.Graphics,int,int) -> paintIcon
    int getIconWidth() -> getIconWidth
    int getIconHeight() -> getIconHeight
geogebra.euclidian.DrawConic -> geogebra.a.i:
    geogebra.kernel.GeoConic conic -> a
    boolean isVisible -> i
    boolean labelVisible -> j
    int type -> d
    double[] labelCoords -> a
    boolean firstPoint -> a
    geogebra.kernel.GeoPoint point -> a
    geogebra.euclidian.DrawPoint drawPoint -> a
    boolean firstLines -> b
    geogebra.kernel.GeoLine[] lines -> a
    geogebra.euclidian.DrawLine[] drawLines -> a
    boolean firstCircle -> c
    geogebra.kernel.GeoVec2D midpoint -> a
    java.awt.geom.Arc2D$Double arc -> a
    java.awt.geom.GeneralPath arcFiller -> a
    java.awt.geom.GeneralPath gp -> b
    java.awt.geom.RectangularShape circle -> a
    double mx -> a
    double my -> b
    double radius -> c
    double yradius -> d
    double angSt -> e
    double angEnd -> f
    java.awt.geom.AffineTransform conicTransform -> a
    java.awt.geom.AffineTransform transform -> b
    java.awt.Shape shape -> c
    boolean firstEllipse -> d
    double[] halfAxes -> b
    java.awt.geom.Ellipse2D$Double ellipse -> a
    boolean firstParabola -> e
    double x0 -> g
    double y0 -> h
    int i -> e
    int k2 -> f
    geogebra.kernel.GeoVec2D vertex -> b
    java.awt.geom.QuadCurve2D$Double parabola -> a
    double[] parpoints -> c
    boolean firstHyperbola -> f
    double a -> i
    double b -> j
    double tsq -> k
    double step -> l
    double t -> m
    double denom -> n
    double x -> o
    double y -> p
    int index0 -> g
    int index1 -> h
    int n -> i
    int points -> j
    geogebra.euclidian.Polyline hypLeft -> a
    geogebra.euclidian.Polyline hypRight -> b
    boolean hypLeftOnScreen -> k
    boolean hypRightOnScreen -> l
    java.util.ArrayList prevPoints -> a
    geogebra.kernel.GeoPoint[] previewTempPoints -> a
    int previewMode -> k
    int neededPrevPoints -> l
    void initConic(geogebra.kernel.GeoConic) -> a
    void update() -> a
    void updateSinglePoint() -> d
    void updateLines() -> e
    void updateCircle() -> f
    void updateEllipse() -> g
    void updateHyperbola() -> h
    void updateParabola() -> i
    void draw(java.awt.Graphics2D) -> a
    void drawTrace(java.awt.Graphics2D) -> c
    boolean hit(int,int) -> a
    boolean isInside(java.awt.Rectangle) -> a
    geogebra.kernel.GeoElement getGeoElement() -> a
    void initPreview() -> j
    void updatePreview() -> b
    void updateMousePos(int,int) -> a
    void drawPreview(java.awt.Graphics2D) -> b
    void disposePreview() -> c
geogebra.euclidian.DrawConicPart -> geogebra.a.f:
    geogebra.kernel.GeoConicPart conicPart -> a
    boolean isVisible -> a
    boolean labelVisible -> b
    java.awt.geom.Arc2D$Double arc -> a
    java.awt.Shape shape -> c
    double[] halfAxes -> a
    int closure -> d
    int draw_type -> e
    java.awt.geom.AffineTransform transform -> a
    geogebra.euclidian.DrawRay drawRay1 -> a
    geogebra.euclidian.DrawRay drawRay2 -> b
    geogebra.euclidian.DrawSegment drawSegment -> a
    double[] coords -> b
    java.util.ArrayList prevPoints -> a
    geogebra.kernel.GeoPoint[] previewTempPoints -> a
    int previewMode -> f
    int neededPrevPoints -> g
    void initConicPart(geogebra.kernel.GeoConicPart) -> a
    void update() -> a
    void updateEllipse() -> d
    void updateParallelLines() -> e
    void draw(java.awt.Graphics2D) -> a
    void drawTrace(java.awt.Graphics2D) -> c
    void initPreview() -> f
    void updatePreview() -> b
    void updateMousePos(int,int) -> a
    void drawPreview(java.awt.Graphics2D) -> b
    void disposePreview() -> c
    boolean hit(int,int) -> a
    boolean isInside(java.awt.Rectangle) -> a
    boolean hitLabel(int,int) -> b
    geogebra.kernel.GeoElement getGeoElement() -> a
geogebra.euclidian.DrawImage -> geogebra.a.c:
    geogebra.kernel.GeoImage geoImage -> a
    boolean isVisible -> a
    java.awt.Image image -> a
    boolean absoluteLocation -> b
    java.awt.AlphaComposite alphaComp -> a
    float alpha -> a
    boolean isInBackground -> c
    java.awt.geom.AffineTransform at -> a
    java.awt.geom.AffineTransform atInverse -> b
    java.awt.geom.AffineTransform tempAT -> c
    int screenX -> d
    int screenY -> e
    java.awt.Rectangle boundingBox -> b
    double[] hitCoords -> a
    void update() -> a
    void draw(java.awt.Graphics2D) -> a
    boolean hit(int,int) -> a
    boolean isInside(java.awt.Rectangle) -> a
    boolean hitLabel(int,int) -> b
    geogebra.kernel.GeoElement getGeoElement() -> a
geogebra.euclidian.DrawIntegral -> geogebra.a.x:
    geogebra.kernel.GeoNumeric n -> a
    geogebra.kernel.GeoFunction f -> a
    geogebra.kernel.arithmetic.NumberValue a -> a
    geogebra.kernel.arithmetic.NumberValue b -> b
    java.awt.geom.GeneralPath gp -> a
    boolean isVisible -> a
    boolean labelVisible -> b
    void update() -> a
    void draw(java.awt.Graphics2D) -> a
    boolean hit(int,int) -> a
    boolean isInside(java.awt.Rectangle) -> a
    geogebra.kernel.GeoElement getGeoElement() -> a
geogebra.euclidian.DrawIntegralFunctions -> geogebra.a.v:
    geogebra.kernel.GeoNumeric n -> a
    geogebra.kernel.GeoFunction f -> a
    geogebra.kernel.GeoFunction g -> b
    geogebra.kernel.arithmetic.NumberValue a -> a
    geogebra.kernel.arithmetic.NumberValue b -> b
    java.awt.geom.GeneralPath gp -> a
    boolean isVisible -> a
    boolean labelVisible -> b
    void update() -> a
    void draw(java.awt.Graphics2D) -> a
    boolean hit(int,int) -> a
    boolean isInside(java.awt.Rectangle) -> a
    geogebra.kernel.GeoElement getGeoElement() -> a
geogebra.euclidian.DrawLine -> geogebra.a.w:
    geogebra.kernel.GeoLine g -> a
    java.awt.geom.Line2D$Float line -> a
    double y1 -> a
    double y2 -> b
    double x1 -> c
    double x2 -> d
    double k -> e
    double d -> f
    double gx -> g
    double gy -> h
    double gz -> i
    int labelPos -> d
    int p1Pos -> e
    int p2Pos -> f
    int x -> g
    int y -> h
    boolean isVisible -> a
    boolean labelVisible -> b
    java.util.ArrayList points -> a
    geogebra.kernel.GeoPoint startPoint -> a
    boolean[] attr1 -> a
    boolean[] attr2 -> b
    void update() -> a
    void setClippedLine() -> d
    void clipTopBottom() -> e
    void clipLeftRight() -> f
    void setLabelPosition() -> g
    void draw(java.awt.Graphics2D) -> a
    void drawTrace(java.awt.Graphics2D) -> c
    void updatePreview() -> b
    void updateMousePos(int,int) -> a
    void drawPreview(java.awt.Graphics2D) -> b
    void disposePreview() -> c
    boolean hit(int,int) -> a
    boolean isInside(java.awt.Rectangle) -> a
    geogebra.kernel.GeoElement getGeoElement() -> a
    void setGeoElement(geogebra.kernel.GeoElement) -> a
geogebra.euclidian.DrawList -> geogebra.a.t:
    geogebra.kernel.GeoList geoList -> a
    java.util.ArrayList drawables -> a
    boolean isVisible -> a
    void update() -> a
    geogebra.euclidian.Drawable getDrawable(geogebra.kernel.GeoElement) -> a
    void draw(java.awt.Graphics2D) -> a
    boolean hit(int,int) -> a
    boolean isInside(java.awt.Rectangle) -> a
    geogebra.kernel.GeoElement getGeoElement() -> a
geogebra.euclidian.DrawLocus -> geogebra.a.m:
    geogebra.kernel.GeoLocus locus -> a
    boolean isVisible -> a
    boolean labelVisible -> b
    java.awt.geom.GeneralPath gp -> a
    double[] lastPointCoords -> a
    void update() -> a
    void buildGeneralPath(java.util.ArrayList) -> a
    void draw(java.awt.Graphics2D) -> a
    boolean hit(int,int) -> a
    boolean isInside(java.awt.Rectangle) -> a
    geogebra.kernel.GeoElement getGeoElement() -> a
geogebra.euclidian.DrawParametricCurve -> geogebra.a.D:
    long countEvaluations -> a
    geogebra.kernel.ParametricCurve curve -> a
    java.awt.geom.GeneralPath gp -> a
    boolean isVisible -> a
    boolean labelVisible -> b
    int countPoints -> d
    void update() -> a
    java.awt.Point plotCurve(geogebra.kernel.ParametricCurve,double,double,geogebra.euclidian.EuclidianView,java.awt.geom.GeneralPath,boolean,boolean) -> a
    boolean tooCloseOnScreen(geogebra.euclidian.EuclidianView,geogebra.kernel.GeoVec2D,geogebra.kernel.GeoVec2D) -> a
    java.awt.Point plotClosedCurve(geogebra.kernel.ParametricCurve,double,double,int,geogebra.euclidian.EuclidianView,java.awt.geom.GeneralPath,boolean,boolean,geogebra.kernel.GeoVec2D) -> a
    java.awt.Point splitAndPlotInterval(int,geogebra.kernel.ParametricCurve,double,double,geogebra.euclidian.EuclidianView,java.awt.geom.GeneralPath,boolean,boolean) -> a
    java.awt.Point plotInterval(geogebra.kernel.ParametricCurve,double,double,int,geogebra.euclidian.EuclidianView,java.awt.geom.GeneralPath,boolean,boolean) -> a
    boolean checkDistance(double,double) -> a
    boolean checkDistanceVeryLarge(double,double) -> b
    boolean checkAngle(double,double) -> c
    java.awt.Point plotProblemInterval(geogebra.kernel.ParametricCurve,double,double,int,geogebra.euclidian.EuclidianView,java.awt.geom.GeneralPath,boolean,boolean,java.awt.Point,double[]) -> a
    void getDefinedInterval(geogebra.kernel.ParametricCurve,double,double,double[]) -> a
    void moveTo(java.awt.geom.GeneralPath,double,double) -> a
    void lineTo(java.awt.geom.GeneralPath,double,double) -> b
    void drawTo(java.awt.geom.GeneralPath,double,double,boolean) -> a
    void draw(java.awt.Graphics2D) -> a
    void drawTrace(java.awt.Graphics2D) -> b
    boolean hit(int,int) -> a
    boolean isInside(java.awt.Rectangle) -> a
    geogebra.kernel.GeoElement getGeoElement() -> a
geogebra.euclidian.DrawPoint -> geogebra.a.n:
    int SELECTION_OFFSET -> d
    geogebra.kernel.GeoPoint P -> a
    int diameter -> e
    int selDiameter -> f
    int pointSize -> g
    boolean isVisible -> a
    boolean labelVisible -> b
    java.awt.geom.Ellipse2D$Double circle -> a
    java.awt.geom.Ellipse2D$Double circleSel -> b
    java.awt.geom.Line2D$Double line1 -> a
    java.awt.geom.Line2D$Double line2 -> b
    double[] coords -> a
    java.awt.BasicStroke borderStroke -> d
    java.awt.BasicStroke[] crossStrokes -> a
    void update() -> a
    void draw(java.awt.Graphics2D) -> a
    void drawTrace(java.awt.Graphics2D) -> b
    boolean hit(int,int) -> a
    boolean isInside(java.awt.Rectangle) -> a
    geogebra.kernel.GeoElement getGeoElement() -> a
    void setGeoElement(geogebra.kernel.GeoElement) -> a
geogebra.euclidian.DrawPolygon -> geogebra.a.q:
    geogebra.kernel.GeoPolygon poly -> a
    boolean isVisible -> a
    boolean labelVisible -> b
    java.awt.geom.GeneralPath gp -> a
    java.awt.geom.GeneralPath gpPreview -> b
    double[] coords -> a
    java.util.ArrayList points -> a
    void update() -> a
    void draw(java.awt.Graphics2D) -> a
    void updatePreview() -> b
    void updateMousePos(int,int) -> a
    void drawPreview(java.awt.Graphics2D) -> b
    void disposePreview() -> c
    boolean hit(int,int) -> a
    boolean isInside(java.awt.Rectangle) -> a
    geogebra.kernel.GeoElement getGeoElement() -> a
geogebra.euclidian.DrawRay -> geogebra.a.L:
    geogebra.kernel.GeoLine ray -> a
    geogebra.kernel.GeoPoint A -> a
    boolean isVisible -> a
    boolean labelVisible -> b
    java.util.ArrayList points -> a
    java.awt.geom.Line2D$Double line -> a
    double[] a -> a
    double[] v -> b
    void update() -> a
    void update(boolean) -> a
    void setClippedLine() -> d
    void draw(java.awt.Graphics2D) -> a
    void drawTrace(java.awt.Graphics2D) -> c
    void updatePreview() -> b
    void updateMousePos(int,int) -> a
    void drawPreview(java.awt.Graphics2D) -> b
    void disposePreview() -> c
    boolean hit(int,int) -> a
    boolean isInside(java.awt.Rectangle) -> a
    geogebra.kernel.GeoElement getGeoElement() -> a
    void setGeoElement(geogebra.kernel.GeoElement) -> a
geogebra.euclidian.DrawSegment -> geogebra.a.G:
    geogebra.kernel.GeoLine s -> a
    geogebra.kernel.GeoPoint A -> a
    geogebra.kernel.GeoPoint B -> b
    boolean isVisible -> a
    boolean labelVisible -> b
    java.util.ArrayList points -> a
    java.awt.geom.Line2D$Float line -> a
    double[] coordsA -> a
    double[] coordsB -> b
    java.awt.geom.Line2D$Double[] decoTicks -> a
    void update() -> a
    void draw(java.awt.Graphics2D) -> a
    void drawTrace(java.awt.Graphics2D) -> c
    void updatePreview() -> b
    void updateMousePos(int,int) -> a
    void drawPreview(java.awt.Graphics2D) -> b
    void disposePreview() -> c
    boolean hit(int,int) -> a
    boolean isInside(java.awt.Rectangle) -> a
    geogebra.kernel.GeoElement getGeoElement() -> a
    void setGeoElement(geogebra.kernel.GeoElement) -> a
geogebra.euclidian.DrawSlider -> geogebra.a.z:
    geogebra.kernel.GeoNumeric number -> a
    boolean isVisible -> a
    boolean labelVisible -> b
    double[] coordsRW -> a
    double[] coordsScreen -> b
    java.awt.geom.Line2D$Double line -> a
    geogebra.kernel.GeoPoint geoPoint -> a
    geogebra.euclidian.DrawPoint drawPoint -> a
    void update() -> a
    void draw(java.awt.Graphics2D) -> a
    boolean hit(int,int) -> a
    boolean isInside(java.awt.Rectangle) -> a
    boolean hitPoint(int,int) -> c
    boolean hitLabel(int,int) -> b
    boolean hitSlider(int,int) -> d
    geogebra.kernel.GeoElement getGeoElement() -> a
geogebra.euclidian.DrawSlope -> geogebra.a.r:
    geogebra.kernel.GeoNumeric slope -> a
    geogebra.kernel.GeoLine g -> a
    boolean isVisible -> a
    boolean labelVisible -> b
    int xLabelHor -> d
    int yLabelHor -> e
    java.lang.String horLabel -> b
    double[] coords -> a
    java.awt.geom.GeneralPath gp -> a
    geogebra.kernel.Kernel kernel -> a
    void update() -> a
    void draw(java.awt.Graphics2D) -> a
    boolean hit(int,int) -> a
    boolean isInside(java.awt.Rectangle) -> a
    geogebra.kernel.GeoElement getGeoElement() -> a
geogebra.euclidian.DrawText -> geogebra.a.b:
    geogebra.kernel.GeoText text -> a
    boolean isVisible -> a
    boolean isLaTeX -> b
    boolean serifFont -> c
    int fontSize -> d
    int fontStyle -> e
    java.awt.Font textFont -> a
    geogebra.kernel.GeoPoint loc -> a
    hoteqn.sHotEqn eqn -> a
    java.awt.Dimension eqnSize -> a
    void update() -> a
    void draw(java.awt.Graphics2D) -> a
    boolean hit(int,int) -> a
    boolean isInside(java.awt.Rectangle) -> a
    boolean hitLabel(int,int) -> b
    geogebra.kernel.GeoElement getGeoElement() -> a
    void remove() -> b
    void updateFontSize() -> a_
    void setEqnFontSize() -> d
geogebra.euclidian.DrawUpperLowerSum -> geogebra.a.g:
    geogebra.kernel.GeoNumeric sum -> a
    geogebra.kernel.arithmetic.NumberValue a -> a
    geogebra.kernel.arithmetic.NumberValue b -> b
    boolean isVisible -> a
    boolean labelVisible -> b
    geogebra.kernel.AlgoSumUpperLower algo -> a
    java.awt.geom.GeneralPath gp -> a
    double[] coords -> a
    void update() -> a
    void draw(java.awt.Graphics2D) -> a
    boolean hit(int,int) -> a
    boolean isInside(java.awt.Rectangle) -> a
    geogebra.kernel.GeoElement getGeoElement() -> a
geogebra.euclidian.DrawVector -> geogebra.a.e:
    geogebra.kernel.GeoVector v -> a
    geogebra.kernel.GeoPoint P -> a
    double x1 -> a
    double y1 -> b
    double x2 -> c
    double y2 -> d
    double length -> e
    double fx -> f
    double fy -> g
    double vx -> h
    double vy -> i
    double factor -> j
    boolean isVisible -> a
    boolean labelVisible -> b
    boolean traceDrawingNeeded -> c
    java.awt.geom.Line2D$Float line -> a
    java.awt.geom.GeneralPath gp -> a
    double[] coords -> a
    java.util.ArrayList points -> a
    void update() -> a
    void setArrow(float) -> a
    void draw(java.awt.Graphics2D) -> a
    void drawTrace(java.awt.Graphics2D) -> c
    void updatePreview() -> b
    void updateMousePos(int,int) -> a
    void drawPreview(java.awt.Graphics2D) -> b
    void disposePreview() -> c
    boolean hit(int,int) -> a
    boolean isInside(java.awt.Rectangle) -> a
    geogebra.kernel.GeoElement getGeoElement() -> a
geogebra.euclidian.Drawable -> geogebra.a.o:
    java.awt.BasicStroke objStroke -> a
    java.awt.BasicStroke selStroke -> b
    java.awt.BasicStroke decoStroke -> c
    int lineThickness -> d
    int lineType -> a
    geogebra.euclidian.EuclidianView view -> a
    geogebra.kernel.GeoElement geo -> a
    int xLabel -> b
    int yLabel -> c
    java.lang.String labelDesc -> a
    java.lang.String oldLabelDesc -> b
    boolean labelHasIndex -> a
    java.awt.Rectangle labelRectangle -> a
    java.awt.Shape strokedShape -> a
    java.awt.Shape strokedShape2 -> b
    boolean isTracing -> g
    boolean createdByDrawList -> h
    void update() -> a
    void draw(java.awt.Graphics2D) -> a
    boolean hit(int,int) -> a
    boolean isInside(java.awt.Rectangle) -> a
    geogebra.kernel.GeoElement getGeoElement() -> a
    double getxLabel() -> a
    double getyLabel() -> b
    void updateFontSize() -> a_
    void drawLabel(java.awt.Graphics2D) -> d
    void drawMultilineText(java.awt.Graphics2D) -> e
    java.awt.Point drawIndexedString(java.awt.Graphics2D,java.lang.String,float,float) -> a
    java.awt.Font getIndexFont(java.awt.Font) -> a
    boolean addLabelOffset() -> a
    boolean hitLabel(int,int) -> b
    void updateStrokes(geogebra.kernel.GeoElement) -> b
    void drawGeneralPath(java.awt.Shape,java.awt.Graphics2D) -> a
    void fillGeneralPath(java.awt.Shape,java.awt.Graphics2D) -> b
geogebra.euclidian.DrawableList -> geogebra.a.a:
    geogebra.euclidian.DrawableList$Link head -> a
    geogebra.euclidian.DrawableList$Link tail -> b
    int size -> a
    int size() -> a
    void add(geogebra.euclidian.Drawable) -> a
    void addUnique(geogebra.euclidian.Drawable) -> b
    boolean contains(geogebra.euclidian.Drawable) -> a
    void remove(geogebra.euclidian.Drawable) -> c
    void drawAll(java.awt.Graphics2D) -> a
    void updateAll() -> a
    void updateFontSizeAll() -> b
    void clear() -> c
    geogebra.euclidian.DrawableList$DrawableIterator getIterator() -> a
    geogebra.euclidian.DrawableList$Link access$0(geogebra.euclidian.DrawableList) -> a
geogebra.euclidian.DrawableList$DrawableIterator -> geogebra.a.j:
    geogebra.euclidian.DrawableList$Link it -> a
    geogebra.euclidian.DrawableList this$0 -> a
    geogebra.euclidian.Drawable next() -> a
    boolean hasNext() -> a
    void reset() -> a
geogebra.euclidian.DrawableList$Link -> geogebra.a.y:
    geogebra.euclidian.Drawable d -> a
    geogebra.euclidian.DrawableList$Link next -> a
    geogebra.euclidian.DrawableList this$0 -> a
geogebra.euclidian.EuclidianController -> geogebra.a.M:
    geogebra.Application app -> a
    geogebra.kernel.Kernel kernel -> a
    geogebra.euclidian.EuclidianView view -> a
    java.awt.Point startLoc -> a
    java.awt.Point mouseLoc -> b
    java.awt.Point lastMouseLoc -> c
    double xZeroOld -> a
    double yZeroOld -> b
    double xTemp -> c
    double yTemp -> d
    java.awt.Point oldLoc -> d
    double xRW -> e
    double yRW -> f
    double xRWold -> g
    double yRWold -> h
    java.awt.geom.Point2D$Double startPoint -> a
    java.awt.Point selectionStartPoint -> e
    geogebra.kernel.GeoConic tempConic -> a
    geogebra.kernel.GeoFunction tempFunction -> a
    geogebra.kernel.GeoPoint movedGeoPoint -> a
    geogebra.kernel.GeoLine movedGeoLine -> a
    geogebra.kernel.GeoConic movedGeoConic -> b
    geogebra.kernel.GeoVector movedGeoVector -> a
    geogebra.kernel.GeoText movedGeoText -> a
    geogebra.kernel.GeoImage oldImage -> a
    geogebra.kernel.GeoImage movedGeoImage -> b
    geogebra.kernel.GeoFunction movedGeoFunction -> b
    geogebra.kernel.GeoNumeric movedGeoNumeric -> a
    geogebra.kernel.GeoBoolean movedGeoBoolean -> a
    geogebra.kernel.GeoElement movedLabelGeoElement -> a
    geogebra.kernel.GeoElement movedGeoElement -> b
    geogebra.kernel.GeoElement rotGeoElement -> c
    geogebra.kernel.GeoElement rotStartGeo -> d
    geogebra.kernel.GeoPoint rotationCenter -> b
    geogebra.kernel.arithmetic.MyDouble tempNum -> a
    double rotStartAngle -> i
    java.util.ArrayList translateableGeos -> a
    geogebra.kernel.GeoVector translationVec -> b
    java.util.ArrayList tempArrayList -> b
    java.util.ArrayList selectedPoints -> c
    java.util.ArrayList selectedLines -> d
    java.util.ArrayList selectedSegments -> e
    java.util.ArrayList selectedConics -> f
    java.util.ArrayList selectedFunctions -> g
    java.util.ArrayList selectedCurves -> h
    java.util.ArrayList selectedVectors -> i
    java.util.ArrayList selectedPolygons -> j
    java.util.ArrayList selectedGeos -> k
    java.util.LinkedList highlightedGeos -> a
    boolean selectionPreview -> a
    boolean RIGHT_CLICK -> b
    boolean TEMPORARY_MODE -> c
    boolean DONT_CLEAR_SELECTION -> d
    boolean DRAGGING_OCCURED -> e
    boolean POINT_CREATED -> f
    boolean moveModeSelectionHandled -> g
    int mode -> a
    int oldMode -> b
    int moveMode -> c
    geogebra.kernel.Macro macro -> a
    java.lang.Class[] macroInput -> a
    int DEFAULT_INITIAL_DELAY -> d
    boolean toggleModeChangedKernel -> h
    boolean altDown -> i
    double MOUSE_DRAG_MAX_DIST_SQUARE -> j
    int MAX_CONTINUITY_STEPS -> e
    java.util.ArrayList handleAddSelectedArrayList -> l
    java.lang.Class class$0 -> a
    java.lang.Class class$1 -> b
    java.lang.Class class$2 -> c
    java.lang.Class class$3 -> d
    java.lang.Class class$4 -> e
    java.lang.Class class$5 -> f
    java.lang.Class class$6 -> g
    java.lang.Class class$7 -> h
    java.lang.Class class$8 -> i
    java.lang.Class class$9 -> j
    java.lang.Class class$10 -> k
    java.lang.Class class$11 -> l
    java.lang.Class class$12 -> m
    java.lang.Class class$13 -> n
    java.lang.Class class$14 -> o
    java.lang.Class class$15 -> p
    java.lang.Class class$16 -> q
    java.lang.Class class$17 -> r
    geogebra.Application getApplication() -> a
    geogebra.kernel.Kernel getKernel() -> a
    void setView(geogebra.euclidian.EuclidianView) -> a
    void setMode(int) -> a
    void endOfMode(int) -> b
    void initNewMode(int) -> c
    void initShowMouseCoords() -> a
    void clearSelections() -> b
    void mouseClicked(java.awt.event.MouseEvent) -> mouseClicked
    void handleSelectClick(java.util.ArrayList,boolean) -> a
    void mousePressed(java.awt.event.MouseEvent) -> mousePressed
    void handleMousePressedForRotateMode() -> c
    void handleMousePressedForMoveMode(java.awt.event.MouseEvent) -> a
    void mouseDragged(java.awt.event.MouseEvent) -> mouseDragged
    boolean allowSelectionRectangle() -> a
    void handleMouseDragged(boolean) -> a
    void updateSelectionRectangle(boolean) -> b
    void mouseReleased(java.awt.event.MouseEvent) -> mouseReleased
    boolean hitResetIcon() -> b
    boolean processZoomRectangle() -> c
    void processSelectionRectangle() -> d
    void processSelectionRectangleForTransformations(java.util.ArrayList,java.lang.Class) -> a
    void mouseMoved(java.awt.event.MouseEvent) -> mouseMoved
    void doSingleHighlighting(geogebra.kernel.GeoElement) -> a
    boolean refreshHighlighting(java.util.ArrayList) -> a
    void setHighlightedGeos(boolean) -> c
    boolean processMode(java.util.ArrayList,java.awt.event.MouseEvent) -> a
    void mouseEntered(java.awt.event.MouseEvent) -> mouseEntered
    void mouseExited(java.awt.event.MouseEvent) -> mouseExited
    void initToolTipManager() -> e
    void resetToolTipManager() -> f
    void rotateObject(boolean) -> d
    void moveLabel() -> g
    void movePoint(boolean) -> e
    void moveLine(boolean) -> f
    void moveVector(boolean) -> g
    void moveVectorStartPoint(boolean) -> h
    void moveText(boolean) -> i
    void moveImage(boolean) -> j
    void moveConic(boolean) -> k
    void moveFunction(boolean) -> l
    void moveBoolean(boolean) -> m
    void moveNumeric(boolean) -> n
    void moveSlider(boolean) -> o
    void moveDependent(boolean) -> p
    void moveMultipleObjects(boolean) -> q
    void transformCoords() -> h
    void calcRWcoords() -> i
    void setMouseLocation(java.awt.event.MouseEvent) -> b
    boolean createNewPoint(java.util.ArrayList,boolean,boolean,boolean) -> a
    boolean join(java.util.ArrayList) -> b
    boolean segment(java.util.ArrayList) -> c
    boolean vector(java.util.ArrayList) -> d
    boolean ray(java.util.ArrayList) -> e
    boolean polygon(java.util.ArrayList) -> f
    boolean intersect(java.util.ArrayList) -> g
    geogebra.kernel.GeoPoint getSingleIntersectionPoint(java.util.ArrayList) -> a
    boolean parallel(java.util.ArrayList) -> h
    boolean parabola(java.util.ArrayList) -> i
    boolean orthogonal(java.util.ArrayList) -> j
    boolean midpoint(java.util.ArrayList) -> k
    boolean lineBisector(java.util.ArrayList) -> l
    boolean angularBisector(java.util.ArrayList) -> m
    boolean threePoints(java.util.ArrayList,int) -> a
    boolean angle(java.util.ArrayList) -> n
    geogebra.kernel.GeoAngle createLineAngle(geogebra.kernel.GeoLine[]) -> a
    boolean circle2(java.util.ArrayList,int) -> b
    boolean locus(java.util.ArrayList) -> o
    boolean conic5(java.util.ArrayList) -> p
    boolean relation(java.util.ArrayList) -> q
    boolean distance(java.util.ArrayList,java.awt.event.MouseEvent) -> b
    geogebra.kernel.GeoText createDistanceText(geogebra.kernel.GeoElement,geogebra.kernel.GeoElement,geogebra.kernel.GeoPoint,geogebra.kernel.GeoNumeric) -> a
    geogebra.kernel.GeoText createDynamicText(java.lang.String,geogebra.kernel.GeoElement,java.awt.Point) -> a
    java.lang.String removeUnderscores(java.lang.String) -> a
    boolean area(java.util.ArrayList,java.awt.event.MouseEvent) -> c
    java.lang.String descriptionPoints(java.lang.String,geogebra.kernel.GeoPolygon) -> a
    boolean slope(java.util.ArrayList) -> r
    boolean regularPolygon(java.util.ArrayList) -> s
    boolean showCheckBox(java.util.ArrayList) -> t
    boolean tangents(java.util.ArrayList) -> u
    boolean polarLine(java.util.ArrayList) -> v
    boolean delete(java.util.ArrayList) -> w
    boolean showHideObject(java.util.ArrayList) -> x
    boolean showHideLabel(java.util.ArrayList) -> y
    boolean copyVisualStyle(java.util.ArrayList) -> z
    boolean mirrorAtPoint(java.util.ArrayList) -> A
    void removeParentPoints(java.util.ArrayList) -> a
    boolean mirrorAtLine(java.util.ArrayList) -> B
    boolean mirrorAtCircle(java.util.ArrayList) -> C
    boolean translateByVector(java.util.ArrayList) -> D
    boolean rotateByAngle(java.util.ArrayList) -> E
    boolean dilateFromPoint(java.util.ArrayList) -> F
    boolean segmentFixed(java.util.ArrayList) -> G
    boolean compasses(java.util.ArrayList) -> H
    boolean angleFixed(java.util.ArrayList) -> I
    boolean circlePointRadius(java.util.ArrayList) -> J
    boolean vectorFromPoint(java.util.ArrayList) -> K
    boolean macro(java.util.ArrayList) -> L
    boolean geoElementSelected(java.util.ArrayList,boolean) -> a
    boolean move(java.util.ArrayList) -> M
    boolean moveRotate(java.util.ArrayList) -> N
    boolean point(java.util.ArrayList) -> O
    boolean textImage(java.util.ArrayList,int,boolean) -> a
    boolean slider() -> d
    geogebra.kernel.GeoElement[] getSelectedGeos() -> a
    geogebra.kernel.GeoPoint[] getSelectedPoints() -> a
    geogebra.kernel.GeoPolygon[] getSelectedPolygons() -> a
    geogebra.kernel.GeoLine[] getSelectedLines() -> a
    geogebra.kernel.GeoSegment[] getSelectedSegments() -> a
    geogebra.kernel.GeoVector[] getSelectedVectors() -> a
    geogebra.kernel.GeoConic[] getSelectedConics() -> a
    geogebra.kernel.GeoFunction[] getSelectedFunctions() -> a
    geogebra.kernel.GeoCurveCartesian[] getSelectedCurves() -> a
    void clearSelection(java.util.ArrayList) -> b
    int addSelectedGeo(java.util.ArrayList,int,boolean) -> a
    int handleAddSelected(java.util.ArrayList,int,boolean,java.util.ArrayList,java.lang.Class) -> a
    int addSelectedPoint(java.util.ArrayList,int,boolean) -> b
    int addSelectedLine(java.util.ArrayList,int,boolean) -> c
    int addSelectedSegment(java.util.ArrayList,int,boolean) -> d
    int addSelectedVector(java.util.ArrayList,int,boolean) -> e
    int addSelectedConic(java.util.ArrayList,int,boolean) -> f
    int addSelectedFunction(java.util.ArrayList,int,boolean) -> g
    int addSelectedCurve(java.util.ArrayList,int,boolean) -> h
    int addSelectedPolygon(java.util.ArrayList,int,boolean) -> i
    int selGeos() -> a
    int selPoints() -> b
    int selPolygons() -> c
    int selLines() -> d
    int selSegments() -> e
    int selVectors() -> f
    int selConics() -> g
    int selFunctions() -> h
    int selCurves() -> i
    int addToSelectionList(java.util.ArrayList,java.util.ArrayList,int,boolean) -> a
    int addToSelectionList(java.util.ArrayList,geogebra.kernel.GeoElement,int) -> a
    int addToHighlightedList(java.util.ArrayList,java.util.ArrayList,int) -> a
    geogebra.kernel.GeoElement chooseGeo(java.util.ArrayList) -> a
    void componentResized(java.awt.event.ComponentEvent) -> componentResized
    void componentShown(java.awt.event.ComponentEvent) -> componentShown
    void componentHidden(java.awt.event.ComponentEvent) -> componentHidden
    void componentMoved(java.awt.event.ComponentEvent) -> componentMoved
    void mouseWheelMoved(java.awt.event.MouseWheelEvent) -> mouseWheelMoved
geogebra.euclidian.EuclidianView -> geogebra.a.p:
    int gridType -> n
    java.awt.Color colZoomRectangle -> a
    java.awt.Color colZoomRectangleFill -> b
    geogebra.euclidian.MyBasicStroke standardStroke -> a
    geogebra.euclidian.MyBasicStroke selStroke -> b
    java.awt.BasicStroke defAxesStroke -> a
    java.awt.BasicStroke boldAxesStroke -> b
    java.awt.BasicStroke axesStroke -> c
    java.awt.BasicStroke tickStroke -> d
    java.awt.BasicStroke gridStroke -> e
    java.awt.geom.Line2D$Double tempLine -> a
    java.awt.RenderingHints defRenderingHints -> a
    java.awt.Font fontPoint -> a
    java.awt.Font fontLine -> b
    java.awt.Font fontVector -> c
    java.awt.Font fontConic -> d
    java.awt.Font fontCoords -> e
    java.awt.Font fontAxes -> f
    java.awt.Font fontAngle -> g
    int fontSize -> a
    geogebra.Application app -> a
    geogebra.kernel.Kernel kernel -> a
    geogebra.euclidian.EuclidianController euclidianController -> a
    java.awt.geom.AffineTransform coordTransform -> a
    int width -> b
    int height -> c
    java.text.NumberFormat[] axesNumberFormat -> a
    java.text.NumberFormat printScaleNF -> a
    double xmin -> a
    double xmax -> b
    double ymin -> c
    double ymax -> d
    double invXscale -> e
    double invYscale -> f
    double xZero -> g
    double yZero -> h
    double xscale -> i
    double yscale -> j
    double scaleRatio -> k
    double[] AxesTickInterval -> a
    boolean showGrid -> a
    boolean antiAliasing -> b
    boolean showMouseCoords -> c
    boolean showAxesRatio -> d
    int pointCapturingMode -> d
    int rightAngleStyle -> e
    int pointStyle -> f
    int booleanSize -> g
    int mode -> h
    boolean[] showAxes -> a
    boolean[] showAxesNumbers -> b
    java.lang.String[] axesLabels -> a
    java.lang.String[] axesUnitLabels -> b
    boolean[] piAxisUnit -> c
    int[] axesTickStyles -> a
    boolean[] automaticAxesNumberingDistances -> d
    double[] axesNumberingDistances -> b
    boolean automaticGridDistance -> e
    double automaticGridDistanceFactor -> l
    double[] gridDistances -> c
    int gridLineStyle -> i
    int axesLineType -> j
    boolean gridIsBold -> f
    java.awt.Color axesColor -> c
    java.awt.Color gridColor -> d
    java.awt.Color bgColor -> e
    double printingScale -> m
    geogebra.util.FastHashMapKeyless DrawableMap -> a
    geogebra.euclidian.DrawableList allDrawableList -> a
    int MAX_LAYER_USED -> o
    geogebra.euclidian.DrawableList[] drawLayers -> a
    geogebra.euclidian.DrawableList bgImageList -> b
    geogebra.euclidian.Previewable previewDrawable -> a
    java.awt.Rectangle selectionRectangle -> a
    java.awt.image.BufferedImage bgImage -> a
    java.awt.Graphics2D bgGraphics -> a
    java.awt.Image resetImage -> a
    java.awt.Graphics2D g2Dtemp -> b
    java.lang.StringBuffer sb -> a
    java.awt.Cursor defaultCursor -> a
    int SCREEN_BORDER -> k
    java.util.ArrayList tempArrayList -> a
    java.util.ArrayList foundHits -> b
    int TEST_MOVEABLE -> l
    int TEST_ROTATEMOVEABLE -> m
    java.util.ArrayList moveableList -> c
    java.util.ArrayList topHitsList -> d
    geogebra.euclidian.EuclidianView$MyZoomer zoomer -> a
    geogebra.euclidian.EuclidianView$MyAxesRatioZoomer axesRatioZoomer -> a
    geogebra.euclidian.EuclidianView$MyMover mover -> a
    java.lang.Class class$0 -> a
    java.lang.Integer[] getLineTypes() -> a
    void updateRightAngleStyle(java.util.Locale) -> a
    void initView(boolean) -> a
    boolean hasPreferredSize() -> a
    void resetLists() -> a
    void attachView() -> b
    geogebra.kernel.Kernel getKernel() -> a
    int getPointCapturingMode() -> a
    void setPointCapturing(int) -> a
    int getGridType() -> b
    void setGridType(int) -> b
    void setBooleanSize(int) -> c
    int getBooleanSize() -> c
    void setPointStyle(int) -> d
    int getPointStyle() -> d
    void setRightAngleStyle(int) -> e
    int getRightAngleStyle() -> e
    void addBackgroundImage(geogebra.euclidian.DrawImage) -> a
    void removeBackgroundImage(geogebra.euclidian.DrawImage) -> b
    geogebra.euclidian.MyBasicStroke getDefaultStroke() -> a
    geogebra.euclidian.MyBasicStroke getDefaultSelectionStroke() -> b
    java.awt.BasicStroke getStroke(float,int) -> a
    void updateFonts() -> f
    void setAntialiasing(boolean) -> b
    void setDragCursor() -> g
    void setMoveCursor() -> h
    void setHitCursor() -> i
    void setDefaultCursor() -> j
    void initCursor() -> k
    java.awt.Cursor getCursorForImage(java.awt.Image) -> a
    void setMode(int) -> f
    int getMode() -> f
    void resetMode() -> l
    void setPreview(geogebra.euclidian.Previewable) -> a
    int toScreenCoordX(double) -> a
    int toScreenCoordY(double) -> b
    double toScreenCoordXd(double) -> a
    double toScreenCoordYd(double) -> b
    int toClippedScreenCoordX(double) -> c
    int toClippedScreenCoordY(double) -> d
    void toScreenCoords(double[]) -> a
    boolean toClippedScreenCoords(double[],int) -> a
    double toRealWorldCoordX(double) -> c
    double toRealWorldCoordY(double) -> d
    void setCoordSystem(double,double,double,double) -> a
    void setRealWorldCoordSystem(double,double,double,double) -> b
    void setCoordSystem(double,double,double,double,boolean) -> a
    void updateSize() -> m
    void setRealWorldBounds() -> n
    void calcPrintingScale() -> o
    void setAxesIntervals(double,int) -> a
    double getXscale() -> a
    double getYscale() -> b
    double getScaleRatio() -> c
    java.lang.String getXYscaleRatioString() -> a
    double getXZero() -> d
    double getYZero() -> e
    void showAxes(boolean,boolean) -> a
    boolean isGridOrAxesShown() -> b
    boolean getShowXaxis() -> c
    boolean getShowYaxis() -> d
    void showGrid(boolean) -> c
    boolean getShowGrid() -> e
    void paint(java.awt.Graphics) -> paint
    void setAntialiasing(java.awt.Graphics2D) -> a
    void drawZoomRectangle(java.awt.Graphics2D) -> b
    int print(java.awt.Graphics,java.awt.print.PageFormat,int) -> print
    void exportPaint(java.awt.Graphics2D,double) -> a
    void exportPaintPre(java.awt.Graphics2D,double) -> b
    boolean isTracing() -> f
    boolean hasBackgroundImages() -> g
    java.awt.image.BufferedImage getExportImage(double) -> a
    java.awt.image.BufferedImage createBufferedImage(int,int) -> a
    java.awt.Graphics2D getBackgroundGraphics() -> a
    void updateBackground() -> p
    void updateBackgroundImage() -> q
    void drawBackground(java.awt.Graphics2D,boolean) -> a
    void clearBackground(java.awt.Graphics2D) -> c
    void drawAxes(java.awt.Graphics2D) -> d
    void drawGrid(java.awt.Graphics2D) -> e
    void drawMouseCoords(java.awt.Graphics2D) -> f
    void drawAxesRatio(java.awt.Graphics2D) -> g
    void changeLayer(geogebra.kernel.GeoElement,int,int) -> a
    void updateMaxLayerUsed(int) -> g
    int getMaxLayerUsed() -> g
    void drawObjectsPre(java.awt.Graphics2D) -> h
    void drawObjects(java.awt.Graphics2D) -> i
    void drawGeometricObjects(java.awt.Graphics2D) -> j
    void mouseMovedOver(geogebra.kernel.GeoElement) -> f
    void clickedGeo(geogebra.kernel.GeoElement,java.awt.event.MouseEvent) -> a
    geogebra.kernel.GeoElement getLabelHit(java.awt.Point) -> a
    java.util.ArrayList getHits(java.awt.Point) -> a
    java.util.ArrayList getHitsForNewPointMode(java.util.ArrayList) -> a
    java.util.ArrayList getHits(java.awt.Point,boolean) -> a
    java.util.ArrayList getHits(java.awt.Rectangle) -> a
    java.util.ArrayList getMoveableHits(java.awt.Point) -> b
    java.util.ArrayList getMoveableHits(java.util.ArrayList) -> b
    java.util.ArrayList getPointRotateableHits(java.util.ArrayList,geogebra.kernel.GeoPoint) -> a
    java.util.ArrayList getMoveables(java.util.ArrayList,int,geogebra.kernel.GeoPoint) -> a
    java.util.ArrayList getHits(java.awt.Point,java.lang.Class,java.util.ArrayList) -> a
    java.util.ArrayList getOtherHits(java.util.ArrayList,java.lang.Class,java.util.ArrayList) -> a
    java.util.ArrayList getHits(java.util.ArrayList,java.lang.Class,java.util.ArrayList) -> b
    java.util.ArrayList getHits(java.util.ArrayList,java.lang.Class,boolean,java.util.ArrayList) -> a
    java.util.ArrayList getTopHits(java.awt.Point) -> c
    java.util.ArrayList getTopHits(java.util.ArrayList) -> c
    boolean containsGeoPoint(java.util.ArrayList) -> a
    geogebra.euclidian.Drawable getDrawable(geogebra.kernel.GeoElement) -> a
    void add(geogebra.kernel.GeoElement) -> a
    geogebra.euclidian.Drawable createDrawable(geogebra.kernel.GeoElement) -> b
    void addToDrawableLists(geogebra.euclidian.Drawable) -> a
    void remove(geogebra.kernel.GeoElement) -> b
    void rename(geogebra.kernel.GeoElement) -> c
    void update(geogebra.kernel.GeoElement) -> d
    geogebra.euclidian.Drawable getDrawableFor(geogebra.kernel.GeoElement) -> c
    void updateAuxiliaryObject(geogebra.kernel.GeoElement) -> e
    void updateAllDrawables(boolean) -> d
    void updateDrawableFontSize() -> r
    void reset() -> c
    void clearView() -> d
    void repaintView() -> e
    java.lang.String getXML() -> b
    void zoom(double,double,double,int,boolean) -> a
    void zoomAxesRatio(double,boolean) -> a
    void setStandardView(boolean) -> e
    void setAnimatedCoordSystem(double,double,double,int,boolean) -> b
    double getPrintingScale() -> f
    void setPrintingScale(double) -> a
    double getXmax() -> g
    double getXmin() -> h
    double getYmax() -> i
    double getYmin() -> j
    java.awt.Color getAxesColor() -> a
    void setAxesColor(java.awt.Color) -> a
    java.lang.String[] getAxesLabels() -> a
    void setAxesLabels(java.lang.String[]) -> a
    void setAutomaticAxesNumberingDistance(boolean,int) -> a
    boolean[] isAutomaticAxesNumberingDistance() -> a
    double[] getAxesNumberingDistances() -> a
    void setAxesNumberingDistance(double,int) -> b
    java.awt.Color getBackground() -> getBackground
    void setBackground(java.awt.Color) -> setBackground
    java.awt.Color getGridColor() -> b
    boolean getGridIsBold() -> h
    void setGridIsBold(boolean) -> f
    void setGridColor(java.awt.Color) -> b
    void setAutomaticGridDistance(boolean) -> g
    boolean isAutomaticGridDistance() -> i
    double[] getGridDistances() -> b
    void setGridDistances(double[]) -> b
    int getGridLineStyle() -> h
    void setGridLineStyle(int) -> h
    int getAxesLineStyle() -> i
    void setAxesLineStyle(int) -> i
    boolean[] getShowAxesNumbers() -> b
    void setShowAxesNumbers(boolean[]) -> a
    java.lang.String[] getAxesUnitLabels() -> b
    void setAxesUnitLabels(java.lang.String[]) -> b
    int[] getAxesTickStyles() -> a
    void setAxesTickStyles(int[]) -> a
    java.lang.String getModeText(int) -> a
    int getSelectedWidth() -> j
    int getSelectedHeight() -> k
    int getExportWidth() -> l
    int getExportHeight() -> m
    java.awt.Rectangle getSelectionRectangle() -> a
    void setSelectionRectangle(java.awt.Rectangle) -> a
    geogebra.euclidian.EuclidianController getEuclidianController() -> a
    java.awt.Graphics2D getTempGraphics2D() -> b
geogebra.euclidian.EuclidianView$1 -> geogebra.a.I:
    geogebra.euclidian.EuclidianView this$0 -> a
    void run() -> run
geogebra.euclidian.EuclidianView$MyAxesRatioZoomer -> geogebra.a.F:
    javax.swing.Timer timer -> a
    double factor -> a
    int counter -> a
    double oldScale -> b
    double newScale -> c
    double add -> d
    long startTime -> a
    boolean storeUndo -> a
    geogebra.euclidian.EuclidianView this$0 -> a
    void init(double,boolean) -> a
    void startAnimation() -> a
    void stopAnimation() -> b
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
    boolean isRunning() -> a
geogebra.euclidian.EuclidianView$MyMover -> geogebra.a.k:
    double dx -> a
    double dy -> b
    double add -> c
    int counter -> a
    double ox -> d
    double oy -> e
    javax.swing.Timer timer -> a
    long startTime -> a
    boolean storeUndo -> a
    geogebra.euclidian.EuclidianView this$0 -> a
    void init(double,double,boolean) -> a
    void startAnimation() -> a
    void stopAnimation() -> b
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
geogebra.euclidian.EuclidianView$MyZoomer -> geogebra.a.J:
    javax.swing.Timer timer -> a
    double px -> a
    double py -> b
    double factor -> c
    int counter -> a
    int steps -> b
    double oldScale -> d
    double newScale -> e
    double add -> f
    double dx -> g
    double dy -> h
    long startTime -> a
    boolean storeUndo -> a
    geogebra.euclidian.EuclidianView this$0 -> a
    void init(double,double,double,int,boolean) -> a
    void startAnimation() -> a
    void stopAnimation() -> b
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
geogebra.euclidian.ListDialog -> geogebra.a.l:
    geogebra.kernel.GeoElement value -> a
    javax.swing.JList list -> a
    javax.swing.DefaultListModel listModel -> a
    geogebra.kernel.GeoElement showDialog(java.awt.Component,java.awt.Point) -> a
    void setValue(geogebra.kernel.GeoElement) -> a
    javax.swing.DefaultListModel access$0(geogebra.euclidian.ListDialog) -> a
    javax.swing.JList access$1(geogebra.euclidian.ListDialog) -> a
    void access$2(geogebra.euclidian.ListDialog,geogebra.kernel.GeoElement) -> a
geogebra.euclidian.ListDialog$1 -> geogebra.a.C:
    geogebra.euclidian.ListDialog this$0 -> a
    int val$lineHeight -> a
    void mouseMoved(java.awt.event.MouseEvent) -> mouseMoved
geogebra.euclidian.ListDialog$2 -> geogebra.a.B:
    geogebra.euclidian.ListDialog this$0 -> a
    void mouseClicked(java.awt.event.MouseEvent) -> mouseClicked
geogebra.euclidian.ListDialog$GeoLabel -> geogebra.a.u:
    geogebra.kernel.GeoElement geo -> a
    geogebra.euclidian.ListDialog this$0 -> a
    java.lang.String toString() -> toString
    geogebra.kernel.GeoElement access$0(geogebra.euclidian.ListDialog$GeoLabel) -> a
geogebra.euclidian.MyBasicStroke -> geogebra.a.H:
geogebra.euclidian.Polyline -> geogebra.a.A:
    int n -> a
    int max_capacity -> b
    double[] x -> a
    double[] y -> b
    java.awt.geom.GeneralPath gp -> a
    void setNumberOfPoints(int) -> a
    void buildGeneralPath() -> a
    void transform(java.awt.geom.AffineTransform) -> a
    void draw(java.awt.Graphics2D) -> a
    void fill(java.awt.Graphics2D) -> b
    boolean intersects(double,double,double,double) -> a
    java.awt.Shape createStrokedShape(java.awt.Stroke) -> a
geogebra.euclidian.Previewable -> geogebra.a.d:
    void updatePreview() -> b
    void updateMousePos(int,int) -> a
    void drawPreview(java.awt.Graphics2D) -> b
    void disposePreview() -> c
geogebra.export.ConstructionProtocolExportDialog -> geogebra.export.ConstructionProtocolExportDialog:
    javax.swing.JCheckBox cbDrawingPadPicture -> a
    javax.swing.JCheckBox cbScreenshotPicture -> b
    javax.swing.JCheckBox cbColor -> c
    geogebra.export.GraphicSizePanel sizePanel -> a
    boolean kernelChanged -> a
    geogebra.gui.ConstructionProtocol prot -> a
    geogebra.Application app -> a
    void initGUI() -> initGUI
    void centerOnScreen() -> centerOnScreen
    void keyPressed(java.awt.event.KeyEvent) -> keyPressed
    void keyReleased(java.awt.event.KeyEvent) -> keyReleased
    void keyTyped(java.awt.event.KeyEvent) -> keyTyped
    void exportHTML(boolean,int,boolean,boolean) -> exportHTML
    java.awt.image.BufferedImage getCenterPanelImage() -> getCenterPanelImage
    void access$0(geogebra.export.ConstructionProtocolExportDialog,boolean) -> access$0
    javax.swing.JCheckBox access$1(geogebra.export.ConstructionProtocolExportDialog) -> access$1
    geogebra.export.GraphicSizePanel access$2(geogebra.export.ConstructionProtocolExportDialog) -> access$2
    javax.swing.JCheckBox access$3(geogebra.export.ConstructionProtocolExportDialog) -> access$3
    geogebra.gui.ConstructionProtocol access$4(geogebra.export.ConstructionProtocolExportDialog) -> access$4
    javax.swing.JCheckBox access$5(geogebra.export.ConstructionProtocolExportDialog) -> access$5
    boolean access$6(geogebra.export.ConstructionProtocolExportDialog) -> access$6
    geogebra.Application access$7(geogebra.export.ConstructionProtocolExportDialog) -> access$7
    void access$8(geogebra.export.ConstructionProtocolExportDialog,boolean,int,boolean,boolean) -> access$8
geogebra.export.ConstructionProtocolExportDialog$1 -> geogebra.export.ConstructionProtocolExportDialog$1:
    geogebra.export.ConstructionProtocolExportDialog this$0 -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
geogebra.export.ConstructionProtocolExportDialog$2 -> geogebra.export.ConstructionProtocolExportDialog$2:
    geogebra.export.ConstructionProtocolExportDialog this$0 -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
geogebra.export.ConstructionProtocolExportDialog$3 -> geogebra.export.ConstructionProtocolExportDialog$3:
    geogebra.export.ConstructionProtocolExportDialog this$0 -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
geogebra.export.ConstructionProtocolExportDialog$4 -> geogebra.export.ConstructionProtocolExportDialog$4:
    geogebra.export.ConstructionProtocolExportDialog this$0 -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
geogebra.export.ConstructionProtocolExportDialog$5 -> geogebra.export.ConstructionProtocolExportDialog$5:
    geogebra.export.ConstructionProtocolExportDialog this$0 -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
geogebra.export.ConstructionProtocolExportDialog$6 -> geogebra.export.ConstructionProtocolExportDialog$6:
    geogebra.export.ConstructionProtocolExportDialog this$0 -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
    geogebra.export.ConstructionProtocolExportDialog access$0(geogebra.export.ConstructionProtocolExportDialog$6) -> access$0
geogebra.export.ConstructionProtocolExportDialog$7 -> geogebra.export.ConstructionProtocolExportDialog$7:
    geogebra.export.ConstructionProtocolExportDialog$6 this$1 -> a
    void run() -> run
geogebra.export.GraphicExportDialog -> geogebra.export.GraphicExportDialog:
    geogebra.Application app -> a
    javax.swing.JComboBox cbFormat -> a
    javax.swing.JComboBox cbDPI -> b
    javax.swing.JLabel sizeLabel -> a
    javax.swing.JButton cancelButton -> a
    double exportScale -> a
    int pixelWidth -> a
    int pixelHeight -> b
    java.text.NumberFormat sizeLabelFormat -> a
    int FORMAT_PNG -> c
    int FORMAT_PDF -> d
    int FORMAT_EPS -> e
    int FORMAT_SVG -> f
    int FORMAT_EMF -> g
    void setVisible(boolean) -> setVisible
    void initGUI() -> initGUI
    int getDPI() -> getDPI
    void loadPreferences() -> loadPreferences
    void savePreferences() -> savePreferences
    void updateSizeLabel() -> updateSizeLabel
    void centerOnScreen() -> centerOnScreen
    boolean exportEPS(boolean) -> exportEPS
    boolean exportEMF(boolean) -> exportEMF
    boolean exportPDF(boolean) -> exportPDF
    boolean exportSVG(boolean) -> exportSVG
    boolean exportPNG(boolean) -> exportPNG
    void keyPressed(java.awt.event.KeyEvent) -> keyPressed
    void keyReleased(java.awt.event.KeyEvent) -> keyReleased
    void keyTyped(java.awt.event.KeyEvent) -> keyTyped
    void sendToClipboard(java.io.File) -> sendToClipboard
    void sendToClipboard(java.awt.Image) -> sendToClipboard
    void access$0(geogebra.export.GraphicExportDialog) -> access$0
    javax.swing.JComboBox access$1(geogebra.export.GraphicExportDialog) -> access$1
    javax.swing.JComboBox access$2(geogebra.export.GraphicExportDialog) -> access$2
    boolean access$3(geogebra.export.GraphicExportDialog,boolean) -> access$3
    boolean access$4(geogebra.export.GraphicExportDialog,boolean) -> access$4
    boolean access$5(geogebra.export.GraphicExportDialog,boolean) -> access$5
    boolean access$6(geogebra.export.GraphicExportDialog,boolean) -> access$6
    boolean access$7(geogebra.export.GraphicExportDialog,boolean) -> access$7
geogebra.export.GraphicExportDialog$1 -> geogebra.export.GraphicExportDialog$1:
    geogebra.export.GraphicExportDialog this$0 -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
geogebra.export.GraphicExportDialog$2 -> geogebra.export.GraphicExportDialog$2:
    geogebra.export.GraphicExportDialog this$0 -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
geogebra.export.GraphicExportDialog$3 -> geogebra.export.GraphicExportDialog$3:
    geogebra.export.GraphicExportDialog this$0 -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
geogebra.export.GraphicExportDialog$4 -> geogebra.export.GraphicExportDialog$4:
    geogebra.export.GraphicExportDialog this$0 -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
geogebra.export.GraphicExportDialog$5 -> geogebra.export.GraphicExportDialog$5:
    geogebra.export.GraphicExportDialog this$0 -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
    geogebra.export.GraphicExportDialog access$0(geogebra.export.GraphicExportDialog$5) -> access$0
geogebra.export.GraphicExportDialog$6 -> geogebra.export.GraphicExportDialog$6:
    geogebra.export.GraphicExportDialog$5 this$1 -> a
    void run() -> run
geogebra.export.GraphicExportDialog$7 -> geogebra.export.GraphicExportDialog$7:
    geogebra.export.GraphicExportDialog this$0 -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
    geogebra.export.GraphicExportDialog access$0(geogebra.export.GraphicExportDialog$7) -> access$0
geogebra.export.GraphicExportDialog$8 -> geogebra.export.GraphicExportDialog$8:
    geogebra.export.GraphicExportDialog$7 this$1 -> a
    void run() -> run
geogebra.export.GraphicSizePanel -> geogebra.export.GraphicSizePanel:
    int width -> a
    int height -> b
    double ratio -> a
    javax.swing.JTextField tfWidth -> a
    javax.swing.JTextField tfHeight -> b
    boolean keepRatio -> a
    void setValues(int,int,boolean) -> setValues
    int getSelectedWidth() -> getSelectedWidth
    int getSelectedHeight() -> getSelectedHeight
    void setEnabled(boolean) -> setEnabled
    void updateValues(java.lang.Object) -> updateValues
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
    void focusGained(java.awt.event.FocusEvent) -> focusGained
    void focusLost(java.awt.event.FocusEvent) -> focusLost
geogebra.export.PrintPreview -> geogebra.export.PrintPreview:
    int m_orientation -> a
    int m_scale -> b
    java.awt.print.Printable m_target -> a
    javax.swing.JComboBox m_cbScale -> a
    javax.swing.JComboBox m_cbOrientation -> b
    javax.swing.JCheckBox cbEVscalePanel -> a
    javax.swing.JScrollPane ps -> a
    geogebra.export.PrintPreview$PreviewContainer m_preview -> a
    geogebra.Application app -> a
    boolean kernelChanged -> a
    java.awt.Graphics tempGraphics -> a
    void initPrintPreview(java.awt.print.Printable,int) -> initPrintPreview
    void loadPreferences() -> loadPreferences
    void savePreferences() -> savePreferences
    void setVisible(boolean) -> setVisible
    void centerOnScreen() -> centerOnScreen
    void initPages() -> initPages
    java.awt.print.PageFormat getDefaultPageFormat() -> getDefaultPageFormat
    void updatePages() -> updatePages
    boolean pageExists(int) -> pageExists
    void setOrientation(int) -> setOrientation
    void setScale(int) -> setScale
    void access$0(geogebra.export.PrintPreview,int) -> access$0
    void access$1(geogebra.export.PrintPreview,int) -> access$1
    void access$2(geogebra.export.PrintPreview) -> access$2
geogebra.export.PrintPreview$1 -> geogebra.export.PrintPreview$1:
    geogebra.export.PrintPreview this$0 -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
    geogebra.export.PrintPreview access$0(geogebra.export.PrintPreview$1) -> access$0
geogebra.export.PrintPreview$10 -> geogebra.export.PrintPreview$10:
    geogebra.export.PrintPreview this$0 -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
geogebra.export.PrintPreview$2 -> geogebra.export.PrintPreview$2:
    geogebra.export.PrintPreview$1 this$1 -> a
    void run() -> run
geogebra.export.PrintPreview$3 -> geogebra.export.PrintPreview$3:
    geogebra.export.PrintPreview this$0 -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
geogebra.export.PrintPreview$4 -> geogebra.export.PrintPreview$4:
    geogebra.export.PrintPreview this$0 -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
    geogebra.export.PrintPreview access$0(geogebra.export.PrintPreview$4) -> access$0
geogebra.export.PrintPreview$5 -> geogebra.export.PrintPreview$5:
    geogebra.export.PrintPreview$4 this$1 -> a
    void run() -> run
geogebra.export.PrintPreview$6 -> geogebra.export.PrintPreview$6:
    geogebra.export.PrintPreview this$0 -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
    geogebra.export.PrintPreview access$0(geogebra.export.PrintPreview$6) -> access$0
geogebra.export.PrintPreview$7 -> geogebra.export.PrintPreview$7:
    geogebra.export.PrintPreview$6 this$1 -> a
    void run() -> run
geogebra.export.PrintPreview$8 -> geogebra.export.PrintPreview$8:
    geogebra.export.PrintPreview this$0 -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
    geogebra.export.PrintPreview access$0(geogebra.export.PrintPreview$8) -> access$0
geogebra.export.PrintPreview$9 -> geogebra.export.PrintPreview$9:
    geogebra.export.PrintPreview$8 this$1 -> a
    void run() -> run
geogebra.export.PrintPreview$PagePreview -> geogebra.export.PrintPreview$PagePreview:
    int m_w -> a
    int m_h -> b
    java.awt.print.Printable target -> a
    java.awt.print.PageFormat format -> a
    int pageIndex -> c
    double scale -> a
    java.awt.image.BufferedImage img -> a
    geogebra.export.PrintPreview this$0 -> a
    void setPageFormat(java.awt.print.PageFormat) -> setPageFormat
    java.awt.print.PageFormat getPageFormat() -> getPageFormat
    void setScale(int) -> setScale
    java.awt.Dimension getPreferredSize() -> getPreferredSize
    java.awt.Dimension getMaximumSize() -> getMaximumSize
    java.awt.Dimension getMinimumSize() -> getMinimumSize
    void updateBufferedImage() -> updateBufferedImage
    void update() -> update
    void paint(java.awt.Graphics) -> paint
geogebra.export.PrintPreview$PreviewContainer -> geogebra.export.PrintPreview$PreviewContainer:
    int H_GAP -> a
    int V_GAP -> b
    geogebra.export.PrintPreview this$0 -> a
    java.awt.Dimension getPreferredSize() -> getPreferredSize
    java.awt.Dimension getMaximumSize() -> getMaximumSize
    java.awt.Dimension getMinimumSize() -> getMinimumSize
    void doLayout() -> doLayout
    int getNumberOfPages() -> getNumberOfPages
    java.awt.print.PageFormat getPageFormat(int) -> getPageFormat
    java.awt.print.Printable getPrintable(int) -> getPrintable
geogebra.export.PrintScalePanel -> geogebra.export.PrintScalePanel:
    javax.swing.JTextField tfScale1 -> a
    javax.swing.JTextField tfScale2 -> b
    java.util.Vector listeners -> a
    geogebra.euclidian.EuclidianView ev -> a
    java.text.NumberFormat nf -> a
    java.awt.event.ActionListener al -> a
    void updateTextFields() -> updateTextFields
    void fireTextFieldUpdate(javax.swing.JTextField) -> fireTextFieldUpdate
    void addActionListener(java.awt.event.ActionListener) -> addActionListener
    void notifyListeners() -> notifyListeners
    void access$0(geogebra.export.PrintScalePanel,javax.swing.JTextField) -> access$0
geogebra.export.PrintScalePanel$1 -> geogebra.export.PrintScalePanel$1:
    geogebra.export.PrintScalePanel this$0 -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
geogebra.export.PrintScalePanel$2 -> geogebra.export.PrintScalePanel$2:
    geogebra.export.PrintScalePanel this$0 -> a
    void focusLost(java.awt.event.FocusEvent) -> focusLost
    void focusGained(java.awt.event.FocusEvent) -> focusGained
geogebra.export.SVGExtensions -> geogebra.export.SVGExtensions:
    void startGroup(java.lang.String) -> startGroup
    void endGroup(java.lang.String) -> endGroup
geogebra.export.WorksheetExportDialog -> geogebra.export.WorksheetExportDialog:
    geogebra.Application app -> a
    geogebra.kernel.Kernel kernel -> a
    geogebra.gui.InputPanel textAbove -> a
    geogebra.gui.InputPanel textBelow -> b
    javax.swing.JCheckBox cbShowFrame -> a
    javax.swing.JCheckBox cbEnableRightClick -> b
    javax.swing.JCheckBox cbShowResetIcon -> c
    javax.swing.JCheckBox cbShowMenuBar -> d
    javax.swing.JCheckBox cbShowToolBar -> e
    javax.swing.JCheckBox cbShowToolBarHelp -> f
    javax.swing.JCheckBox cbShowInputField -> g
    javax.swing.JCheckBox cbOnlineArchive -> h
    geogebra.export.GraphicSizePanel sizePanel -> a
    boolean useWorksheet -> a
    boolean kernelChanged -> b
    javax.swing.JTabbedPane tabbedPane -> a
    void checkEuclidianView() -> checkEuclidianView
    void initGUI() -> initGUI
    void loadPreferences() -> loadPreferences
    void addHeight() -> addHeight
    void savePreferences() -> savePreferences
    javax.swing.JPanel createGeneralSettingsTab() -> createGeneralSettingsTab
    javax.swing.JPanel createAdvancedSettingsTab() -> createAdvancedSettingsTab
    void appendAppletParameters(java.lang.StringBuffer) -> appendAppletParameters
    void setVisible(boolean) -> setVisible
    void updateEnabledStates() -> updateEnabledStates
    void centerOnScreen() -> centerOnScreen
    void exportHTML() -> exportHTML
    java.lang.String getHTML(java.io.File) -> getHTML
    void access$0(geogebra.export.WorksheetExportDialog,boolean) -> access$0
    boolean access$1(geogebra.export.WorksheetExportDialog) -> access$1
    geogebra.Application access$2(geogebra.export.WorksheetExportDialog) -> access$2
    void access$3(geogebra.export.WorksheetExportDialog) -> access$3
    void access$4(geogebra.export.WorksheetExportDialog,boolean) -> access$4
    void access$5(geogebra.export.WorksheetExportDialog) -> access$5
    javax.swing.JCheckBox access$6(geogebra.export.WorksheetExportDialog) -> access$6
    javax.swing.JCheckBox access$7(geogebra.export.WorksheetExportDialog) -> access$7
    javax.swing.JCheckBox access$8(geogebra.export.WorksheetExportDialog) -> access$8
    javax.swing.JCheckBox access$9(geogebra.export.WorksheetExportDialog) -> access$9
    geogebra.export.GraphicSizePanel access$10(geogebra.export.WorksheetExportDialog) -> access$10
    javax.swing.JCheckBox access$11(geogebra.export.WorksheetExportDialog) -> access$11
geogebra.export.WorksheetExportDialog$1 -> geogebra.export.WorksheetExportDialog$1:
    geogebra.export.WorksheetExportDialog this$0 -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
geogebra.export.WorksheetExportDialog$2 -> geogebra.export.WorksheetExportDialog$2:
    geogebra.export.WorksheetExportDialog this$0 -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
geogebra.export.WorksheetExportDialog$3 -> geogebra.export.WorksheetExportDialog$3:
    geogebra.export.WorksheetExportDialog this$0 -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
    geogebra.export.WorksheetExportDialog access$0(geogebra.export.WorksheetExportDialog$3) -> access$0
geogebra.export.WorksheetExportDialog$4 -> geogebra.export.WorksheetExportDialog$4:
    geogebra.export.WorksheetExportDialog$3 this$1 -> a
    void run() -> run
geogebra.export.WorksheetExportDialog$5 -> geogebra.export.WorksheetExportDialog$5:
    geogebra.export.WorksheetExportDialog this$0 -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
geogebra.export.WorksheetExportDialog$6 -> geogebra.export.WorksheetExportDialog$6:
    geogebra.export.WorksheetExportDialog this$0 -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
geogebra.export.WorksheetExportDialog$7 -> geogebra.export.WorksheetExportDialog$7:
    geogebra.export.WorksheetExportDialog this$0 -> a
    java.io.File val$HTMLfile -> a
    void run() -> run
geogebra.export.epsgraphics.EpsDocument -> geogebra.export.a.c:
    float minX -> a
    float minY -> b
    float maxX -> c
    float maxY -> d
    boolean _isClipSet -> a
    java.lang.String _title -> a
    java.io.StringWriter _stringWriter -> a
    java.io.BufferedWriter _bufferedWriter -> a
    geogebra.export.epsgraphics.EpsGraphics2D _lastG -> a
    void updateBounds(double,double) -> a
    void append(geogebra.export.epsgraphics.EpsGraphics2D,java.lang.String) -> a
    void write(java.io.Writer) -> a
    void writeFooter(java.io.Writer) -> b
    void flush() -> a
    void close() -> b
    boolean isClipSet() -> a
    void setClipSet(boolean) -> a
geogebra.export.epsgraphics.EpsException -> geogebra.export.a.b:
geogebra.export.epsgraphics.EpsGraphics2D -> geogebra.export.a.a:
    java.awt.Color _color -> a
    java.awt.Color _backgroundColor -> b
    java.awt.Paint _paint -> a
    java.awt.Composite _composite -> a
    java.awt.BasicStroke _stroke -> a
    java.awt.Font _font -> a
    java.awt.Shape _clip -> a
    java.awt.geom.AffineTransform _clipTransform -> a
    java.awt.geom.AffineTransform _transform -> b
    boolean _accurateTextMode -> a
    int _colorDepth -> a
    geogebra.export.epsgraphics.EpsDocument _document -> a
    java.awt.font.FontRenderContext _fontRenderContext -> a
    void methodNotSupported() -> c
    boolean getAccurateTextMode() -> a
    int getColorDepth() -> a
    void flush() -> a
    void close() -> b
    void append(java.lang.String) -> a
    java.awt.geom.Point2D transform(float,float) -> a
    void draw(java.awt.Shape,java.lang.String) -> a
    java.lang.String toHexString(int) -> a
    void draw3DRect(int,int,int,int,boolean) -> draw3DRect
    void fill3DRect(int,int,int,int,boolean) -> fill3DRect
    void draw(java.awt.Shape) -> draw
    boolean drawImage(java.awt.Image,java.awt.geom.AffineTransform,java.awt.image.ImageObserver) -> drawImage
    void drawImage(java.awt.image.BufferedImage,java.awt.image.BufferedImageOp,int,int) -> drawImage
    void drawRenderedImage(java.awt.image.RenderedImage,java.awt.geom.AffineTransform) -> drawRenderedImage
    void drawRenderableImage(java.awt.image.renderable.RenderableImage,java.awt.geom.AffineTransform) -> drawRenderableImage
    void drawString(java.lang.String,int,int) -> drawString
    void drawString(java.lang.String,float,float) -> drawString
    void drawString(java.text.AttributedCharacterIterator,int,int) -> drawString
    void drawString(java.text.AttributedCharacterIterator,float,float) -> drawString
    void drawGlyphVector(java.awt.font.GlyphVector,float,float) -> drawGlyphVector
    void fill(java.awt.Shape) -> fill
    boolean hit(java.awt.Rectangle,java.awt.Shape,boolean) -> hit
    java.awt.GraphicsConfiguration getDeviceConfiguration() -> getDeviceConfiguration
    void setComposite(java.awt.Composite) -> setComposite
    void setPaint(java.awt.Paint) -> setPaint
    void setStroke(java.awt.Stroke) -> setStroke
    void setRenderingHint(java.awt.RenderingHints$Key,java.lang.Object) -> setRenderingHint
    java.lang.Object getRenderingHint(java.awt.RenderingHints$Key) -> getRenderingHint
    void setRenderingHints(java.util.Map) -> setRenderingHints
    void addRenderingHints(java.util.Map) -> addRenderingHints
    java.awt.RenderingHints getRenderingHints() -> getRenderingHints
    void translate(int,int) -> translate
    void translate(double,double) -> translate
    void rotate(double) -> rotate
    void rotate(double,double,double) -> rotate
    void scale(double,double) -> scale
    void shear(double,double) -> shear
    void transform(java.awt.geom.AffineTransform) -> transform
    void setTransform(java.awt.geom.AffineTransform) -> setTransform
    java.awt.geom.AffineTransform getTransform() -> getTransform
    java.awt.Paint getPaint() -> getPaint
    java.awt.Composite getComposite() -> getComposite
    void setBackground(java.awt.Color) -> setBackground
    java.awt.Color getBackground() -> getBackground
    java.awt.Stroke getStroke() -> getStroke
    void clip(java.awt.Shape) -> clip
    java.awt.font.FontRenderContext getFontRenderContext() -> getFontRenderContext
    java.awt.Graphics create() -> create
    java.awt.Graphics create(int,int,int,int) -> create
    java.awt.Color getColor() -> getColor
    void setColor(java.awt.Color) -> setColor
    void setPaintMode() -> setPaintMode
    void setXORMode(java.awt.Color) -> setXORMode
    java.awt.Font getFont() -> getFont
    void setFont(java.awt.Font) -> setFont
    java.awt.FontMetrics getFontMetrics() -> getFontMetrics
    java.awt.FontMetrics getFontMetrics(java.awt.Font) -> getFontMetrics
    java.awt.Rectangle getClipBounds() -> getClipBounds
    void clipRect(int,int,int,int) -> clipRect
    void setClip(int,int,int,int) -> setClip
    java.awt.Shape getClip() -> getClip
    void setClip(java.awt.Shape) -> setClip
    void copyArea(int,int,int,int,int,int) -> copyArea
    void drawLine(int,int,int,int) -> drawLine
    void fillRect(int,int,int,int) -> fillRect
    void drawRect(int,int,int,int) -> drawRect
    void clearRect(int,int,int,int) -> clearRect
    void drawRoundRect(int,int,int,int,int,int) -> drawRoundRect
    void fillRoundRect(int,int,int,int,int,int) -> fillRoundRect
    void drawOval(int,int,int,int) -> drawOval
    void fillOval(int,int,int,int) -> fillOval
    void drawArc(int,int,int,int,int,int) -> drawArc
    void fillArc(int,int,int,int,int,int) -> fillArc
    void drawPolyline(int[],int[],int) -> drawPolyline
    void drawPolygon(int[],int[],int) -> drawPolygon
    void drawPolygon(java.awt.Polygon) -> drawPolygon
    void fillPolygon(int[],int[],int) -> fillPolygon
    void fillPolygon(java.awt.Polygon) -> fillPolygon
    void drawChars(char[],int,int,int,int) -> drawChars
    void drawBytes(byte[],int,int,int,int) -> drawBytes
    boolean drawImage(java.awt.Image,int,int,java.awt.image.ImageObserver) -> drawImage
    boolean drawImage(java.awt.Image,int,int,int,int,java.awt.image.ImageObserver) -> drawImage
    boolean drawImage(java.awt.Image,int,int,java.awt.Color,java.awt.image.ImageObserver) -> drawImage
    boolean drawImage(java.awt.Image,int,int,int,int,java.awt.Color,java.awt.image.ImageObserver) -> drawImage
    boolean drawImage(java.awt.Image,int,int,int,int,int,int,int,int,java.awt.image.ImageObserver) -> drawImage
    boolean drawImage(java.awt.Image,int,int,int,int,int,int,int,int,java.awt.Color,java.awt.image.ImageObserver) -> drawImage
    void dispose() -> dispose
    void finalize() -> finalize
    java.lang.String toString() -> toString
    boolean hitClip(int,int,int,int) -> hitClip
    java.awt.Rectangle getClipBounds(java.awt.Rectangle) -> getClipBounds
geogebra.export.pstricks.GeoGebraToPstricks -> geogebra.export.pstricks.GeoGebraToPstricks:
    double PRECISION_XRANGE_FUNCTION -> a
    java.lang.StringBuffer code -> a
    java.lang.StringBuffer codePoint -> b
    java.lang.StringBuffer codePreamble -> c
    java.lang.StringBuffer codeFilledObject -> d
    java.lang.StringBuffer codeBeginDoc -> e
    java.lang.StringBuffer codeBeginPic -> f
    geogebra.Application app -> a
    geogebra.kernel.Kernel kernel -> a
    geogebra.kernel.Construction construction -> a
    geogebra.euclidian.EuclidianView euclidianView -> a
    geogebra.export.pstricks.PstricksPanel frame -> a
    java.util.HashMap CustomColor -> a
    double xunit -> b
    double yunit -> c
    double xmin -> d
    double xmax -> e
    double ymin -> f
    double ymax -> g
    geogebra.Application getApp() -> getApp
    void initGui() -> initGui
    void refreshEuclidianView() -> refreshEuclidianView
    void setxmin(double) -> setxmin
    void setxmax(double) -> setxmax
    void setymin(double) -> setymin
    void setymax(double) -> setymax
    double getxmin() -> getxmin
    double getxmax() -> getxmax
    double getymin() -> getymin
    double getymax() -> getymax
    void setxunit(double) -> setxunit
    void setyunit(double) -> setyunit
    double getxunit() -> getxunit
    double getyunit() -> getyunit
    void createPstricks() -> createPstricks
    void drawGeoElement(geogebra.kernel.GeoElement) -> drawGeoElement
    void drawLocus(geogebra.kernel.GeoLocus) -> drawLocus
    void drawSumUpperLower(geogebra.kernel.GeoNumeric) -> drawSumUpperLower
    void drawIntegral(geogebra.kernel.GeoNumeric) -> drawIntegral
    void drawSlope(geogebra.kernel.GeoNumeric) -> drawSlope
    void drawAngle(geogebra.kernel.GeoAngle) -> drawAngle
    void drawArc(geogebra.kernel.GeoAngle,double[],double,double,double) -> drawArc
    void drawTick(geogebra.kernel.GeoAngle,double[],double) -> drawTick
    void markAngle(geogebra.kernel.GeoAngle,double,double[],double,double) -> markAngle
    void drawSlider(geogebra.kernel.GeoNumeric) -> drawSlider
    void drawPolygon(geogebra.kernel.GeoPolygon) -> drawPolygon
    void drawText(geogebra.kernel.GeoText) -> drawText
    void addText(java.lang.String,boolean,int,int,java.awt.Color) -> addText
    void drawGeoConicPart(geogebra.kernel.GeoConicPart) -> drawGeoConicPart
    void drawFunction(geogebra.kernel.GeoFunction) -> drawFunction
    java.lang.String killSpace(java.lang.String) -> killSpace
    void renameFunc(java.lang.StringBuffer,java.lang.String,java.lang.String) -> renameFunc
    double maxDefinedValue(geogebra.kernel.arithmetic.Function,double,double) -> maxDefinedValue
    double firstDefinedValue(geogebra.kernel.arithmetic.Function,double,double) -> firstDefinedValue
    void drawGeoVector(geogebra.kernel.GeoVector) -> drawGeoVector
    void drawCircle(geogebra.kernel.GeoConic) -> drawCircle
    void drawGeoConic(geogebra.kernel.GeoConic) -> drawGeoConic
    void drawGeoPoint(geogebra.kernel.GeoPoint) -> drawGeoPoint
    void drawGeoLine(geogebra.kernel.GeoLine) -> drawGeoLine
    void drawGeoSegment(geogebra.kernel.GeoSegment) -> drawGeoSegment
    void drawLine(double,double,double,double,geogebra.kernel.GeoElement) -> drawLine
    void mark(double[],double[],int,geogebra.kernel.GeoElement) -> mark
    void drawGeoRay(geogebra.kernel.GeoRay) -> drawGeoRay
    void initUnitAndVariable() -> initUnitAndVariable
    void drawLabel(geogebra.kernel.GeoElement,geogebra.euclidian.Drawable) -> drawLabel
    boolean isSinglePointConic(geogebra.kernel.GeoElement) -> isSinglePointConic
    boolean isDoubleLineConic(geogebra.kernel.GeoElement) -> isDoubleLineConic
    boolean isEmpty(geogebra.kernel.GeoElement) -> isEmpty
    void drawGrid() -> drawGrid
    void drawAxis() -> drawAxis
    void PointOptionCode(geogebra.kernel.GeoPoint) -> PointOptionCode
    java.lang.String LineOptionCode(geogebra.kernel.GeoElement,boolean) -> LineOptionCode
    void LinestyleCode(int,java.lang.StringBuffer) -> LinestyleCode
    int resizePt(int) -> resizePt
    void ColorCode(java.awt.Color,java.lang.StringBuffer) -> ColorCode
    java.lang.String createSuffix(int,int,int) -> createSuffix
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
    void refreshSelectionRectangle() -> refreshSelectionRectangle
    java.lang.String sci2dec(double) -> sci2dec
geogebra.export.pstricks.PstricksPanel -> geogebra.export.pstricks.PstricksPanel:
    geogebra.export.pstricks.TextValue textXUnit -> a
    geogebra.export.pstricks.TextValue textYUnit -> b
    geogebra.export.pstricks.TextValue textwidth -> c
    geogebra.export.pstricks.TextValue textheight -> d
    geogebra.export.pstricks.TextValue textXmin -> e
    geogebra.export.pstricks.TextValue textXmax -> f
    geogebra.export.pstricks.TextValue textYmin -> g
    geogebra.export.pstricks.TextValue textYmax -> h
    javax.swing.JLabel labelXUnit -> a
    javax.swing.JLabel labelYUnit -> b
    javax.swing.JLabel labelwidth -> c
    javax.swing.JLabel labelheight -> d
    javax.swing.JLabel labelXmin -> e
    javax.swing.JLabel labelXmax -> f
    javax.swing.JLabel labelYmin -> g
    javax.swing.JLabel labelYmax -> h
    javax.swing.JLabel labelFontSize -> i
    java.lang.String[] msg -> a
    javax.swing.JComboBox comboFontSize -> a
    javax.swing.JPanel panel -> a
    javax.swing.JButton button -> a
    javax.swing.JButton button_copy -> b
    javax.swing.JCheckBox jcb -> a
    javax.swing.JScrollPane js -> a
    javax.swing.JTextArea textarea -> a
    geogebra.Application app -> a
    double width -> a
    double height -> b
    void initGui() -> initGui
    void centerOnScreen() -> centerOnScreen
    boolean getExportPointSymbol() -> getExportPointSymbol
    double getXUnit() -> getXUnit
    double getYUnit() -> getYUnit
    double getLatexHeight() -> getLatexHeight
    void write(java.lang.StringBuffer) -> write
    int getFontSize() -> getFontSize
    geogebra.export.pstricks.TextValue access$0(geogebra.export.pstricks.PstricksPanel) -> access$0
    double access$1(geogebra.export.pstricks.PstricksPanel) -> access$1
    geogebra.export.pstricks.TextValue access$2(geogebra.export.pstricks.PstricksPanel) -> access$2
    double access$3(geogebra.export.pstricks.PstricksPanel) -> access$3
    geogebra.export.pstricks.TextValue access$4(geogebra.export.pstricks.PstricksPanel) -> access$4
    geogebra.export.pstricks.TextValue access$5(geogebra.export.pstricks.PstricksPanel) -> access$5
    void access$6(geogebra.export.pstricks.PstricksPanel,double) -> access$6
    geogebra.export.pstricks.TextValue access$7(geogebra.export.pstricks.PstricksPanel) -> access$7
    geogebra.export.pstricks.TextValue access$8(geogebra.export.pstricks.PstricksPanel) -> access$8
    void access$9(geogebra.export.pstricks.PstricksPanel,double) -> access$9
    geogebra.export.pstricks.TextValue access$10(geogebra.export.pstricks.PstricksPanel) -> access$10
    geogebra.export.pstricks.TextValue access$11(geogebra.export.pstricks.PstricksPanel) -> access$11
    javax.swing.JTextArea access$12(geogebra.export.pstricks.PstricksPanel) -> access$12
geogebra.export.pstricks.PstricksPanel$1 -> geogebra.export.pstricks.PstricksPanel$1:
    geogebra.export.pstricks.PstricksPanel this$0 -> a
    geogebra.export.pstricks.GeoGebraToPstricks val$ggb2ps -> a
    void keyReleased(java.awt.event.KeyEvent) -> keyReleased
geogebra.export.pstricks.PstricksPanel$2 -> geogebra.export.pstricks.PstricksPanel$2:
    geogebra.export.pstricks.PstricksPanel this$0 -> a
    geogebra.export.pstricks.GeoGebraToPstricks val$ggb2ps -> a
    void keyReleased(java.awt.event.KeyEvent) -> keyReleased
geogebra.export.pstricks.PstricksPanel$3 -> geogebra.export.pstricks.PstricksPanel$3:
    geogebra.export.pstricks.PstricksPanel this$0 -> a
    geogebra.export.pstricks.GeoGebraToPstricks val$ggb2ps -> a
    void keyReleased(java.awt.event.KeyEvent) -> keyReleased
geogebra.export.pstricks.PstricksPanel$4 -> geogebra.export.pstricks.PstricksPanel$4:
    geogebra.export.pstricks.PstricksPanel this$0 -> a
    geogebra.export.pstricks.GeoGebraToPstricks val$ggb2ps -> a
    void keyReleased(java.awt.event.KeyEvent) -> keyReleased
geogebra.export.pstricks.PstricksPanel$5 -> geogebra.export.pstricks.PstricksPanel$5:
    geogebra.export.pstricks.PstricksPanel this$0 -> a
    geogebra.export.pstricks.GeoGebraToPstricks val$ggb2ps -> a
    void keyReleased(java.awt.event.KeyEvent) -> keyReleased
geogebra.export.pstricks.PstricksPanel$6 -> geogebra.export.pstricks.PstricksPanel$6:
    geogebra.export.pstricks.PstricksPanel this$0 -> a
    geogebra.export.pstricks.GeoGebraToPstricks val$ggb2ps -> a
    void keyReleased(java.awt.event.KeyEvent) -> keyReleased
geogebra.export.pstricks.PstricksPanel$7 -> geogebra.export.pstricks.PstricksPanel$7:
    geogebra.export.pstricks.PstricksPanel this$0 -> a
    geogebra.export.pstricks.GeoGebraToPstricks val$ggb2ps -> a
    void keyReleased(java.awt.event.KeyEvent) -> keyReleased
geogebra.export.pstricks.PstricksPanel$8 -> geogebra.export.pstricks.PstricksPanel$8:
    geogebra.export.pstricks.PstricksPanel this$0 -> a
    geogebra.export.pstricks.GeoGebraToPstricks val$ggb2ps -> a
    void keyReleased(java.awt.event.KeyEvent) -> keyReleased
geogebra.export.pstricks.PstricksPanel$9 -> geogebra.export.pstricks.PstricksPanel$9:
    geogebra.export.pstricks.PstricksPanel this$0 -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
geogebra.export.pstricks.TextValue -> geogebra.export.pstricks.TextValue:
    boolean ALLOW_NEGATIVE -> a
    javax.swing.JFrame jf -> a
    double getValue() -> getValue
    void setValue(double) -> setValue
    void keyTyped(java.awt.event.KeyEvent) -> keyTyped
    void keyPressed(java.awt.event.KeyEvent) -> keyPressed
    void keyReleased(java.awt.event.KeyEvent) -> keyReleased
geogebra.gui.AngleInputDialog -> geogebra.gui.a:
    javax.swing.JRadioButton rbCounterClockWise -> a
    javax.swing.JRadioButton rbClockWise -> b
    boolean isCounterClockWise() -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
geogebra.gui.AnimationStepPanel -> geogebra.gui.aV:
    java.lang.Object[] geos -> a
    javax.swing.JTextField tfAnimStep -> a
    boolean partOfSliderPanel -> a
    geogebra.kernel.Kernel kernel -> a
    void setPartOfSliderPanel() -> a
    javax.swing.JPanel update(java.lang.Object[]) -> a
    boolean checkGeos(java.lang.Object[]) -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
    void doActionPerformed() -> b
    void focusGained(java.awt.event.FocusEvent) -> focusGained
    void focusLost(java.awt.event.FocusEvent) -> focusLost
geogebra.gui.CheckboxCreationDialog -> geogebra.gui.aY:
    javax.swing.text.JTextComponent tfCaption -> a
    javax.swing.JButton btApply -> a
    javax.swing.JButton btCancel -> b
    javax.swing.JPanel optionPane -> a
    javax.swing.JPanel btPanel -> b
    javax.swing.DefaultListModel listModel -> a
    javax.swing.DefaultComboBoxModel comboModel -> a
    java.awt.Point location -> a
    geogebra.Application app -> a
    geogebra.kernel.GeoBoolean geoBoolean -> a
    void initLists() -> a
    void geoElementSelected(geogebra.kernel.GeoElement,boolean) -> a
    void createGUI(java.lang.String) -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
    void apply() -> b
    void windowGainedFocus(java.awt.event.WindowEvent) -> windowGainedFocus
    void windowLostFocus(java.awt.event.WindowEvent) -> windowLostFocus
    void setVisible(boolean) -> setVisible
    javax.swing.DefaultComboBoxModel access$0(geogebra.gui.CheckboxCreationDialog) -> a
geogebra.gui.CheckboxCreationDialog$1 -> geogebra.gui.aL:
    geogebra.gui.CheckboxCreationDialog this$0 -> a
    void addElement(java.lang.Object) -> addElement
geogebra.gui.ColorFunctionPanel -> geogebra.gui.af:
    java.lang.Object[] geos -> a
    javax.swing.JTextField tfRed -> a
    javax.swing.JTextField tfGreen -> b
    javax.swing.JTextField tfBlue -> c
    javax.swing.JLabel nameLabelR -> a
    javax.swing.JLabel nameLabelG -> b
    javax.swing.JLabel nameLabelB -> c
    geogebra.kernel.Kernel kernel -> a
    geogebra.gui.PropertiesDialogGeoElement$PropertiesPanel propPanel -> a
    javax.swing.JPanel update(java.lang.Object[]) -> a
    boolean checkGeos(java.lang.Object[]) -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
    void doActionPerformed() -> a
    void focusGained(java.awt.event.FocusEvent) -> focusGained
    void focusLost(java.awt.event.FocusEvent) -> focusLost
geogebra.gui.ConstructionProtocol -> geogebra.gui.ba:
    java.awt.Color COLOR_STEP_HIGHLIGHT -> a
    java.awt.Color COLOR_DRAG_HIGHLIGHT -> b
    java.awt.Color COLOR_DROP_HIGHLIGHT -> c
    javax.swing.JTable table -> a
    geogebra.gui.ConstructionProtocol$ConstructionTableData data -> a
    geogebra.Application app -> a
    geogebra.kernel.Kernel kernel -> a
    javax.swing.JMenuBar menuBar -> a
    javax.swing.JCheckBoxMenuItem cbUseColors -> a
    javax.swing.JCheckBoxMenuItem cbShowOnlyBreakpoints -> b
    javax.swing.table.TableColumn[] tableColumns -> a
    javax.swing.JDialog thisDialog -> a
    boolean useColors -> b
    boolean dragging -> a
    int dragIndex -> a
    int dropIndex -> b
    int maxNumPage -> c
    boolean isViewAttached -> c
    java.util.ArrayList navigationBars -> a
    geogebra.gui.ConstructionProtocolNavigation protNavBar -> a
    java.lang.Class class$0 -> a
    java.lang.Class class$1 -> b
    java.lang.Class class$3 -> c
    geogebra.Application getApplication() -> a
    void registerNavigationBar(geogebra.gui.ConstructionProtocolNavigation) -> a
    void unregisterNavigationBar(geogebra.gui.ConstructionProtocolNavigation) -> b
    void updateNavigationBars() -> k
    int getLastStepNumber() -> a
    int getCurrentStepNumber() -> b
    void initProtocol() -> a
    void setConstructionStep(int) -> a
    void nextStep() -> b
    void previousStep() -> c
    void firstStep() -> d
    void lastStep() -> e
    void initGUI() -> f
    void updateMenubar() -> g
    void setUseColors(boolean) -> a
    void update() -> h
    void setMenuBar() -> l
    boolean isColumnInModel(javax.swing.table.TableColumn) -> a
    void setVisible(boolean) -> setVisible
    void scrollToConstructionStep() -> i
    int print(java.awt.Graphics,java.awt.print.PageFormat,int) -> print
    java.lang.String getHTML(java.io.File) -> a
    void showHTMLExportDialog() -> j
    java.lang.String getConsProtocolXML() -> a
    geogebra.kernel.Kernel access$0(geogebra.gui.ConstructionProtocol) -> a
    geogebra.Application access$1(geogebra.gui.ConstructionProtocol) -> a
    javax.swing.JTable access$2(geogebra.gui.ConstructionProtocol) -> a
    geogebra.gui.ConstructionProtocol$ConstructionTableData access$3(geogebra.gui.ConstructionProtocol) -> a
    void access$4(geogebra.gui.ConstructionProtocol,int) -> a
    void access$5(geogebra.gui.ConstructionProtocol,int) -> b
    int access$6(geogebra.gui.ConstructionProtocol) -> a
    int access$7(geogebra.gui.ConstructionProtocol) -> b
    javax.swing.JCheckBoxMenuItem access$8(geogebra.gui.ConstructionProtocol) -> a
    javax.swing.JDialog access$9(geogebra.gui.ConstructionProtocol) -> a
    boolean access$10(geogebra.gui.ConstructionProtocol) -> a
    java.awt.Color access$11() -> a
    java.awt.Color access$12() -> b
    java.awt.Color access$13() -> c
    boolean access$14(geogebra.gui.ConstructionProtocol) -> b
    void access$15(geogebra.gui.ConstructionProtocol,boolean) -> a
    java.util.ArrayList access$16(geogebra.gui.ConstructionProtocol) -> a
    void access$17(geogebra.gui.ConstructionProtocol) -> a
    javax.swing.JCheckBoxMenuItem access$18(geogebra.gui.ConstructionProtocol) -> b
    void access$19(geogebra.gui.ConstructionProtocol,boolean) -> b
geogebra.gui.ConstructionProtocol$1 -> geogebra.gui.W:
    geogebra.gui.ConstructionProtocol this$0 -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
    geogebra.gui.ConstructionProtocol access$0(geogebra.gui.ConstructionProtocol$1) -> a
geogebra.gui.ConstructionProtocol$2 -> geogebra.gui.Z:
    geogebra.gui.ConstructionProtocol$1 this$1 -> a
    void run() -> run
geogebra.gui.ConstructionProtocol$3 -> geogebra.gui.aa:
    geogebra.gui.ConstructionProtocol this$0 -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
    geogebra.gui.ConstructionProtocol access$0(geogebra.gui.ConstructionProtocol$3) -> a
geogebra.gui.ConstructionProtocol$4 -> geogebra.gui.X:
    geogebra.gui.ConstructionProtocol$3 this$1 -> a
    void run() -> run
geogebra.gui.ConstructionProtocol$5 -> geogebra.gui.Y:
    geogebra.gui.ConstructionProtocol this$0 -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
geogebra.gui.ConstructionProtocol$6 -> geogebra.gui.ac:
    geogebra.gui.ConstructionProtocol this$0 -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
geogebra.gui.ConstructionProtocol$7 -> geogebra.gui.ad:
    geogebra.gui.ConstructionProtocol this$0 -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
geogebra.gui.ConstructionProtocol$8 -> geogebra.gui.ab:
    geogebra.gui.ConstructionProtocol this$0 -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
geogebra.gui.ConstructionProtocol$ColumnData -> geogebra.gui.aM:
    java.lang.String title -> a
    boolean isVisible -> a
    int prefWidth -> a
    int minWidth -> b
    int alignment -> c
    boolean initShow -> b
    geogebra.gui.ConstructionProtocol this$0 -> a
    java.lang.String getTitle() -> a
    int getPreferredWidth() -> a
    int getMinWidth() -> b
    int getAlignment() -> c
    boolean getInitShow() -> a
geogebra.gui.ConstructionProtocol$ColumnKeeper -> geogebra.gui.aT:
    javax.swing.table.TableColumn column -> a
    geogebra.gui.ConstructionProtocol$ColumnData colData -> a
    boolean isBreakPointColumn -> a
    geogebra.gui.ConstructionProtocol this$0 -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
geogebra.gui.ConstructionProtocol$ConstructionKeyListener -> geogebra.gui.bI:
    geogebra.gui.ConstructionProtocol this$0 -> a
    void keyPressed(java.awt.event.KeyEvent) -> keyPressed
geogebra.gui.ConstructionProtocol$ConstructionMouseListener -> geogebra.gui.g:
    int minIndex -> a
    int maxIndex -> b
    geogebra.gui.ConstructionProtocol this$0 -> a
    void mouseClicked(java.awt.event.MouseEvent) -> mouseClicked
    void mousePressed(java.awt.event.MouseEvent) -> mousePressed
    void mouseReleased(java.awt.event.MouseEvent) -> mouseReleased
    void mouseDragged(java.awt.event.MouseEvent) -> mouseDragged
    void mouseMoved(java.awt.event.MouseEvent) -> mouseMoved
    void mouseEntered(java.awt.event.MouseEvent) -> mouseEntered
    void mouseExited(java.awt.event.MouseEvent) -> mouseExited
geogebra.gui.ConstructionProtocol$ConstructionTableCellRenderer -> geogebra.gui.R:
    javax.swing.JCheckBox cbTemp -> a
    geogebra.gui.ConstructionProtocol this$0 -> a
    java.awt.Component getTableCellRendererComponent(javax.swing.JTable,java.lang.Object,boolean,boolean,int,int) -> getTableCellRendererComponent
geogebra.gui.ConstructionProtocol$ConstructionTableData -> geogebra.gui.aA:
    geogebra.gui.ConstructionProtocol$ColumnData[] columns -> a
    java.util.ArrayList rowList -> a
    geogebra.util.FastHashMapKeyless geoMap -> a
    int columnsCount -> a
    geogebra.gui.ConstructionProtocol this$0 -> a
    int getLastStepNumber() -> a
    int getCurrentStepNumber() -> b
    void setConstructionStepForRow(int) -> a
    boolean moveInConstructionList(int,int) -> a
    geogebra.kernel.GeoElement getGeoElement(int) -> a
    int getConstructionIndex(int) -> a
    geogebra.gui.ConstructionProtocol$RowData getRow(int) -> a
    void initView() -> a
    void attachView() -> b
    void detachView() -> f
    int getRowCount() -> getRowCount
    int getColumnCount() -> getColumnCount
    java.lang.String getColumnName(int) -> getColumnName
    int getColumnNumber(geogebra.gui.ConstructionProtocol$ColumnData) -> a
    boolean isCellEditable(int,int) -> isCellEditable
    java.awt.Color getColorAt(int,int) -> a
    java.lang.Object getValueAt(int,int) -> getValueAt
    java.lang.String getPlainTextAt(int,int) -> a
    java.lang.String getPlainHTMLAt(int,int) -> b
    void add(geogebra.kernel.GeoElement) -> a
    void remove(geogebra.kernel.GeoElement) -> b
    void clearView() -> d
    void repaintView() -> e
    void updateRowNumbers(int) -> b
    void updateIndices() -> h
    void rename(geogebra.kernel.GeoElement) -> c
    void repaint() -> g
    void updateAll() -> i
    void update(geogebra.kernel.GeoElement) -> d
    void updateAuxiliaryObject(geogebra.kernel.GeoElement) -> e
    void reset() -> c
    int access$0(geogebra.gui.ConstructionProtocol$ConstructionTableData) -> a
    void access$1(geogebra.gui.ConstructionProtocol$ConstructionTableData,int) -> a
    void access$2(geogebra.gui.ConstructionProtocol$ConstructionTableData) -> a
    java.awt.Color access$3(geogebra.gui.ConstructionProtocol$ConstructionTableData,int,int) -> a
geogebra.gui.ConstructionProtocol$ConstructionTableData$ColumnMovementListener -> geogebra.gui.aH:
    geogebra.gui.ConstructionProtocol$ConstructionTableData this$1 -> a
    void columnAdded(javax.swing.event.TableColumnModelEvent) -> columnAdded
    void columnRemoved(javax.swing.event.TableColumnModelEvent) -> columnRemoved
    void columnMarginChanged(javax.swing.event.ChangeEvent) -> columnMarginChanged
    void columnMoved(javax.swing.event.TableColumnModelEvent) -> columnMoved
    void columnSelectionChanged(javax.swing.event.ListSelectionEvent) -> columnSelectionChanged
geogebra.gui.ConstructionProtocol$HeaderRenderer -> geogebra.gui.bc:
    geogebra.gui.ConstructionProtocol this$0 -> a
    java.awt.Component getTableCellRendererComponent(javax.swing.JTable,java.lang.Object,boolean,boolean,int,int) -> getTableCellRendererComponent
geogebra.gui.ConstructionProtocol$RowData -> geogebra.gui.d:
    int rowNumber -> a
    int index -> b
    geogebra.kernel.GeoElement geo -> a
    java.lang.String name -> a
    java.lang.String algebra -> b
    java.lang.String definition -> c
    java.lang.String command -> d
    boolean includesIndex -> a
    java.lang.Boolean consProtocolVisible -> a
    geogebra.gui.ConstructionProtocol this$0 -> a
    void updateAlgebraAndName() -> a
    void updateAll() -> b
geogebra.gui.ConstructionProtocolNavigation -> geogebra.gui.ai:
    javax.swing.JButton btFirst -> a
    javax.swing.JButton btPrev -> b
    javax.swing.JButton btPlay -> c
    javax.swing.JButton btNext -> d
    javax.swing.JButton btLast -> e
    javax.swing.JButton btOpenWindow -> f
    javax.swing.JLabel lbSteps -> a
    javax.swing.JSpinner spDelay -> a
    double playDelay -> a
    javax.swing.JPanel playPanel -> a
    geogebra.Application app -> a
    geogebra.gui.ConstructionProtocol prot -> a
    boolean showPlayButton -> a
    boolean showConsProtButton -> b
    geogebra.gui.ConstructionProtocolNavigation$AutomaticPlayer player -> a
    boolean isPlaying -> c
    boolean isPlayButtonVisible() -> a
    void setPlayButtonVisible(boolean) -> a
    boolean isConsProtButtonVisible() -> b
    void setConsProtButtonVisible(boolean) -> b
    double getPlayDelay() -> a
    void setPlayDelay(double) -> a
    void initGUI() -> a
    void setLabels() -> b
    void update() -> c
    void register() -> d
    void unregister() -> e
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
    void setComponentsEnabled(boolean) -> c
    geogebra.Application access$0(geogebra.gui.ConstructionProtocolNavigation) -> a
    javax.swing.JButton access$1(geogebra.gui.ConstructionProtocolNavigation) -> a
    void access$2(geogebra.gui.ConstructionProtocolNavigation,boolean) -> a
    void access$3(geogebra.gui.ConstructionProtocolNavigation,boolean) -> b
    geogebra.gui.ConstructionProtocol access$4(geogebra.gui.ConstructionProtocolNavigation) -> a
    javax.swing.JSpinner access$5(geogebra.gui.ConstructionProtocolNavigation) -> a
    void access$6(geogebra.gui.ConstructionProtocolNavigation,double) -> a
geogebra.gui.ConstructionProtocolNavigation$1 -> geogebra.gui.aZ:
    geogebra.gui.ConstructionProtocolNavigation this$0 -> a
    void stateChanged(javax.swing.event.ChangeEvent) -> stateChanged
geogebra.gui.ConstructionProtocolNavigation$2 -> geogebra.gui.bb:
    geogebra.gui.ConstructionProtocolNavigation this$0 -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
geogebra.gui.ConstructionProtocolNavigation$AutomaticPlayer -> geogebra.gui.aR:
    javax.swing.Timer timer -> a
    geogebra.gui.ConstructionProtocolNavigation this$0 -> a
    void startAnimation() -> a
    void stopAnimation() -> b
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
geogebra.gui.ContextMenuGeoElement -> geogebra.gui.bi:
    java.awt.Color bgColor -> a
    java.awt.Color fgColor -> b
    geogebra.kernel.GeoElement geo -> a
    geogebra.kernel.GeoPoint point -> a
    geogebra.kernel.GeoLine line -> a
    geogebra.kernel.GeoVector vector -> a
    geogebra.kernel.GeoConic conic -> a
    geogebra.Application app -> a
    java.util.ArrayList tempArrayList -> a
    java.lang.Class class$0 -> a
    void addPointItems() -> a
    void addLineItems() -> b
    void addVectorItems() -> c
    void addConicItems() -> d
    void addNumberItems() -> e
    void addTextItems() -> f
    void addForAllItems() -> g
    void addAction(javax.swing.Action) -> a
    void addItem(javax.swing.JMenuItem) -> a
    void setTitle(java.lang.String) -> a
    geogebra.kernel.GeoPoint access$0(geogebra.gui.ContextMenuGeoElement) -> a
    geogebra.kernel.GeoLine access$1(geogebra.gui.ContextMenuGeoElement) -> a
    geogebra.kernel.GeoVector access$2(geogebra.gui.ContextMenuGeoElement) -> a
    geogebra.kernel.GeoConic access$3(geogebra.gui.ContextMenuGeoElement) -> a
    geogebra.kernel.GeoElement access$4(geogebra.gui.ContextMenuGeoElement) -> a
    java.util.ArrayList access$5(geogebra.gui.ContextMenuGeoElement) -> a
geogebra.gui.ContextMenuGeoElement$1 -> geogebra.gui.bm:
    geogebra.gui.ContextMenuGeoElement this$0 -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
geogebra.gui.ContextMenuGeoElement$10 -> geogebra.gui.as:
    geogebra.gui.ContextMenuGeoElement this$0 -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
geogebra.gui.ContextMenuGeoElement$11 -> geogebra.gui.ao:
    geogebra.gui.ContextMenuGeoElement this$0 -> a
    geogebra.kernel.GeoText val$geoText -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
geogebra.gui.ContextMenuGeoElement$12 -> geogebra.gui.ap:
    geogebra.gui.ContextMenuGeoElement this$0 -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
geogebra.gui.ContextMenuGeoElement$13 -> geogebra.gui.aq:
    geogebra.gui.ContextMenuGeoElement this$0 -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
geogebra.gui.ContextMenuGeoElement$14 -> geogebra.gui.ar:
    geogebra.gui.ContextMenuGeoElement this$0 -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
geogebra.gui.ContextMenuGeoElement$15 -> geogebra.gui.av:
    geogebra.gui.ContextMenuGeoElement this$0 -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
geogebra.gui.ContextMenuGeoElement$16 -> geogebra.gui.au:
    geogebra.gui.ContextMenuGeoElement this$0 -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
geogebra.gui.ContextMenuGeoElement$17 -> geogebra.gui.ay:
    geogebra.gui.ContextMenuGeoElement this$0 -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
geogebra.gui.ContextMenuGeoElement$18 -> geogebra.gui.ax:
    geogebra.gui.ContextMenuGeoElement this$0 -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
geogebra.gui.ContextMenuGeoElement$19 -> geogebra.gui.at:
    geogebra.gui.ContextMenuGeoElement this$0 -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
geogebra.gui.ContextMenuGeoElement$2 -> geogebra.gui.bl:
    geogebra.gui.ContextMenuGeoElement this$0 -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
geogebra.gui.ContextMenuGeoElement$20 -> geogebra.gui.ak:
    geogebra.gui.ContextMenuGeoElement this$0 -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
geogebra.gui.ContextMenuGeoElement$21 -> geogebra.gui.al:
    geogebra.gui.ContextMenuGeoElement this$0 -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
geogebra.gui.ContextMenuGeoElement$22 -> geogebra.gui.aj:
    geogebra.gui.ContextMenuGeoElement this$0 -> a
    void mouseClicked(java.awt.event.MouseEvent) -> mouseClicked
geogebra.gui.ContextMenuGeoElement$3 -> geogebra.gui.bk:
    geogebra.gui.ContextMenuGeoElement this$0 -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
geogebra.gui.ContextMenuGeoElement$4 -> geogebra.gui.bg:
    geogebra.gui.ContextMenuGeoElement this$0 -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
geogebra.gui.ContextMenuGeoElement$5 -> geogebra.gui.bf:
    geogebra.gui.ContextMenuGeoElement this$0 -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
geogebra.gui.ContextMenuGeoElement$6 -> geogebra.gui.be:
    geogebra.gui.ContextMenuGeoElement this$0 -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
geogebra.gui.ContextMenuGeoElement$7 -> geogebra.gui.bd:
    geogebra.gui.ContextMenuGeoElement this$0 -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
geogebra.gui.ContextMenuGeoElement$8 -> geogebra.gui.bj:
    geogebra.gui.ContextMenuGeoElement this$0 -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
geogebra.gui.ContextMenuGeoElement$9 -> geogebra.gui.bh:
    geogebra.gui.ContextMenuGeoElement this$0 -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
geogebra.gui.ContextMenuGraphicsWindow -> geogebra.gui.aF:
    double px -> a
    double py -> b
    double[] zoomFactors -> a
    double[] axesRatios -> b
    javax.swing.ImageIcon iconZoom -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
    void addZoomItems(javax.swing.JMenu) -> a
    void addAxesRatioItems(javax.swing.JMenu) -> b
    void zoom(double) -> a
    void zoomYaxis(double) -> b
    void access$0(geogebra.gui.ContextMenuGraphicsWindow,double) -> a
    void access$1(geogebra.gui.ContextMenuGraphicsWindow,double) -> b
geogebra.gui.ContextMenuGraphicsWindow$1 -> geogebra.gui.bu:
    geogebra.gui.ContextMenuGraphicsWindow this$0 -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
geogebra.gui.ContextMenuGraphicsWindow$2 -> geogebra.gui.bv:
    geogebra.gui.ContextMenuGraphicsWindow this$0 -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
geogebra.gui.DashListRenderer -> geogebra.gui.V:
    geogebra.util.FastHashMapKeyless dashStrokeMap -> a
    java.awt.BasicStroke dashStroke -> a
    boolean nullValue -> a
    java.awt.Component getListCellRendererComponent(javax.swing.JList,java.lang.Object,int,boolean,boolean) -> getListCellRendererComponent
    void paint(java.awt.Graphics) -> paint
geogebra.gui.DecorationAngleListRenderer -> geogebra.gui.aI:
    java.awt.geom.Line2D$Double tick -> a
    java.awt.geom.Arc2D$Double arc -> a
    java.awt.geom.GeneralPath polygon -> a
    int id -> a
    java.awt.Component getListCellRendererComponent(javax.swing.JList,java.lang.Object,int,boolean,boolean) -> getListCellRendererComponent
    void drawTick(double) -> a
    void paint(java.awt.Graphics) -> paint
geogebra.gui.DecorationListRenderer -> geogebra.gui.G:
    int id -> a
    java.awt.Component getListCellRendererComponent(javax.swing.JList,java.lang.Object,int,boolean,boolean) -> getListCellRendererComponent
    void paint(java.awt.Graphics) -> paint
geogebra.gui.FileDropTargetListener -> geogebra.gui.bB:
    geogebra.Application app -> a
    void dragEnter(java.awt.dnd.DropTargetDragEvent) -> dragEnter
    void dragExit(java.awt.dnd.DropTargetEvent) -> dragExit
    void dragOver(java.awt.dnd.DropTargetDragEvent) -> dragOver
    void dropActionChanged(java.awt.dnd.DropTargetDragEvent) -> dropActionChanged
    void drop(java.awt.dnd.DropTargetDropEvent) -> drop
    java.io.File getGGBfile(java.awt.dnd.DropTargetDropEvent) -> a
geogebra.gui.GeoGebraPreferences -> geogebra.gui.aP:
    java.util.prefs.Preferences ggbPrefs -> a
    java.lang.String XML_GGB_FACTORY_DEFAULT -> a
    java.lang.String loadPreference(java.lang.String,java.lang.String) -> a
    void savePreference(java.lang.String,java.lang.String) -> a
    java.io.File getDefaultFilePath() -> a
    java.io.File getDefaultImagePath() -> b
    void saveDefaultImagePath(java.io.File) -> a
    java.util.Locale getDefaultLocale() -> a
    void saveDefaultLocale(java.util.Locale) -> a
    void loadFileList() -> a
    void saveFileList() -> b
    void initDefaultXML(geogebra.Application) -> a
    void saveXMLPreferences(geogebra.Application) -> b
    void putByteArray(java.util.prefs.Preferences,java.lang.String,byte[]) -> a
    byte[] getByteArray(java.util.prefs.Preferences,java.lang.String,byte[]) -> a
    void loadXMLPreferences(geogebra.Application) -> c
    void clearPreferences() -> c
geogebra.gui.GeoTreeCellRenderer -> geogebra.gui.r:
    geogebra.Application app -> a
    javax.swing.ImageIcon iconShown -> a
    javax.swing.ImageIcon iconHidden -> b
    java.awt.Component getTreeCellRendererComponent(javax.swing.JTree,java.lang.Object,boolean,boolean,boolean,int,boolean) -> getTreeCellRendererComponent
geogebra.gui.ImagePreview -> geogebra.gui.q:
    javax.swing.JFileChooser jfc -> a
    java.awt.image.BufferedImage img -> a
    void propertyChange(java.beans.PropertyChangeEvent) -> propertyChange
    void updateImage(java.io.File) -> a
    void paintComponent(java.awt.Graphics) -> paintComponent
geogebra.gui.ImageResizer -> geogebra.gui.aW:
    java.awt.image.BufferedImage resizeImage(java.awt.image.BufferedImage,int,int) -> a
geogebra.gui.InputDialog -> geogebra.gui.aE:
    java.lang.String inputText -> a
    geogebra.gui.InputPanel inputPanel -> a
    javax.swing.JButton btApply -> a
    javax.swing.JButton btCancel -> b
    javax.swing.JPanel optionPane -> a
    javax.swing.JPanel btPanel -> b
    geogebra.GeoElementSelectionListener sl -> a
    javax.swing.JLabel msgLabel -> a
    java.lang.String initString -> b
    geogebra.Application app -> a
    geogebra.gui.InputHandler inputHandler -> a
    javax.swing.JPanel getButtonPanel() -> c
    void createGUI(java.lang.String,java.lang.String,boolean,int,int,boolean,boolean,boolean) -> a
    void showSpecialCharacters(boolean) -> a
    void insertGeoElement(geogebra.kernel.GeoElement) -> a
    void insertString(java.lang.String) -> a
    void centerOnScreen() -> a
    void setRelativeCaretPosition(int) -> a
    void selectText() -> b
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
    void setVisible(boolean) -> setVisible
    void windowGainedFocus(java.awt.event.WindowEvent) -> windowGainedFocus
    void windowLostFocus(java.awt.event.WindowEvent) -> windowLostFocus
geogebra.gui.InputDialog$1 -> geogebra.gui.N:
    geogebra.gui.InputDialog this$0 -> a
    void geoElementSelected(geogebra.kernel.GeoElement,boolean) -> a
geogebra.gui.InputHandler -> geogebra.gui.O:
    boolean processInput(java.lang.String) -> a
geogebra.gui.InputPanel -> geogebra.gui.C:
    java.lang.String[] specialChars -> c
    java.lang.String[] greekLowerCase -> a
    java.lang.String[] greekUpperCase -> b
    javax.swing.text.JTextComponent textComponent -> a
    javax.swing.JComboBox cbSpecialChars -> a
    javax.swing.JComboBox cbGreekLetters -> b
    void showSpecialChars(boolean) -> a
    javax.swing.text.JTextComponent getTextComponent() -> a
    java.lang.String getText() -> a
    java.lang.String getSelectedText() -> b
    void selectText() -> a
    void setText(java.lang.String) -> a
    void insertString(java.lang.String) -> b
    javax.swing.JComboBox access$0(geogebra.gui.InputPanel) -> a
    javax.swing.JComboBox access$1(geogebra.gui.InputPanel) -> b
geogebra.gui.InputPanel$ComboBoxListener -> geogebra.gui.S:
    geogebra.gui.InputPanel this$0 -> a
    void doActionPerformed(java.lang.Object) -> a
geogebra.gui.MyAppSplash -> geogebra.gui.MyAppSplash:
    java.lang.Class class$0 -> a
    void main(java.lang.String[]) -> main
geogebra.gui.MyCellRenderer -> geogebra.gui.bw:
    java.awt.Component getListCellRendererComponent(javax.swing.JList,java.lang.Object,int,boolean,boolean) -> getListCellRendererComponent
geogebra.gui.MyComboBoxListener -> geogebra.gui.w:
    void mousePressed(java.awt.event.MouseEvent) -> mousePressed
    void mouseReleased(java.awt.event.MouseEvent) -> mouseReleased
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
    void doActionPerformed(java.lang.Object) -> a
geogebra.gui.MySmallJButton -> geogebra.gui.i:
    void setSmallSize(int,int) -> a
geogebra.gui.NamePanel -> geogebra.gui.aG:
    geogebra.algebra.autocomplete.AutoCompleteTextField tfName -> a
    geogebra.algebra.autocomplete.AutoCompleteTextField tfDefinition -> b
    geogebra.algebra.autocomplete.AutoCompleteTextField tfCaption -> c
    javax.swing.JLabel nameLabel -> a
    javax.swing.JLabel defLabel -> b
    javax.swing.JLabel captionLabel -> c
    geogebra.gui.InputPanel inputPanelName -> a
    geogebra.gui.InputPanel inputPanelDef -> b
    geogebra.gui.InputPanel inputPanelCap -> c
    geogebra.gui.RenameInputHandler nameInputHandler -> a
    geogebra.gui.RedefineInputHandler defInputHandler -> a
    geogebra.kernel.GeoElement currentGeo -> a
    geogebra.Application app -> a
    boolean actionPerforming -> a
    void updateGUI(boolean,boolean) -> a
    javax.swing.JPanel update(java.lang.Object[]) -> a
    boolean checkGeos(java.lang.Object[]) -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
    void doActionPerformed(java.lang.Object) -> a
    void focusGained(java.awt.event.FocusEvent) -> focusGained
    void focusLost(java.awt.event.FocusEvent) -> focusLost
    java.lang.String getDefText(geogebra.kernel.GeoElement) -> a
    java.lang.String getCaptionText(geogebra.kernel.GeoElement) -> b
geogebra.gui.NumberComboBox -> geogebra.gui.aU:
    java.text.NumberFormat nf -> a
    geogebra.kernel.Kernel kernel -> a
    void setValue(double) -> a
    double getValue() -> a
geogebra.gui.PropertiesDialogGeoElement -> geogebra.gui.b:
    geogebra.Application app -> a
    geogebra.kernel.Kernel kernel -> a
    geogebra.gui.PropertiesDialogGeoElement$JTreeGeoElements geoTree -> a
    javax.swing.JButton closeButton -> a
    geogebra.gui.PropertiesDialogGeoElement$PropertiesPanel propPanel -> a
    javax.swing.JColorChooser colChooser -> a
    boolean firstTime -> a
    boolean viewActive -> b
    java.util.ArrayList selectionList -> a
    java.util.ArrayList tempArrayList -> b
    java.lang.Class class$0 -> a
    void initGUI() -> a
    void cancel() -> b
    void closeDialog() -> c
    void setVisibleWithGeos(java.util.ArrayList) -> a
    void setVisible(boolean) -> setVisible
    void setViewActive(boolean) -> a
    void selectionChanged() -> d
    java.util.ArrayList updateSelectedGeos(javax.swing.tree.TreePath[]) -> a
    void geoElementSelected(geogebra.kernel.GeoElement,boolean) -> a
    void deleteSelectedGeos() -> e
    void windowActivated(java.awt.event.WindowEvent) -> windowActivated
    void windowDeactivated(java.awt.event.WindowEvent) -> windowDeactivated
    void windowClosing(java.awt.event.WindowEvent) -> windowClosing
    void windowClosed(java.awt.event.WindowEvent) -> windowClosed
    void windowDeiconified(java.awt.event.WindowEvent) -> windowDeiconified
    void windowIconified(java.awt.event.WindowEvent) -> windowIconified
    void windowOpened(java.awt.event.WindowEvent) -> windowOpened
    void windowGainedFocus(java.awt.event.WindowEvent) -> windowGainedFocus
    void windowLostFocus(java.awt.event.WindowEvent) -> windowLostFocus
    void valueChanged(javax.swing.event.TreeSelectionEvent) -> valueChanged
    void keyPressed(java.awt.event.KeyEvent) -> keyPressed
    void keyReleased(java.awt.event.KeyEvent) -> keyReleased
    void keyTyped(java.awt.event.KeyEvent) -> keyTyped
    geogebra.Application access$0(geogebra.gui.PropertiesDialogGeoElement) -> a
    geogebra.gui.PropertiesDialogGeoElement$PropertiesPanel access$1(geogebra.gui.PropertiesDialogGeoElement) -> a
    javax.swing.JColorChooser access$2(geogebra.gui.PropertiesDialogGeoElement) -> a
    geogebra.kernel.Kernel access$3(geogebra.gui.PropertiesDialogGeoElement) -> a
    void access$4(geogebra.gui.PropertiesDialogGeoElement) -> a
geogebra.gui.PropertiesDialogGeoElement$1 -> geogebra.gui.F:
    geogebra.gui.PropertiesDialogGeoElement this$0 -> a
    void mouseEntered(java.awt.event.MouseEvent) -> mouseEntered
geogebra.gui.PropertiesDialogGeoElement$2 -> geogebra.gui.H:
    geogebra.gui.PropertiesDialogGeoElement this$0 -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
geogebra.gui.PropertiesDialogGeoElement$3 -> geogebra.gui.I:
    geogebra.gui.PropertiesDialogGeoElement this$0 -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
geogebra.gui.PropertiesDialogGeoElement$AbsoluteScreenLocationPanel -> geogebra.gui.az:
    java.lang.Object[] geos -> a
    javax.swing.JCheckBox cbAbsScreenLoc -> a
    geogebra.gui.PropertiesDialogGeoElement this$0 -> a
    javax.swing.JPanel update(java.lang.Object[]) -> a
    boolean checkGeos(java.lang.Object[]) -> a
    void itemStateChanged(java.awt.event.ItemEvent) -> itemStateChanged
geogebra.gui.PropertiesDialogGeoElement$AllowOutlyingIntersectionsPanel -> geogebra.gui.p:
    java.lang.Object[] geos -> a
    javax.swing.JCheckBox outlyingIntersectionsCB -> a
    geogebra.gui.PropertiesDialogGeoElement this$0 -> a
    javax.swing.JPanel update(java.lang.Object[]) -> a
    boolean checkGeos(java.lang.Object[]) -> a
    void itemStateChanged(java.awt.event.ItemEvent) -> itemStateChanged
geogebra.gui.PropertiesDialogGeoElement$AllowReflexAnglePanel -> geogebra.gui.K:
    java.lang.Object[] geos -> a
    javax.swing.JCheckBox reflexAngleCB -> a
    javax.swing.JCheckBox forcereflexAngleCB -> b
    geogebra.gui.PropertiesDialogGeoElement this$0 -> a
    javax.swing.JPanel update(java.lang.Object[]) -> a
    boolean checkGeos(java.lang.Object[]) -> a
    void itemStateChanged(java.awt.event.ItemEvent) -> itemStateChanged
geogebra.gui.PropertiesDialogGeoElement$ArcSizePanel -> geogebra.gui.c:
    java.lang.Object[] geos -> a
    javax.swing.JSlider slider -> a
    geogebra.gui.PropertiesDialogGeoElement this$0 -> a
    void setMinValue() -> a
    javax.swing.JPanel update(java.lang.Object[]) -> a
    boolean checkGeos(java.lang.Object[]) -> a
    void stateChanged(javax.swing.event.ChangeEvent) -> stateChanged
geogebra.gui.PropertiesDialogGeoElement$AuxiliaryObjectPanel -> geogebra.gui.t:
    java.lang.Object[] geos -> a
    javax.swing.JCheckBox auxCB -> a
    geogebra.gui.PropertiesDialogGeoElement this$0 -> a
    javax.swing.JPanel update(java.lang.Object[]) -> a
    boolean checkGeos(java.lang.Object[]) -> a
    void itemStateChanged(java.awt.event.ItemEvent) -> itemStateChanged
geogebra.gui.PropertiesDialogGeoElement$BackgroundImagePanel -> geogebra.gui.bq:
    java.lang.Object[] geos -> a
    javax.swing.JCheckBox isBGimage -> a
    geogebra.gui.PropertiesDialogGeoElement this$0 -> a
    javax.swing.JPanel update(java.lang.Object[]) -> a
    boolean checkGeos(java.lang.Object[]) -> a
    void itemStateChanged(java.awt.event.ItemEvent) -> itemStateChanged
geogebra.gui.PropertiesDialogGeoElement$CheckBoxFixPanel -> geogebra.gui.e:
    java.lang.Object[] geos -> a
    javax.swing.JCheckBox checkboxFixCB -> a
    geogebra.gui.PropertiesDialogGeoElement this$0 -> a
    javax.swing.JPanel update(java.lang.Object[]) -> a
    boolean checkGeos(java.lang.Object[]) -> a
    void itemStateChanged(java.awt.event.ItemEvent) -> itemStateChanged
geogebra.gui.PropertiesDialogGeoElement$ColorPanel -> geogebra.gui.bx:
    java.lang.Object[] geos -> a
    javax.swing.JPanel previewPanel -> a
    geogebra.gui.PropertiesDialogGeoElement this$0 -> a
    javax.swing.JPanel update(java.lang.Object[]) -> a
    void updateColor(java.awt.Color) -> a
    boolean checkGeos(java.lang.Object[]) -> a
    void stateChanged(javax.swing.event.ChangeEvent) -> stateChanged
    geogebra.gui.PropertiesDialogGeoElement access$0(geogebra.gui.PropertiesDialogGeoElement$ColorPanel) -> a
geogebra.gui.PropertiesDialogGeoElement$ColorPanel$PreviewPanel -> geogebra.gui.D:
    geogebra.gui.PropertiesDialogGeoElement$ColorPanel this$1 -> a
    void paintComponent(java.awt.Graphics) -> paintComponent
geogebra.gui.PropertiesDialogGeoElement$ConicEqnPanel -> geogebra.gui.aK:
    java.lang.Object[] geos -> a
    javax.swing.DefaultComboBoxModel eqnCBmodel -> a
    javax.swing.JComboBox eqnCB -> a
    javax.swing.JLabel eqnLabel -> a
    int implicitIndex -> a
    int explicitIndex -> b
    int specificIndex -> c
    geogebra.gui.PropertiesDialogGeoElement this$0 -> a
    javax.swing.JPanel update(java.lang.Object[]) -> a
    boolean checkGeos(java.lang.Object[]) -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
geogebra.gui.PropertiesDialogGeoElement$CoordPanel -> geogebra.gui.f:
    java.lang.Object[] geos -> a
    javax.swing.JComboBox coordCB -> a
    geogebra.gui.PropertiesDialogGeoElement this$0 -> a
    javax.swing.JPanel update(java.lang.Object[]) -> a
    boolean checkGeos(java.lang.Object[]) -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
geogebra.gui.PropertiesDialogGeoElement$CornerPointsPanel -> geogebra.gui.v:
    java.lang.Object[] geos -> a
    javax.swing.JComboBox[] cbLocation -> a
    javax.swing.DefaultComboBoxModel[] cbModel -> a
    geogebra.gui.PropertiesDialogGeoElement this$0 -> a
    javax.swing.JPanel update(java.lang.Object[]) -> a
    boolean checkGeos(java.lang.Object[]) -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
    void doActionPerformed(java.lang.Object) -> a
    void focusGained(java.awt.event.FocusEvent) -> focusGained
    void focusLost(java.awt.event.FocusEvent) -> focusLost
geogebra.gui.PropertiesDialogGeoElement$DecoAnglePanel -> geogebra.gui.m:
    javax.swing.JComboBox decoCombo -> a
    java.lang.Object[] geos -> a
    geogebra.gui.PropertiesDialogGeoElement this$0 -> a
    javax.swing.JPanel update(java.lang.Object[]) -> a
    boolean checkGeos(java.lang.Object[]) -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
geogebra.gui.PropertiesDialogGeoElement$DecoSegmentPanel -> geogebra.gui.bp:
    javax.swing.JComboBox decoCombo -> a
    java.lang.Object[] geos -> a
    geogebra.gui.PropertiesDialogGeoElement this$0 -> a
    javax.swing.JPanel update(java.lang.Object[]) -> a
    boolean checkGeos(java.lang.Object[]) -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
geogebra.gui.PropertiesDialogGeoElement$FillingPanel -> geogebra.gui.P:
    java.lang.Object[] geos -> a
    javax.swing.JSlider slider -> a
    geogebra.gui.PropertiesDialogGeoElement this$0 -> a
    javax.swing.JPanel update(java.lang.Object[]) -> a
    boolean checkGeos(java.lang.Object[]) -> a
    void stateChanged(javax.swing.event.ChangeEvent) -> stateChanged
geogebra.gui.PropertiesDialogGeoElement$FixPanel -> geogebra.gui.Q:
    java.lang.Object[] geos -> a
    javax.swing.JCheckBox showFixCB -> a
    geogebra.gui.PropertiesDialogGeoElement this$0 -> a
    javax.swing.JPanel update(java.lang.Object[]) -> a
    boolean checkGeos(java.lang.Object[]) -> a
    void itemStateChanged(java.awt.event.ItemEvent) -> itemStateChanged
geogebra.gui.PropertiesDialogGeoElement$JTreeGeoElements -> geogebra.gui.h:
    javax.swing.tree.DefaultTreeModel treeModel -> a
    javax.swing.tree.DefaultMutableTreeNode root -> a
    java.util.HashMap typeNodesMap -> a
    geogebra.gui.PropertiesDialogGeoElement this$0 -> a
    void setExpandedState(javax.swing.tree.TreePath,boolean) -> setExpandedState
    void expandAll() -> a
    void collapseAll() -> b
    void setSelected(java.util.ArrayList,boolean) -> a
    void selectFirstElement() -> f
    javax.swing.tree.TreePath getGeoPath(geogebra.kernel.GeoElement) -> a
    void clearSelection() -> clearSelection
    void clear() -> g
    void add(geogebra.kernel.GeoElement) -> a
    void remove(geogebra.kernel.GeoElement) -> b
    void remove(geogebra.kernel.GeoElement,boolean) -> a
    javax.swing.tree.TreePath getTreePath(geogebra.kernel.GeoElement) -> b
    void rename(geogebra.kernel.GeoElement) -> c
    void update(geogebra.kernel.GeoElement) -> d
    void updateAuxiliaryObject(geogebra.kernel.GeoElement) -> e
    void reset() -> c
    void clearView() -> d
    void repaintView() -> e
    void mouseDragged(java.awt.event.MouseEvent) -> mouseDragged
    void mouseMoved(java.awt.event.MouseEvent) -> mouseMoved
    void mouseClicked(java.awt.event.MouseEvent) -> mouseClicked
    void mouseEntered(java.awt.event.MouseEvent) -> mouseEntered
    void mouseExited(java.awt.event.MouseEvent) -> mouseExited
    void mousePressed(java.awt.event.MouseEvent) -> mousePressed
    void mouseReleased(java.awt.event.MouseEvent) -> mouseReleased
    javax.swing.tree.DefaultMutableTreeNode access$0(geogebra.gui.PropertiesDialogGeoElement$JTreeGeoElements) -> a
    void access$1(geogebra.gui.PropertiesDialogGeoElement$JTreeGeoElements) -> a
    javax.swing.tree.TreePath access$2(geogebra.gui.PropertiesDialogGeoElement$JTreeGeoElements,geogebra.kernel.GeoElement) -> a
geogebra.gui.PropertiesDialogGeoElement$LabelPanel -> geogebra.gui.aw:
    java.lang.Object[] geos -> a
    javax.swing.JCheckBox showLabelCB -> a
    javax.swing.JComboBox labelModeCB -> a
    boolean showNameValueComboBox -> a
    geogebra.gui.PropertiesDialogGeoElement this$0 -> a
    javax.swing.JPanel update(java.lang.Object[]) -> a
    boolean checkGeos(java.lang.Object[]) -> a
    void itemStateChanged(java.awt.event.ItemEvent) -> itemStateChanged
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
geogebra.gui.PropertiesDialogGeoElement$LayerPanel -> geogebra.gui.bA:
    java.lang.Object[] geos -> a
    javax.swing.JComboBox layerModeCB -> a
    javax.swing.JLabel layerLabel -> a
    geogebra.gui.PropertiesDialogGeoElement this$0 -> a
    javax.swing.JPanel update(java.lang.Object[]) -> a
    boolean checkGeos(java.lang.Object[]) -> a
    void itemStateChanged(java.awt.event.ItemEvent) -> itemStateChanged
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
geogebra.gui.PropertiesDialogGeoElement$LineEqnPanel -> geogebra.gui.bC:
    java.lang.Object[] geos -> a
    javax.swing.DefaultComboBoxModel eqnCBmodel -> a
    javax.swing.JComboBox eqnCB -> a
    javax.swing.JLabel eqnLabel -> a
    geogebra.gui.PropertiesDialogGeoElement this$0 -> a
    javax.swing.JPanel update(java.lang.Object[]) -> a
    boolean checkGeos(java.lang.Object[]) -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
geogebra.gui.PropertiesDialogGeoElement$LineStylePanel -> geogebra.gui.bE:
    java.lang.Object[] geos -> a
    javax.swing.JSlider slider -> a
    javax.swing.JComboBox dashCB -> a
    geogebra.gui.PropertiesDialogGeoElement this$0 -> a
    javax.swing.JPanel update(java.lang.Object[]) -> a
    boolean checkGeos(java.lang.Object[]) -> a
    void stateChanged(javax.swing.event.ChangeEvent) -> stateChanged
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
geogebra.gui.PropertiesDialogGeoElement$PointSizePanel -> geogebra.gui.M:
    java.lang.Object[] geos -> a
    javax.swing.JSlider slider -> a
    geogebra.gui.PropertiesDialogGeoElement this$0 -> a
    javax.swing.JPanel update(java.lang.Object[]) -> a
    boolean checkGeos(java.lang.Object[]) -> a
    void stateChanged(javax.swing.event.ChangeEvent) -> stateChanged
geogebra.gui.PropertiesDialogGeoElement$PropertiesPanel -> geogebra.gui.L:
    geogebra.gui.NamePanel namePanel -> a
    geogebra.gui.PropertiesDialogGeoElement$ShowObjectPanel showObjectPanel -> a
    geogebra.gui.PropertiesDialogGeoElement$ColorPanel colorPanel -> a
    geogebra.gui.PropertiesDialogGeoElement$LabelPanel labelPanel -> a
    geogebra.gui.PropertiesDialogGeoElement$LayerPanel layerPanel -> a
    geogebra.gui.PropertiesDialogGeoElement$CoordPanel coordPanel -> a
    geogebra.gui.PropertiesDialogGeoElement$LineEqnPanel lineEqnPanel -> a
    geogebra.gui.PropertiesDialogGeoElement$ConicEqnPanel conicEqnPanel -> a
    geogebra.gui.PropertiesDialogGeoElement$PointSizePanel pointSizePanel -> a
    geogebra.gui.PropertiesDialogGeoElement$TextOptionsPanel textOptionsPanel -> a
    geogebra.gui.PropertiesDialogGeoElement$ArcSizePanel arcSizePanel -> a
    geogebra.gui.PropertiesDialogGeoElement$LineStylePanel lineStylePanel -> a
    geogebra.gui.PropertiesDialogGeoElement$DecoSegmentPanel decoSegmentPanel -> a
    geogebra.gui.PropertiesDialogGeoElement$DecoAnglePanel decoAnglePanel -> a
    geogebra.gui.PropertiesDialogGeoElement$RightAnglePanel rightAnglePanel -> a
    geogebra.gui.PropertiesDialogGeoElement$FillingPanel fillingPanel -> a
    geogebra.gui.PropertiesDialogGeoElement$TracePanel tracePanel -> a
    geogebra.gui.PropertiesDialogGeoElement$FixPanel fixPanel -> a
    geogebra.gui.PropertiesDialogGeoElement$CheckBoxFixPanel checkBoxFixPanel -> a
    geogebra.gui.PropertiesDialogGeoElement$AllowReflexAnglePanel allowReflexAnglePanel -> a
    geogebra.gui.PropertiesDialogGeoElement$AllowOutlyingIntersectionsPanel allowOutlyingIntersectionsPanel -> a
    geogebra.gui.PropertiesDialogGeoElement$AuxiliaryObjectPanel auxPanel -> a
    geogebra.gui.AnimationStepPanel animStepPanel -> a
    geogebra.gui.SliderPanel sliderPanel -> a
    geogebra.gui.PropertiesDialogGeoElement$SlopeTriangleSizePanel slopeTriangleSizePanel -> a
    geogebra.gui.PropertiesDialogGeoElement$StartPointPanel startPointPanel -> a
    geogebra.gui.PropertiesDialogGeoElement$CornerPointsPanel cornerPointsPanel -> a
    geogebra.gui.PropertiesDialogGeoElement$TextEditPanel textEditPanel -> a
    geogebra.gui.PropertiesDialogGeoElement$BackgroundImagePanel bgImagePanel -> a
    geogebra.gui.PropertiesDialogGeoElement$AbsoluteScreenLocationPanel absScreenLocPanel -> a
    geogebra.gui.ShowConditionPanel showConditionPanel -> a
    geogebra.gui.ColorFunctionPanel colorFunctionPanel -> a
    javax.swing.JTabbedPane tabs -> a
    java.util.ArrayList tabPanelList -> a
    geogebra.gui.PropertiesDialogGeoElement this$0 -> a
    void setSliderMinValue() -> a
    void initTabs() -> b
    void updateTabs(java.lang.Object[]) -> b
    boolean updateTabPanel(geogebra.gui.PropertiesDialogGeoElement$PropertiesPanel$TabPanel,java.util.ArrayList,java.lang.Object[]) -> a
    void updateSelection(java.lang.Object[]) -> a
    boolean access$0(geogebra.gui.PropertiesDialogGeoElement$PropertiesPanel,geogebra.gui.PropertiesDialogGeoElement$PropertiesPanel$TabPanel,java.util.ArrayList,java.lang.Object[]) -> a
geogebra.gui.PropertiesDialogGeoElement$PropertiesPanel$TabPanel -> geogebra.gui.aD:
    java.lang.String title -> a
    java.util.ArrayList panelList -> a
    boolean makeVisible -> a
    geogebra.gui.PropertiesDialogGeoElement$PropertiesPanel this$1 -> a
    void update(java.lang.Object[]) -> a
    void addToTabbedPane(javax.swing.JTabbedPane) -> a
geogebra.gui.PropertiesDialogGeoElement$RightAnglePanel -> geogebra.gui.ag:
    javax.swing.JCheckBox emphasizeRightAngle -> a
    java.lang.Object[] geos -> a
    geogebra.gui.PropertiesDialogGeoElement this$0 -> a
    javax.swing.JPanel update(java.lang.Object[]) -> a
    boolean checkGeos(java.lang.Object[]) -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
geogebra.gui.PropertiesDialogGeoElement$ShowObjectPanel -> geogebra.gui.s:
    java.lang.Object[] geos -> a
    javax.swing.JCheckBox showObjectCB -> a
    geogebra.gui.PropertiesDialogGeoElement this$0 -> a
    javax.swing.JPanel update(java.lang.Object[]) -> a
    boolean checkGeos(java.lang.Object[]) -> a
    void itemStateChanged(java.awt.event.ItemEvent) -> itemStateChanged
geogebra.gui.PropertiesDialogGeoElement$SlopeTriangleSizePanel -> geogebra.gui.bD:
    java.lang.Object[] geos -> a
    javax.swing.JSlider slider -> a
    geogebra.gui.PropertiesDialogGeoElement this$0 -> a
    javax.swing.JPanel update(java.lang.Object[]) -> a
    boolean checkGeos(java.lang.Object[]) -> a
    void stateChanged(javax.swing.event.ChangeEvent) -> stateChanged
geogebra.gui.PropertiesDialogGeoElement$StartPointPanel -> geogebra.gui.bo:
    java.lang.Object[] geos -> a
    javax.swing.JComboBox cbLocation -> a
    javax.swing.DefaultComboBoxModel cbModel -> a
    geogebra.gui.PropertiesDialogGeoElement this$0 -> a
    javax.swing.JPanel update(java.lang.Object[]) -> a
    boolean checkGeos(java.lang.Object[]) -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
    void doActionPerformed() -> a
    void focusGained(java.awt.event.FocusEvent) -> focusGained
    void focusLost(java.awt.event.FocusEvent) -> focusLost
geogebra.gui.PropertiesDialogGeoElement$TextEditPanel -> geogebra.gui.ah:
    geogebra.gui.TextInputDialog td -> a
    geogebra.gui.PropertiesDialogGeoElement this$0 -> a
    javax.swing.JPanel update(java.lang.Object[]) -> a
    boolean checkGeos(java.lang.Object[]) -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
geogebra.gui.PropertiesDialogGeoElement$TextOptionsPanel -> geogebra.gui.aB:
    java.lang.Object[] geos -> a
    javax.swing.JComboBox cbFont -> a
    javax.swing.JComboBox cbSize -> b
    javax.swing.JComboBox cbDecimalPlaces -> c
    javax.swing.JToggleButton btBold -> a
    javax.swing.JToggleButton btItalic -> b
    javax.swing.JPanel secondLine -> a
    boolean secondLineVisible -> a
    geogebra.gui.PropertiesDialogGeoElement this$0 -> a
    javax.swing.JPanel update(java.lang.Object[]) -> a
    boolean checkGeos(java.lang.Object[]) -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
geogebra.gui.PropertiesDialogGeoElement$TracePanel -> geogebra.gui.an:
    java.lang.Object[] geos -> a
    javax.swing.JCheckBox showTraceCB -> a
    geogebra.gui.PropertiesDialogGeoElement this$0 -> a
    javax.swing.JPanel update(java.lang.Object[]) -> a
    boolean checkGeos(java.lang.Object[]) -> a
    void itemStateChanged(java.awt.event.ItemEvent) -> itemStateChanged
geogebra.gui.PropertiesDialogGraphicsWindow -> geogebra.gui.ae:
    java.lang.String PI_STR -> a
    geogebra.Application app -> a
    geogebra.kernel.Kernel kernel -> a
    geogebra.euclidian.EuclidianView view -> a
    javax.swing.JButton closeButton -> a
    javax.swing.JButton btBackgroundColor -> b
    javax.swing.JButton btAxesColor -> c
    javax.swing.JButton btGridColor -> d
    javax.swing.JCheckBox cbShowAxes -> a
    javax.swing.JCheckBox cbShowGrid -> b
    javax.swing.JCheckBox cbBoldGrid -> c
    javax.swing.JCheckBox cbIsometric -> d
    javax.swing.JCheckBox cbGridManualTick -> e
    javax.swing.JComboBox cbAxesStyle -> a
    javax.swing.JComboBox cbGridStyle -> b
    javax.swing.JTextField tfAxesRatioX -> a
    javax.swing.JTextField tfAxesRatioY -> b
    java.text.NumberFormat nfAxesRatio -> a
    geogebra.gui.NumberComboBox ncbGridTickX -> a
    geogebra.gui.NumberComboBox ncbGridTickY -> b
    geogebra.gui.PropertiesDialogGraphicsWindow$AxisPanel xAxisPanel -> a
    geogebra.gui.PropertiesDialogGraphicsWindow$AxisPanel yAxisPanel -> b
    void setVisible(boolean) -> setVisible
    void initGUI() -> a
    javax.swing.JPanel buildGridPanel() -> a
    void updateDialog() -> b
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
    void doActionPerformed(java.lang.Object) -> a
    double parseDouble(java.lang.String) -> a
    void itemStateChanged(java.awt.event.ItemEvent) -> itemStateChanged
    void packDialog() -> c
    void windowActivated(java.awt.event.WindowEvent) -> windowActivated
    void windowDeactivated(java.awt.event.WindowEvent) -> windowDeactivated
    void windowClosing(java.awt.event.WindowEvent) -> windowClosing
    void windowClosed(java.awt.event.WindowEvent) -> windowClosed
    void windowDeiconified(java.awt.event.WindowEvent) -> windowDeiconified
    void windowIconified(java.awt.event.WindowEvent) -> windowIconified
    void windowOpened(java.awt.event.WindowEvent) -> windowOpened
    void focusGained(java.awt.event.FocusEvent) -> focusGained
    void focusLost(java.awt.event.FocusEvent) -> focusLost
    geogebra.Application access$0(geogebra.gui.PropertiesDialogGraphicsWindow) -> a
    java.lang.String access$1() -> a
    geogebra.euclidian.EuclidianView access$2(geogebra.gui.PropertiesDialogGraphicsWindow) -> a
    void access$3(geogebra.gui.PropertiesDialogGraphicsWindow) -> a
geogebra.gui.PropertiesDialogGraphicsWindow$AxisPanel -> geogebra.gui.aC:
    int axis -> a
    javax.swing.JCheckBox cbShowAxis -> a
    javax.swing.JCheckBox cbAxisNumber -> b
    javax.swing.JCheckBox cbManualTicks -> c
    geogebra.gui.NumberComboBox ncbTickDist -> a
    geogebra.gui.NumberComboBox ncbMin -> b
    geogebra.gui.NumberComboBox ncbMax -> c
    javax.swing.JComboBox cbTickStyle -> a
    javax.swing.JComboBox cbAxisLabel -> b
    javax.swing.JComboBox cbUnitLabel -> c
    geogebra.gui.PropertiesDialogGraphicsWindow this$0 -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
    void itemStateChanged(java.awt.event.ItemEvent) -> itemStateChanged
    void updatePanel() -> a
geogebra.gui.RedefineInputHandler -> geogebra.gui.T:
    geogebra.kernel.GeoElement geo -> a
    geogebra.Application app -> a
    java.lang.String oldString -> a
    void setGeoElement(geogebra.kernel.GeoElement) -> a
    boolean processInput(java.lang.String) -> a
geogebra.gui.RenameInputHandler -> geogebra.gui.aJ:
    geogebra.kernel.GeoElement geo -> a
    boolean storeUndo -> a
    geogebra.Application app -> a
    java.lang.String[] invalidFunctionNames -> a
    void setGeoElement(geogebra.kernel.GeoElement) -> a
    boolean processInput(java.lang.String) -> a
    boolean checkName(geogebra.kernel.GeoElement,java.lang.String) -> a
geogebra.gui.ShowConditionPanel -> geogebra.gui.aQ:
    java.lang.Object[] geos -> a
    javax.swing.JTextField tfCondition -> a
    geogebra.kernel.Kernel kernel -> a
    geogebra.gui.PropertiesDialogGeoElement$PropertiesPanel propPanel -> a
    javax.swing.JPanel update(java.lang.Object[]) -> a
    boolean checkGeos(java.lang.Object[]) -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
    void doActionPerformed() -> a
    void focusGained(java.awt.event.FocusEvent) -> focusGained
    void focusLost(java.awt.event.FocusEvent) -> focusLost
geogebra.gui.SliderDialog -> geogebra.gui.E:
    javax.swing.JButton btApply -> a
    javax.swing.JButton btCancel -> b
    javax.swing.JRadioButton rbNumber -> a
    javax.swing.JRadioButton rbAngle -> b
    geogebra.gui.InputPanel tfLabel -> a
    javax.swing.JPanel optionPane -> a
    geogebra.Application app -> a
    geogebra.gui.SliderPanel sliderPanel -> a
    geogebra.kernel.GeoElement geoResult -> a
    geogebra.kernel.GeoNumeric number -> a
    geogebra.kernel.GeoAngle angle -> a
    void createGUI() -> a
    geogebra.kernel.GeoElement getResult() -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
    void setLabelFieldFocus() -> b
    void keyPressed(java.awt.event.KeyEvent) -> keyPressed
    void keyReleased(java.awt.event.KeyEvent) -> keyReleased
    void keyTyped(java.awt.event.KeyEvent) -> keyTyped
    void windowActivated(java.awt.event.WindowEvent) -> windowActivated
    void windowClosed(java.awt.event.WindowEvent) -> windowClosed
    void windowClosing(java.awt.event.WindowEvent) -> windowClosing
    void windowDeactivated(java.awt.event.WindowEvent) -> windowDeactivated
    void windowDeiconified(java.awt.event.WindowEvent) -> windowDeiconified
    void windowIconified(java.awt.event.WindowEvent) -> windowIconified
    void windowOpened(java.awt.event.WindowEvent) -> windowOpened
geogebra.gui.SliderPanel -> geogebra.gui.am:
    java.lang.Object[] geos -> a
    javax.swing.JTextField tfMin -> a
    javax.swing.JTextField tfMax -> b
    javax.swing.JTextField tfWidth -> c
    javax.swing.JTextField[] tfields -> a
    javax.swing.JCheckBox cbSliderFixed -> a
    javax.swing.JComboBox coSliderHorizontal -> a
    geogebra.Application app -> a
    geogebra.gui.PropertiesDialogGeoElement$PropertiesPanel propPanel -> a
    geogebra.gui.AnimationStepPanel stepPanel -> a
    geogebra.kernel.Kernel kernel -> a
    javax.swing.JPanel update(java.lang.Object[]) -> a
    boolean checkGeos(java.lang.Object[]) -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
    void doCheckBoxActionPerformed(javax.swing.JCheckBox) -> a
    void doComboBoxActionPerformed(javax.swing.JComboBox) -> a
    void doTextFieldActionPerformed(javax.swing.JTextField) -> a
    void focusGained(java.awt.event.FocusEvent) -> focusGained
    void focusLost(java.awt.event.FocusEvent) -> focusLost
geogebra.gui.SplashWindow -> geogebra.gui.bn:
    java.awt.Image splashImage -> a
    boolean paintCalled -> a
    void update(java.awt.Graphics) -> update
    void paint(java.awt.Graphics) -> paint
    java.awt.Frame splash(java.awt.Image) -> a
    void access$0(geogebra.gui.SplashWindow,boolean) -> a
geogebra.gui.SplashWindow$1 -> geogebra.gui.bH:
    geogebra.gui.SplashWindow this$0 -> a
    void mouseClicked(java.awt.event.MouseEvent) -> mouseClicked
geogebra.gui.TextInputDialog -> geogebra.gui.x:
    javax.swing.JCheckBox cbLaTeX -> a
    javax.swing.JComboBox cbLaTeXshortcuts -> a
    javax.swing.JPanel latexPanel -> a
    geogebra.kernel.GeoText text -> a
    boolean isLaTeX -> a
    geogebra.kernel.GeoPoint startPoint -> a
    void setGeoText(geogebra.kernel.GeoText) -> a
    javax.swing.JPanel getLaTeXPanel() -> a
    javax.swing.JPanel getInputPanel() -> b
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
    void insertGeoElement(geogebra.kernel.GeoElement) -> a
    int countChar(char,java.lang.String) -> a
    javax.swing.JComboBox access$0(geogebra.gui.TextInputDialog) -> a
    geogebra.kernel.GeoText access$1(geogebra.gui.TextInputDialog) -> a
    boolean access$2(geogebra.gui.TextInputDialog) -> a
    geogebra.kernel.GeoPoint access$3(geogebra.gui.TextInputDialog) -> a
geogebra.gui.TextInputDialog$ComboBoxListener -> geogebra.gui.aN:
    geogebra.gui.TextInputDialog this$0 -> a
    void doActionPerformed(java.lang.Object) -> a
geogebra.gui.TextInputDialog$TextInputHandler -> geogebra.gui.u:
    geogebra.kernel.Kernel kernel -> a
    geogebra.euclidian.EuclidianView euclidianView -> a
    geogebra.gui.TextInputDialog this$0 -> a
    boolean processInput(java.lang.String) -> a
geogebra.gui.TitlePanel -> geogebra.gui.aX:
    javax.swing.JTextField titleField -> a
    javax.swing.JTextField authorField -> b
    javax.swing.JFormattedTextField dateField -> a
    java.util.ArrayList listeners -> a
    geogebra.kernel.Construction cons -> a
    java.lang.String configureDate(java.lang.String) -> a
    java.lang.String loadAuthor() -> a
    boolean saveAuthor(java.lang.String) -> a
    void fireTextFieldUpdate(javax.swing.JTextField) -> a
    void addActionListener(java.awt.event.ActionListener) -> a
    void notifyListeners() -> a
    void access$0(geogebra.gui.TitlePanel,javax.swing.JTextField) -> a
geogebra.gui.TitlePanel$1 -> geogebra.gui.bz:
    geogebra.gui.TitlePanel this$0 -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
geogebra.gui.TitlePanel$2 -> geogebra.gui.by:
    geogebra.gui.TitlePanel this$0 -> a
    void focusLost(java.awt.event.FocusEvent) -> focusLost
geogebra.gui.ToolCreationDialog -> geogebra.gui.J:
    geogebra.Application app -> a
    javax.swing.JTabbedPane tabbedPane -> a
    geogebra.gui.ToolNameIconPanel namePanel -> a
    geogebra.gui.ToolCreationDialog$OutputListModel outputList -> a
    geogebra.gui.ToolCreationDialog$InputListModel inputList -> a
    javax.swing.DefaultComboBoxModel cbInputAddList -> a
    javax.swing.DefaultComboBoxModel cbOutputAddList -> b
    geogebra.kernel.Macro newTool -> a
    void setVisible(boolean) -> setVisible
    boolean createTool() -> a
    void finish() -> a
    void updateInputList() -> b
    javax.swing.JComboBox removeListeningJComboBox(javax.swing.DefaultComboBoxModel) -> a
    geogebra.kernel.GeoElement[] toGeoElements(javax.swing.DefaultListModel) -> a
    void initLists() -> c
    boolean possibleInput(geogebra.kernel.GeoElement) -> a
    void initGUI() -> d
    javax.swing.JPanel createNavigationPanel() -> a
    javax.swing.JPanel createInputOutputPanel(geogebra.Application,javax.swing.DefaultListModel,javax.swing.DefaultComboBoxModel,boolean) -> a
    javax.swing.JPanel createListUpDownRemovePanel(geogebra.Application,javax.swing.JList,javax.swing.JComboBox,boolean,boolean) -> a
    void geoElementSelected(geogebra.kernel.GeoElement,boolean) -> a
    javax.swing.JComboBox access$0(geogebra.gui.ToolCreationDialog,javax.swing.DefaultComboBoxModel) -> a
    boolean access$1(geogebra.gui.ToolCreationDialog,geogebra.kernel.GeoElement) -> a
    geogebra.gui.ToolCreationDialog$OutputListModel access$2(geogebra.gui.ToolCreationDialog) -> a
    javax.swing.JTabbedPane access$3(geogebra.gui.ToolCreationDialog) -> a
    void access$4(geogebra.gui.ToolCreationDialog) -> a
    void access$5(geogebra.gui.ToolCreationDialog) -> b
    geogebra.Application access$6(geogebra.gui.ToolCreationDialog) -> a
    boolean access$7(geogebra.gui.ToolCreationDialog) -> a
    geogebra.gui.ToolCreationDialog$InputListModel access$8(geogebra.gui.ToolCreationDialog) -> a
    geogebra.gui.ToolNameIconPanel access$9(geogebra.gui.ToolCreationDialog) -> a
geogebra.gui.ToolCreationDialog$1 -> geogebra.gui.o:
    geogebra.gui.ToolCreationDialog this$0 -> a
    void removeElement(java.lang.Object) -> removeElement
geogebra.gui.ToolCreationDialog$2 -> geogebra.gui.n:
    geogebra.gui.ToolCreationDialog this$0 -> a
    javax.swing.JButton val$btNext -> a
    javax.swing.JButton val$btBack -> b
    javax.swing.JButton val$btCancel -> c
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
geogebra.gui.ToolCreationDialog$3 -> geogebra.gui.l:
    geogebra.gui.ToolCreationDialog this$0 -> a
    javax.swing.JButton val$btBack -> a
    javax.swing.JButton val$btNext -> b
    void stateChanged(javax.swing.event.ChangeEvent) -> stateChanged
geogebra.gui.ToolCreationDialog$4 -> geogebra.gui.j:
    javax.swing.JComboBox val$cbAdd -> a
    javax.swing.DefaultListModel val$listModel -> a
    void doActionPerformed(java.lang.Object) -> a
geogebra.gui.ToolCreationDialog$5 -> geogebra.gui.k:
    javax.swing.JList val$list -> a
    javax.swing.JButton val$btUp -> a
    javax.swing.JButton val$btDown -> b
    javax.swing.JButton val$btRemove -> c
    javax.swing.JComboBox val$cbAdd -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
geogebra.gui.ToolCreationDialog$InputListModel -> geogebra.gui.aO:
    javax.swing.DefaultComboBoxModel cbInputAddList -> a
    geogebra.gui.ToolCreationDialog this$0 -> a
    void addElement(java.lang.Object) -> addElement
geogebra.gui.ToolCreationDialog$OutputListModel -> geogebra.gui.bG:
    javax.swing.DefaultComboBoxModel cbOutputAddList -> a
    geogebra.gui.ToolCreationDialog this$0 -> a
    void addElement(java.lang.Object) -> addElement
geogebra.gui.ToolManagerDialog -> geogebra.gui.bt:
    geogebra.Application app -> a
    javax.swing.DefaultListModel toolsModel -> a
    void setVisible(boolean) -> setVisible
    void updateToolBar(javax.swing.DefaultListModel) -> a
    void deleteTools(javax.swing.JList,javax.swing.DefaultListModel) -> a
    void saveTools(javax.swing.JList) -> a
    void initGUI() -> a
    void insertTools(javax.swing.DefaultListModel) -> b
    geogebra.Application access$0(geogebra.gui.ToolManagerDialog) -> a
    javax.swing.DefaultListModel access$1(geogebra.gui.ToolManagerDialog) -> a
    void access$2(geogebra.gui.ToolManagerDialog,javax.swing.JList,javax.swing.DefaultListModel) -> a
    void access$3(geogebra.gui.ToolManagerDialog,javax.swing.JList) -> a
geogebra.gui.ToolManagerDialog$1 -> geogebra.gui.bs:
    geogebra.gui.ToolManagerDialog this$0 -> a
    javax.swing.JButton val$btClose -> a
    geogebra.gui.ToolNameIconPanel val$namePanel -> a
    javax.swing.JButton val$btDelete -> b
    javax.swing.JList val$toolList -> a
    javax.swing.JButton val$btSave -> c
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
geogebra.gui.ToolManagerDialog$2 -> geogebra.gui.br:
    geogebra.gui.ToolManagerDialog this$0 -> a
    javax.swing.ListSelectionModel val$selModel -> a
    javax.swing.JList val$toolList -> a
    geogebra.gui.ToolNameIconPanel val$namePanel -> a
    void valueChanged(javax.swing.event.ListSelectionEvent) -> valueChanged
geogebra.gui.ToolManagerDialog$MacroCellRenderer -> geogebra.gui.bF:
    geogebra.gui.ToolManagerDialog this$0 -> a
    java.awt.Component getListCellRendererComponent(javax.swing.JList,java.lang.Object,int,boolean,boolean) -> getListCellRendererComponent
geogebra.gui.ToolNameIconPanel -> geogebra.gui.aS:
    javax.swing.JTextField tfCmdName -> a
    javax.swing.JTextField tfToolHelp -> b
    javax.swing.JTextField tfToolName -> c
    javax.swing.JCheckBox cbShowInToolBar -> a
    javax.swing.JLabel labelIcon -> a
    java.lang.String iconFileName -> a
    javax.swing.JButton btIconFile -> a
    geogebra.Application app -> a
    geogebra.gui.ToolManagerDialog managerDialog -> a
    geogebra.kernel.Macro macro -> a
    void updateMacro() -> a
    void init(geogebra.gui.ToolManagerDialog,geogebra.kernel.Macro) -> a
    void requestFocus() -> requestFocus
    java.lang.String getCommandName() -> a
    java.lang.String getToolName() -> b
    java.lang.String getToolHelp() -> c
    boolean showInToolBar() -> a
    java.lang.String getIconFileName() -> d
    void updateCmdName(java.lang.Object) -> a
    java.lang.String defaultToolName() -> e
    void access$0(geogebra.gui.ToolNameIconPanel,java.lang.Object) -> a
    void access$1(geogebra.gui.ToolNameIconPanel,java.lang.String) -> a
    javax.swing.JLabel access$2(geogebra.gui.ToolNameIconPanel) -> a
    void access$3(geogebra.gui.ToolNameIconPanel) -> a
    javax.swing.JCheckBox access$4(geogebra.gui.ToolNameIconPanel) -> a
    javax.swing.JButton access$5(geogebra.gui.ToolNameIconPanel) -> a
geogebra.gui.ToolNameIconPanel$1 -> geogebra.gui.A:
    geogebra.gui.ToolNameIconPanel this$0 -> a
    void keyPressed(java.awt.event.KeyEvent) -> keyPressed
    void keyReleased(java.awt.event.KeyEvent) -> keyReleased
    void keyTyped(java.awt.event.KeyEvent) -> keyTyped
geogebra.gui.ToolNameIconPanel$2 -> geogebra.gui.B:
    geogebra.gui.ToolNameIconPanel this$0 -> a
    void focusGained(java.awt.event.FocusEvent) -> focusGained
    void focusLost(java.awt.event.FocusEvent) -> focusLost
geogebra.gui.ToolNameIconPanel$3 -> geogebra.gui.y:
    geogebra.gui.ToolNameIconPanel this$0 -> a
    geogebra.Application val$app -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
geogebra.gui.ToolNameIconPanel$4 -> geogebra.gui.z:
    geogebra.gui.ToolNameIconPanel this$0 -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
geogebra.gui.UpdateablePanel -> geogebra.gui.U:
    javax.swing.JPanel update(java.lang.Object[]) -> a
    void setVisible(boolean) -> setVisible
geogebra.gui.menubar.GeoGebraMenuBar -> geogebra.gui.menubar.GeoGebraMenuBar:
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
geogebra.gui.menubar.LoadFileListener -> geogebra.gui.menubar.LoadFileListener:
    geogebra.Application app -> a
    java.io.File file -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
geogebra.gui.menubar.Menubar -> geogebra.gui.menubar.Menubar:
    void initMenubar() -> initMenubar
    void updateMenubar() -> updateMenubar
    void updateMenuFile() -> updateMenuFile
    void updateMenuWindow() -> updateMenuWindow
    void updateSelection() -> updateSelection
geogebra.gui.menubar.MenubarImpl -> geogebra.gui.menubar.MenubarImpl:
    javax.swing.AbstractAction refreshAction -> a
    javax.swing.AbstractAction DataFromClipboardAction -> b
    javax.swing.AbstractAction drawingPadToClipboardAction -> c
    javax.swing.AbstractAction deleteAll -> d
    javax.swing.AbstractAction newWindowAction -> e
    javax.swing.AbstractAction propertiesAction -> f
    javax.swing.AbstractAction constProtocolAction -> g
    javax.swing.AbstractAction drawingPadPropAction -> h
    javax.swing.AbstractAction toolbarConfigAction -> i
    javax.swing.AbstractAction showAlgebraViewAction -> j
    javax.swing.AbstractAction showAlgebraInputAction -> k
    javax.swing.AbstractAction showSpreadsheetAction -> l
    javax.swing.AbstractAction showCmdListAction -> m
    javax.swing.AbstractAction horizontalSplitAction -> n
    javax.swing.AbstractAction showAuxiliaryObjectsAction -> o
    javax.swing.AbstractAction showConsProtNavigationAction -> p
    javax.swing.AbstractAction showConsProtNavigationPlayAction -> q
    javax.swing.AbstractAction showConsProtNavigationOpenProtAction -> r
    javax.swing.AbstractAction loadAction -> s
    javax.swing.AbstractAction saveAction -> t
    javax.swing.AbstractAction saveAsAction -> u
    javax.swing.AbstractAction printEuclidianViewAction -> v
    javax.swing.AbstractAction exitAction -> w
    javax.swing.AbstractAction exitAllAction -> x
    javax.swing.AbstractAction helpAction -> y
    javax.swing.AbstractAction infoAction -> z
    javax.swing.AbstractAction exportGraphicAction -> A
    javax.swing.AbstractAction exportWorksheet -> B
    javax.swing.AbstractAction exportPSTricksAction -> C
    javax.swing.AbstractAction showCreateToolsAction -> D
    javax.swing.AbstractAction showManageToolsAction -> E
    javax.swing.AbstractAction savePreferencesAction -> F
    javax.swing.AbstractAction clearPreferencesAction -> G
    javax.swing.AbstractAction selectAllAction -> H
    javax.swing.AbstractAction deleteAction -> I
    javax.swing.AbstractAction websiteAction -> J
    javax.swing.AbstractAction forumAction -> K
    javax.swing.AbstractAction wikiAction -> L
    javax.swing.AbstractAction selectCurrentLayerAction -> M
    javax.swing.JCheckBoxMenuItem cbShowAxes -> a
    javax.swing.JCheckBoxMenuItem cbShowGrid -> b
    javax.swing.JCheckBoxMenuItem cbShowAlgebraView -> c
    javax.swing.JCheckBoxMenuItem cbShowSpreadsheet -> d
    javax.swing.JCheckBoxMenuItem cbShowAuxiliaryObjects -> e
    javax.swing.JCheckBoxMenuItem cbHorizontalSplit -> f
    javax.swing.JCheckBoxMenuItem cbShowConsProtNavigation -> g
    javax.swing.JCheckBoxMenuItem cbShowConsProtNavigationPlay -> h
    javax.swing.JCheckBoxMenuItem cbShowConsProtNavigationOpenProt -> i
    javax.swing.JCheckBoxMenuItem cbShowAlgebraInput -> j
    javax.swing.JCheckBoxMenuItem cbShowCmdList -> k
    javax.swing.JMenu menuAngleUnit -> a
    javax.swing.JMenu menuPointCapturing -> b
    javax.swing.JMenu menuDecimalPlaces -> c
    javax.swing.JMenu menuContinuity -> d
    javax.swing.JMenu menuPointStyle -> e
    javax.swing.JMenu menuBooleanSize -> f
    javax.swing.JMenu menuRightAngleStyle -> g
    javax.swing.JMenu menuCoordStyle -> h
    javax.swing.JMenu menuLabeling -> i
    javax.swing.JMenu menuWindow -> j
    javax.swing.JMenu menuFile -> k
    javax.swing.JMenu menuTools -> l
    geogebra.Application app -> a
    geogebra.kernel.Kernel kernel -> a
    java.lang.Class class$0 -> a
    java.lang.Class class$1 -> b
    java.lang.Class class$3 -> c
    void updateMenubar() -> updateMenubar
    void updateMenuFile() -> updateMenuFile
    void initMenubar() -> initMenubar
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
    void initActions() -> initActions
    int getSelectedLayer() -> getSelectedLayer
    void showPrintPreview(geogebra.Application) -> showPrintPreview
    void showAboutDialog(geogebra.Application) -> showAboutDialog
    void updateSelection() -> updateSelection
    void updateActions() -> updateActions
    void setMenuShortCutAccelerator(javax.swing.JMenuItem,char) -> setMenuShortCutAccelerator
    void setMenuShortCutShiftAccelerator(javax.swing.JMenuItem,char) -> setMenuShortCutShiftAccelerator
    void updateMenuWindow() -> updateMenuWindow
    void updateMenuAngleUnit() -> updateMenuAngleUnit
    void updateMenuPointStyle() -> updateMenuPointStyle
    void updateMenuBooleanSize() -> updateMenuBooleanSize
    void updateMenuRightAngleStyle() -> updateMenuRightAngleStyle
    void updateMenuCoordStyle() -> updateMenuCoordStyle
    void updateMenuLabeling() -> updateMenuLabeling
    void updateMenuPointCapturing() -> updateMenuPointCapturing
    void updateMenuDecimalPlaces() -> updateMenuDecimalPlaces
    void updateMenuContinuity() -> updateMenuContinuity
    void addLanguageMenuItems(javax.swing.JMenu,java.awt.event.ActionListener) -> addLanguageMenuItems
    void addRadioButtonMenuItems(javax.swing.JMenu,java.awt.event.ActionListener,java.lang.String[],java.lang.String[],int) -> addRadioButtonMenuItems
    java.lang.String readTextFromJar(java.lang.String) -> readTextFromJar
geogebra.gui.menubar.MenubarImpl$1 -> geogebra.gui.menubar.MenubarImpl$1:
    geogebra.gui.menubar.MenubarImpl this$0 -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
geogebra.gui.menubar.MenubarImpl$10 -> geogebra.gui.menubar.MenubarImpl$10:
    geogebra.gui.menubar.MenubarImpl this$0 -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
geogebra.gui.menubar.MenubarImpl$11 -> geogebra.gui.menubar.MenubarImpl$11:
    geogebra.gui.menubar.MenubarImpl this$0 -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
geogebra.gui.menubar.MenubarImpl$12 -> geogebra.gui.menubar.MenubarImpl$12:
    geogebra.gui.menubar.MenubarImpl this$0 -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
geogebra.gui.menubar.MenubarImpl$13 -> geogebra.gui.menubar.MenubarImpl$13:
    geogebra.gui.menubar.MenubarImpl this$0 -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
geogebra.gui.menubar.MenubarImpl$14 -> geogebra.gui.menubar.MenubarImpl$14:
    geogebra.gui.menubar.MenubarImpl this$0 -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
geogebra.gui.menubar.MenubarImpl$15 -> geogebra.gui.menubar.MenubarImpl$15:
    geogebra.gui.menubar.MenubarImpl this$0 -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
    geogebra.gui.menubar.MenubarImpl access$0(geogebra.gui.menubar.MenubarImpl$15) -> access$0
geogebra.gui.menubar.MenubarImpl$16 -> geogebra.gui.menubar.MenubarImpl$16:
    geogebra.gui.menubar.MenubarImpl$15 this$1 -> a
    void run() -> run
geogebra.gui.menubar.MenubarImpl$17 -> geogebra.gui.menubar.MenubarImpl$17:
    geogebra.gui.menubar.MenubarImpl this$0 -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
geogebra.gui.menubar.MenubarImpl$18 -> geogebra.gui.menubar.MenubarImpl$18:
    geogebra.gui.menubar.MenubarImpl this$0 -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
    geogebra.gui.menubar.MenubarImpl access$0(geogebra.gui.menubar.MenubarImpl$18) -> access$0
geogebra.gui.menubar.MenubarImpl$19 -> geogebra.gui.menubar.MenubarImpl$19:
    geogebra.gui.menubar.MenubarImpl$18 this$1 -> a
    void run() -> run
geogebra.gui.menubar.MenubarImpl$2 -> geogebra.gui.menubar.MenubarImpl$2:
    geogebra.gui.menubar.MenubarImpl this$0 -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
geogebra.gui.menubar.MenubarImpl$20 -> geogebra.gui.menubar.MenubarImpl$20:
    geogebra.gui.menubar.MenubarImpl this$0 -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
geogebra.gui.menubar.MenubarImpl$21 -> geogebra.gui.menubar.MenubarImpl$21:
    geogebra.gui.menubar.MenubarImpl this$0 -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
geogebra.gui.menubar.MenubarImpl$22 -> geogebra.gui.menubar.MenubarImpl$22:
    geogebra.gui.menubar.MenubarImpl this$0 -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
geogebra.gui.menubar.MenubarImpl$23 -> geogebra.gui.menubar.MenubarImpl$23:
    geogebra.gui.menubar.MenubarImpl this$0 -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
geogebra.gui.menubar.MenubarImpl$24 -> geogebra.gui.menubar.MenubarImpl$24:
    geogebra.gui.menubar.MenubarImpl this$0 -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
geogebra.gui.menubar.MenubarImpl$25 -> geogebra.gui.menubar.MenubarImpl$25:
    geogebra.gui.menubar.MenubarImpl this$0 -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
geogebra.gui.menubar.MenubarImpl$26 -> geogebra.gui.menubar.MenubarImpl$26:
    geogebra.gui.menubar.MenubarImpl this$0 -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
geogebra.gui.menubar.MenubarImpl$27 -> geogebra.gui.menubar.MenubarImpl$27:
    geogebra.gui.menubar.MenubarImpl this$0 -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
geogebra.gui.menubar.MenubarImpl$28 -> geogebra.gui.menubar.MenubarImpl$28:
    geogebra.gui.menubar.MenubarImpl this$0 -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
geogebra.gui.menubar.MenubarImpl$29 -> geogebra.gui.menubar.MenubarImpl$29:
    geogebra.gui.menubar.MenubarImpl this$0 -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
    geogebra.gui.menubar.MenubarImpl access$0(geogebra.gui.menubar.MenubarImpl$29) -> access$0
geogebra.gui.menubar.MenubarImpl$3 -> geogebra.gui.menubar.MenubarImpl$3:
    geogebra.gui.menubar.MenubarImpl this$0 -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
geogebra.gui.menubar.MenubarImpl$30 -> geogebra.gui.menubar.MenubarImpl$30:
    geogebra.gui.menubar.MenubarImpl$29 this$1 -> a
    void run() -> run
geogebra.gui.menubar.MenubarImpl$31 -> geogebra.gui.menubar.MenubarImpl$31:
    geogebra.gui.menubar.MenubarImpl this$0 -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
    geogebra.gui.menubar.MenubarImpl access$0(geogebra.gui.menubar.MenubarImpl$31) -> access$0
geogebra.gui.menubar.MenubarImpl$32 -> geogebra.gui.menubar.MenubarImpl$32:
    geogebra.gui.menubar.MenubarImpl$31 this$1 -> a
    void run() -> run
geogebra.gui.menubar.MenubarImpl$33 -> geogebra.gui.menubar.MenubarImpl$33:
    geogebra.gui.menubar.MenubarImpl this$0 -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
    geogebra.gui.menubar.MenubarImpl access$0(geogebra.gui.menubar.MenubarImpl$33) -> access$0
geogebra.gui.menubar.MenubarImpl$34 -> geogebra.gui.menubar.MenubarImpl$34:
    geogebra.gui.menubar.MenubarImpl$33 this$1 -> a
    void run() -> run
geogebra.gui.menubar.MenubarImpl$35 -> geogebra.gui.menubar.MenubarImpl$35:
    geogebra.gui.menubar.MenubarImpl this$0 -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
    geogebra.gui.menubar.MenubarImpl access$0(geogebra.gui.menubar.MenubarImpl$35) -> access$0
geogebra.gui.menubar.MenubarImpl$36 -> geogebra.gui.menubar.MenubarImpl$36:
    geogebra.gui.menubar.MenubarImpl$35 this$1 -> a
    void run() -> run
geogebra.gui.menubar.MenubarImpl$37 -> geogebra.gui.menubar.MenubarImpl$37:
    geogebra.gui.menubar.MenubarImpl this$0 -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
geogebra.gui.menubar.MenubarImpl$38 -> geogebra.gui.menubar.MenubarImpl$38:
    geogebra.gui.menubar.MenubarImpl this$0 -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
    geogebra.gui.menubar.MenubarImpl access$0(geogebra.gui.menubar.MenubarImpl$38) -> access$0
geogebra.gui.menubar.MenubarImpl$39 -> geogebra.gui.menubar.MenubarImpl$39:
    geogebra.gui.menubar.MenubarImpl$38 this$1 -> a
    void run() -> run
geogebra.gui.menubar.MenubarImpl$4 -> geogebra.gui.menubar.MenubarImpl$4:
    geogebra.gui.menubar.MenubarImpl this$0 -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
geogebra.gui.menubar.MenubarImpl$40 -> geogebra.gui.menubar.MenubarImpl$40:
    geogebra.gui.menubar.MenubarImpl this$0 -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
geogebra.gui.menubar.MenubarImpl$41 -> geogebra.gui.menubar.MenubarImpl$41:
    geogebra.gui.menubar.MenubarImpl this$0 -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
geogebra.gui.menubar.MenubarImpl$42 -> geogebra.gui.menubar.MenubarImpl$42:
    geogebra.gui.menubar.MenubarImpl this$0 -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
geogebra.gui.menubar.MenubarImpl$43 -> geogebra.gui.menubar.MenubarImpl$43:
    geogebra.gui.menubar.MenubarImpl this$0 -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
geogebra.gui.menubar.MenubarImpl$44 -> geogebra.gui.menubar.MenubarImpl$44:
    geogebra.gui.menubar.MenubarImpl this$0 -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
geogebra.gui.menubar.MenubarImpl$45 -> geogebra.gui.menubar.MenubarImpl$45:
    geogebra.gui.menubar.MenubarImpl this$0 -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
geogebra.gui.menubar.MenubarImpl$46 -> geogebra.gui.menubar.MenubarImpl$46:
    geogebra.gui.menubar.MenubarImpl this$0 -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
geogebra.gui.menubar.MenubarImpl$47 -> geogebra.gui.menubar.MenubarImpl$47:
    geogebra.gui.menubar.MenubarImpl this$0 -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
geogebra.gui.menubar.MenubarImpl$48 -> geogebra.gui.menubar.MenubarImpl$48:
    geogebra.gui.menubar.MenubarImpl this$0 -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
geogebra.gui.menubar.MenubarImpl$49 -> geogebra.gui.menubar.MenubarImpl$49:
    geogebra.gui.menubar.MenubarImpl this$0 -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
geogebra.gui.menubar.MenubarImpl$5 -> geogebra.gui.menubar.MenubarImpl$5:
    geogebra.gui.menubar.MenubarImpl this$0 -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
geogebra.gui.menubar.MenubarImpl$50 -> geogebra.gui.menubar.MenubarImpl$50:
    geogebra.gui.menubar.MenubarImpl this$0 -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
geogebra.gui.menubar.MenubarImpl$51 -> geogebra.gui.menubar.MenubarImpl$51:
    geogebra.Application val$app -> a
    void run() -> run
geogebra.gui.menubar.MenubarImpl$52 -> geogebra.gui.menubar.MenubarImpl$52:
    javax.swing.JDialog val$dialog -> a
    geogebra.Application val$app -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
geogebra.gui.menubar.MenubarImpl$6 -> geogebra.gui.menubar.MenubarImpl$6:
    geogebra.gui.menubar.MenubarImpl this$0 -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
geogebra.gui.menubar.MenubarImpl$7 -> geogebra.gui.menubar.MenubarImpl$7:
    geogebra.gui.menubar.MenubarImpl this$0 -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
geogebra.gui.menubar.MenubarImpl$8 -> geogebra.gui.menubar.MenubarImpl$8:
    geogebra.gui.menubar.MenubarImpl this$0 -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
geogebra.gui.menubar.MenubarImpl$9 -> geogebra.gui.menubar.MenubarImpl$9:
    geogebra.gui.menubar.MenubarImpl this$0 -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
geogebra.gui.menubar.MenubarImpl$LanguageActionListener -> geogebra.gui.menubar.MenubarImpl$LanguageActionListener:
    geogebra.gui.menubar.MenubarImpl this$0 -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
geogebra.gui.menubar.RequestFocusListener -> geogebra.gui.menubar.RequestFocusListener:
    javax.swing.JFrame frame -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
geogebra.gui.toolbar.ModeCellRenderer -> geogebra.gui.a.e:
    geogebra.Application app -> a
    java.awt.Component getTreeCellRendererComponent(javax.swing.JTree,java.lang.Object,boolean,boolean,boolean,int,boolean) -> getTreeCellRendererComponent
    java.awt.Component getListCellRendererComponent(javax.swing.JList,java.lang.Object,int,boolean,boolean) -> getListCellRendererComponent
    void handleRootNode(javax.swing.tree.DefaultMutableTreeNode) -> a
    void handleModeNode(int) -> a
    void handleSelection(boolean) -> a
geogebra.gui.toolbar.ModeToggleButtonGroup -> geogebra.gui.a.h:
    javax.swing.JPopupMenu activePopMenu -> a
    void setActivePopupMenu(javax.swing.JPopupMenu) -> a
    javax.swing.JPopupMenu getActivePopupMenu() -> a
geogebra.gui.toolbar.ModeToggleMenu -> geogebra.gui.a.i:
    geogebra.gui.toolbar.ModeToggleButtonGroup bg -> a
    geogebra.gui.toolbar.MyJToggleButton tbutton -> a
    javax.swing.JPopupMenu popMenu -> a
    java.util.ArrayList menuItemList -> a
    java.awt.event.ActionListener popupMenuItemListener -> a
    geogebra.Application app -> a
    int size -> a
    int getToolsCount() -> a
    javax.swing.JToggleButton getJToggleButton() -> a
    boolean selectMode(int) -> a
    int getFirstMode() -> b
    void selectItem(javax.swing.JMenuItem) -> a
    void addMode(int) -> a
    void addSeparator() -> a
    void mouseOver() -> b
    void setPopupVisible(boolean) -> a
    boolean isPopupShowing() -> a
    void setMode(int) -> b
    void access$0(geogebra.gui.toolbar.ModeToggleMenu,javax.swing.JMenuItem) -> a
    geogebra.gui.toolbar.MyJToggleButton access$1(geogebra.gui.toolbar.ModeToggleMenu) -> a
geogebra.gui.toolbar.ModeToggleMenu$MenuItemListener -> geogebra.gui.a.a:
    geogebra.gui.toolbar.ModeToggleMenu this$0 -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
geogebra.gui.toolbar.MyJToggleButton -> geogebra.gui.a.g:
    int BORDER -> a
    int iconWidth -> b
    int iconHeight -> c
    java.awt.geom.GeneralPath gp -> a
    boolean showToolTipText -> a
    boolean popupTriangleHighlighting -> b
    geogebra.gui.toolbar.ModeToggleMenu menu -> a
    java.awt.Color arrowColor -> a
    java.awt.Color selColor -> b
    java.awt.BasicStroke selStroke -> a
    java.lang.String getToolTipText() -> getToolTipText
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
    void setIcon(javax.swing.Icon) -> setIcon
    void paint(java.awt.Graphics) -> paint
    void initPath() -> a
    boolean popupTriangleClicked(int,int) -> a
    void mouseClicked(java.awt.event.MouseEvent) -> mouseClicked
    void mouseEntered(java.awt.event.MouseEvent) -> mouseEntered
    void mouseExited(java.awt.event.MouseEvent) -> mouseExited
    void mousePressed(java.awt.event.MouseEvent) -> mousePressed
    void mouseReleased(java.awt.event.MouseEvent) -> mouseReleased
    void mouseDragged(java.awt.event.MouseEvent) -> mouseDragged
    void mouseMoved(java.awt.event.MouseEvent) -> mouseMoved
geogebra.gui.toolbar.MyToolbar -> geogebra.gui.a.j:
    java.lang.Integer TOOLBAR_SEPARATOR -> a
    geogebra.Application app -> a
    java.util.ArrayList modeToggleMenus -> a
    boolean showToolBarHelp -> a
    javax.swing.JLabel modeNameLabel -> a
    javax.swing.JPanel toolbarHelpPanel -> a
    int selectedMode -> b
    int oldToolbarHelpWidth -> a
    void initToolbar() -> a
    boolean setSelectedMode(int) -> a
    int getSelectedMode() -> a
    int getFirstMode() -> b
    void updateModeLabel() -> b
    java.lang.String wrappedModeText(java.lang.String,java.lang.String,javax.swing.JPanel) -> a
    void addCustomModesToToolbar(javax.swing.JToolBar,geogebra.gui.toolbar.ModeToggleButtonGroup) -> a
    java.util.Vector createToolBarVec(java.lang.String) -> a
    java.lang.String getDefaultToolbarString() -> a
    void setShowToolBarHelp(boolean) -> a
    void componentHidden(java.awt.event.ComponentEvent) -> componentHidden
    void componentMoved(java.awt.event.ComponentEvent) -> componentMoved
    void componentResized(java.awt.event.ComponentEvent) -> componentResized
    void componentShown(java.awt.event.ComponentEvent) -> componentShown
geogebra.gui.toolbar.ToolbarConfigDialog -> geogebra.gui.a.c:
    geogebra.Application app -> a
    geogebra.gui.toolbar.ToolbarConfigPanel confPanel -> a
    void apply() -> a
    javax.swing.JPanel createButtonPanel() -> a
    void access$0(geogebra.gui.toolbar.ToolbarConfigDialog) -> a
    geogebra.Application access$1(geogebra.gui.toolbar.ToolbarConfigDialog) -> a
geogebra.gui.toolbar.ToolbarConfigDialog$1 -> geogebra.gui.a.d:
    geogebra.gui.toolbar.ToolbarConfigDialog this$0 -> a
    javax.swing.JButton val$btApply -> a
    javax.swing.JButton val$btCancel -> b
    javax.swing.JButton val$btDefaultToolbar -> c
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
geogebra.gui.toolbar.ToolbarConfigPanel -> geogebra.gui.a.b:
    javax.swing.JButton insertButton -> a
    javax.swing.JButton moveUpButton -> b
    javax.swing.JButton moveDownButton -> c
    javax.swing.JButton deleteButton -> d
    javax.swing.JTree tree -> a
    javax.swing.JScrollPane configScrollPane -> a
    javax.swing.JScrollPane modeScrollPane -> b
    javax.swing.JPanel selectionPanel -> a
    javax.swing.JList toolList -> a
    geogebra.Application app -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
    boolean containsTool(javax.swing.tree.DefaultMutableTreeNode,java.lang.Integer) -> a
    void setToolBarString(java.lang.String) -> a
    java.lang.String getToolBarString() -> a
    void collapseAllRows() -> a
    java.util.Vector generateToolsVector() -> a
    javax.swing.JTree generateTree() -> a
    javax.swing.tree.DefaultMutableTreeNode generateRootNode(java.util.Vector) -> a
    void treeCollapsed(javax.swing.event.TreeExpansionEvent) -> treeCollapsed
    void treeExpanded(javax.swing.event.TreeExpansionEvent) -> treeExpanded
geogebra.gui.toolbar.ToolbarConfigPanel$1 -> geogebra.gui.a.f:
    geogebra.gui.toolbar.ToolbarConfigPanel this$0 -> a
    void setExpandedState(javax.swing.tree.TreePath,boolean) -> setExpandedState
geogebra.gui.util.BrowserLauncher -> geogebra.gui.b.a:
    java.lang.Class class$0 -> a
    java.lang.Class class$1 -> b
    void openURL(java.lang.String) -> a
geogebra.gui.util.FileTransferable -> geogebra.gui.b.b:
    java.awt.datatransfer.DataFlavor[] dataFlavors -> a
    java.util.List files -> a
    java.awt.datatransfer.DataFlavor[] getTransferDataFlavors() -> getTransferDataFlavors
    boolean isDataFlavorSupported(java.awt.datatransfer.DataFlavor) -> isDataFlavorSupported
    java.lang.Object getTransferData(java.awt.datatransfer.DataFlavor) -> getTransferData
geogebra.gui.util.ImageSelection -> geogebra.gui.b.c:
    java.awt.Image image -> a
    java.awt.datatransfer.DataFlavor[] getTransferDataFlavors() -> getTransferDataFlavors
    boolean isDataFlavorSupported(java.awt.datatransfer.DataFlavor) -> isDataFlavorSupported
    java.lang.Object getTransferData(java.awt.datatransfer.DataFlavor) -> getTransferData
geogebra.gui.util.SpringUtilities -> geogebra.gui.b.d:
    javax.swing.SpringLayout$Constraints getConstraintsForCell(int,int,java.awt.Container,int) -> a
    void makeCompactGrid(java.awt.Container,int,int,int,int,int,int) -> a
geogebra.io.DocHandler -> geogebra.d.g:
    void startElement(java.lang.String,java.util.LinkedHashMap) -> a
    void endElement(java.lang.String) -> b
    void startDocument() -> a
    void endDocument() -> b
    void text(java.lang.String) -> a
geogebra.io.MyImageIO -> geogebra.d.f:
    void write(java.awt.image.BufferedImage,java.lang.String,float,java.io.File) -> a
geogebra.io.MyXMLHandler -> geogebra.d.c:
    float FORMAT -> a
    int mode -> a
    int constMode -> b
    geogebra.kernel.GeoElement geo -> a
    geogebra.kernel.arithmetic.Command cmd -> a
    geogebra.kernel.Macro macro -> a
    java.lang.String[] macroInputLabels -> a
    java.lang.String[] macroOutputLabels -> b
    geogebra.kernel.GeoElement[] cmdOutput -> a
    geogebra.Application app -> a
    geogebra.kernel.Kernel kernel -> a
    geogebra.kernel.Kernel origKernel -> b
    geogebra.kernel.Construction cons -> a
    geogebra.kernel.Construction origCons -> b
    geogebra.algebra.parser.Parser parser -> a
    geogebra.algebra.parser.Parser origParser -> b
    java.util.LinkedList startPointList -> a
    java.util.LinkedList showObjectConditionList -> b
    java.util.LinkedList dynamicColorList -> c
    int consStep -> c
    double ggbFileFormat -> a
    void reset() -> c
    void initKernelVars() -> d
    int getConsStep() -> a
    void text(java.lang.String) -> a
    void startDocument() -> a
    void endDocument() -> b
    void startElement(java.lang.String,java.util.LinkedHashMap) -> a
    void endElement(java.lang.String) -> b
    void startGeoGebraElement(java.lang.String,java.util.LinkedHashMap) -> b
    void startMacroElement(java.lang.String,java.util.LinkedHashMap) -> c
    void startEuclidianViewElement(java.lang.String,java.util.LinkedHashMap) -> d
    boolean handleCoordSystem(geogebra.euclidian.EuclidianView,java.util.LinkedHashMap) -> a
    boolean handleEvSettings(geogebra.euclidian.EuclidianView,java.util.LinkedHashMap) -> b
    boolean handleEvSize(geogebra.euclidian.EuclidianView,java.util.LinkedHashMap) -> c
    boolean handleBgColor(geogebra.euclidian.EuclidianView,java.util.LinkedHashMap) -> d
    boolean handleAxesColor(geogebra.euclidian.EuclidianView,java.util.LinkedHashMap) -> e
    boolean handleGridColor(geogebra.euclidian.EuclidianView,java.util.LinkedHashMap) -> f
    boolean handleLineStyle(geogebra.euclidian.EuclidianView,java.util.LinkedHashMap) -> g
    boolean handleGrid(geogebra.euclidian.EuclidianView,java.util.LinkedHashMap) -> h
    boolean handleAxis(geogebra.euclidian.EuclidianView,java.util.LinkedHashMap) -> i
    void startKernelElement(java.lang.String,java.util.LinkedHashMap) -> e
    boolean handleAngleUnit(java.util.LinkedHashMap) -> a
    boolean handleKernelCoordStyle(java.util.LinkedHashMap) -> b
    boolean handleKernelDecimals(java.util.LinkedHashMap) -> c
    boolean handleKernelContinuous(java.util.LinkedHashMap) -> d
    void startGUIElement(java.lang.String,java.util.LinkedHashMap) -> f
    boolean handleConsProtColumns(geogebra.Application,java.util.LinkedHashMap) -> a
    boolean handleConsProtocol(geogebra.Application,java.util.LinkedHashMap) -> b
    boolean handleConsProtNavigationBar(geogebra.Application,java.util.LinkedHashMap) -> c
    boolean handleGUIShow(geogebra.Application,java.util.LinkedHashMap) -> d
    boolean handleFont(geogebra.Application,java.util.LinkedHashMap) -> e
    boolean handleLabelingStyle(geogebra.Application,java.util.LinkedHashMap) -> f
    boolean handleSplitDivider(geogebra.Application,java.util.LinkedHashMap) -> g
    boolean handleToolbar(geogebra.Application,java.util.LinkedHashMap) -> h
    void handleConstruction(java.util.LinkedHashMap) -> a
    void initMacro(java.util.LinkedHashMap) -> b
    void endMacro() -> e
    void handleWorksheetText(java.util.LinkedHashMap) -> c
    void startConstructionElement(java.lang.String,java.util.LinkedHashMap) -> g
    void endConstructionElement(java.lang.String) -> c
    geogebra.kernel.GeoElement getGeoElement(java.util.LinkedHashMap) -> a
    void startGeoElement(java.lang.String,java.util.LinkedHashMap) -> h
    boolean handleShow(java.util.LinkedHashMap) -> e
    boolean handleObjColor(java.util.LinkedHashMap) -> f
    java.awt.Color handleColorAttrs(java.util.LinkedHashMap) -> a
    boolean handleLineStyle(java.util.LinkedHashMap) -> g
    boolean handleDecoration(java.util.LinkedHashMap) -> h
    boolean handleEqnStyle(java.util.LinkedHashMap) -> i
    boolean handleCoords(java.util.LinkedHashMap) -> j
    boolean handleCoordStyle(java.util.LinkedHashMap) -> k
    boolean handleCaption(java.util.LinkedHashMap) -> l
    boolean handleCondition(java.util.LinkedHashMap) -> m
    boolean handleCheckbox(java.util.LinkedHashMap) -> n
    boolean handleValue(java.util.LinkedHashMap) -> o
    boolean handlePointSize(java.util.LinkedHashMap) -> p
    boolean handleLayer(java.util.LinkedHashMap) -> q
    boolean handleSlider(java.util.LinkedHashMap) -> r
    boolean handleTrace(java.util.LinkedHashMap) -> s
    boolean handleAnimation(java.util.LinkedHashMap) -> t
    boolean handleFixed(java.util.LinkedHashMap) -> u
    boolean handleBreakpoint(java.util.LinkedHashMap) -> v
    boolean handleFile(java.util.LinkedHashMap) -> w
    boolean handleTextFont(java.util.LinkedHashMap) -> x
    boolean handleTextDecimals(java.util.LinkedHashMap) -> y
    boolean handleInBackground(java.util.LinkedHashMap) -> z
    boolean handleAuxiliary(java.util.LinkedHashMap) -> A
    boolean handleIsLaTeX(java.util.LinkedHashMap) -> B
    boolean handleArcSize(java.util.LinkedHashMap) -> C
    boolean handleAbsoluteScreenLocation(java.util.LinkedHashMap) -> D
    boolean handleAllowReflexAngle(java.util.LinkedHashMap) -> E
    boolean handleForceReflexAngle(java.util.LinkedHashMap) -> F
    boolean handleOutlyingIntersections(java.util.LinkedHashMap) -> G
    boolean handleKeepTypeOnTransform(java.util.LinkedHashMap) -> H
    boolean handleSlopeTriangleSize(java.util.LinkedHashMap) -> I
    boolean handleStartPoint(java.util.LinkedHashMap) -> J
    void processStartPointList() -> f
    void processShowObjectConditionList() -> g
    void processDynamicColorList() -> h
    boolean handleEigenvectors(java.util.LinkedHashMap) -> K
    boolean handleMatrix(java.util.LinkedHashMap) -> L
    boolean handleLabelOffset(java.util.LinkedHashMap) -> M
    boolean handleLabelMode(java.util.LinkedHashMap) -> N
    geogebra.kernel.arithmetic.Command getCommand(java.util.LinkedHashMap) -> a
    void startCommandElement(java.lang.String,java.util.LinkedHashMap) -> i
    boolean handleCmdInput(java.util.LinkedHashMap) -> O
    boolean handleCmdOutput(java.util.LinkedHashMap) -> P
    java.lang.String[] getAttributeStrings(java.util.LinkedHashMap) -> a
    void startExpressionElement(java.lang.String,java.util.LinkedHashMap) -> j
    boolean parseBoolean(java.lang.String) -> a
geogebra.io.MyXMLHandler$GeoExpPair -> geogebra.d.d:
    geogebra.kernel.GeoElement geo -> a
    java.lang.String exp -> a
    geogebra.io.MyXMLHandler this$0 -> a
geogebra.io.MyXMLHandler$LocateableExpPair -> geogebra.d.a:
    geogebra.kernel.Locateable locateable -> a
    java.lang.String exp -> a
    int number -> a
    geogebra.io.MyXMLHandler this$0 -> a
geogebra.io.MyXMLio -> geogebra.d.e:
    geogebra.Application app -> a
    geogebra.kernel.Kernel kernel -> a
    geogebra.io.MyXMLHandler handler -> a
    geogebra.io.QDParser xmlParser -> a
    void readZipFromInputStream(java.io.InputStream,boolean) -> a
    void processXMLBuffer(byte[],boolean,boolean) -> a
    void doParseXML(java.io.Reader,boolean,boolean) -> a
    void readZipFromMemory(java.io.InputStream) -> a
    void processXMLString(java.lang.String,boolean,boolean) -> a
    void writeGeoGebraFile(java.io.File) -> a
    void writeGeoGebraFile(java.io.OutputStream) -> a
    void writeMacroFile(java.io.File,java.util.ArrayList) -> a
    void writeMacroStream(java.io.OutputStream,java.util.ArrayList) -> a
    void writeConstructionImages(geogebra.kernel.Construction,java.util.zip.ZipOutputStream) -> a
    void writeThumbnail(geogebra.kernel.Construction,java.util.zip.ZipOutputStream) -> b
    void writeMacroImages(java.util.ArrayList,java.util.zip.ZipOutputStream) -> a
    void writeImageToZip(java.util.zip.ZipOutputStream,java.lang.String,java.awt.image.BufferedImage) -> a
    void writeImageToStream(java.io.OutputStream,java.lang.String,java.awt.image.BufferedImage) -> a
    void writeZipped(java.io.OutputStream,java.lang.String) -> a
    java.lang.String getFullXML() -> a
    java.lang.String getPreferencesXML() -> b
    java.lang.String getFullMacroXML(java.util.ArrayList) -> a
    java.lang.String getUndoXML(geogebra.kernel.Construction) -> a
geogebra.io.QDParser -> geogebra.d.b:
    java.util.LinkedHashMap attrs -> a
    java.util.Stack stack -> a
    java.lang.StringBuffer sb -> a
    java.lang.StringBuffer etag -> b
    int popMode(java.util.Stack) -> a
    void parse(geogebra.io.DocHandler,java.io.Reader) -> a
    void exc(java.lang.String,int,int) -> a
geogebra.kernel.AbsoluteScreenLocateable -> geogebra.kernel.ap:
    void setAbsoluteScreenLoc(int,int) -> setAbsoluteScreenLoc
    int getAbsoluteScreenLocX() -> getAbsoluteScreenLocX
    int getAbsoluteScreenLocY() -> getAbsoluteScreenLocY
    void setRealWorldLoc(double,double) -> setRealWorldLoc
    double getRealWorldLocX() -> getRealWorldLocX
    double getRealWorldLocY() -> getRealWorldLocY
    void setAbsoluteScreenLocActive(boolean) -> setAbsoluteScreenLocActive
    boolean isAbsoluteScreenLocActive() -> isAbsoluteScreenLocActive
    boolean isAbsoluteScreenLocateable() -> isAbsoluteScreenLocateable
    geogebra.kernel.GeoElement toGeoElement() -> toGeoElement
geogebra.kernel.AlgoAffineRatio -> geogebra.kernel.bP:
    geogebra.kernel.GeoPoint A -> a
    geogebra.kernel.GeoPoint B -> b
    geogebra.kernel.GeoPoint C -> c
    geogebra.kernel.GeoNumeric M -> a
    java.lang.String getClassName() -> getClassName
    void setInputOutput() -> setInputOutput
    geogebra.kernel.GeoNumeric getResult() -> a
    void compute() -> compute
geogebra.kernel.AlgoAngleConic -> geogebra.kernel.K:
    geogebra.kernel.GeoConic c -> a
    geogebra.kernel.GeoAngle angle -> a
    java.lang.String getClassName() -> getClassName
    void setInputOutput() -> setInputOutput
    geogebra.kernel.GeoAngle getAngle() -> a
    void compute() -> compute
    java.lang.String toString() -> toString
geogebra.kernel.AlgoAngleLines -> geogebra.kernel.T:
    geogebra.kernel.GeoLine g -> a
    geogebra.kernel.GeoLine h -> b
    geogebra.kernel.GeoAngle angle -> a
    java.lang.String getClassName() -> getClassName
    void setInputOutput() -> setInputOutput
    geogebra.kernel.GeoAngle getAngle() -> a
    geogebra.kernel.GeoLine getg() -> a
    geogebra.kernel.GeoLine geth() -> b
    void compute() -> compute
    java.lang.String toString() -> toString
geogebra.kernel.AlgoAngleNumeric -> geogebra.kernel.bN:
    geogebra.kernel.GeoNumeric num -> a
    geogebra.kernel.GeoAngle angle -> a
    java.lang.String getClassName() -> getClassName
    void setInputOutput() -> setInputOutput
    geogebra.kernel.GeoAngle getAngle() -> a
    void compute() -> compute
geogebra.kernel.AlgoAnglePoints -> geogebra.kernel.aR:
    geogebra.kernel.GeoPoint A -> a
    geogebra.kernel.GeoPoint B -> b
    geogebra.kernel.GeoPoint C -> c
    geogebra.kernel.GeoAngle angle -> a
    geogebra.kernel.AlgoAnglePolygon algoAnglePoly -> a
    double bx -> a
    double by -> b
    double vx -> c
    double vy -> d
    double wx -> e
    double wy -> f
    java.lang.String getClassName() -> getClassName
    void setAlgoAnglePolygon(geogebra.kernel.AlgoAnglePolygon) -> a
    void setInputOutput() -> setInputOutput
    void remove() -> remove
    int getConstructionIndex() -> getConstructionIndex
    geogebra.kernel.GeoAngle getAngle() -> a
    geogebra.kernel.GeoPoint getA() -> a
    geogebra.kernel.GeoPoint getB() -> b
    void compute() -> compute
    java.lang.String toString() -> toString
geogebra.kernel.AlgoAnglePolygon -> geogebra.kernel.aV:
    geogebra.kernel.GeoPolygon poly -> a
    geogebra.kernel.GeoAngle[] angles -> a
    geogebra.kernel.AlgoAnglePoints[] algos -> a
    java.lang.String getClassName() -> getClassName
    void setInputOutput() -> setInputOutput
    geogebra.kernel.GeoAngle[] getAngles() -> a
    geogebra.kernel.GeoPolygon getPolygon() -> a
    void createAngles() -> a
    void update() -> update
    void compute() -> compute
    void remove() -> remove
    java.lang.String toString() -> toString
geogebra.kernel.AlgoAngleVector -> geogebra.kernel.p:
    geogebra.kernel.GeoVec3D vec -> a
    geogebra.kernel.GeoAngle angle -> a
    double[] coords -> a
    java.lang.String getClassName() -> getClassName
    void setInputOutput() -> setInputOutput
    geogebra.kernel.GeoAngle getAngle() -> a
    geogebra.kernel.GeoVec3D getVec3D() -> a
    void compute() -> compute
    java.lang.String toString() -> toString
geogebra.kernel.AlgoAngleVectors -> geogebra.kernel.cA:
    geogebra.kernel.GeoVector v -> a
    geogebra.kernel.GeoVector w -> b
    geogebra.kernel.GeoAngle angle -> a
    java.lang.String getClassName() -> getClassName
    void setInputOutput() -> setInputOutput
    geogebra.kernel.GeoAngle getAngle() -> a
    geogebra.kernel.GeoVector getv() -> a
    void compute() -> compute
    java.lang.String toString() -> toString
geogebra.kernel.AlgoAngularBisectorLines -> geogebra.kernel.n:
    geogebra.kernel.GeoLine g -> a
    geogebra.kernel.GeoLine h -> b
    geogebra.kernel.GeoLine[] bisector -> a
    double gx -> a
    double gy -> b
    double hx -> c
    double hy -> d
    double wx -> e
    double wy -> f
    double bx -> g
    double by -> h
    double lenH -> i
    double lenG -> j
    double length -> k
    double ip -> l
    geogebra.kernel.GeoVector[] wv -> a
    geogebra.kernel.GeoPoint B -> a
    boolean infiniteB -> a
    int index -> a
    java.lang.String getClassName() -> getClassName
    void setInputOutput() -> setInputOutput
    geogebra.kernel.GeoLine[] getLines() -> a
    boolean isNearToAlgorithm() -> isNearToAlgorithm
    void compute() -> compute
    java.lang.String toString() -> toString
geogebra.kernel.AlgoAngularBisectorPoints -> geogebra.kernel.cy:
    geogebra.kernel.GeoPoint A -> a
    geogebra.kernel.GeoPoint B -> b
    geogebra.kernel.GeoPoint C -> c
    geogebra.kernel.GeoLine bisector -> a
    geogebra.kernel.GeoLine g -> b
    geogebra.kernel.GeoLine h -> c
    geogebra.kernel.GeoVector wv -> a
    java.lang.String getClassName() -> getClassName
    void setInputOutput() -> setInputOutput
    geogebra.kernel.GeoLine getLine() -> a
    void compute() -> compute
    java.lang.String toString() -> toString
geogebra.kernel.AlgoAreaConic -> geogebra.kernel.cS:
    geogebra.kernel.GeoConic conic -> a
    geogebra.kernel.GeoNumeric area -> a
    java.lang.String getClassName() -> getClassName
    void setInputOutput() -> setInputOutput
    geogebra.kernel.GeoNumeric getArea() -> a
    void compute() -> compute
geogebra.kernel.AlgoAreaPoints -> geogebra.kernel.at:
    geogebra.kernel.GeoPoint[] P -> a
    geogebra.kernel.GeoNumeric area -> a
    java.lang.String getClassName() -> getClassName
    void setInputOutput() -> setInputOutput
    geogebra.kernel.GeoNumeric getArea() -> a
    void compute() -> compute
geogebra.kernel.AlgoAsymptote -> geogebra.kernel.cQ:
    geogebra.kernel.GeoConic c -> a
    geogebra.kernel.GeoLine[] asymptotes -> a
    geogebra.kernel.GeoVec2D[] eigenvec -> a
    double[] halfAxes -> a
    geogebra.kernel.GeoVec2D b -> a
    geogebra.kernel.GeoPoint P -> a
    java.lang.String getClassName() -> getClassName
    void setInputOutput() -> setInputOutput
    geogebra.kernel.GeoLine[] getAsymptotes() -> a
    void compute() -> compute
    java.lang.String toString() -> toString
geogebra.kernel.AlgoAxes -> geogebra.kernel.aI:
    geogebra.kernel.GeoConic c -> a
    geogebra.kernel.GeoLine[] axes -> a
    geogebra.kernel.GeoVec2D[] eigenvec -> a
    geogebra.kernel.GeoVec2D b -> a
    geogebra.kernel.GeoPoint P -> a
    java.lang.String getClassName() -> getClassName
    void setInputOutput() -> setInputOutput
    geogebra.kernel.GeoLine[] getAxes() -> a
    void compute() -> compute
    java.lang.String toString() -> toString
geogebra.kernel.AlgoAxisFirst -> geogebra.kernel.bB:
    geogebra.kernel.GeoConic c -> a
    geogebra.kernel.GeoLine axis -> a
    geogebra.kernel.GeoVec2D[] eigenvec -> a
    geogebra.kernel.GeoVec2D b -> a
    geogebra.kernel.GeoPoint P -> a
    java.lang.String getClassName() -> getClassName
    void setInputOutput() -> setInputOutput
    geogebra.kernel.GeoLine getAxis() -> a
    void compute() -> compute
    java.lang.String toString() -> toString
geogebra.kernel.AlgoAxisFirstLength -> geogebra.kernel.aT:
    geogebra.kernel.GeoConic c -> a
    geogebra.kernel.GeoNumeric num -> a
    java.lang.String getClassName() -> getClassName
    void setInputOutput() -> setInputOutput
    geogebra.kernel.GeoNumeric getLength() -> a
    void compute() -> compute
    java.lang.String toString() -> toString
geogebra.kernel.AlgoAxisSecond -> geogebra.kernel.by:
    geogebra.kernel.GeoConic c -> a
    geogebra.kernel.GeoLine axis -> a
    geogebra.kernel.GeoVec2D[] eigenvec -> a
    geogebra.kernel.GeoVec2D b -> a
    geogebra.kernel.GeoPoint P -> a
    java.lang.String getClassName() -> getClassName
    void setInputOutput() -> setInputOutput
    geogebra.kernel.GeoLine getAxis() -> a
    void compute() -> compute
    java.lang.String toString() -> toString
geogebra.kernel.AlgoAxisSecondLength -> geogebra.kernel.bo:
    geogebra.kernel.GeoConic c -> a
    geogebra.kernel.GeoNumeric num -> a
    java.lang.String getClassName() -> getClassName
    void setInputOutput() -> setInputOutput
    geogebra.kernel.GeoNumeric getLength() -> a
    void compute() -> compute
    java.lang.String toString() -> toString
geogebra.kernel.AlgoBinomial -> geogebra.kernel.Q:
    double Binom(double,double) -> a
    double BinomBig(double,double) -> b
    double BinomLog(double,double) -> c
    java.lang.String getClassName() -> getClassName
    void compute() -> compute
geogebra.kernel.AlgoCenterConic -> geogebra.kernel.t:
    geogebra.kernel.GeoConic c -> a
    geogebra.kernel.GeoPoint midpoint -> a
    java.lang.String getClassName() -> getClassName
    void setInputOutput() -> setInputOutput
    geogebra.kernel.GeoPoint getPoint() -> a
    void compute() -> compute
    java.lang.String toString() -> toString
geogebra.kernel.AlgoCentroidPolygon -> geogebra.kernel.x:
    geogebra.kernel.GeoPolygon p -> a
    geogebra.kernel.GeoPoint centroid -> a
    java.lang.String getClassName() -> getClassName
    void setInputOutput() -> setInputOutput
    geogebra.kernel.GeoPoint getPoint() -> a
    void compute() -> compute
    java.lang.String toString() -> toString
geogebra.kernel.AlgoCirclePointRadius -> geogebra.kernel.aJ:
    geogebra.kernel.GeoPoint M -> a
    geogebra.kernel.arithmetic.NumberValue r -> a
    geogebra.kernel.GeoElement rgeo -> a
    geogebra.kernel.GeoConic circle -> a
    int type -> a
    java.lang.String getClassName() -> getClassName
    void setInputOutput() -> setInputOutput
    geogebra.kernel.GeoConic getCircle() -> a
    void compute() -> compute
    java.lang.String toString() -> toString
geogebra.kernel.AlgoCircleThreePoints -> geogebra.kernel.cI:
    geogebra.kernel.GeoPoint A -> a
    geogebra.kernel.GeoPoint B -> b
    geogebra.kernel.GeoPoint C -> c
    geogebra.kernel.GeoConic circle -> a
    geogebra.kernel.GeoLine s0 -> a
    geogebra.kernel.GeoLine s1 -> b
    geogebra.kernel.GeoPoint center -> d
    double[] det -> a
    double ax -> a
    double ay -> b
    double bx -> c
    double by -> d
    double cx -> e
    double cy -> f
    double ABx -> g
    double ABy -> h
    double ACx -> i
    double ACy -> j
    double BCx -> k
    double BCy -> l
    double maxDet -> m
    int casenr -> a
    java.lang.String getClassName() -> getClassName
    void setInputOutput() -> setInputOutput
    geogebra.kernel.GeoConic getCircle() -> a
    void compute() -> compute
    java.lang.String toString() -> toString
geogebra.kernel.AlgoCircleTwoPoints -> geogebra.kernel.ab:
    geogebra.kernel.GeoPoint M -> a
    geogebra.kernel.GeoPoint P -> b
    geogebra.kernel.GeoConic circle -> a
    java.lang.String getClassName() -> getClassName
    void setInputOutput() -> setInputOutput
    geogebra.kernel.GeoConic getCircle() -> a
    void compute() -> compute
    java.lang.String toString() -> toString
geogebra.kernel.AlgoCircumferenceConic -> geogebra.kernel.cw:
    geogebra.kernel.GeoConic conic -> a
    geogebra.kernel.GeoNumeric circum -> a
    geogebra.kernel.integration.EllipticArcLength ellipticArcLength -> a
    java.lang.String getClassName() -> getClassName
    void setInputOutput() -> setInputOutput
    void compute() -> compute
    geogebra.kernel.GeoNumeric getCircumference() -> a
geogebra.kernel.AlgoClean -> geogebra.kernel.l:
    geogebra.kernel.GeoList inputList -> a
    geogebra.kernel.GeoList outputList -> b
    int size -> a
    java.lang.String getClassName() -> getClassName
    void setInputOutput() -> setInputOutput
    geogebra.kernel.GeoList getResult() -> a
    void compute() -> compute
geogebra.kernel.AlgoConicFivePoints -> geogebra.kernel.z:
    geogebra.kernel.GeoPoint[] P -> a
    geogebra.kernel.GeoConic conic -> a
    double[][] A -> a
    double[][] B -> b
    double[][] C -> c
    double l -> a
    double m -> b
    geogebra.kernel.GeoVec3D[] line -> a
    int i -> a
    int j -> b
    java.lang.String getClassName() -> getClassName
    void setInputOutput() -> setInputOutput
    geogebra.kernel.GeoConic getConic() -> a
    void compute() -> compute
    void degCone(geogebra.kernel.GeoVec3D,geogebra.kernel.GeoVec3D,double[][]) -> a
    double evalMatrix(double[][],geogebra.kernel.GeoPoint) -> a
    void linComb(double[][],double[][],double,double,double[][]) -> a
    java.lang.String toString() -> toString
geogebra.kernel.AlgoConicFociLength -> geogebra.kernel.bJ:
    geogebra.kernel.GeoPoint A -> a
    geogebra.kernel.GeoPoint B -> b
    geogebra.kernel.arithmetic.NumberValue a -> a
    geogebra.kernel.GeoElement ageo -> a
    geogebra.kernel.GeoConic conic -> a
    java.lang.String getClassName() -> getClassName
    void setInputOutput() -> setInputOutput
    geogebra.kernel.GeoConic getConic() -> a
    void compute() -> compute
geogebra.kernel.AlgoConicPart -> geogebra.kernel.bi:
    geogebra.kernel.GeoConic conic -> a
    geogebra.kernel.arithmetic.NumberValue startParam -> a
    geogebra.kernel.arithmetic.NumberValue endParam -> b
    geogebra.kernel.GeoConicPart conicPart -> a
    int type -> a
    java.lang.String getClassName() -> getClassName
    geogebra.kernel.GeoConicPart getConicPart() -> a
    void compute() -> compute
    java.lang.String toString() -> toString
geogebra.kernel.AlgoConicPartCircle -> geogebra.kernel.cR:
    geogebra.kernel.GeoPoint center -> a
    geogebra.kernel.GeoPoint startPoint -> b
    geogebra.kernel.GeoPoint endPoint -> c
    geogebra.kernel.GeoPoint P -> d
    geogebra.kernel.GeoPoint Q -> e
    geogebra.kernel.GeoPoint getStartPoint() -> a
    geogebra.kernel.GeoPoint getEndPoint() -> b
    geogebra.kernel.GeoPoint getCenter() -> c
    java.lang.String getClassName() -> getClassName
    void setInputOutput() -> setInputOutput
    void compute() -> compute
geogebra.kernel.AlgoConicPartCircumcircle -> geogebra.kernel.aH:
    geogebra.kernel.GeoPoint A -> a
    geogebra.kernel.GeoPoint B -> b
    geogebra.kernel.GeoPoint C -> c
    geogebra.kernel.GeoLine line -> a
    java.lang.String getClassName() -> getClassName
    void setInputOutput() -> setInputOutput
    void compute() -> compute
    void computeDegenerate() -> a
    void computeCircle() -> b
geogebra.kernel.AlgoConicPartConicParameters -> geogebra.kernel.cF:
    void setInputOutput() -> setInputOutput
geogebra.kernel.AlgoConicPartConicPoints -> geogebra.kernel.s:
    geogebra.kernel.GeoPoint startPoint -> a
    geogebra.kernel.GeoPoint endPoint -> b
    geogebra.kernel.GeoPoint P -> c
    geogebra.kernel.GeoPoint Q -> d
    geogebra.kernel.GeoPoint getStartPoint() -> a
    geogebra.kernel.GeoPoint getEndPoint() -> b
    geogebra.kernel.GeoConic getConic() -> a
    void setInputOutput() -> setInputOutput
    void compute() -> compute
geogebra.kernel.AlgoCrossRatio -> geogebra.kernel.cz:
    geogebra.kernel.GeoPoint A -> a
    geogebra.kernel.GeoPoint B -> b
    geogebra.kernel.GeoPoint C -> c
    geogebra.kernel.GeoPoint D -> d
    geogebra.kernel.GeoNumeric M -> a
    java.lang.String getClassName() -> getClassName
    void setInputOutput() -> setInputOutput
    geogebra.kernel.GeoNumeric getResult() -> a
    void compute() -> compute
geogebra.kernel.AlgoCurvature -> geogebra.kernel.bj:
    geogebra.kernel.GeoPoint A -> a
    geogebra.kernel.GeoFunction f -> a
    geogebra.kernel.GeoNumeric K -> a
    java.lang.String getClassName() -> getClassName
    void setInputOutput() -> setInputOutput
    geogebra.kernel.GeoNumeric getResult() -> a
    void compute() -> compute
geogebra.kernel.AlgoCurvatureCurve -> geogebra.kernel.cX:
    geogebra.kernel.GeoPoint A -> a
    geogebra.kernel.GeoCurveCartesian f -> a
    geogebra.kernel.GeoNumeric K -> a
    java.lang.String getClassName() -> getClassName
    void setInputOutput() -> setInputOutput
    geogebra.kernel.GeoNumeric getResult() -> a
    void compute() -> compute
geogebra.kernel.AlgoCurvatureVector -> geogebra.kernel.cG:
    geogebra.kernel.GeoPoint A -> a
    geogebra.kernel.GeoFunction f -> a
    geogebra.kernel.GeoFunction f1 -> b
    geogebra.kernel.GeoFunction f2 -> c
    geogebra.kernel.GeoVector v -> a
    java.lang.String getClassName() -> getClassName
    void setInputOutput() -> setInputOutput
    geogebra.kernel.GeoVector getVector() -> a
    void compute() -> compute
geogebra.kernel.AlgoCurvatureVectorCurve -> geogebra.kernel.ac:
    geogebra.kernel.GeoPoint A -> a
    geogebra.kernel.GeoCurveCartesian f -> a
    geogebra.kernel.GeoCurveCartesian f1 -> b
    geogebra.kernel.GeoCurveCartesian f2 -> c
    geogebra.kernel.GeoVector v -> a
    double[] f1eval -> a
    double[] f2eval -> b
    java.lang.String getClassName() -> getClassName
    void setInputOutput() -> setInputOutput
    geogebra.kernel.GeoVector getVector() -> a
    void compute() -> compute
geogebra.kernel.AlgoCurveCartesian -> geogebra.kernel.aw:
    geogebra.kernel.arithmetic.NumberValue xcoord -> a
    geogebra.kernel.arithmetic.NumberValue ycoord -> b
    geogebra.kernel.arithmetic.NumberValue from -> c
    geogebra.kernel.arithmetic.NumberValue to -> d
    geogebra.kernel.GeoNumeric localVar -> a
    geogebra.kernel.GeoCurveCartesian curve -> a
    java.lang.String getClassName() -> getClassName
    void setInputOutput() -> setInputOutput
    geogebra.kernel.GeoCurveCartesian getCurve() -> a
    void compute() -> compute
    java.lang.String toString() -> toString
geogebra.kernel.AlgoDefined -> geogebra.kernel.bV:
    geogebra.kernel.GeoElement inputGeo -> a
    geogebra.kernel.GeoBoolean outputBoolean -> a
    java.lang.String getClassName() -> getClassName
    void setInputOutput() -> setInputOutput
    geogebra.kernel.GeoBoolean getResult() -> a
    void compute() -> compute
geogebra.kernel.AlgoDependentBoolean -> geogebra.kernel.av:
    geogebra.kernel.arithmetic.ExpressionNode root -> a
    geogebra.kernel.GeoBoolean bool -> a
    java.lang.String getClassName() -> getClassName
    void setInputOutput() -> setInputOutput
    geogebra.kernel.GeoBoolean getGeoBoolean() -> a
    void compute() -> compute
    java.lang.String toString() -> toString
geogebra.kernel.AlgoDependentConic -> geogebra.kernel.cs:
    geogebra.kernel.arithmetic.Equation equation -> a
    geogebra.kernel.arithmetic.ExpressionValue[] ev -> a
    geogebra.kernel.GeoConic conic -> a
    java.lang.String getClassName() -> getClassName
    void setInputOutput() -> setInputOutput
    geogebra.kernel.GeoConic getConic() -> a
    void compute() -> compute
    java.lang.String toString() -> toString
geogebra.kernel.AlgoDependentFunction -> geogebra.kernel.bk:
    geogebra.kernel.arithmetic.Function fun -> a
    geogebra.kernel.GeoFunction f -> a
    geogebra.kernel.arithmetic.Function expandedFun -> b
    geogebra.kernel.arithmetic.ExpressionNode expression -> a
    boolean expContainsFunctions -> a
    java.lang.String getClassName() -> getClassName
    void setInputOutput() -> setInputOutput
    geogebra.kernel.GeoFunction getFunction() -> a
    void compute() -> compute
    geogebra.kernel.arithmetic.ExpressionValue expandFunctionDerivativeNodes(geogebra.kernel.arithmetic.ExpressionValue) -> a
    boolean containsFunctions(geogebra.kernel.arithmetic.ExpressionValue) -> a
    java.lang.String toString() -> toString
geogebra.kernel.AlgoDependentLine -> geogebra.kernel.U:
    geogebra.kernel.arithmetic.Equation equation -> a
    geogebra.kernel.arithmetic.ExpressionValue[] ev -> a
    geogebra.kernel.GeoLine g -> a
    java.lang.String getClassName() -> getClassName
    void setInputOutput() -> setInputOutput
    geogebra.kernel.GeoLine getLine() -> a
    void compute() -> compute
    java.lang.String toString() -> toString
geogebra.kernel.AlgoDependentList -> geogebra.kernel.M:
    java.util.ArrayList listItems -> a
    geogebra.kernel.GeoList geoList -> a
    java.lang.String getClassName() -> getClassName
    void setInputOutput() -> setInputOutput
    void remove() -> remove
    geogebra.kernel.GeoList getGeoList() -> a
    void compute() -> compute
    java.lang.String toString() -> toString
geogebra.kernel.AlgoDependentListExpression -> geogebra.kernel.r:
    geogebra.kernel.arithmetic.ExpressionNode root -> a
    geogebra.kernel.GeoList list -> a
    java.lang.String getClassName() -> getClassName
    void setInputOutput() -> setInputOutput
    geogebra.kernel.GeoList getList() -> a
    void compute() -> compute
    java.lang.String toString() -> toString
geogebra.kernel.AlgoDependentNumber -> geogebra.kernel.az:
    geogebra.kernel.arithmetic.ExpressionNode root -> a
    geogebra.kernel.GeoNumeric number -> a
    java.lang.String getClassName() -> getClassName
    void setInputOutput() -> setInputOutput
    geogebra.kernel.GeoNumeric getNumber() -> a
    geogebra.kernel.arithmetic.ExpressionNode getExpression() -> a
    void compute() -> compute
    java.lang.String toString() -> toString
geogebra.kernel.AlgoDependentPoint -> geogebra.kernel.ch:
    geogebra.kernel.arithmetic.ExpressionNode root -> a
    geogebra.kernel.GeoPoint P -> a
    geogebra.kernel.GeoVec2D temp -> a
    java.lang.String getClassName() -> getClassName
    void setInputOutput() -> setInputOutput
    geogebra.kernel.GeoPoint getPoint() -> a
    void compute() -> compute
    java.lang.String toString() -> toString
geogebra.kernel.AlgoDependentText -> geogebra.kernel.bx:
    geogebra.kernel.arithmetic.ExpressionNode root -> a
    geogebra.kernel.GeoText text -> a
    java.lang.String getClassName() -> getClassName
    void setInputOutput() -> setInputOutput
    geogebra.kernel.GeoText getGeoText() -> a
    void compute() -> compute
    java.lang.String toString() -> toString
geogebra.kernel.AlgoDependentVector -> geogebra.kernel.ca:
    geogebra.kernel.arithmetic.ExpressionNode root -> a
    geogebra.kernel.GeoVector v -> a
    geogebra.kernel.GeoVec2D temp -> a
    java.lang.String getClassName() -> getClassName
    void setInputOutput() -> setInputOutput
    geogebra.kernel.GeoVector getVector() -> a
    void compute() -> compute
    java.lang.String toString() -> toString
geogebra.kernel.AlgoDerivative -> geogebra.kernel.ck:
    geogebra.kernel.GeoElement fgeo -> a
    geogebra.kernel.GeoElement ggeo -> b
    geogebra.kernel.GeoDeriveable f -> a
    geogebra.kernel.arithmetic.NumberValue order -> a
    geogebra.kernel.GeoDeriveable g -> b
    geogebra.kernel.GeoElement orderGeo -> c
    java.lang.String getClassName() -> getClassName
    void setInputOutput() -> setInputOutput
    geogebra.kernel.GeoElement getDerivative() -> a
    void compute() -> compute
    java.lang.String toString() -> toString
geogebra.kernel.AlgoDiameterLine -> geogebra.kernel.ah:
    geogebra.kernel.GeoConic c -> a
    geogebra.kernel.GeoLine g -> a
    geogebra.kernel.GeoLine diameter -> b
    geogebra.kernel.GeoVector v -> a
    java.lang.String getClassName() -> getClassName
    void setInputOutput() -> setInputOutput
    geogebra.kernel.GeoLine getDiameter() -> a
    void compute() -> compute
    java.lang.String toString() -> toString
geogebra.kernel.AlgoDiameterVector -> geogebra.kernel.am:
    geogebra.kernel.GeoConic c -> a
    geogebra.kernel.GeoVector v -> a
    geogebra.kernel.GeoLine diameter -> a
    java.lang.String getClassName() -> getClassName
    void setInputOutput() -> setInputOutput
    geogebra.kernel.GeoLine getDiameter() -> a
    void compute() -> compute
    java.lang.String toString() -> toString
geogebra.kernel.AlgoDilate -> geogebra.kernel.ba:
    geogebra.kernel.GeoPoint S -> a
    geogebra.kernel.Dilateable B -> a
    geogebra.kernel.arithmetic.NumberValue r -> a
    geogebra.kernel.GeoElement Ageo -> a
    geogebra.kernel.GeoElement Bgeo -> b
    geogebra.kernel.GeoElement rgeo -> c
    java.lang.String getClassName() -> getClassName
    void setInputOutput() -> setInputOutput
    geogebra.kernel.GeoElement getResult() -> a
    void compute() -> compute
    java.lang.String toString() -> toString
geogebra.kernel.AlgoDirection -> geogebra.kernel.co:
    geogebra.kernel.GeoLine g -> a
    geogebra.kernel.GeoVector v -> a
    java.lang.String getClassName() -> getClassName
    void setInputOutput() -> setInputOutput
    geogebra.kernel.GeoVector getVector() -> a
    void compute() -> compute
    java.lang.String toString() -> toString
geogebra.kernel.AlgoDirectrix -> geogebra.kernel.bU:
    geogebra.kernel.GeoConic c -> a
    geogebra.kernel.GeoLine directrix -> a
    geogebra.kernel.GeoVec2D[] eigenvec -> a
    geogebra.kernel.GeoVec2D b -> a
    geogebra.kernel.GeoPoint P -> a
    java.lang.String getClassName() -> getClassName
    void setInputOutput() -> setInputOutput
    geogebra.kernel.GeoLine getDirectrix() -> a
    void compute() -> compute
    java.lang.String toString() -> toString
geogebra.kernel.AlgoDistanceLineLine -> geogebra.kernel.G:
    geogebra.kernel.GeoLine g -> a
    geogebra.kernel.GeoLine h -> b
    geogebra.kernel.GeoNumeric dist -> a
    java.lang.String getClassName() -> getClassName
    void setInputOutput() -> setInputOutput
    geogebra.kernel.GeoNumeric getDistance() -> a
    void compute() -> compute
    java.lang.String toString() -> toString
geogebra.kernel.AlgoDistancePointLine -> geogebra.kernel.S:
    geogebra.kernel.GeoPoint P -> a
    geogebra.kernel.GeoLine g -> a
    geogebra.kernel.GeoNumeric dist -> a
    java.lang.String getClassName() -> getClassName
    void setInputOutput() -> setInputOutput
    geogebra.kernel.GeoNumeric getDistance() -> a
    void compute() -> compute
    java.lang.String toString() -> toString
geogebra.kernel.AlgoDistancePoints -> geogebra.kernel.bO:
    geogebra.kernel.GeoPoint P -> a
    geogebra.kernel.GeoPoint Q -> b
    geogebra.kernel.GeoNumeric dist -> a
    java.lang.String getClassName() -> getClassName
    void setInputOutput() -> setInputOutput
    geogebra.kernel.GeoNumeric getDistance() -> a
    void compute() -> compute
    java.lang.String toString() -> toString
geogebra.kernel.AlgoDiv -> geogebra.kernel.aZ:
    java.lang.String getClassName() -> getClassName
    void compute() -> compute
geogebra.kernel.AlgoDrawingPadCorner -> geogebra.kernel.j:
    geogebra.kernel.GeoPoint corner -> a
    geogebra.kernel.arithmetic.NumberValue number -> a
    java.lang.String getClassName() -> getClassName
    void setInputOutput() -> setInputOutput
    geogebra.kernel.GeoPoint getCorner() -> a
    void compute() -> compute
    boolean wantsEuclidianViewUpdate() -> wantsEuclidianViewUpdate
    void euclidianViewUpdate() -> euclidianViewUpdate
    java.lang.String toString() -> toString
geogebra.kernel.AlgoElement -> geogebra.kernel.AlgoElement:
    java.util.ResourceBundle rbalgo2command -> a
    geogebra.kernel.GeoElement[] input -> a
    geogebra.kernel.GeoElement[] output -> b
    geogebra.kernel.GeoElement[] efficientInput -> c
    geogebra.kernel.GeoNumeric[] randomInputNumbers -> a
    boolean isPrintedInXML -> a
    boolean stopUpdateCascade -> b
    boolean wantsEuclidianUpdate -> c
    java.util.ArrayList freeInputPoints -> a
    java.util.ArrayList inputPoints -> b
    java.lang.String getCommandString(java.lang.String) -> getCommandString
    void setInputOutput() -> setInputOutput
    void compute() -> compute
    void initForNearToRelationship() -> initForNearToRelationship
    boolean isNearToAlgorithm() -> isNearToAlgorithm
    void update() -> update
    boolean updateRandomAlgorithm() -> updateRandomAlgorithm
    geogebra.kernel.GeoElement[] getOutput() -> getOutput
    geogebra.kernel.GeoElement[] getInput() -> getInput
    void setDependencies() -> setDependencies
    void setEfficientDependencies(geogebra.kernel.GeoElement[],geogebra.kernel.GeoElement[]) -> setEfficientDependencies
    void initRandomInputNumbers() -> initRandomInputNumbers
    void setRandomInputNumbers(geogebra.kernel.GeoNumeric[]) -> setRandomInputNumbers
    void updateRandomInputNumbers() -> updateRandomInputNumbers
    void setOutputDependencies() -> setOutputDependencies
    void euclidianViewUpdate() -> euclidianViewUpdate
    boolean wantsEuclidianViewUpdate() -> wantsEuclidianViewUpdate
    void remove() -> remove
    void remove(geogebra.kernel.GeoElement) -> remove
    void removeOutputExcept(geogebra.kernel.GeoElement) -> removeOutputExcept
    void notifyAdd() -> notifyAdd
    void notifyRemove() -> notifyRemove
    geogebra.kernel.GeoElement[] getGeoElements() -> getGeoElements
    boolean hasSingleOutputType() -> hasSingleOutputType
    boolean isAlgoElement() -> isAlgoElement
    boolean isGeoElement() -> isGeoElement
    boolean isConsProtocolBreakpoint() -> isConsProtocolBreakpoint
    int getConstructionIndex() -> getConstructionIndex
    int getMinConstructionIndex() -> getMinConstructionIndex
    int getMaxConstructionIndex() -> getMaxConstructionIndex
    java.util.TreeSet getAllIndependentPredecessors() -> getAllIndependentPredecessors
    void addPredecessorsToSet(java.util.TreeSet,boolean) -> addPredecessorsToSet
    java.util.ArrayList getFreeInputPoints() -> getFreeInputPoints
    java.util.ArrayList getInputPoints() -> getInputPoints
    boolean isIndependent() -> isIndependent
    java.lang.String getNameDescription() -> getNameDescription
    java.lang.String getAlgebraDescription() -> getAlgebraDescription
    java.lang.String getDefinitionDescription() -> getDefinitionDescription
    java.lang.String getCommandDescription() -> getCommandDescription
    java.lang.String getCommandName() -> getCommandName
    java.lang.String getXML() -> getXML
    java.lang.String getXML(boolean) -> getXML
    java.lang.String getExpXML() -> getExpXML
    java.lang.String getCmdXML(java.lang.String) -> getCmdXML
    void setPrintedInXML(boolean) -> setPrintedInXML
    boolean isPrintedInXML() -> isPrintedInXML
    java.lang.String toString() -> toString
    boolean doStopUpdateCascade() -> doStopUpdateCascade
    void setStopUpdateCascade(boolean) -> setStopUpdateCascade
    boolean wantsConstructionProtocolUpdate() -> wantsConstructionProtocolUpdate
geogebra.kernel.AlgoEllipseFociLength -> geogebra.kernel.cP:
    java.lang.String getClassName() -> getClassName
    java.lang.String toString() -> toString
geogebra.kernel.AlgoEllipseFociPoint -> geogebra.kernel.aS:
    geogebra.kernel.GeoPoint A -> a
    geogebra.kernel.GeoPoint B -> b
    geogebra.kernel.GeoPoint C -> c
    geogebra.kernel.GeoConic ellipse -> a
    java.lang.String getClassName() -> getClassName
    void setInputOutput() -> setInputOutput
    geogebra.kernel.GeoConic getEllipse() -> a
    void compute() -> compute
    java.lang.String toString() -> toString
geogebra.kernel.AlgoExcentricity -> geogebra.kernel.bC:
    geogebra.kernel.GeoConic c -> a
    geogebra.kernel.GeoNumeric num -> a
    java.lang.String getClassName() -> getClassName
    void setInputOutput() -> setInputOutput
    geogebra.kernel.GeoNumeric getExcentricity() -> a
    void compute() -> compute
    java.lang.String toString() -> toString
geogebra.kernel.AlgoExpand -> geogebra.kernel.cU:
    geogebra.kernel.GeoFunction f -> a
    geogebra.kernel.GeoFunction g -> b
    java.lang.String getClassName() -> getClassName
    void setInputOutput() -> setInputOutput
    geogebra.kernel.GeoElement getResult() -> a
    void compute() -> compute
    geogebra.kernel.GeoFunction expand(geogebra.kernel.GeoFunction) -> a
    java.lang.String toString() -> toString
geogebra.kernel.AlgoExtremumPolynomial -> geogebra.kernel.af:
    java.lang.String getClassName() -> getClassName
    void compute() -> compute
    java.lang.String toString() -> toString
geogebra.kernel.AlgoFactor -> geogebra.kernel.cm:
    geogebra.kernel.GeoFunction f -> a
    geogebra.kernel.GeoFunction g -> b
    java.lang.String getClassName() -> getClassName
    void setInputOutput() -> setInputOutput
    geogebra.kernel.GeoFunction getResult() -> a
    void compute() -> compute
    java.lang.String toString() -> toString
geogebra.kernel.AlgoFirst -> geogebra.kernel.bq:
    geogebra.kernel.GeoList inputList -> a
    geogebra.kernel.GeoNumeric n -> a
    geogebra.kernel.GeoList outputList -> b
    int size -> a
    java.lang.String getClassName() -> getClassName
    void setInputOutput() -> setInputOutput
    geogebra.kernel.GeoList getResult() -> a
    void compute() -> compute
geogebra.kernel.AlgoFocus -> geogebra.kernel.cD:
    geogebra.kernel.GeoConic c -> a
    geogebra.kernel.GeoPoint[] focus -> a
    double temp1 -> a
    double temp2 -> b
    geogebra.kernel.GeoVec2D b -> a
    geogebra.kernel.GeoVec2D[] eigenvec -> a
    java.lang.String getClassName() -> getClassName
    void setInputOutput() -> setInputOutput
    geogebra.kernel.GeoPoint[] getFocus() -> a
    void compute() -> compute
    java.lang.String toString() -> toString
geogebra.kernel.AlgoFunctionInterval -> geogebra.kernel.I:
    geogebra.kernel.GeoFunction f -> a
    geogebra.kernel.arithmetic.NumberValue a -> a
    geogebra.kernel.arithmetic.NumberValue b -> b
    geogebra.kernel.GeoElement ageo -> a
    geogebra.kernel.GeoElement bgeo -> b
    geogebra.kernel.GeoFunction g -> b
    geogebra.kernel.arithmetic.ExpressionNode exp -> a
    geogebra.kernel.arithmetic.ExpressionNode exp2 -> b
    java.lang.String getClassName() -> getClassName
    void setInputOutput() -> setInputOutput
    geogebra.kernel.GeoFunction getFunction() -> a
    void compute() -> compute
    boolean hasEqualExpressions(geogebra.kernel.GeoFunction,geogebra.kernel.GeoFunction) -> a
    java.lang.String toString() -> toString
geogebra.kernel.AlgoGCD -> geogebra.kernel.u:
    java.lang.String getClassName() -> getClassName
    void compute() -> compute
geogebra.kernel.AlgoHyperbolaFociLength -> geogebra.kernel.cH:
    java.lang.String getClassName() -> getClassName
    java.lang.String toString() -> toString
geogebra.kernel.AlgoHyperbolaFociPoint -> geogebra.kernel.P:
    geogebra.kernel.GeoPoint A -> a
    geogebra.kernel.GeoPoint B -> b
    geogebra.kernel.GeoPoint C -> c
    geogebra.kernel.GeoConic hyperbola -> a
    java.lang.String getClassName() -> getClassName
    void setInputOutput() -> setInputOutput
    geogebra.kernel.GeoConic getHyperbola() -> a
    void compute() -> compute
    java.lang.String toString() -> toString
geogebra.kernel.AlgoIf -> geogebra.kernel.y:
    geogebra.kernel.GeoBoolean condition -> a
    geogebra.kernel.GeoElement ifGeo -> a
    geogebra.kernel.GeoElement elseGeo -> b
    geogebra.kernel.GeoElement result -> c
    java.lang.String getClassName() -> getClassName
    void setInputOutput() -> setInputOutput
    geogebra.kernel.GeoElement getGeoElement() -> a
    void compute() -> compute
    java.lang.String toString() -> toString
geogebra.kernel.AlgoIfFunction -> geogebra.kernel.ay:
    geogebra.kernel.GeoFunction boolFun -> a
    geogebra.kernel.GeoFunction ifFun -> b
    geogebra.kernel.GeoFunction elseFun -> c
    geogebra.kernel.GeoFunctionConditional result -> a
    java.lang.String getClassName() -> getClassName
    void setInputOutput() -> setInputOutput
    geogebra.kernel.GeoFunction getGeoFunction() -> a
    void compute() -> compute
    java.lang.String toString() -> toString
geogebra.kernel.AlgoImageCorner -> geogebra.kernel.bT:
    geogebra.kernel.GeoImage img -> a
    geogebra.kernel.GeoPoint corner -> a
    geogebra.kernel.arithmetic.NumberValue number -> a
    java.lang.String getClassName() -> getClassName
    void setInputOutput() -> setInputOutput
    geogebra.kernel.GeoPoint getCorner() -> a
    void compute() -> compute
    boolean wantsEuclidianViewUpdate() -> wantsEuclidianViewUpdate
    java.lang.String toString() -> toString
geogebra.kernel.AlgoIntegral -> geogebra.kernel.C:
    geogebra.kernel.GeoFunction f -> a
    geogebra.kernel.GeoFunction g -> b
    java.lang.String getClassName() -> getClassName
    void setInputOutput() -> setInputOutput
    geogebra.kernel.GeoFunction getIntegral() -> a
    void compute() -> compute
    java.lang.String toString() -> toString
geogebra.kernel.AlgoIntegralDefinite -> geogebra.kernel.bL:
    geogebra.kernel.GeoFunction f -> a
    geogebra.kernel.arithmetic.NumberValue a -> a
    geogebra.kernel.arithmetic.NumberValue b -> b
    geogebra.kernel.GeoElement ageo -> a
    geogebra.kernel.GeoElement bgeo -> b
    geogebra.kernel.GeoNumeric n -> a
    geogebra.kernel.integration.GaussQuadIntegration firstGauss -> a
    geogebra.kernel.integration.GaussQuadIntegration secondGauss -> b
    java.lang.String getClassName() -> getClassName
    void setInputOutput() -> setInputOutput
    geogebra.kernel.GeoNumeric getIntegral() -> a
    double getIntegralValue() -> a
    geogebra.kernel.GeoFunction getFunction() -> a
    geogebra.kernel.arithmetic.NumberValue getA() -> a
    geogebra.kernel.arithmetic.NumberValue getB() -> b
    void compute() -> compute
    double adaptiveGaussQuad(geogebra.kernel.roots.RealRootFunction,double,double) -> a
    double adaptiveGaussQuad(geogebra.kernel.roots.RealRootFunction,double,double,int,double) -> a
    java.lang.String toString() -> toString
geogebra.kernel.AlgoIntegralFunctions -> geogebra.kernel.cn:
    geogebra.kernel.GeoFunction f -> a
    geogebra.kernel.GeoFunction g -> b
    geogebra.kernel.arithmetic.NumberValue a -> a
    geogebra.kernel.arithmetic.NumberValue b -> b
    geogebra.kernel.GeoElement ageo -> a
    geogebra.kernel.GeoElement bgeo -> b
    geogebra.kernel.GeoNumeric n -> a
    geogebra.kernel.arithmetic.Function diffFunction -> a
    geogebra.kernel.GeoFunction diffGeoFunction -> c
    geogebra.kernel.AlgoIntegralDefinite algoInt -> a
    java.lang.String getClassName() -> getClassName
    void setInputOutput() -> setInputOutput
    geogebra.kernel.GeoNumeric getIntegral() -> a
    geogebra.kernel.GeoFunction getF() -> a
    geogebra.kernel.GeoFunction getG() -> b
    geogebra.kernel.arithmetic.NumberValue getA() -> a
    geogebra.kernel.arithmetic.NumberValue getB() -> b
    void compute() -> compute
    java.lang.String toString() -> toString
geogebra.kernel.AlgoIntersect -> geogebra.kernel.bX:
    int numberOfUsers -> a
    boolean[] didSetIntersectionPoint -> a
    void noUndefinedPointsInAlgebraView() -> b
    void addUser() -> c
    void removeUser() -> d
    int getClosestPointIndex(double,double) -> a
    geogebra.kernel.GeoPoint[] getIntersectionPoints() -> a
    geogebra.kernel.GeoPoint[] getLastDefinedIntersectionPoints() -> b
    void setIntersectionPoint(int,geogebra.kernel.GeoPoint) -> a
    boolean didSetIntersectionPoint(int) -> a
    java.lang.String toString() -> toString
    void remove() -> remove
geogebra.kernel.AlgoIntersectConics -> geogebra.kernel.R:
    geogebra.kernel.GeoConic A -> a
    geogebra.kernel.GeoConic B -> b
    geogebra.kernel.GeoPoint[] P -> a
    geogebra.kernel.GeoPoint[] D -> b
    geogebra.kernel.GeoPoint[] Q -> c
    geogebra.kernel.GeoConic degConic -> c
    geogebra.kernel.GeoLine tempLine -> a
    int[] age -> a
    int[] permutation -> b
    double[][] distTable -> a
    boolean[] isQonPath -> a
    boolean[] isPalive -> b
    boolean firstIntersection -> a
    int i -> a
    boolean isLimitedPathSituation -> b
    boolean isPermutationNeeded -> c
    boolean possibleSpecialCase -> d
    int specialCasePointOnCircleIndex -> b
    geogebra.kernel.PointPairList pointList -> a
    geogebra.kernel.EquationSolver eqnSolver -> a
    java.lang.String getClassName() -> getClassName
    void setInputOutput() -> setInputOutput
    geogebra.kernel.GeoPoint[] getIntersectionPoints() -> a
    geogebra.kernel.GeoPoint[] getLastDefinedIntersectionPoints() -> b
    boolean isNearToAlgorithm() -> isNearToAlgorithm
    void initForNearToRelationship() -> initForNearToRelationship
    void compute() -> compute
    boolean handleSpecialCase() -> a
    geogebra.kernel.GeoPoint getPointFrom1on2(geogebra.kernel.GeoConic,geogebra.kernel.GeoConic) -> a
    void computeNonContinous() -> e
    void computeContinous() -> a
    void handleLimitedPaths() -> f
    void updateQonPath() -> g
    boolean pointLiesOnBothPaths(geogebra.kernel.GeoPoint) -> a
    boolean isSingularitySituation() -> b
    void intersectConics(geogebra.kernel.GeoConic,geogebra.kernel.GeoConic,geogebra.kernel.GeoPoint[]) -> a
    void intersectWithDegenerate(geogebra.kernel.GeoConic,geogebra.kernel.GeoConic,geogebra.kernel.GeoPoint[]) -> b
    boolean testPoints(geogebra.kernel.GeoConic,geogebra.kernel.GeoConic,geogebra.kernel.GeoPoint[],double) -> a
    boolean calcIntersectionPoints(geogebra.kernel.GeoConic,geogebra.kernel.GeoConic,geogebra.kernel.GeoPoint[],double) -> b
    boolean intersectConicsWithEqualSubmatrixS(geogebra.kernel.GeoConic,geogebra.kernel.GeoConic,geogebra.kernel.GeoPoint[]) -> a
    void normalizeArray(double[]) -> a
    void distanceTable(geogebra.kernel.GeoPoint[],int[],geogebra.kernel.GeoPoint[],double[][]) -> a
    void setNearTo(geogebra.kernel.GeoPoint[],boolean[],geogebra.kernel.GeoPoint[],boolean[],double[][],geogebra.kernel.PointPairList,int[]) -> a
geogebra.kernel.AlgoIntersectFunctionLineNewton -> geogebra.kernel.bG:
    geogebra.kernel.GeoFunction f -> a
    geogebra.kernel.GeoLine line -> a
    geogebra.kernel.GeoPoint startPoint -> a
    geogebra.kernel.GeoPoint rootPoint -> b
    geogebra.kernel.arithmetic.Function diffFunction -> a
    java.lang.String getClassName() -> getClassName
    void setInputOutput() -> setInputOutput
    void compute() -> compute
    geogebra.kernel.GeoPoint getIntersectionPoint() -> a
    java.lang.String toString() -> toString
geogebra.kernel.AlgoIntersectFunctionsNewton -> geogebra.kernel.ar:
    geogebra.kernel.GeoFunction f -> a
    geogebra.kernel.GeoFunction g -> b
    geogebra.kernel.GeoPoint startPoint -> a
    geogebra.kernel.GeoPoint rootPoint -> b
    geogebra.kernel.arithmetic.Function diffFunction -> a
    java.lang.String getClassName() -> getClassName
    void setInputOutput() -> setInputOutput
    void compute() -> compute
    geogebra.kernel.GeoPoint getIntersectionPoint() -> a
    java.lang.String toString() -> toString
geogebra.kernel.AlgoIntersectLineConic -> geogebra.kernel.aE:
    geogebra.kernel.GeoLine g -> a
    geogebra.kernel.GeoConic c -> a
    geogebra.kernel.GeoPoint[] P -> a
    geogebra.kernel.GeoPoint[] D -> b
    geogebra.kernel.GeoPoint[] Q -> c
    int[] age -> a
    int[] permutation -> b
    double[][] distTable -> a
    boolean[] isQonPath -> a
    boolean[] isPalive -> b
    int i -> a
    boolean isTangent -> a
    boolean firstIntersection -> b
    boolean isPermutationNeeded -> c
    geogebra.kernel.GeoPoint tangentPoint -> a
    geogebra.kernel.PointPairList pointList -> a
    boolean isLimitedPathSituation -> d
    boolean possibleSpecialCase -> e
    int specialCasePointOnCircleIndex -> b
    java.lang.String getClassName() -> getClassName
    void setInputOutput() -> setInputOutput
    geogebra.kernel.GeoPoint[] getIntersectionPoints() -> a
    geogebra.kernel.GeoPoint[] getLastDefinedIntersectionPoints() -> b
    boolean isNearToAlgorithm() -> isNearToAlgorithm
    void initForNearToRelationship() -> initForNearToRelationship
    void compute() -> compute
    boolean handleSpecialCase() -> a
    void computeNonContinous() -> a
    void computeContinous() -> e
    void handleLimitedPaths() -> f
    void updateQonPath() -> g
    boolean pointLiesOnBothPaths(geogebra.kernel.GeoPoint) -> a
    int intersect(geogebra.kernel.GeoConic,geogebra.kernel.GeoLine,geogebra.kernel.GeoPoint[]) -> a
    int intersectLineConic(geogebra.kernel.GeoLine,geogebra.kernel.GeoConic,geogebra.kernel.GeoPoint[]) -> a
    boolean testPoints(geogebra.kernel.GeoLine,geogebra.kernel.GeoConic,geogebra.kernel.GeoPoint[],double) -> a
geogebra.kernel.AlgoIntersectLines -> geogebra.kernel.cq:
    geogebra.kernel.GeoLine g -> a
    geogebra.kernel.GeoLine h -> b
    geogebra.kernel.GeoPoint S -> a
    java.lang.String getClassName() -> getClassName
    void setInputOutput() -> setInputOutput
    geogebra.kernel.GeoPoint getPoint() -> a
    void compute() -> compute
    java.lang.String toString() -> toString
geogebra.kernel.AlgoIntersectPolynomialLine -> geogebra.kernel.bu:
    java.lang.String getClassName() -> getClassName
    geogebra.kernel.GeoPoint[] getIntersectionPoints() -> a
    java.lang.String toString() -> toString
geogebra.kernel.AlgoIntersectPolynomials -> geogebra.kernel.aL:
    java.lang.String getClassName() -> getClassName
    geogebra.kernel.GeoPoint[] getIntersectionPoints() -> a
    java.lang.String toString() -> toString
geogebra.kernel.AlgoIntersectSingle -> geogebra.kernel.aC:
    geogebra.kernel.AlgoIntersect algo -> a
    int index -> a
    geogebra.kernel.GeoPoint point -> a
    geogebra.kernel.GeoPoint[] parentOutput -> a
    java.lang.String getClassName() -> getClassName
    void setInputOutput() -> setInputOutput
    geogebra.kernel.GeoPoint getPoint() -> a
    geogebra.kernel.GeoPoint[] getIntersectionPoints() -> a
    geogebra.kernel.GeoPoint[] getLastDefinedIntersectionPoints() -> b
    boolean isNearToAlgorithm() -> isNearToAlgorithm
    void initForNearToRelationship() -> initForNearToRelationship
    void compute() -> compute
    void remove() -> remove
geogebra.kernel.AlgoIteration -> geogebra.kernel.ce:
    geogebra.kernel.GeoFunction f -> a
    geogebra.kernel.arithmetic.NumberValue startValue -> a
    geogebra.kernel.arithmetic.NumberValue n -> b
    geogebra.kernel.GeoElement startValueGeo -> a
    geogebra.kernel.GeoElement nGeo -> b
    geogebra.kernel.GeoNumeric result -> a
    java.lang.String getClassName() -> getClassName
    void setInputOutput() -> setInputOutput
    geogebra.kernel.GeoNumeric getResult() -> a
    void compute() -> compute
geogebra.kernel.AlgoIterationList -> geogebra.kernel.aY:
    geogebra.kernel.GeoFunction f -> a
    geogebra.kernel.arithmetic.NumberValue startValue -> a
    geogebra.kernel.arithmetic.NumberValue n -> b
    geogebra.kernel.GeoElement startValueGeo -> a
    geogebra.kernel.GeoElement nGeo -> b
    geogebra.kernel.GeoList list -> a
    java.lang.String getClassName() -> getClassName
    void setInputOutput() -> setInputOutput
    geogebra.kernel.GeoList getResult() -> a
    void compute() -> compute
    void setListElement(int,double) -> a
geogebra.kernel.AlgoJoinPoints -> geogebra.kernel.bh:
    geogebra.kernel.GeoPoint P -> a
    geogebra.kernel.GeoPoint Q -> b
    geogebra.kernel.GeoLine g -> a
    java.lang.String getClassName() -> getClassName
    void setInputOutput() -> setInputOutput
    geogebra.kernel.GeoLine getLine() -> a
    void compute() -> compute
    java.lang.String toString() -> toString
geogebra.kernel.AlgoJoinPointsRay -> geogebra.kernel.cu:
    geogebra.kernel.GeoPoint P -> a
    geogebra.kernel.GeoPoint Q -> b
    geogebra.kernel.GeoRay ray -> a
    java.lang.String getClassName() -> getClassName
    void setInputOutput() -> setInputOutput
    geogebra.kernel.GeoRay getRay() -> a
    geogebra.kernel.GeoPoint getP() -> a
    geogebra.kernel.GeoPoint getQ() -> b
    void compute() -> compute
    java.lang.String toString() -> toString
geogebra.kernel.AlgoJoinPointsSegment -> geogebra.kernel.a:
    geogebra.kernel.GeoPoint P -> a
    geogebra.kernel.GeoPoint Q -> b
    geogebra.kernel.GeoSegment s -> a
    geogebra.kernel.GeoPolygon poly -> a
    java.lang.String getClassName() -> getClassName
    void setInputOutput() -> setInputOutput
    geogebra.kernel.GeoSegment getSegment() -> a
    geogebra.kernel.GeoPolygon getPoly() -> a
    void compute() -> compute
    void remove() -> remove
    void removeSegmentOnly() -> a
    int getConstructionIndex() -> getConstructionIndex
    java.lang.String toString() -> toString
geogebra.kernel.AlgoLCM -> geogebra.kernel.F:
    java.lang.String getClassName() -> getClassName
    void compute() -> compute
geogebra.kernel.AlgoLast -> geogebra.kernel.J:
    geogebra.kernel.GeoList inputList -> a
    geogebra.kernel.GeoNumeric n -> a
    geogebra.kernel.GeoList outputList -> b
    int size -> a
    java.lang.String getClassName() -> getClassName
    void setInputOutput() -> setInputOutput
    geogebra.kernel.GeoList getResult() -> a
    void compute() -> compute
geogebra.kernel.AlgoLengthCurve -> geogebra.kernel.cK:
    geogebra.kernel.GeoNumeric t0 -> a
    geogebra.kernel.GeoNumeric t1 -> b
    geogebra.kernel.GeoCurveCartesian c -> a
    geogebra.kernel.GeoCurveCartesian c1 -> b
    geogebra.kernel.GeoNumeric length -> c
    geogebra.kernel.roots.RealRootFunction lengthCurve -> a
    java.lang.String getClassName() -> getClassName
    void setInputOutput() -> setInputOutput
    geogebra.kernel.GeoNumeric getLength() -> a
    void compute() -> compute
    geogebra.kernel.GeoCurveCartesian access$0(geogebra.kernel.AlgoLengthCurve) -> a
geogebra.kernel.AlgoLengthCurve$LengthCurve -> geogebra.kernel.d:
    geogebra.kernel.AlgoLengthCurve this$0 -> a
    double evaluate(double) -> evaluate
geogebra.kernel.AlgoLengthCurve2Points -> geogebra.kernel.bE:
    geogebra.kernel.GeoPoint A -> a
    geogebra.kernel.GeoPoint B -> b
    geogebra.kernel.GeoCurveCartesian c -> a
    geogebra.kernel.GeoCurveCartesian c1 -> b
    geogebra.kernel.GeoNumeric length -> a
    geogebra.kernel.roots.RealRootFunction lengthCurve -> a
    java.lang.String getClassName() -> getClassName
    void setInputOutput() -> setInputOutput
    geogebra.kernel.GeoNumeric getLength() -> a
    void compute() -> compute
    geogebra.kernel.GeoCurveCartesian access$0(geogebra.kernel.AlgoLengthCurve2Points) -> a
geogebra.kernel.AlgoLengthCurve2Points$LengthCurve -> geogebra.kernel.aB:
    geogebra.kernel.AlgoLengthCurve2Points this$0 -> a
    double evaluate(double) -> evaluate
geogebra.kernel.AlgoLengthFunction -> geogebra.kernel.e:
    geogebra.kernel.GeoNumeric A -> a
    geogebra.kernel.GeoNumeric B -> b
    geogebra.kernel.GeoFunction f -> a
    geogebra.kernel.GeoFunction f1 -> b
    geogebra.kernel.GeoNumeric length -> c
    geogebra.kernel.roots.RealRootFunction lengthFunction -> a
    java.lang.String getClassName() -> getClassName
    void setInputOutput() -> setInputOutput
    geogebra.kernel.GeoNumeric getLength() -> a
    void compute() -> compute
    geogebra.kernel.GeoFunction access$0(geogebra.kernel.AlgoLengthFunction) -> a
geogebra.kernel.AlgoLengthFunction$LengthFunction -> geogebra.kernel.bl:
    geogebra.kernel.AlgoLengthFunction this$0 -> a
    double evaluate(double) -> evaluate
geogebra.kernel.AlgoLengthFunction2Points -> geogebra.kernel.aQ:
    geogebra.kernel.GeoPoint A -> a
    geogebra.kernel.GeoPoint B -> b
    geogebra.kernel.GeoFunction f -> a
    geogebra.kernel.GeoFunction f1 -> b
    geogebra.kernel.GeoNumeric length -> a
    geogebra.kernel.roots.RealRootFunction lengthFunction -> a
    java.lang.String getClassName() -> getClassName
    void setInputOutput() -> setInputOutput
    geogebra.kernel.GeoNumeric getLength() -> a
    void compute() -> compute
    geogebra.kernel.GeoFunction access$0(geogebra.kernel.AlgoLengthFunction2Points) -> a
geogebra.kernel.AlgoLengthFunction2Points$LengthFunction -> geogebra.kernel.Y:
    geogebra.kernel.AlgoLengthFunction2Points this$0 -> a
    double evaluate(double) -> evaluate
geogebra.kernel.AlgoLengthVector -> geogebra.kernel.cC:
    geogebra.kernel.GeoVec3D v -> a
    geogebra.kernel.GeoNumeric num -> a
    double[] coords -> a
    java.lang.String getClassName() -> getClassName
    void setInputOutput() -> setInputOutput
    geogebra.kernel.GeoNumeric getLength() -> a
    void compute() -> compute
    java.lang.String toString() -> toString
geogebra.kernel.AlgoLineBisector -> geogebra.kernel.bY:
    geogebra.kernel.GeoPoint A -> a
    geogebra.kernel.GeoPoint B -> b
    geogebra.kernel.GeoLine g -> a
    double ax -> a
    double ay -> b
    double bx -> c
    double by -> d
    geogebra.kernel.GeoPoint midPoint -> c
    java.lang.String getClassName() -> getClassName
    void setInputOutput() -> setInputOutput
    geogebra.kernel.GeoLine getLine() -> a
    void compute() -> compute
    java.lang.String toString() -> toString
geogebra.kernel.AlgoLineBisectorSegment -> geogebra.kernel.cp:
    geogebra.kernel.GeoSegment s -> a
    geogebra.kernel.GeoLine g -> a
    geogebra.kernel.GeoPoint midPoint -> a
    java.lang.String getClassName() -> getClassName
    void setInputOutput() -> setInputOutput
    geogebra.kernel.GeoLine getLine() -> a
    void compute() -> compute
    java.lang.String toString() -> toString
geogebra.kernel.AlgoLinePointLine -> geogebra.kernel.Z:
    geogebra.kernel.GeoPoint P -> a
    geogebra.kernel.GeoLine l -> a
    geogebra.kernel.GeoLine g -> b
    java.lang.String getClassName() -> getClassName
    void setInputOutput() -> setInputOutput
    geogebra.kernel.GeoLine getLine() -> a
    void compute() -> compute
    java.lang.String toString() -> toString
geogebra.kernel.AlgoLinePointVector -> geogebra.kernel.g:
    geogebra.kernel.GeoPoint P -> a
    geogebra.kernel.GeoVector v -> a
    geogebra.kernel.GeoLine g -> a
    java.lang.String getClassName() -> getClassName
    void setInputOutput() -> setInputOutput
    geogebra.kernel.GeoLine getLine() -> a
    void compute() -> compute
    java.lang.String toString() -> toString
geogebra.kernel.AlgoListElement -> geogebra.kernel.ct:
    geogebra.kernel.GeoList geoList -> a
    geogebra.kernel.arithmetic.NumberValue num -> a
    geogebra.kernel.GeoElement numGeo -> a
    geogebra.kernel.GeoElement element -> b
    java.lang.String getClassName() -> getClassName
    void setInputOutput() -> setInputOutput
    geogebra.kernel.GeoElement getElement() -> a
    void compute() -> compute
geogebra.kernel.AlgoListGCD -> geogebra.kernel.db:
    geogebra.kernel.GeoList geoList -> a
    geogebra.kernel.GeoNumeric num -> a
    java.lang.String getClassName() -> getClassName
    void setInputOutput() -> setInputOutput
    geogebra.kernel.GeoNumeric getGCD() -> a
    void compute() -> compute
geogebra.kernel.AlgoListLCM -> geogebra.kernel.bZ:
    geogebra.kernel.GeoList geoList -> a
    geogebra.kernel.GeoNumeric num -> a
    java.lang.String getClassName() -> getClassName
    void setInputOutput() -> setInputOutput
    geogebra.kernel.GeoNumeric getLCM() -> a
    void compute() -> compute
geogebra.kernel.AlgoListLength -> geogebra.kernel.bc:
    geogebra.kernel.GeoList geoList -> a
    geogebra.kernel.GeoNumeric length -> a
    java.lang.String getClassName() -> getClassName
    void setInputOutput() -> setInputOutput
    geogebra.kernel.GeoNumeric getLength() -> a
    void compute() -> compute
geogebra.kernel.AlgoListMax -> geogebra.kernel.cV:
    geogebra.kernel.GeoList geoList -> a
    geogebra.kernel.GeoNumeric max -> a
    java.lang.String getClassName() -> getClassName
    void setInputOutput() -> setInputOutput
    geogebra.kernel.GeoNumeric getMax() -> a
    void compute() -> compute
geogebra.kernel.AlgoListMin -> geogebra.kernel.cl:
    geogebra.kernel.GeoList geoList -> a
    geogebra.kernel.GeoNumeric min -> a
    java.lang.String getClassName() -> getClassName
    void setInputOutput() -> setInputOutput
    geogebra.kernel.GeoNumeric getMin() -> a
    void compute() -> compute
geogebra.kernel.AlgoLocus -> geogebra.kernel.al:
    int MAX_TIME_FOR_ONE_STEP -> a
    int MAX_STEPS_TO_FIND_DEFINED_STARTPOINT -> b
    int MAX_X_PIXEL_DIST -> c
    int MAX_Y_PIXEL_DIST -> d
    geogebra.kernel.GeoPoint P -> a
    geogebra.kernel.GeoPoint Q -> b
    geogebra.kernel.GeoLocus locus -> a
    geogebra.kernel.GeoElement[] efficientInput -> c
    geogebra.kernel.GeoElement[] standardInput -> d
    geogebra.kernel.Path path -> a
    geogebra.kernel.PathMover pathMover -> a
    int pointCount -> e
    geogebra.kernel.GeoPoint Pcopy -> c
    geogebra.kernel.GeoPoint Qcopy -> d
    geogebra.kernel.GeoPoint PstartPos -> e
    geogebra.kernel.GeoPoint QstartPos -> f
    double lastX -> a
    double lastY -> b
    double maxXdist -> c
    double maxYdist -> d
    double xmin -> e
    double xmax -> f
    double ymin -> g
    double ymax -> h
    double farXmin -> i
    double farXmax -> j
    double farYmin -> k
    double farYmax -> l
    java.awt.geom.Rectangle2D$Double nearToScreenRect -> a
    boolean lastFarAway -> a
    geogebra.kernel.Construction macroCons -> b
    geogebra.kernel.MacroKernel macroKernel -> a
    java.util.TreeSet locusConsOrigElements -> a
    java.util.TreeSet Qin -> b
    java.lang.String getClassName() -> getClassName
    void init() -> a
    void setInputOutput() -> setInputOutput
    java.lang.String toString() -> toString
    geogebra.kernel.GeoLocus getLocus() -> a
    void buildLocusMacroConstruction(java.util.TreeSet) -> a
    void resetMacroConstruction() -> b
    void compute() -> compute
    void insertPoint(double,double,boolean) -> a
    boolean isFarAway(double,double) -> a
    boolean distanceOK(geogebra.kernel.GeoPoint) -> a
    boolean distanceSmall(geogebra.kernel.GeoPoint) -> b
    void updateScreenBorders() -> c
    void euclidianViewUpdate() -> euclidianViewUpdate
    boolean wantsEuclidianViewUpdate() -> wantsEuclidianViewUpdate
geogebra.kernel.AlgoMacro -> geogebra.kernel.bD:
    geogebra.kernel.Macro macro -> a
    geogebra.kernel.GeoElement[] macroInput -> c
    geogebra.kernel.GeoElement[] macroOutput -> d
    geogebra.util.FastHashMapKeyless macroToAlgoMap -> a
    java.util.ArrayList macroOutputAndReferencedGeos -> a
    java.util.ArrayList algoOutputAndReferencedGeos -> b
    void remove() -> remove
    java.lang.String getClassName() -> getClassName
    java.lang.String getCommandName() -> getCommandName
    void setInputOutput() -> setInputOutput
    boolean wantsEuclidianViewUpdate() -> wantsEuclidianViewUpdate
    void euclidianViewUpdate() -> euclidianViewUpdate
    void compute() -> compute
    java.lang.String toString() -> toString
    boolean isMacroInputObject(geogebra.kernel.GeoElement) -> a
    void setMacroConstructionState() -> a
    void getMacroConstructionState() -> b
    void createOutputObjects() -> c
    void initMap() -> d
    void map(geogebra.kernel.GeoElement,geogebra.kernel.GeoElement) -> a
    geogebra.kernel.GeoElement getAlgoGeo(geogebra.kernel.GeoElement) -> a
    geogebra.kernel.GeoElement createAlgoCopy(geogebra.kernel.GeoElement) -> b
    void initSpecialReferences(geogebra.kernel.GeoElement,geogebra.kernel.GeoElement) -> b
    void initLine(geogebra.kernel.GeoLine,geogebra.kernel.GeoLine) -> a
    void initConic(geogebra.kernel.GeoConic,geogebra.kernel.GeoConic) -> a
    void initLocateable(geogebra.kernel.Locateable,geogebra.kernel.Locateable) -> a
    void initPolygon(geogebra.kernel.GeoPolygon,geogebra.kernel.GeoPolygon) -> a
    void initList(geogebra.kernel.GeoList,geogebra.kernel.GeoList) -> a
    void initFunction(geogebra.kernel.arithmetic.Function) -> a
    void replaceReferencedMacroObjects(geogebra.kernel.arithmetic.ExpressionNode) -> a
geogebra.kernel.AlgoMax -> geogebra.kernel.v:
    java.lang.String getClassName() -> getClassName
    void compute() -> compute
geogebra.kernel.AlgoMidpoint -> geogebra.kernel.ao:
    geogebra.kernel.GeoPoint P -> a
    geogebra.kernel.GeoPoint Q -> b
    geogebra.kernel.GeoPoint M -> c
    java.lang.String getClassName() -> getClassName
    void setInputOutput() -> setInputOutput
    geogebra.kernel.GeoPoint getPoint() -> a
    void compute() -> compute
    java.lang.String toString() -> toString
geogebra.kernel.AlgoMidpointSegment -> geogebra.kernel.aF:
    geogebra.kernel.GeoSegment segment -> a
    geogebra.kernel.GeoPoint M -> a
    geogebra.kernel.GeoPoint P -> b
    geogebra.kernel.GeoPoint Q -> c
    java.lang.String getClassName() -> getClassName
    void setInputOutput() -> setInputOutput
    geogebra.kernel.GeoPoint getPoint() -> a
    void compute() -> compute
    java.lang.String toString() -> toString
geogebra.kernel.AlgoMin -> geogebra.kernel.b:
    java.lang.String getClassName() -> getClassName
    void compute() -> compute
geogebra.kernel.AlgoMirror -> geogebra.kernel.bt:
    geogebra.kernel.Mirrorable out -> a
    geogebra.kernel.GeoElement geoIn -> a
    geogebra.kernel.GeoElement geoOut -> b
    geogebra.kernel.GeoLine mirrorLine -> a
    geogebra.kernel.GeoPoint mirrorPoint -> a
    geogebra.kernel.GeoConic mirrorConic -> a
    geogebra.kernel.GeoElement mirror -> c
    java.lang.String getClassName() -> getClassName
    void setInputOutput() -> setInputOutput
    geogebra.kernel.GeoElement getResult() -> a
    void compute() -> compute
    java.lang.String toString() -> toString
geogebra.kernel.AlgoMod -> geogebra.kernel.N:
    java.lang.String getClassName() -> getClassName
    void compute() -> compute
geogebra.kernel.AlgoName -> geogebra.kernel.ax:
    geogebra.kernel.GeoElement geo -> a
    geogebra.kernel.GeoText text -> a
    java.lang.String getClassName() -> getClassName
    void setInputOutput() -> setInputOutput
    geogebra.kernel.GeoText getGeoText() -> a
    void compute() -> compute
geogebra.kernel.AlgoOrthoLinePointLine -> geogebra.kernel.aM:
    geogebra.kernel.GeoPoint P -> a
    geogebra.kernel.GeoLine l -> a
    geogebra.kernel.GeoLine g -> b
    java.lang.String getClassName() -> getClassName
    void setInputOutput() -> setInputOutput
    geogebra.kernel.GeoLine getLine() -> a
    void compute() -> compute
    java.lang.String toString() -> toString
geogebra.kernel.AlgoOrthoLinePointVector -> geogebra.kernel.D:
    geogebra.kernel.GeoPoint P -> a
    geogebra.kernel.GeoVector v -> a
    geogebra.kernel.GeoLine g -> a
    java.lang.String getClassName() -> getClassName
    void setInputOutput() -> setInputOutput
    geogebra.kernel.GeoLine getLine() -> a
    void compute() -> compute
    java.lang.String toString() -> toString
geogebra.kernel.AlgoOrthoVectorLine -> geogebra.kernel.bR:
    geogebra.kernel.GeoLine g -> a
    geogebra.kernel.GeoVector n -> a
    java.lang.String getClassName() -> getClassName
    void setInputOutput() -> setInputOutput
    geogebra.kernel.GeoVector getVector() -> a
    void compute() -> compute
    java.lang.String toString() -> toString
geogebra.kernel.AlgoOrthoVectorVector -> geogebra.kernel.bm:
    geogebra.kernel.GeoVector v -> a
    geogebra.kernel.GeoVector n -> b
    java.lang.String getClassName() -> getClassName
    void setInputOutput() -> setInputOutput
    geogebra.kernel.GeoVector getVector() -> a
    void compute() -> compute
    java.lang.String toString() -> toString
geogebra.kernel.AlgoOsculatingCircle -> geogebra.kernel.cd:
    geogebra.kernel.GeoPoint A -> a
    geogebra.kernel.GeoPoint R -> b
    geogebra.kernel.GeoFunction f -> a
    geogebra.kernel.GeoVector v -> a
    geogebra.kernel.GeoNumeric curv -> a
    geogebra.kernel.GeoConic circle -> a
    java.lang.String getClassName() -> getClassName
    void setInputOutput() -> setInputOutput
    geogebra.kernel.GeoConic getCircle() -> a
    void compute() -> compute
geogebra.kernel.AlgoOsculatingCircleCurve -> geogebra.kernel.aD:
    geogebra.kernel.GeoPoint A -> a
    geogebra.kernel.GeoPoint R -> b
    geogebra.kernel.GeoCurveCartesian f -> a
    geogebra.kernel.GeoVector v -> a
    geogebra.kernel.GeoNumeric curv -> a
    geogebra.kernel.GeoConic circle -> a
    java.lang.String getClassName() -> getClassName
    void setInputOutput() -> setInputOutput
    geogebra.kernel.GeoConic getCircle() -> a
    void compute() -> compute
geogebra.kernel.AlgoParabolaParameter -> geogebra.kernel.ci:
    geogebra.kernel.GeoConic c -> a
    geogebra.kernel.GeoNumeric num -> a
    java.lang.String getClassName() -> getClassName
    void setInputOutput() -> setInputOutput
    geogebra.kernel.GeoNumeric getParameter() -> a
    void compute() -> compute
    java.lang.String toString() -> toString
geogebra.kernel.AlgoParabolaPointLine -> geogebra.kernel.bK:
    geogebra.kernel.GeoPoint F -> a
    geogebra.kernel.GeoLine l -> a
    geogebra.kernel.GeoConic parabola -> a
    java.lang.String getClassName() -> getClassName
    void setInputOutput() -> setInputOutput
    geogebra.kernel.GeoConic getParabola() -> a
    void compute() -> compute
    java.lang.String toString() -> toString
geogebra.kernel.AlgoPerimeterPoly -> geogebra.kernel.aq:
    geogebra.kernel.GeoPolygon polygon -> a
    geogebra.kernel.GeoNumeric circum -> a
    java.lang.String getClassName() -> getClassName
    void setInputOutput() -> setInputOutput
    void compute() -> compute
    geogebra.kernel.GeoNumeric getCircumference() -> a
geogebra.kernel.AlgoPointOnPath -> geogebra.kernel.o:
    geogebra.kernel.Path path -> a
    geogebra.kernel.GeoPoint P -> a
    java.lang.String getClassName() -> getClassName
    void setInputOutput() -> setInputOutput
    geogebra.kernel.GeoPoint getP() -> a
    geogebra.kernel.Path getPath() -> a
    void compute() -> compute
    java.lang.String toString() -> toString
geogebra.kernel.AlgoPointVector -> geogebra.kernel.m:
    geogebra.kernel.GeoPoint P -> a
    geogebra.kernel.GeoVector v -> a
    geogebra.kernel.GeoPoint Q -> b
    java.lang.String getClassName() -> getClassName
    void setInputOutput() -> setInputOutput
    geogebra.kernel.GeoPoint getQ() -> a
    void compute() -> compute
    java.lang.String toString() -> toString
geogebra.kernel.AlgoPolarLine -> geogebra.kernel.dc:
    geogebra.kernel.GeoConic c -> a
    geogebra.kernel.GeoPoint P -> a
    geogebra.kernel.GeoLine polar -> a
    java.lang.String getClassName() -> getClassName
    void setInputOutput() -> setInputOutput
    geogebra.kernel.GeoLine getLine() -> a
    void compute() -> compute
    java.lang.String toString() -> toString
geogebra.kernel.AlgoPolygon -> geogebra.kernel.aA:
    geogebra.kernel.GeoPoint[] points -> a
    geogebra.kernel.GeoList geoList -> a
    geogebra.kernel.GeoPolygon poly -> a
    java.lang.String getClassName() -> getClassName
    void updatePointArray(geogebra.kernel.GeoList) -> a
    void setInputOutput() -> setInputOutput
    void setOutput() -> a
    void update() -> update
    geogebra.kernel.GeoPoint[] getPoints() -> a
    void compute() -> compute
    java.lang.String toString() -> toString
geogebra.kernel.AlgoPolygonRegular -> geogebra.kernel.bv:
    geogebra.kernel.GeoPoint A -> a
    geogebra.kernel.GeoPoint B -> b
    geogebra.kernel.arithmetic.NumberValue num -> a
    geogebra.kernel.GeoPolygon poly -> a
    geogebra.kernel.GeoPoint[] points -> a
    geogebra.kernel.GeoPoint centerPoint -> c
    geogebra.kernel.arithmetic.MyDouble rotAngle -> a
    boolean isIniting -> a
    java.lang.String getClassName() -> getClassName
    void setInputOutput() -> setInputOutput
    void setOutput() -> a
    void compute() -> compute
    void updatePointsArray(int) -> a
    void removePoint(geogebra.kernel.GeoPoint) -> a
    void removeOutputExcept(geogebra.kernel.GeoElement) -> removeOutputExcept
geogebra.kernel.AlgoPolynomialFromCoordinates -> geogebra.kernel.i:
    geogebra.kernel.GeoList inputList -> a
    geogebra.kernel.GeoFunction g -> a
    java.lang.String getClassName() -> getClassName
    void setInputOutput() -> setInputOutput
    geogebra.kernel.GeoFunction getPolynomial() -> a
    void compute() -> compute
    geogebra.kernel.arithmetic.Function buildPolyFunctionExpression(geogebra.kernel.Kernel,double[]) -> a
    java.lang.String toString() -> toString
    void polcoe(double[],double[],int,double[]) -> a
    void polcoeBig(double[],double[],int,double[]) -> b
geogebra.kernel.AlgoPolynomialFromFunction -> geogebra.kernel.bI:
    geogebra.kernel.GeoFunction f -> a
    geogebra.kernel.GeoFunction g -> b
    geogebra.algebra.parser.Parser parser -> a
    java.lang.String getClassName() -> getClassName
    void setInputOutput() -> setInputOutput
    geogebra.kernel.GeoFunction getPolynomial() -> a
    void compute() -> compute
    double evaluateToDouble(java.lang.String) -> a
    java.lang.String toString() -> toString
geogebra.kernel.AlgoRadius -> geogebra.kernel.bA:
    geogebra.kernel.GeoConic c -> a
    geogebra.kernel.GeoNumeric num -> a
    java.lang.String getClassName() -> getClassName
    void setInputOutput() -> setInputOutput
    geogebra.kernel.GeoNumeric getRadius() -> a
    void compute() -> compute
    java.lang.String toString() -> toString
geogebra.kernel.AlgoRayPointVector -> geogebra.kernel.cv:
    geogebra.kernel.GeoPoint P -> a
    geogebra.kernel.GeoVector v -> a
    geogebra.kernel.GeoRay ray -> a
    java.lang.String getClassName() -> getClassName
    void setInputOutput() -> setInputOutput
    geogebra.kernel.GeoRay getRay() -> a
    void compute() -> compute
    java.lang.String toString() -> toString
geogebra.kernel.AlgoReverse -> geogebra.kernel.cr:
    geogebra.kernel.GeoList inputList -> a
    geogebra.kernel.GeoList outputList -> b
    int size -> a
    java.lang.String getClassName() -> getClassName
    void setInputOutput() -> setInputOutput
    geogebra.kernel.GeoList getResult() -> a
    void compute() -> compute
geogebra.kernel.AlgoRootInterval -> geogebra.kernel.cB:
    geogebra.kernel.GeoFunction f -> a
    geogebra.kernel.arithmetic.NumberValue a -> a
    geogebra.kernel.arithmetic.NumberValue b -> b
    geogebra.kernel.GeoPoint rootPoint -> a
    geogebra.kernel.GeoElement aGeo -> a
    geogebra.kernel.GeoElement bGeo -> b
    geogebra.kernel.roots.RealRoot rootFinder -> a
    java.lang.String getClassName() -> getClassName
    void setInputOutput() -> setInputOutput
    geogebra.kernel.GeoPoint getRootPoint() -> a
    void compute() -> compute
    double calcRoot() -> a
    java.lang.String toString() -> toString
geogebra.kernel.AlgoRootNewton -> geogebra.kernel.cc:
    geogebra.kernel.GeoFunction f -> a
    geogebra.kernel.arithmetic.NumberValue start -> a
    geogebra.kernel.GeoPoint rootPoint -> a
    geogebra.kernel.GeoElement startGeo -> a
    geogebra.kernel.roots.RealRoot rootFinder -> a
    java.lang.String getClassName() -> getClassName
    void setInputOutput() -> setInputOutput
    geogebra.kernel.GeoPoint getRootPoint() -> b
    void compute() -> compute
    double calcRoot(geogebra.kernel.arithmetic.Function,double) -> a
    double[] getDomain(geogebra.kernel.arithmetic.Function,double) -> a
    java.lang.String toString() -> toString
geogebra.kernel.AlgoRootsPolynomial -> geogebra.kernel.cg:
    int mode -> b
    geogebra.kernel.GeoFunction f -> a
    geogebra.kernel.GeoFunction g -> b
    geogebra.kernel.GeoLine line -> a
    geogebra.kernel.GeoPoint[] rootPoints -> a
    java.lang.String[] labels -> a
    boolean initLabels -> a
    boolean setLabels -> b
    geogebra.kernel.EquationSolver eqnSolver -> a
    double[] curRoots -> a
    int curRealRoots -> a
    geogebra.kernel.arithmetic.Function yValFunction -> a
    geogebra.kernel.arithmetic.Function diffFunction -> b
    geogebra.kernel.GeoPoint tempPoint -> a
    void setLabels(java.lang.String[]) -> a
    java.lang.String getClassName() -> getClassName
    void setInputOutput() -> setInputOutput
    geogebra.kernel.GeoPoint[] getRootPoints() -> c
    geogebra.kernel.GeoPoint[] getIntersectionPoints() -> a
    geogebra.kernel.GeoPoint[] getLastDefinedIntersectionPoints() -> b
    void compute() -> compute
    void computeRoots() -> a
    void computePolynomialIntersection() -> e
    void computePolyLineIntersection() -> f
    void calcRoots(geogebra.kernel.arithmetic.Function,int) -> a
    void ensureSignChanged(geogebra.kernel.roots.RealRootFunction) -> a
    void addToCurrentRoots(double[],int) -> b
    void removeRoot(int) -> a
    void setRootPoints(double[],int) -> a
    void updateLabels(int) -> b
    void remove(geogebra.kernel.GeoElement) -> remove
    void initRootPoints(int) -> c
    void removeRootPoint(int) -> d
    java.lang.String toString() -> toString
geogebra.kernel.AlgoRotate -> geogebra.kernel.V:
    geogebra.kernel.Rotateable B -> a
    geogebra.kernel.arithmetic.NumberValue angle -> a
    geogebra.kernel.GeoElement Ageo -> a
    geogebra.kernel.GeoElement Bgeo -> b
    geogebra.kernel.GeoElement angleGeo -> c
    java.lang.String getClassName() -> getClassName
    void setInputOutput() -> setInputOutput
    geogebra.kernel.GeoElement getResult() -> a
    void compute() -> compute
    java.lang.String toString() -> toString
geogebra.kernel.AlgoRotatePoint -> geogebra.kernel.aW:
    geogebra.kernel.GeoPoint Q -> a
    geogebra.kernel.PointRotateable B -> a
    geogebra.kernel.arithmetic.NumberValue angle -> a
    geogebra.kernel.GeoElement Ageo -> a
    geogebra.kernel.GeoElement Bgeo -> b
    geogebra.kernel.GeoElement angleGeo -> c
    java.lang.String getClassName() -> getClassName
    void setInputOutput() -> setInputOutput
    geogebra.kernel.GeoElement getResult() -> a
    void compute() -> compute
    java.lang.String toString() -> toString
geogebra.kernel.AlgoRow -> geogebra.kernel.cM:
    geogebra.kernel.arithmetic.NumberValue startValue -> a
    geogebra.kernel.arithmetic.NumberValue n -> b
    geogebra.kernel.GeoElement startValueGeo -> a
    geogebra.kernel.GeoElement nGeo -> b
    geogebra.kernel.GeoElement cellGeo -> c
    geogebra.kernel.GeoList outputList -> a
    java.lang.String getClassName() -> getClassName
    void setInputOutput() -> setInputOutput
    geogebra.kernel.GeoList getResult() -> a
    void compute() -> compute
geogebra.kernel.AlgoSemicircle -> geogebra.kernel.A:
    geogebra.kernel.GeoPoint A -> a
    geogebra.kernel.GeoPoint B -> b
    geogebra.kernel.GeoConicPart conicPart -> a
    geogebra.kernel.GeoPoint M -> c
    geogebra.kernel.GeoConic conic -> a
    java.lang.String getClassName() -> getClassName
    void setInputOutput() -> setInputOutput
    geogebra.kernel.GeoConicPart getSemicircle() -> a
    geogebra.kernel.GeoPoint getA() -> a
    geogebra.kernel.GeoPoint getB() -> b
    void compute() -> compute
    java.lang.String toString() -> toString
geogebra.kernel.AlgoSequence -> geogebra.kernel.cW:
    geogebra.kernel.GeoElement expression -> a
    geogebra.kernel.GeoNumeric var -> a
    geogebra.kernel.arithmetic.NumberValue var_from -> a
    geogebra.kernel.arithmetic.NumberValue var_to -> b
    geogebra.kernel.arithmetic.NumberValue var_step -> c
    geogebra.kernel.GeoElement var_from_geo -> b
    geogebra.kernel.GeoElement var_to_geo -> c
    geogebra.kernel.GeoElement var_step_geo -> d
    geogebra.kernel.GeoList list -> a
    double last_from -> a
    double last_to -> b
    double last_step -> c
    boolean expIsFunctionOrCurve -> a
    boolean isEmpty -> b
    geogebra.kernel.AlgoElement expressionParentAlgo -> a
    java.lang.String getClassName() -> getClassName
    void setInputOutput() -> setInputOutput
    void compute() -> compute
    void createNewList(double,double,double) -> a
    geogebra.kernel.GeoElement createNewListElement() -> a
    void updateListItems(double,double,double) -> b
    void updateLocalVar(double) -> a
    java.lang.String toString() -> toString
geogebra.kernel.AlgoSlope -> geogebra.kernel.bp:
    geogebra.kernel.GeoLine g -> a
    geogebra.kernel.GeoNumeric slope -> a
    java.lang.String getClassName() -> getClassName
    void setInputOutput() -> setInputOutput
    geogebra.kernel.GeoNumeric getSlope() -> a
    geogebra.kernel.GeoLine getg() -> a
    void compute() -> compute
    java.lang.String toString() -> toString
geogebra.kernel.AlgoSort -> geogebra.kernel.cL:
    geogebra.kernel.GeoList inputList -> a
    geogebra.kernel.GeoList outputList -> b
    int size -> a
    java.lang.String getClassName() -> getClassName
    void setInputOutput() -> setInputOutput
    geogebra.kernel.GeoList getResult() -> a
    void compute() -> compute
    void sortStrings() -> a
    void sortNumbers() -> b
    void setListElement(int,double) -> a
    void setListElement(int,java.lang.String) -> a
geogebra.kernel.AlgoStep -> geogebra.kernel.aO:
    geogebra.kernel.GeoNumeric num -> a
    java.lang.String getClassName() -> getClassName
    void setInputOutput() -> setInputOutput
    geogebra.kernel.GeoNumeric getResult() -> a
    boolean wantsConstructionProtocolUpdate() -> wantsConstructionProtocolUpdate
    void compute() -> compute
geogebra.kernel.AlgoStepObject -> geogebra.kernel.bw:
    geogebra.kernel.GeoElement inputGeo -> a
    geogebra.kernel.GeoNumeric num -> a
    java.lang.String getClassName() -> getClassName
    void setInputOutput() -> setInputOutput
    geogebra.kernel.GeoNumeric getResult() -> a
    boolean wantsConstructionProtocolUpdate() -> wantsConstructionProtocolUpdate
    void compute() -> compute
geogebra.kernel.AlgoSumLower -> geogebra.kernel.cJ:
    java.lang.String getClassName() -> getClassName
geogebra.kernel.AlgoSumUpper -> geogebra.kernel.B:
    java.lang.String getClassName() -> getClassName
geogebra.kernel.AlgoSumUpperLower -> geogebra.kernel.aK:
    double xVisibleWidth -> a
    geogebra.kernel.GeoFunction f -> a
    geogebra.kernel.arithmetic.NumberValue a -> a
    geogebra.kernel.arithmetic.NumberValue b -> b
    geogebra.kernel.arithmetic.NumberValue n -> c
    geogebra.kernel.GeoElement ageo -> a
    geogebra.kernel.GeoElement bgeo -> b
    geogebra.kernel.GeoElement ngeo -> c
    geogebra.kernel.GeoNumeric sum -> a
    boolean upperSum -> a
    int N -> a
    double STEP -> b
    double[] yval -> a
    double[] leftBorder -> b
    geogebra.kernel.optimization.ExtremumFinder extrFinder -> a
    void euclidianViewUpdate() -> euclidianViewUpdate
    boolean wantsEuclidianViewUpdate() -> wantsEuclidianViewUpdate
    java.lang.String getClassName() -> getClassName
    void setInputOutput() -> setInputOutput
    int getIntervals() -> a
    double getStep() -> a
    double[] getValues() -> a
    double[] getLeftBorders() -> b
    geogebra.kernel.GeoNumeric getSum() -> a
    geogebra.kernel.arithmetic.NumberValue getA() -> a
    geogebra.kernel.arithmetic.NumberValue getB() -> b
    void compute() -> compute
    java.lang.String toString() -> toString
geogebra.kernel.AlgoTake -> geogebra.kernel.bW:
    geogebra.kernel.GeoList inputList -> a
    geogebra.kernel.GeoNumeric m -> a
    geogebra.kernel.GeoNumeric n -> b
    geogebra.kernel.GeoList outputList -> b
    int size -> a
    java.lang.String getClassName() -> getClassName
    void setInputOutput() -> setInputOutput
    geogebra.kernel.GeoList getResult() -> a
    void compute() -> compute
geogebra.kernel.AlgoTangentCurve -> geogebra.kernel.an:
    geogebra.kernel.GeoPoint P -> a
    geogebra.kernel.GeoCurveCartesian f -> a
    geogebra.kernel.GeoCurveCartesian df -> b
    geogebra.kernel.GeoLine tangent -> a
    geogebra.kernel.GeoPoint T -> b
    boolean pointOnCurve -> a
    java.lang.String getClassName() -> getClassName
    void setInputOutput() -> setInputOutput
    geogebra.kernel.GeoLine getTangent() -> a
    void compute() -> compute
geogebra.kernel.AlgoTangentFunctionNumber -> geogebra.kernel.bn:
    geogebra.kernel.arithmetic.NumberValue n -> a
    geogebra.kernel.GeoElement ngeo -> a
    geogebra.kernel.GeoFunction f -> a
    geogebra.kernel.GeoLine tangent -> a
    geogebra.kernel.GeoPoint T -> a
    geogebra.kernel.GeoFunction deriv -> b
    java.lang.String getClassName() -> getClassName
    void setInputOutput() -> setInputOutput
    geogebra.kernel.GeoLine getTangent() -> a
    void compute() -> compute
    java.lang.String toString() -> toString
geogebra.kernel.AlgoTangentFunctionPoint -> geogebra.kernel.de:
    geogebra.kernel.GeoPoint P -> a
    geogebra.kernel.GeoFunction f -> a
    geogebra.kernel.GeoLine tangent -> a
    geogebra.kernel.GeoPoint T -> b
    boolean pointOnFunction -> a
    geogebra.kernel.GeoFunction deriv -> b
    java.lang.String getClassName() -> getClassName
    void setInputOutput() -> setInputOutput
    geogebra.kernel.GeoLine getTangent() -> a
    void compute() -> compute
    java.lang.String toString() -> toString
geogebra.kernel.AlgoTangentLine -> geogebra.kernel.cN:
    geogebra.kernel.GeoLine g -> a
    geogebra.kernel.GeoConic c -> a
    geogebra.kernel.GeoLine[] tangents -> a
    geogebra.kernel.GeoLine diameter -> b
    geogebra.kernel.GeoVector direction -> a
    geogebra.kernel.AlgoIntersectLineConic algoIntersect -> a
    geogebra.kernel.GeoPoint[] tangentPoints -> a
    int i -> a
    java.lang.String getClassName() -> getClassName
    void setInputOutput() -> setInputOutput
    geogebra.kernel.GeoLine[] getTangents() -> a
    geogebra.kernel.GeoPoint getTangentPoint(geogebra.kernel.GeoConic,geogebra.kernel.GeoLine) -> a
    void initForNearToRelationship() -> initForNearToRelationship
    void compute() -> compute
    java.lang.String toString() -> toString
geogebra.kernel.AlgoTangentPoint -> geogebra.kernel.q:
    geogebra.kernel.GeoPoint P -> a
    geogebra.kernel.GeoConic c -> a
    geogebra.kernel.GeoLine[] tangents -> a
    geogebra.kernel.GeoLine polar -> a
    geogebra.kernel.AlgoIntersectLineConic algoIntersect -> a
    geogebra.kernel.GeoPoint[] tangentPoints -> a
    boolean equalLines -> a
    java.lang.String getClassName() -> getClassName
    void setInputOutput() -> setInputOutput
    geogebra.kernel.GeoLine[] getTangents() -> a
    geogebra.kernel.GeoPoint getTangentPoint(geogebra.kernel.GeoConic,geogebra.kernel.GeoLine) -> a
    void initForNearToRelationship() -> initForNearToRelationship
    void compute() -> compute
    java.lang.String toString() -> toString
geogebra.kernel.AlgoTaylorSeries -> geogebra.kernel.L:
    geogebra.kernel.GeoFunction f -> a
    geogebra.kernel.arithmetic.NumberValue a -> a
    geogebra.kernel.arithmetic.NumberValue n -> b
    geogebra.kernel.GeoFunction g -> b
    geogebra.kernel.GeoElement ageo -> a
    geogebra.kernel.GeoElement ngeo -> b
    java.lang.String getClassName() -> getClassName
    void setInputOutput() -> setInputOutput
    geogebra.kernel.GeoFunction getPolynomial() -> a
    void compute() -> compute
    java.lang.String toString() -> toString
geogebra.kernel.AlgoTextCorner -> geogebra.kernel.E:
    geogebra.kernel.GeoText txt -> a
    geogebra.kernel.GeoPoint corner -> a
    geogebra.kernel.arithmetic.NumberValue number -> a
    java.lang.String getClassName() -> getClassName
    void setInputOutput() -> setInputOutput
    geogebra.kernel.GeoPoint getCorner() -> a
    void compute() -> compute
    boolean wantsEuclidianViewUpdate() -> wantsEuclidianViewUpdate
    java.lang.String toString() -> toString
geogebra.kernel.AlgoTransformation -> geogebra.kernel.W:
geogebra.kernel.AlgoTranslate -> geogebra.kernel.dd:
    geogebra.kernel.Translateable out -> a
    geogebra.kernel.GeoElement inGeo -> a
    geogebra.kernel.GeoElement outGeo -> b
    geogebra.kernel.GeoVector v -> a
    java.lang.String getClassName() -> getClassName
    void setInputOutput() -> setInputOutput
    geogebra.kernel.GeoElement getResult() -> a
    void compute() -> compute
    java.lang.String toString() -> toString
geogebra.kernel.AlgoTranslateVector -> geogebra.kernel.cx:
    geogebra.kernel.GeoPoint A -> a
    geogebra.kernel.GeoVector v -> a
    geogebra.kernel.GeoVector w -> b
    java.lang.String getClassName() -> getClassName
    void setInputOutput() -> setInputOutput
    geogebra.kernel.GeoVector getTranslatedVector() -> a
    void compute() -> compute
    java.lang.String toString() -> toString
geogebra.kernel.AlgoTurningPointPolynomial -> geogebra.kernel.au:
    java.lang.String getClassName() -> getClassName
    void compute() -> compute
    java.lang.String toString() -> toString
geogebra.kernel.AlgoTwoNumFunction -> geogebra.kernel.bf:
    geogebra.kernel.arithmetic.NumberValue a -> a
    geogebra.kernel.arithmetic.NumberValue b -> b
    geogebra.kernel.GeoNumeric num -> a
    java.lang.String getClassName() -> getClassName
    void setInputOutput() -> setInputOutput
    geogebra.kernel.GeoNumeric getResult() -> a
    void compute() -> compute
geogebra.kernel.AlgoUnitOrthoVectorLine -> geogebra.kernel.ae:
    geogebra.kernel.GeoLine g -> a
    geogebra.kernel.GeoVector n -> a
    double length -> a
    java.lang.String getClassName() -> getClassName
    void setInputOutput() -> setInputOutput
    geogebra.kernel.GeoVector getVector() -> a
    void compute() -> compute
    java.lang.String toString() -> toString
geogebra.kernel.AlgoUnitOrthoVectorVector -> geogebra.kernel.da:
    geogebra.kernel.GeoVector v -> a
    geogebra.kernel.GeoVector n -> b
    double length -> a
    java.lang.String getClassName() -> getClassName
    void setInputOutput() -> setInputOutput
    geogebra.kernel.GeoVector getVector() -> a
    void compute() -> compute
    java.lang.String toString() -> toString
geogebra.kernel.AlgoUnitVectorLine -> geogebra.kernel.ad:
    geogebra.kernel.GeoLine g -> a
    geogebra.kernel.GeoVector u -> a
    double length -> a
    java.lang.String getClassName() -> getClassName
    void setInputOutput() -> setInputOutput
    geogebra.kernel.GeoVector getVector() -> a
    void compute() -> compute
    java.lang.String toString() -> toString
geogebra.kernel.AlgoUnitVectorVector -> geogebra.kernel.ai:
    geogebra.kernel.GeoVector v -> a
    geogebra.kernel.GeoVector u -> b
    double length -> a
    void setInputOutput() -> setInputOutput
    java.lang.String getClassName() -> getClassName
    geogebra.kernel.GeoVector getVector() -> a
    void compute() -> compute
    java.lang.String toString() -> toString
geogebra.kernel.AlgoVector -> geogebra.kernel.aP:
    geogebra.kernel.GeoPoint P -> a
    geogebra.kernel.GeoPoint Q -> b
    geogebra.kernel.GeoVector v -> a
    geogebra.kernel.GeoPoint startPoint -> c
    java.lang.String getClassName() -> getClassName
    void setInputOutput() -> setInputOutput
    geogebra.kernel.GeoVector getVector() -> a
    void compute() -> compute
geogebra.kernel.AlgoVectorPoint -> geogebra.kernel.cb:
    geogebra.kernel.GeoPoint P -> a
    geogebra.kernel.GeoVector v -> a
    java.lang.String getClassName() -> getClassName
    void setInputOutput() -> setInputOutput
    geogebra.kernel.GeoVector getVector() -> a
    void compute() -> compute
geogebra.kernel.AlgoVertex -> geogebra.kernel.aU:
    geogebra.kernel.GeoConic c -> a
    geogebra.kernel.GeoPoint[] vertex -> a
    double temp1 -> a
    double temp2 -> b
    geogebra.kernel.GeoVec2D b -> a
    geogebra.kernel.GeoVec2D[] eigenvec -> a
    java.lang.String getClassName() -> getClassName
    void setInputOutput() -> setInputOutput
    geogebra.kernel.GeoPoint[] getVertex() -> a
    void compute() -> compute
    java.lang.String toString() -> toString
geogebra.kernel.AlgorithmSet -> geogebra.kernel.ak:
    geogebra.util.FastHashMapKeyless hashMap -> a
    geogebra.kernel.AlgorithmSet$Link head -> a
    geogebra.kernel.AlgorithmSet$Link tail -> b
    int size -> a
    int getSize() -> a
    boolean add(geogebra.kernel.AlgoElement) -> a
    boolean contains(geogebra.kernel.AlgoElement) -> b
    boolean remove(geogebra.kernel.AlgoElement) -> c
    void updateAll() -> a
    void updateAllUntil(geogebra.kernel.AlgoElement) -> a
    java.lang.String toString() -> toString
geogebra.kernel.AlgorithmSet$Link -> geogebra.kernel.c:
    geogebra.kernel.AlgoElement algo -> a
    geogebra.kernel.AlgorithmSet$Link next -> a
    geogebra.kernel.AlgorithmSet this$0 -> a
geogebra.kernel.CircularDefinitionException -> geogebra.kernel.as:
geogebra.kernel.Construction -> geogebra.kernel.Construction:
    java.lang.String title -> a
    java.lang.String author -> b
    java.lang.String date -> c
    java.lang.String[] worksheetText -> a
    java.util.ArrayList ceList -> a
    java.util.ArrayList algoList -> b
    java.util.HashMap geoTable -> a
    java.util.HashMap localVariableTable -> b
    java.util.TreeSet geoSet -> a
    java.util.TreeSet geoSetLabelOrder -> b
    geogebra.util.FastHashMapKeyless geoSetsTypeMap -> a
    java.util.ArrayList usedMacros -> c
    geogebra.kernel.UndoManager undoManager -> a
    int step -> b
    boolean macroMode -> a
    boolean showOnlyBreakpoints -> b
    int angleUnit -> a
    geogebra.kernel.Kernel kernel -> a
    geogebra.kernel.GeoAxis xAxis -> a
    geogebra.kernel.GeoAxis yAxis -> b
    java.lang.String xAxisLocalName -> d
    java.lang.String yAxisLocalName -> e
    geogebra.kernel.ConstructionDefaults consDefaults -> a
    geogebra.kernel.GeoElement getLastGeoElement() -> getLastGeoElement
    geogebra.kernel.ConstructionDefaults getConstructionDefaults() -> getConstructionDefaults
    void initGeoTable() -> initGeoTable
    void updateLocalAxesNames() -> updateLocalAxesNames
    geogebra.kernel.Kernel getKernel() -> getKernel
    geogebra.Application getApplication() -> getApplication
    geogebra.kernel.EquationSolver getEquationSolver() -> getEquationSolver
    geogebra.kernel.optimization.ExtremumFinder getExtremumFinder() -> getExtremumFinder
    geogebra.kernel.GeoAxis getXAxis() -> getXAxis
    geogebra.kernel.GeoAxis getYAxis() -> getYAxis
    void setSuppressLabelCreation(boolean) -> setSuppressLabelCreation
    boolean isSuppressLabelsActive() -> isSuppressLabelsActive
    void setShowOnlyBreakpoints(boolean) -> setShowOnlyBreakpoints
    boolean showOnlyBreakpoints() -> showOnlyBreakpoints
    geogebra.kernel.ConstructionElement getConstructionElement(int) -> getConstructionElement
    java.util.TreeSet getGeoSetConstructionOrder() -> getGeoSetConstructionOrder
    java.util.TreeSet getGeoSetLabelOrder() -> getGeoSetLabelOrder
    java.util.TreeSet getGeoSetLabelOrder(int) -> getGeoSetLabelOrder
    java.util.TreeSet getGeoSetNameDescriptionOrder() -> getGeoSetNameDescriptionOrder
    void addToConstructionList(geogebra.kernel.ConstructionElement,boolean) -> addToConstructionList
    void removeFromConstructionList(geogebra.kernel.ConstructionElement) -> removeFromConstructionList
    void addToAlgorithmList(geogebra.kernel.AlgoElement) -> addToAlgorithmList
    boolean moveInConstructionList(geogebra.kernel.GeoElement,int) -> moveInConstructionList
    boolean moveInConstructionList(int,int) -> moveInConstructionList
    void updateConstructionIndex(int) -> updateConstructionIndex
    boolean isInConstructionList(geogebra.kernel.GeoElement) -> isInConstructionList
    void clearConstruction() -> clearConstruction
    void updateConstruction() -> updateConstruction
    void updateAllAlgorithms() -> updateAllAlgorithms
    boolean updateAllEuclidianViewAlgorithms() -> updateAllEuclidianViewAlgorithms
    boolean updateAllConstructionProtocolAlgorithms() -> updateAllConstructionProtocolAlgorithms
    boolean wantsEuclidianViewUpdate() -> wantsEuclidianViewUpdate
    boolean isEmpty() -> isEmpty
    int steps() -> steps
    void setStep(int) -> setStep
    int getStep() -> getStep
    void putLabel(geogebra.kernel.GeoElement) -> putLabel
    void removeLabel(geogebra.kernel.GeoElement) -> removeLabel
    void addToGeoSets(geogebra.kernel.GeoElement) -> addToGeoSets
    java.util.TreeSet createTypeSet(int) -> createTypeSet
    void removeFromGeoSets(geogebra.kernel.GeoElement) -> removeFromGeoSets
    void addLocalVariable(java.lang.String,geogebra.kernel.GeoElement) -> addLocalVariable
    void removeLocalVariable(java.lang.String) -> removeLocalVariable
    geogebra.kernel.GeoElement lookupLabel(java.lang.String) -> lookupLabel
    geogebra.kernel.GeoElement geoTabelVarLookup(java.lang.String) -> geoTabelVarLookup
    boolean isFreeLabel(java.lang.String) -> isFreeLabel
    void initUndoInfo() -> initUndoInfo
    void storeUndoInfo() -> storeUndoInfo
    void restoreCurrentUndoInfo() -> restoreCurrentUndoInfo
    void redo() -> redo
    void undo() -> undo
    boolean undoPossible() -> undoPossible
    boolean redoPossible() -> redoPossible
    void replace(geogebra.kernel.GeoElement,geogebra.kernel.GeoElement) -> replace
    void updateConstructionOrder(geogebra.kernel.GeoElement,geogebra.kernel.GeoElement) -> updateConstructionOrder
    void doReplace(java.lang.String,java.lang.String,java.lang.String) -> doReplace
    java.lang.String getXML() -> getXML
    java.lang.String getConstructionXML() -> getConstructionXML
    java.lang.String getCurrentUndoXML() -> getCurrentUndoXML
    java.lang.String getAuthor() -> getAuthor
    java.lang.String getDate() -> getDate
    java.lang.String getTitle() -> getTitle
    void setAuthor(java.lang.String) -> setAuthor
    void setDate(java.lang.String) -> setDate
    void setTitle(java.lang.String) -> setTitle
    java.lang.String getWorksheetText(int) -> getWorksheetText
    void setWorksheetText(java.lang.String,int) -> setWorksheetText
    boolean worksheetTextDefined() -> worksheetTextDefined
    void addUsedMacro(geogebra.kernel.Macro) -> addUsedMacro
    java.util.ArrayList getUsedMacros() -> getUsedMacros
geogebra.kernel.Construction$LabelComparator -> geogebra.kernel.aa:
    geogebra.kernel.Construction this$0 -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
geogebra.kernel.ConstructionDefaults -> geogebra.kernel.h:
    java.awt.Color colPoint -> c
    java.awt.Color colDepPoint -> d
    java.awt.Color colPathPoint -> e
    java.awt.Color colLine -> f
    java.awt.Color colConic -> g
    java.awt.Color colPolygon -> h
    java.awt.Color colAngle -> i
    java.awt.Color colLocus -> j
    java.awt.Color colFunction -> k
    java.awt.Color colList -> l
    java.awt.Color colNumber -> m
    java.awt.Color colPreview -> a
    java.awt.Color colPreviewFill -> b
    geogebra.kernel.Construction cons -> a
    geogebra.util.FastHashMapKeyless defaultGeoElements -> a
    void createDefaultGeoElements() -> a
    geogebra.kernel.GeoElement getDefaultGeo(int) -> a
    void setDefaultVisualStyles(geogebra.kernel.GeoElement) -> a
geogebra.kernel.ConstructionElement -> geogebra.kernel.ConstructionElement:
    geogebra.kernel.Construction cons -> a
    geogebra.kernel.Kernel kernel -> a
    geogebra.Application app -> a
    int constIndex -> a
    long ceIDcounter -> a
    long ceID -> b
    void setConstruction(geogebra.kernel.Construction) -> setConstruction
    geogebra.kernel.Construction getConstruction() -> getConstruction
    geogebra.kernel.Kernel getKernel() -> getKernel
    int getMinConstructionIndex() -> getMinConstructionIndex
    int getMaxConstructionIndex() -> getMaxConstructionIndex
    int getConstructionIndex() -> getConstructionIndex
    void setConstructionIndex(int) -> setConstructionIndex
    boolean isInConstructionList() -> isInConstructionList
    boolean isConsProtocolBreakpoint() -> isConsProtocolBreakpoint
    boolean isAvailableAtConstructionStep(int) -> isAvailableAtConstructionStep
    boolean isIndependent() -> isIndependent
    java.util.TreeSet getAllIndependentPredecessors() -> getAllIndependentPredecessors
    java.lang.String getXML() -> getXML
    void remove() -> remove
    void update() -> update
    void notifyRemove() -> notifyRemove
    void notifyAdd() -> notifyAdd
    geogebra.kernel.GeoElement[] getGeoElements() -> getGeoElements
    boolean isGeoElement() -> isGeoElement
    boolean isAlgoElement() -> isAlgoElement
    java.lang.String getNameDescription() -> getNameDescription
    java.lang.String getAlgebraDescription() -> getAlgebraDescription
    java.lang.String getDefinitionDescription() -> getDefinitionDescription
    java.lang.String getCommandDescription() -> getCommandDescription
    java.lang.String getClassName() -> getClassName
    int compareTo(java.lang.Object) -> compareTo
    boolean equals(java.lang.Object) -> equals
geogebra.kernel.Dilateable -> geogebra.kernel.Dilateable:
    void dilate(geogebra.kernel.arithmetic.NumberValue,geogebra.kernel.GeoPoint) -> dilate
    geogebra.kernel.GeoElement toGeoElement() -> toGeoElement
geogebra.kernel.EquationSolver -> geogebra.kernel.bH:
    double epsilon -> a
    geogebra.kernel.roots.RealRoot rootPolisher -> a
    void setEpsilon(double) -> a
    int polynomialRoots(double[]) -> a
    int solveQuadratic(double[],double[]) -> a
    int solveCubic(double[],double[]) -> b
    void fixRoots(double[],double[]) -> a
    double solveEqn(double[],int,double) -> a
    double findZero(double,double,double[]) -> a
    int getTag(double,double,double) -> a
    int laguerreAll(double[]) -> b
geogebra.kernel.EuclidianViewAlgo -> geogebra.kernel.aj:
    void euclidianViewUpdate() -> euclidianViewUpdate
geogebra.kernel.GeoAngle -> geogebra.kernel.f:
    int arcSize -> a
    boolean emphasizeRightAngle -> e
    double raw_value -> d
    int angleStyle -> i
    java.lang.Integer[] getDecoTypes() -> a
    java.lang.String getClassName() -> getClassName
    java.lang.String getTypeString() -> getTypeString
    int getGeoClassType() -> getGeoClassType
    boolean isGeoAngle() -> isGeoAngle
    void set(geogebra.kernel.GeoElement) -> set
    void setVisualStyle(geogebra.kernel.GeoElement) -> setVisualStyle
    void setValue(double) -> setValue
    void setIntervalMax(double) -> setIntervalMax
    void setIntervalMin(double) -> setIntervalMin
    void setEuclidianVisible(boolean) -> setEuclidianVisible
    geogebra.kernel.GeoElement copy() -> copy
    void setAllowReflexAngle(boolean) -> a
    void setForceReflexAngle(boolean) -> b
    void setAngleStyle(int) -> a
    int getAngleStyle() -> a
    double getRawAngle() -> a
    int angleStyle() -> b
    java.lang.String toValueString() -> toValueString
    geogebra.kernel.arithmetic.MyDouble getNumber() -> getNumber
    int getArcSize() -> c
    void setArcSize(int) -> b
    java.lang.String getXMLtags() -> getXMLtags
    java.lang.String getXMLAllowReflexAngleTag() -> a
    void setDecorationType(int) -> setDecorationType
    boolean isEmphasizeRightAngle() -> a
    void setEmphasizeRightAngle(boolean) -> c
geogebra.kernel.GeoAxis -> geogebra.kernel.df:
    geogebra.kernel.GeoPoint origin -> c
    int type -> a
    int getType() -> a
    boolean isAvailableAtConstructionStep(int) -> isAvailableAtConstructionStep
    java.lang.String getLabel() -> getLabel
    int getGeoClassType() -> getGeoClassType
geogebra.kernel.GeoBoolean -> geogebra.kernel.GeoBoolean:
    boolean value -> a
    boolean isDefined -> e
    boolean checkboxFixed -> f
    java.util.ArrayList condListenersShowObject -> a
    java.lang.StringBuffer sbToString -> a
    java.lang.String getClassName() -> getClassName
    java.lang.String getTypeString() -> getTypeString
    int getGeoClassType() -> getGeoClassType
    void setValue(boolean) -> setValue
    boolean getBoolean() -> getBoolean
    geogebra.kernel.arithmetic.MyBoolean getMyBoolean() -> getMyBoolean
    geogebra.kernel.GeoElement copy() -> copy
    void registerConditionListener(geogebra.kernel.GeoElement) -> registerConditionListener
    void unregisterConditionListener(geogebra.kernel.GeoElement) -> unregisterConditionListener
    void update() -> update
    void doRemove() -> doRemove
    void resolveVariables() -> resolveVariables
    boolean showInEuclidianView() -> showInEuclidianView
    boolean showInAlgebraView() -> showInAlgebraView
    boolean isFixable() -> isFixable
    void set(geogebra.kernel.GeoElement) -> set
    void setUndefined() -> setUndefined
    void setDefined() -> setDefined
    boolean isDefined() -> isDefined
    void setMode(int) -> setMode
    int getMode() -> getMode
    java.lang.String toValueString() -> toValueString
    java.lang.String toString() -> toString
    boolean isConstant() -> isConstant
    boolean isLeaf() -> isLeaf
    java.util.HashSet getVariables() -> getVariables
    geogebra.kernel.arithmetic.ExpressionValue evaluate() -> evaluate
    java.lang.String getXMLtags() -> getXMLtags
    boolean isBooleanValue() -> isBooleanValue
    boolean isGeoBoolean() -> isGeoBoolean
    boolean isVectorValue() -> isVectorValue
    boolean isPolynomialInstance() -> isPolynomialInstance
    boolean isTextValue() -> isTextValue
    double getRealWorldLocX() -> getRealWorldLocX
    double getRealWorldLocY() -> getRealWorldLocY
    boolean isAbsoluteScreenLocActive() -> isAbsoluteScreenLocActive
    boolean isAbsoluteScreenLocateable() -> isAbsoluteScreenLocateable
    void setAbsoluteScreenLoc(int,int) -> setAbsoluteScreenLoc
    int getAbsoluteScreenLocX() -> getAbsoluteScreenLocX
    int getAbsoluteScreenLocY() -> getAbsoluteScreenLocY
    void setAbsoluteScreenLocActive(boolean) -> setAbsoluteScreenLocActive
    void setRealWorldLoc(double,double) -> setRealWorldLoc
    boolean isCheckboxFixed() -> isCheckboxFixed
    void setCheckboxFixed(boolean) -> setCheckboxFixed
    boolean isEqual(geogebra.kernel.GeoElement) -> isEqual
geogebra.kernel.GeoConic -> geogebra.kernel.GeoConic:
    java.lang.String[] vars -> a
    boolean KEEP_LEADING_SIGN -> e
    int type -> a
    double[] matrix -> a
    double maxCoeffAbs -> e
    java.awt.geom.AffineTransform transform -> a
    boolean trace -> a
    double eigenvecX -> a
    double eigenvecY -> b
    geogebra.kernel.GeoVec2D[] eigenvec -> a
    geogebra.kernel.GeoVec2D b -> a
    double[] halfAxes -> b
    double excent -> c
    double p -> d
    geogebra.kernel.GeoLine[] lines -> a
    geogebra.kernel.GeoPoint singlePoint -> a
    boolean defined -> f
    java.util.ArrayList pointsOnConic -> a
    geogebra.kernel.EquationSolver eqnSolver -> a
    double detS -> g
    double length -> h
    double temp -> i
    double temp1 -> j
    double temp2 -> k
    double nx -> l
    double ny -> m
    double lambda -> n
    int index -> i
    double[] eigenval -> c
    double[] mu -> d
    geogebra.kernel.GeoVec2D c -> b
    double[] coeffs -> e
    java.lang.StringBuffer sbToString -> a
    java.lang.StringBuffer sbToValueString -> b
    java.lang.String getClassName() -> getClassName
    int getGeoClassType() -> getGeoClassType
    java.lang.String getTypeString() -> getTypeString
    geogebra.kernel.GeoElement copy() -> copy
    boolean isFillable() -> isFillable
    boolean isTraceable() -> isTraceable
    void setTrace(boolean) -> setTrace
    boolean getTrace() -> getTrace
    boolean isPath() -> isPath
    java.util.ArrayList getPointsOnConic() -> getPointsOnConic
    void setPointsOnConic(java.util.ArrayList) -> setPointsOnConic
    void addPointOnConic(geogebra.kernel.GeoPoint) -> addPointOnConic
    void set(geogebra.kernel.GeoElement) -> set
    void setToStringMode(int) -> setToStringMode
    int getToStringMode() -> getToStringMode
    int getType() -> getType
    boolean isCircle() -> isCircle
    void setToSpecific() -> setToSpecific
    void setToImplicit() -> setToImplicit
    void setToExplicit() -> setToExplicit
    boolean isSpecificPossible() -> isSpecificPossible
    boolean isExplicitPossible() -> isExplicitPossible
    boolean isDefined() -> isDefined
    void setUndefined() -> setUndefined
    void setDefined() -> setDefined
    boolean checkDefined() -> checkDefined
    boolean showInEuclidianView() -> showInEuclidianView
    boolean showInAlgebraView() -> showInAlgebraView
    boolean isLineConic() -> isLineConic
    boolean isDegenerate() -> isDegenerate
    void setCoeffs(double[]) -> setCoeffs
    void setCoeffs(double,double,double,double,double,double) -> setCoeffs
    java.lang.String toString() -> toString
    java.lang.String toValueString() -> toValueString
    java.lang.StringBuffer buildValueString() -> buildValueString
    double[] getHalfAxes() -> getHalfAxes
    geogebra.kernel.GeoLine[] getLines() -> getLines
    geogebra.kernel.GeoPoint getSinglePoint() -> getSinglePoint
    java.awt.geom.AffineTransform getAffineTransform() -> getAffineTransform
    void setAffineTransform() -> setAffineTransform
    geogebra.kernel.GeoVec2D getTranslationVector() -> getTranslationVector
    void coordsEVtoRW(geogebra.kernel.GeoPoint) -> coordsEVtoRW
    void coordsRWtoEV(geogebra.kernel.GeoPoint) -> coordsRWtoEV
    double[] getMatrix() -> getMatrix
    void getMatrix(double[]) -> getMatrix
    void setMatrix(double[]) -> setMatrix
    void setEigenvectors(double,double,double,double,double,double) -> setEigenvectors
    void setDegenerateMatrixFromArray(double[]) -> setDegenerateMatrixFromArray
    void setMatrix(double[][]) -> setMatrix
    void setCircle(geogebra.kernel.GeoPoint,double) -> setCircle
    void setCircle(geogebra.kernel.GeoPoint,geogebra.kernel.GeoPoint,geogebra.kernel.GeoPoint) -> setCircle
    void setCircle(geogebra.kernel.GeoPoint,geogebra.kernel.GeoSegment) -> setCircle
    void setCircle(geogebra.kernel.GeoPoint,geogebra.kernel.GeoPoint) -> setCircle
    void setCircleMatrix(geogebra.kernel.GeoPoint,double) -> setCircleMatrix
    void setParabola(geogebra.kernel.GeoPoint,geogebra.kernel.GeoLine) -> setParabola
    void setEllipseHyperbola(geogebra.kernel.GeoPoint,geogebra.kernel.GeoPoint,double) -> setEllipseHyperbola
    void translate(geogebra.kernel.GeoVector) -> translate
    boolean isTranslateable() -> isTranslateable
    void translate(double,double) -> translate
    void doTranslate(double,double) -> doTranslate
    void rotate(geogebra.kernel.arithmetic.NumberValue) -> rotate
    void rotate(geogebra.kernel.arithmetic.NumberValue,geogebra.kernel.GeoPoint) -> rotate
    void rotate(double) -> rotate
    void dilate(geogebra.kernel.arithmetic.NumberValue,geogebra.kernel.GeoPoint) -> dilate
    void doDilate(double) -> doDilate
    void mirror(geogebra.kernel.GeoPoint) -> mirror
    void mirror(geogebra.kernel.GeoLine) -> mirror
    void mirror(double) -> mirror
    void updateDegenerates() -> updateDegenerates
    void setEigenvectors() -> setEigenvectors
    void setParabolicEigenvectors() -> setParabolicEigenvectors
    void classifyConic() -> classifyConic
    void classifyConic(boolean) -> classifyConic
    void classifyMidpointConic(boolean) -> classifyMidpointConic
    void singlePoint() -> singlePoint
    void intersectingLines(double[]) -> intersectingLines
    void ellipse(double[]) -> ellipse
    void hyperbola(double[]) -> hyperbola
    void empty() -> empty
    void classifyParabolicConic(boolean) -> classifyParabolicConic
    void doubleLine() -> doubleLine
    void enforceDoubleLine() -> enforceDoubleLine
    void handleSzero() -> handleSzero
    void parallelLines(double[]) -> parallelLines
    void parabola() -> parabola
    double det(double[]) -> det
    boolean hasPositiveEigenvectorOrientation() -> hasPositiveEigenvectorOrientation
    void setPositiveEigenvectorOrientation(boolean) -> setPositiveEigenvectorOrientation
    boolean isIntersectionPointIncident(geogebra.kernel.GeoPoint,double) -> isIntersectionPointIncident
    boolean isOnFullConic(geogebra.kernel.GeoPoint,double) -> isOnFullConic
    boolean isEqual(geogebra.kernel.GeoElement) -> isEqual
    double evaluate(geogebra.kernel.GeoPoint) -> evaluate
    double evaluate(geogebra.kernel.GeoVec2D) -> evaluate
    double evaluate(double,double) -> evaluate
    void polarLine(geogebra.kernel.GeoPoint,geogebra.kernel.GeoLine) -> polarLine
    void diameterLine(geogebra.kernel.GeoVector,geogebra.kernel.GeoLine) -> diameterLine
    java.lang.String getXMLtags() -> getXMLtags
    java.lang.String getSpecificEquation() -> getSpecificEquation
    void pointChanged(geogebra.kernel.GeoPoint) -> pointChanged
    void pathChanged(geogebra.kernel.GeoPoint) -> pathChanged
    boolean isOnPath(geogebra.kernel.GeoPoint,double) -> isOnPath
    double getMinParameter() -> getMinParameter
    double getMaxParameter() -> getMaxParameter
    geogebra.kernel.PathMover createPathMover() -> createPathMover
    boolean isClosedPath() -> isClosedPath
    boolean isNumberValue() -> isNumberValue
    boolean isVectorValue() -> isVectorValue
    boolean isPolynomialInstance() -> isPolynomialInstance
    boolean isTextValue() -> isTextValue
    boolean isGeoConic() -> isGeoConic
geogebra.kernel.GeoConicPart -> geogebra.kernel.bM:
    double paramStart -> e
    double paramEnd -> g
    double paramExtent -> h
    boolean posOrientation -> e
    int conic_part_type -> i
    double value -> i
    boolean value_defined -> f
    geogebra.kernel.integration.EllipticArcLength ellipticArcLength -> a
    boolean allowOutlyingIntersections -> g
    boolean keepTypeOnGeometricTransform -> h
    java.lang.StringBuffer sbToString -> a
    geogebra.kernel.PathParameter tempPP -> a
    java.lang.String getClassName() -> getClassName
    int getGeoClassType() -> getGeoClassType
    java.lang.String getTypeString() -> getTypeString
    geogebra.kernel.GeoElement copyInternal(geogebra.kernel.Construction) -> copyInternal
    void set(geogebra.kernel.GeoElement) -> set
    void setVisualStyle(geogebra.kernel.GeoElement) -> setVisualStyle
    int getConicPartType() -> a
    double getParameterStart() -> a
    double getParameterEnd() -> b
    double getParameterExtent() -> c
    boolean positiveOrientation() -> a
    boolean isEqual(geogebra.kernel.GeoElement) -> isEqual
    void setParameters(double,double,boolean) -> a
    boolean isDefined() -> isDefined
    void setUndefined() -> setUndefined
    double getValue() -> d
    java.lang.String toString() -> toString
    java.lang.String toValueString() -> toValueString
    boolean allowOutlyingIntersections() -> allowOutlyingIntersections
    void setAllowOutlyingIntersections(boolean) -> setAllowOutlyingIntersections
    void setKeepTypeOnGeometricTransform(boolean) -> setKeepTypeOnGeometricTransform
    boolean isLimitedPath() -> isLimitedPath
    boolean isIntersectionPointIncident(geogebra.kernel.GeoPoint,double) -> isIntersectionPointIncident
    boolean isOnPath(geogebra.kernel.GeoPoint,double) -> isOnPath
    boolean isClosedPath() -> isClosedPath
    void pointChanged(geogebra.kernel.GeoPoint) -> pointChanged
    void setEllipseParameter(geogebra.kernel.GeoPoint) -> a
    void clipEllipseParameter(geogebra.kernel.GeoPoint) -> b
    void pathChanged(geogebra.kernel.GeoPoint) -> pathChanged
    double getMinParameter() -> getMinParameter
    double getMaxParameter() -> getMaxParameter
    geogebra.kernel.PathMover createPathMover() -> createPathMover
    java.lang.String getXMLtags() -> getXMLtags
    geogebra.kernel.arithmetic.MyDouble getNumber() -> getNumber
    double getDouble() -> getDouble
    boolean isNumberValue() -> isNumberValue
    boolean isGeoConicPart() -> isGeoConicPart
    geogebra.kernel.GeoElement[] createTransformedObject(int,java.lang.String,geogebra.kernel.GeoPoint,geogebra.kernel.GeoLine,geogebra.kernel.GeoVector,geogebra.kernel.arithmetic.NumberValue) -> createTransformedObject
geogebra.kernel.GeoCurveCartesian -> geogebra.kernel.GeoCurveCartesian:
    geogebra.kernel.arithmetic.Function funX -> a
    geogebra.kernel.arithmetic.Function funY -> b
    double startParam -> b
    double endParam -> c
    boolean isDefined -> a
    boolean isClosedPath -> e
    boolean trace -> f
    double CURVATURE_COLOR -> a
    geogebra.kernel.ParametricCurveDistanceFunction distFun -> a
    java.lang.StringBuffer sbToString -> a
    java.lang.StringBuffer sbTemp -> b
    java.lang.String getClassName() -> getClassName
    java.lang.String getTypeString() -> getTypeString
    java.lang.String translatedTypeString() -> translatedTypeString
    int getGeoClassType() -> getGeoClassType
    geogebra.kernel.GeoElement copy() -> copy
    void setFunctionX(geogebra.kernel.arithmetic.Function) -> setFunctionX
    void setFunctionY(geogebra.kernel.arithmetic.Function) -> setFunctionY
    void replaceChildrenByValues(geogebra.kernel.GeoElement) -> replaceChildrenByValues
    void setInterval(double,double) -> setInterval
    void set(geogebra.kernel.GeoElement) -> set
    void setDerivative(geogebra.kernel.GeoDeriveable,int) -> setDerivative
    geogebra.kernel.roots.RealRootFunction getRealRootFunctionX() -> getRealRootFunctionX
    geogebra.kernel.roots.RealRootFunction getRealRootFunctionY() -> getRealRootFunctionY
    geogebra.kernel.arithmetic.ExpressionValue evaluate() -> evaluate
    void translate(geogebra.kernel.GeoVector) -> translate
    boolean isTranslateable() -> isTranslateable
    void translate(double,double) -> translate
    boolean isDefined() -> isDefined
    void setDefined(boolean) -> setDefined
    void setUndefined() -> setUndefined
    boolean showInAlgebraView() -> showInAlgebraView
    boolean showInEuclidianView() -> showInEuclidianView
    java.lang.String toString() -> toString
    java.lang.String toValueString() -> toValueString
    java.lang.String toSymbolicString() -> toSymbolicString
    java.lang.String toLaTeXString(boolean) -> toLaTeXString
    java.lang.String getXMLtags() -> getXMLtags
    void pointChanged(geogebra.kernel.GeoPoint) -> pointChanged
    boolean isOnPath(geogebra.kernel.GeoPoint,double) -> isOnPath
    void pathChanged(geogebra.kernel.GeoPoint) -> pathChanged
    boolean isPath() -> isPath
    double getClosestParameter(geogebra.kernel.GeoPoint,double) -> getClosestParameter
    double getMinParameter() -> getMinParameter
    double getMaxParameter() -> getMaxParameter
    geogebra.kernel.PathMover createPathMover() -> createPathMover
    boolean isClosedPath() -> isClosedPath
    boolean isNumberValue() -> isNumberValue
    boolean isVectorValue() -> isVectorValue
    boolean isPolynomialInstance() -> isPolynomialInstance
    boolean isTextValue() -> isTextValue
    boolean isGeoCurveCartesian() -> isGeoCurveCartesian
    boolean isTraceable() -> isTraceable
    boolean getTrace() -> getTrace
    void setTrace(boolean) -> setTrace
    void evaluateCurve(double,double[]) -> evaluateCurve
    geogebra.kernel.GeoVec2D evaluateCurve(double) -> evaluateCurve
    double evaluateCurvature(double) -> evaluateCurvature
    boolean isGeoCurveable() -> isGeoCurveable
    boolean isGeoDeriveable() -> isGeoDeriveable
    java.lang.String getVarString() -> getVarString
    boolean isFunctionInX() -> isFunctionInX
    boolean isEqual(geogebra.kernel.GeoElement) -> isEqual
geogebra.kernel.GeoDeriveable -> geogebra.kernel.GeoDeriveable:
    void setDerivative(geogebra.kernel.GeoDeriveable,int) -> setDerivative
    java.lang.String toSymbolicString() -> toSymbolicString
    java.lang.String getVarString() -> getVarString
    geogebra.kernel.GeoElement toGeoElement() -> toGeoElement
geogebra.kernel.GeoElement -> geogebra.kernel.GeoElement:
    char[] pointLabels -> a
    char[] functionLabels -> b
    char[] lineLabels -> c
    char[] vectorLabels -> d
    char[] conicLabels -> e
    char[] lowerCaseLabels -> f
    char[] greekLowerCase -> g
    java.lang.String label -> a
    java.lang.String oldLabel -> b
    java.lang.String caption -> c
    boolean labelWanted -> b
    boolean labelSet -> c
    boolean localVarLabelSet -> d
    boolean euclidianVisible -> a
    boolean algebraVisible -> e
    boolean labelVisible -> f
    boolean isConsProtBreakpoint -> g
    boolean isAlgoMacroOutput -> h
    boolean fixed -> i
    int labelMode -> a
    int toStringMode -> b
    java.awt.Color objColor -> a
    java.awt.Color selColor -> b
    java.awt.Color labelColor -> c
    java.awt.Color fillColor -> d
    int layer -> c
    double animationStep -> f
    float alphaValue -> a
    int labelOffsetX -> d
    int labelOffsetY -> e
    boolean auxiliaryObject -> j
    java.awt.Point spreadsheetCoords -> a
    java.awt.Point oldSpreadsheetCoords -> b
    geogebra.kernel.GeoBoolean condShowObject -> a
    geogebra.kernel.GeoList colFunction -> a
    boolean useVisualDefaults -> k
    boolean isColorSet -> l
    boolean highlighted -> m
    boolean selected -> n
    java.lang.String strAlgebraDescription -> d
    java.lang.String strAlgebraDescTextOrHTML -> e
    java.lang.String strAlgebraDescriptionHTML -> f
    java.lang.String strLabelTextOrHTML -> g
    java.lang.String strLaTeX -> h
    boolean strAlgebraDescriptionNeedsUpdate -> o
    boolean strAlgebraDescTextOrHTMLneedsUpdate -> p
    boolean strAlgebraDescriptionHTMLneedsUpdate -> q
    boolean strLabelTextOrHTMLUpdate -> r
    boolean strLaTeXneedsUpdate -> s
    boolean inTree -> t
    int lineThickness -> f
    int lineType -> g
    int decorationType -> h
    geogebra.kernel.AlgoElement algoParent -> a
    java.util.ArrayList algorithmList -> a
    geogebra.kernel.AlgorithmSet algoUpdateSet -> a
    java.util.regex.Pattern pattern -> a
    java.lang.StringBuffer sbDefaultLabel -> a
    java.lang.StringBuffer sbIndexLabel -> b
    geogebra.kernel.GeoElement[] myGeoElements -> a
    java.lang.StringBuffer sbLongDesc -> c
    java.lang.StringBuffer sbLongDescHTML -> d
    java.lang.StringBuffer sbToolTipDesc -> e
    java.lang.StringBuffer sbAlgebraDesc -> f
    java.lang.String subBegin -> i
    java.lang.String subEnd -> j
    java.lang.StringBuffer sbIndicesToHTML -> g
    java.lang.StringBuffer sbNameDescription -> h
    java.lang.String strHasIndexLabel -> k
    boolean hasIndexLabel -> u
    java.lang.StringBuffer sbNameDescriptionHTML -> i
    java.lang.String getLabel() -> getLabel
    void copyLabel(geogebra.kernel.GeoElement) -> copyLabel
    void setLabelMode(int) -> setLabelMode
    int getLabelMode() -> getLabelMode
    int getGeoClassType() -> getGeoClassType
    geogebra.kernel.GeoElement copy() -> copy
    geogebra.kernel.GeoElement copyInternal(geogebra.kernel.Construction) -> copyInternal
    geogebra.kernel.GeoPoint[] copyPoints(geogebra.kernel.Construction,geogebra.kernel.GeoPoint[]) -> copyPoints
    geogebra.kernel.arithmetic.ExpressionValue deepCopy(geogebra.kernel.Kernel) -> deepCopy
    void resolveVariables() -> resolveVariables
    void set(geogebra.kernel.GeoElement) -> set
    boolean isDefined() -> isDefined
    void setUndefined() -> setUndefined
    java.lang.String toValueString() -> toValueString
    java.lang.String toOutputValueString() -> toOutputValueString
    void setConstructionDefaults() -> setConstructionDefaults
    void setObjColor(java.awt.Color) -> setObjColor
    boolean isColorSet() -> isColorSet
    java.awt.Color getRGBFromList(float) -> getRGBFromList
    java.awt.Color getRGBFromList(int) -> getRGBFromList
    java.awt.Color getSelColor() -> getSelColor
    java.awt.Color getFillColor() -> getFillColor
    java.awt.Color getLabelColor() -> getLabelColor
    void setLabelColor(java.awt.Color) -> setLabelColor
    java.awt.Color getObjectColor() -> getObjectColor
    void setLayer(int) -> setLayer
    int getLayer() -> getLayer
    int getDrawingPriority() -> getDrawingPriority
    void setAlphaValue(float) -> setAlphaValue
    float getAlphaValue() -> getAlphaValue
    boolean isLimitedPath() -> isLimitedPath
    boolean isPath() -> isPath
    boolean isGeoList() -> isGeoList
    void setAllVisualProperties(geogebra.kernel.GeoElement) -> setAllVisualProperties
    void setNonVisualProperties(geogebra.kernel.GeoElement) -> setNonVisualProperties
    void setVisualStyle(geogebra.kernel.GeoElement) -> setVisualStyle
    void setLabelOffset(int,int) -> setLabelOffset
    boolean isVisible() -> isVisible
    boolean isEuclidianVisible() -> isEuclidianVisible
    void setEuclidianVisible(boolean) -> setEuclidianVisible
    boolean isSetEuclidianVisible() -> isSetEuclidianVisible
    boolean isConsProtocolBreakpoint() -> isConsProtocolBreakpoint
    void setConsProtocolBreakpoint(boolean) -> setConsProtocolBreakpoint
    geogebra.kernel.GeoElement[] getSiblings() -> getSiblings
    boolean isDrawable() -> isDrawable
    boolean isFillable() -> isFillable
    boolean isTraceable() -> isTraceable
    boolean isFixed() -> isFixed
    void setFixed(boolean) -> setFixed
    boolean isFixable() -> isFixable
    boolean isAuxiliaryObject() -> isAuxiliaryObject
    geogebra.kernel.GeoElement toGeoElement() -> toGeoElement
    void setAuxiliaryObject(boolean) -> setAuxiliaryObject
    void setLabelVisible(boolean) -> setLabelVisible
    boolean isLabelVisible() -> isLabelVisible
    boolean isLabelShowable() -> isLabelShowable
    boolean isLabelValueShowable() -> isLabelValueShowable
    boolean isAlgebraVisible() -> isAlgebraVisible
    boolean showToolTipText() -> showToolTipText
    void setAlgebraVisible(boolean) -> setAlgebraVisible
    boolean isSetAlgebraVisible() -> isSetAlgebraVisible
    boolean showInAlgebraView() -> showInAlgebraView
    boolean showInEuclidianView() -> showInEuclidianView
    boolean isEuclidianShowable() -> isEuclidianShowable
    boolean isAlgebraShowable() -> isAlgebraShowable
    void setParentAlgorithm(geogebra.kernel.AlgoElement) -> setParentAlgorithm
    geogebra.kernel.AlgoElement getParentAlgorithm() -> getParentAlgorithm
    java.util.ArrayList getAlogrithmList() -> getAlogrithmList
    boolean isIndependent() -> isIndependent
    boolean isChangeable() -> isChangeable
    boolean isPointOnPath() -> isPointOnPath
    boolean isRedefineable() -> isRedefineable
    boolean isMoveable() -> isMoveable
    boolean hasMoveableInputPoints() -> hasMoveableInputPoints
    java.util.ArrayList getFreeInputPoints() -> getFreeInputPoints
    boolean hasOnlyFreeInputPoints() -> hasOnlyFreeInputPoints
    boolean containsOnlyMoveableGeos(java.util.ArrayList) -> containsOnlyMoveableGeos
    boolean isTranslateable() -> isTranslateable
    boolean isRotateMoveable() -> isRotateMoveable
    boolean hasProperties() -> hasProperties
    void setAnimationStep(double) -> setAnimationStep
    double getAnimationStep() -> getAnimationStep
    java.lang.String toLaTeXString(boolean) -> toLaTeXString
    boolean rename(java.lang.String) -> rename
    boolean isLabelSet() -> isLabelSet
    void setLabel(java.lang.String) -> setLabel
    void setLoadedLabel(java.lang.String) -> setLoadedLabel
    boolean setCaption(java.lang.String) -> setCaption
    java.lang.String getCaption() -> getCaption
    void setLocalVariableLabel(java.lang.String) -> setLocalVariableLabel
    void doSetLabel(java.lang.String) -> doSetLabel
    void updateSpreadsheetCoordinates() -> updateSpreadsheetCoordinates
    java.lang.String getSpreadsheetCellName(int,int) -> getSpreadsheetCellName
    int getSpreadsheetColumn(java.lang.String) -> getSpreadsheetColumn
    int getSpreadsheetRow(java.lang.String) -> getSpreadsheetRow
    void doRenameLabel(java.lang.String) -> doRenameLabel
    java.lang.String getOldLabel() -> getOldLabel
    void setLabels(java.lang.String,geogebra.kernel.GeoElement[]) -> setLabels
    void setLabels(java.lang.String[],geogebra.kernel.GeoElement[]) -> setLabels
    void setLabels(java.lang.String[],geogebra.kernel.GeoElement[],boolean) -> setLabels
    java.lang.String getFreeLabel(java.lang.String) -> getFreeLabel
    java.lang.String getDefaultLabel() -> getDefaultLabel
    java.lang.String getIndexLabel(java.lang.String) -> getIndexLabel
    void remove() -> remove
    void doRemove() -> doRemove
    void notifyAdd() -> notifyAdd
    void notifyRemove() -> notifyRemove
    void notifyUpdate() -> notifyUpdate
    void notifyUpdateAuxiliaryObject() -> notifyUpdateAuxiliaryObject
    void addAlgorithm(geogebra.kernel.AlgoElement) -> addAlgorithm
    void addToAlgorithmListOnly(geogebra.kernel.AlgoElement) -> addToAlgorithmListOnly
    void addToUpdateSetOnly(geogebra.kernel.AlgoElement) -> addToUpdateSetOnly
    void removeAlgorithm(geogebra.kernel.AlgoElement) -> removeAlgorithm
    geogebra.kernel.AlgorithmSet getAlgoUpdateSet() -> getAlgoUpdateSet
    void addToUpdateSets(geogebra.kernel.AlgoElement) -> addToUpdateSets
    void removeFromUpdateSets(geogebra.kernel.AlgoElement) -> removeFromUpdateSets
    void update() -> update
    void algebraStringsNeedUpdate() -> algebraStringsNeedUpdate
    void updateCascade() -> updateCascade
    void updateRepaint() -> updateRepaint
    void updateCascadeParentAlgo() -> updateCascadeParentAlgo
    java.lang.String toString() -> toString
    boolean isConstant() -> isConstant
    boolean isLeaf() -> isLeaf
    geogebra.kernel.arithmetic.ExpressionValue evaluate() -> evaluate
    java.util.HashSet getVariables() -> getVariables
    java.util.TreeSet getAllPredecessors() -> getAllPredecessors
    java.util.TreeSet getAllIndependentPredecessors() -> getAllIndependentPredecessors
    void addPredecessorsToSet(java.util.TreeSet,boolean) -> addPredecessorsToSet
    boolean hasChildren() -> hasChildren
    boolean isChildOf(geogebra.kernel.GeoElement) -> isChildOf
    boolean isParentOf(geogebra.kernel.GeoElement) -> isParentOf
    geogebra.kernel.GeoElement[] getGeoElements() -> getGeoElements
    boolean isAlgoElement() -> isAlgoElement
    boolean isGeoElement() -> isGeoElement
    int getConstructionIndex() -> getConstructionIndex
    int getMinConstructionIndex() -> getMinConstructionIndex
    int getMaxConstructionIndex() -> getMaxConstructionIndex
    java.lang.String getLabelOrCommandDescription() -> getLabelOrCommandDescription
    java.lang.String getDefinitionDescription() -> getDefinitionDescription
    java.lang.String getDefinitionDescriptionHTML(boolean) -> getDefinitionDescriptionHTML
    java.lang.String getCommandDescription() -> getCommandDescription
    java.lang.String getCommandDescriptionHTML(boolean) -> getCommandDescriptionHTML
    java.lang.String getTypeString() -> getTypeString
    java.lang.String getObjectType() -> getObjectType
    java.lang.String translatedTypeString() -> translatedTypeString
    java.lang.String getLongDescription() -> getLongDescription
    java.lang.String getLongDescriptionHTML(boolean,boolean) -> getLongDescriptionHTML
    java.lang.String getToolTipDescriptionHTML(java.util.ArrayList,boolean,boolean) -> getToolTipDescriptionHTML
    java.lang.String getLabelDescription() -> getLabelDescription
    java.lang.String toDefinedValueString() -> toDefinedValueString
    java.lang.String getAlgebraDescriptionTextOrHTML() -> getAlgebraDescriptionTextOrHTML
    java.lang.String getAlgebraDescriptionHTML(boolean) -> getAlgebraDescriptionHTML
    java.lang.String getLabelTextOrHTML() -> getLabelTextOrHTML
    java.lang.String getAlgebraDescription() -> getAlgebraDescription
    java.lang.String getLaTeXdescription() -> getLaTeXdescription
    java.lang.String indicesToHTML(java.lang.String,boolean) -> indicesToHTML
    java.lang.String getNameDescription() -> getNameDescription
    java.lang.String getNameDescriptionTextOrHTML() -> getNameDescriptionTextOrHTML
    boolean hasIndexLabel() -> hasIndexLabel
    java.lang.String getNameDescriptionHTML(boolean,boolean) -> getNameDescriptionHTML
    java.lang.String getXMLtypeString() -> getXMLtypeString
    java.lang.String getXML() -> getXML
    java.lang.String getAuxiliaryXML() -> getAuxiliaryXML
    java.lang.String getXMLvisualTags() -> getXMLvisualTags
    java.lang.String getXMLvisualTags(boolean) -> getXMLvisualTags
    java.lang.String getXMLanimationTags() -> getXMLanimationTags
    java.lang.String getXMLfixedTag() -> getXMLfixedTag
    java.lang.String getXMLtags() -> getXMLtags
    java.lang.String getLineStyleXML() -> getLineStyleXML
    java.lang.String getBreakpointXML() -> getBreakpointXML
    java.lang.String getShowObjectConditionXML() -> getShowObjectConditionXML
    int getLineThickness() -> getLineThickness
    int getLineType() -> getLineType
    void setLineThickness(int) -> setLineThickness
    void setLineType(int) -> setLineType
    void setDecorationType(int) -> setDecorationType
    boolean isGeoElement3D() -> isGeoElement3D
    boolean isGeoAngle() -> isGeoAngle
    boolean isGeoBoolean() -> isGeoBoolean
    boolean isGeoConic() -> isGeoConic
    boolean isGeoConicPart() -> isGeoConicPart
    boolean isGeoFunction() -> isGeoFunction
    boolean isGeoFunctionConditional() -> isGeoFunctionConditional
    boolean isGeoFunctionable() -> isGeoFunctionable
    boolean isGeoImage() -> isGeoImage
    boolean isGeoLine() -> isGeoLine
    boolean isGeoLocus() -> isGeoLocus
    boolean isGeoNumeric() -> isGeoNumeric
    boolean isGeoPoint() -> isGeoPoint
    boolean isGeoPoint3D() -> isGeoPoint3D
    boolean isGeoPolygon() -> isGeoPolygon
    boolean isGeoRay() -> isGeoRay
    boolean isGeoSegment() -> isGeoSegment
    boolean isGeoText() -> isGeoText
    boolean isGeoVector() -> isGeoVector
    boolean isGeoCurveCartesian() -> isGeoCurveCartesian
    boolean isGeoCurveable() -> isGeoCurveable
    boolean isGeoDeriveable() -> isGeoDeriveable
    boolean isExpressionNode() -> isExpressionNode
    boolean isVariable() -> isVariable
    boolean contains(geogebra.kernel.arithmetic.ExpressionValue) -> contains
    void setSelected(boolean) -> setSelected
    void setHighlighted(boolean) -> setHighlighted
    boolean doHighlighting() -> doHighlighting
    boolean isNumberValue() -> isNumberValue
    boolean isVectorValue() -> isVectorValue
    boolean isBooleanValue() -> isBooleanValue
    boolean isPolynomialInstance() -> isPolynomialInstance
    boolean isTextValue() -> isTextValue
    boolean isListValue() -> isListValue
    boolean isUseVisualDefaults() -> isUseVisualDefaults
    void setUseVisualDefaults(boolean) -> setUseVisualDefaults
    boolean isAbsoluteScreenLocateable() -> isAbsoluteScreenLocateable
    geogebra.kernel.GeoBoolean getShowObjectCondition() -> getShowObjectCondition
    void setShowObjectCondition(geogebra.kernel.GeoBoolean) -> setShowObjectCondition
    void removeCondition(geogebra.kernel.GeoBoolean) -> removeCondition
    geogebra.kernel.GeoList getColorFunction() -> getColorFunction
    void setColorFunction(geogebra.kernel.GeoList) -> setColorFunction
    void removeColorFunction(geogebra.kernel.GeoList) -> removeColorFunction
    void moveObjects(java.util.ArrayList,geogebra.kernel.GeoVector) -> moveObjects
    boolean moveObject(geogebra.kernel.GeoVector) -> moveObject
    java.awt.Point getSpreadsheetCoords() -> getSpreadsheetCoords
    void setSpreadsheetCoords(java.awt.Point) -> setSpreadsheetCoords
    java.awt.Point getOldSpreadsheetCoords() -> getOldSpreadsheetCoords
    boolean isAlgoMacroOutput() -> isAlgoMacroOutput
    void setAlgoMacroOutput(boolean) -> setAlgoMacroOutput
    boolean isInTree() -> isInTree
    void setInTree(boolean) -> setInTree
    boolean isEqual(geogebra.kernel.GeoElement) -> isEqual
geogebra.kernel.GeoFunction -> geogebra.kernel.GeoFunction:
    geogebra.kernel.arithmetic.Function fun -> a
    boolean isDefined -> a
    boolean trace -> e
    java.lang.String varStr -> b
    boolean includesDivisionByVar -> f
    double CURVATURE_COLOR -> a
    geogebra.kernel.GeoFunction derivGeoFun -> a
    geogebra.kernel.arithmetic.Function includesDivisionByVarFun -> b
    java.lang.StringBuffer sbToString -> a
    java.lang.String getClassName() -> getClassName
    java.lang.String getTypeString() -> getTypeString
    int getGeoClassType() -> getGeoClassType
    geogebra.kernel.GeoElement copy() -> copy
    void set(geogebra.kernel.GeoElement) -> set
    void setFunction(geogebra.kernel.arithmetic.Function) -> setFunction
    geogebra.kernel.arithmetic.Function getFunction() -> getFunction
    boolean setInterval(double,double) -> setInterval
    geogebra.kernel.arithmetic.ExpressionNode getFunctionExpression() -> getFunctionExpression
    void replaceChildrenByValues(geogebra.kernel.GeoElement) -> replaceChildrenByValues
    geogebra.kernel.arithmetic.Function getFunction(double) -> getFunction
    void setDerivative(geogebra.kernel.GeoDeriveable,int) -> setDerivative
    void setIntegral(geogebra.kernel.GeoFunction) -> setIntegral
    double evaluate(double) -> evaluate
    boolean evaluateBoolean(double) -> evaluateBoolean
    geogebra.kernel.GeoFunction getGeoDerivative(int) -> getGeoDerivative
    geogebra.kernel.arithmetic.ExpressionValue evaluate() -> evaluate
    void translate(geogebra.kernel.GeoVector) -> translate
    boolean isTranslateable() -> isTranslateable
    void translate(double,double) -> translate
    void setMode(int) -> setMode
    int getMode() -> getMode
    boolean isPolynomialFunction(boolean,boolean) -> isPolynomialFunction
    boolean isPolynomialFunction(boolean) -> isPolynomialFunction
    boolean includesDivisionByVar() -> includesDivisionByVar
    boolean isDefined() -> isDefined
    void setDefined(boolean) -> setDefined
    void setUndefined() -> setUndefined
    boolean showInAlgebraView() -> showInAlgebraView
    boolean showInEuclidianView() -> showInEuclidianView
    java.lang.String toString() -> toString
    java.lang.String toValueString() -> toValueString
    java.lang.String toSymbolicString() -> toSymbolicString
    java.lang.String toLaTeXString(boolean) -> toLaTeXString
    java.lang.String getXML() -> getXML
    java.lang.String getXMLtags() -> getXMLtags
    void pointChanged(geogebra.kernel.GeoPoint) -> pointChanged
    boolean isOnPath(geogebra.kernel.GeoPoint,double) -> isOnPath
    void pathChanged(geogebra.kernel.GeoPoint) -> pathChanged
    boolean isPath() -> isPath
    double getMinParameter() -> getMinParameter
    double getMaxParameter() -> getMaxParameter
    geogebra.kernel.PathMover createPathMover() -> createPathMover
    boolean isClosedPath() -> isClosedPath
    boolean isNumberValue() -> isNumberValue
    boolean isVectorValue() -> isVectorValue
    boolean isPolynomialInstance() -> isPolynomialInstance
    boolean isTextValue() -> isTextValue
    boolean isTraceable() -> isTraceable
    boolean getTrace() -> getTrace
    void setTrace(boolean) -> setTrace
    geogebra.kernel.GeoFunction getGeoFunction() -> getGeoFunction
    boolean isGeoFunction() -> isGeoFunction
    boolean isGeoFunctionable() -> isGeoFunctionable
    boolean isBooleanFunction() -> isBooleanFunction
    void evaluateCurve(double,double[]) -> evaluateCurve
    double evaluateCurvature(double) -> evaluateCurvature
    geogebra.kernel.roots.RealRootFunction getRealRootFunctionX() -> getRealRootFunctionX
    geogebra.kernel.roots.RealRootFunction getRealRootFunctionY() -> getRealRootFunctionY
    geogebra.kernel.GeoVec2D evaluateCurve(double) -> evaluateCurve
    boolean isGeoDeriveable() -> isGeoDeriveable
    java.lang.String getVarString() -> getVarString
    boolean isFunctionInX() -> isFunctionInX
    boolean isEqual(geogebra.kernel.GeoElement) -> isEqual
geogebra.kernel.GeoFunction$1 -> geogebra.kernel.be:
    geogebra.kernel.GeoFunction this$0 -> a
    double evaluate(double) -> evaluate
geogebra.kernel.GeoFunction$2 -> geogebra.kernel.bd:
    geogebra.kernel.GeoFunction this$0 -> a
    double evaluate(double) -> evaluate
geogebra.kernel.GeoFunctionConditional -> geogebra.kernel.k:
    boolean isDefined -> f
    geogebra.kernel.GeoFunction condFun -> a
    geogebra.kernel.GeoFunction ifFun -> b
    geogebra.kernel.GeoFunction elseFun -> c
    geogebra.kernel.GeoFunctionConditional derivGeoFun -> a
    java.lang.StringBuffer sbToString -> a
    geogebra.kernel.GeoElement copy() -> copy
    void set(geogebra.kernel.GeoElement) -> set
    java.lang.String getClassName() -> getClassName
    java.lang.String getTypeString() -> getTypeString
    int getGeoClassType() -> getGeoClassType
    boolean isDefined() -> isDefined
    geogebra.kernel.GeoFunction getIfFunction() -> a
    geogebra.kernel.GeoFunction getElseFunction() -> b
    boolean setInterval(double,double) -> setInterval
    void replaceChildrenByValues(geogebra.kernel.GeoElement) -> replaceChildrenByValues
    void setDerivative(geogebra.kernel.GeoDeriveable,int) -> setDerivative
    void setIntegral(geogebra.kernel.GeoFunction) -> setIntegral
    double evaluate(double) -> evaluate
    void translate(double,double) -> translate
    geogebra.kernel.arithmetic.Function getFunction(double) -> getFunction
    geogebra.kernel.GeoFunction getGeoDerivative(int) -> getGeoDerivative
    boolean isPolynomialFunction(boolean,boolean) -> isPolynomialFunction
    java.lang.String toString() -> toString
    java.lang.String toValueString() -> toValueString
    java.lang.String toSymbolicString() -> toSymbolicString
    java.lang.String toString(boolean) -> a
    java.lang.String toLaTeXString(boolean) -> toLaTeXString
    void pointChanged(geogebra.kernel.GeoPoint) -> pointChanged
    boolean isOnPath(geogebra.kernel.GeoPoint,double) -> isOnPath
    boolean isGeoFunction() -> isGeoFunction
    boolean isGeoFunctionConditional() -> isGeoFunctionConditional
    boolean isBooleanFunction() -> isBooleanFunction
geogebra.kernel.GeoFunctionable -> geogebra.kernel.br:
    geogebra.kernel.GeoFunction getGeoFunction() -> getGeoFunction
geogebra.kernel.GeoImage -> geogebra.kernel.GeoImage:
    java.lang.String fileName -> b
    geogebra.kernel.GeoPoint[] corners -> a
    java.awt.image.BufferedImage image -> a
    int pixelWidth -> a
    int pixelHeight -> i
    boolean inBackground -> e
    boolean hasAbsoluteLocation -> f
    int screenX -> j
    int screenY -> k
    boolean hasAbsoluteScreenLocation -> a
    geogebra.kernel.GeoPoint[] tempPoints -> b
    java.util.Vector instances -> a
    double[] tempCoords -> a
    geogebra.kernel.GeoElement copy() -> copy
    void initTempPoints() -> initTempPoints
    void set(geogebra.kernel.GeoElement) -> set
    void setVisualStyle(geogebra.kernel.GeoElement) -> setVisualStyle
    void updateInstances() -> updateInstances
    boolean showToolTipText() -> showToolTipText
    boolean isInBackground() -> isInBackground
    void setInBackground(boolean) -> setInBackground
    void setFileName(java.lang.String) -> setFileName
    java.lang.String getFileName() -> getFileName
    java.awt.image.BufferedImage getImage() -> getImage
    void setStartPoint(geogebra.kernel.GeoPoint) -> setStartPoint
    void removeStartPoint(geogebra.kernel.GeoPoint) -> removeStartPoint
    void setStartPoint(geogebra.kernel.GeoPoint,int) -> setStartPoint
    void initStartPoint(geogebra.kernel.GeoPoint,int) -> initStartPoint
    void setCorner(geogebra.kernel.GeoPoint,int) -> setCorner
    void updateHasAbsoluteLocation() -> updateHasAbsoluteLocation
    void doRemove() -> doRemove
    geogebra.kernel.GeoPoint getStartPoint() -> getStartPoint
    geogebra.kernel.GeoPoint[] getStartPoints() -> getStartPoints
    geogebra.kernel.GeoPoint getCorner(int) -> getCorner
    boolean hasAbsoluteLocation() -> hasAbsoluteLocation
    void setWaitForStartPoint() -> setWaitForStartPoint
    void setMode(int) -> setMode
    int getMode() -> getMode
    boolean isDefined() -> isDefined
    void setUndefined() -> setUndefined
    java.lang.String toValueString() -> toValueString
    java.lang.String toString() -> toString
    boolean showInAlgebraView() -> showInAlgebraView
    boolean showInEuclidianView() -> showInEuclidianView
    java.lang.String getClassName() -> getClassName
    java.lang.String getTypeString() -> getTypeString
    int getGeoClassType() -> getGeoClassType
    boolean isMoveable() -> isMoveable
    boolean isRotateMoveable() -> isRotateMoveable
    boolean isFixable() -> isFixable
    boolean isFillable() -> isFillable
    boolean isNumberValue() -> isNumberValue
    boolean isVectorValue() -> isVectorValue
    boolean isGeoImage() -> isGeoImage
    boolean isPolynomialInstance() -> isPolynomialInstance
    boolean isTextValue() -> isTextValue
    java.lang.String getXMLtags() -> getXMLtags
    java.lang.String getXMLabsScreenLoc() -> getXMLabsScreenLoc
    java.lang.String getCornerPointXML(int) -> getCornerPointXML
    void setAbsoluteScreenLoc(int,int) -> setAbsoluteScreenLoc
    int getAbsoluteScreenLocX() -> getAbsoluteScreenLocX
    int getAbsoluteScreenLocY() -> getAbsoluteScreenLocY
    void setRealWorldLoc(double,double) -> setRealWorldLoc
    double getRealWorldLocX() -> getRealWorldLocX
    double getRealWorldLocY() -> getRealWorldLocY
    void setAbsoluteScreenLocActive(boolean) -> setAbsoluteScreenLocActive
    boolean isAbsoluteScreenLocActive() -> isAbsoluteScreenLocActive
    boolean isAbsoluteScreenLocateable() -> isAbsoluteScreenLocateable
    void calculateCornerPoint(geogebra.kernel.GeoPoint,int) -> calculateCornerPoint
    void getInternalCornerPointCoords(double[],int) -> getInternalCornerPointCoords
    boolean initTransformPoints() -> initTransformPoints
    void rotate(geogebra.kernel.arithmetic.NumberValue) -> rotate
    void rotate(geogebra.kernel.arithmetic.NumberValue,geogebra.kernel.GeoPoint) -> rotate
    void mirror(geogebra.kernel.GeoPoint) -> mirror
    void mirror(geogebra.kernel.GeoLine) -> mirror
    void translate(geogebra.kernel.GeoVector) -> translate
    boolean isTranslateable() -> isTranslateable
    void dilate(geogebra.kernel.arithmetic.NumberValue,geogebra.kernel.GeoPoint) -> dilate
    boolean isEqual(geogebra.kernel.GeoElement) -> isEqual
geogebra.kernel.GeoLine -> geogebra.kernel.GeoLine:
    java.lang.String parameter -> b
    geogebra.kernel.GeoPoint startPoint -> a
    geogebra.kernel.GeoPoint endPoint -> b
    boolean KEEP_LEADING_SIGN -> e
    double[] P -> a
    double[] g -> b
    java.lang.String[] vars -> a
    java.lang.StringBuffer sbToString -> a
    java.lang.StringBuffer sbBuildValueString -> b
    java.lang.StringBuffer sbToStringLHS -> c
    java.lang.String getClassName() -> getClassName
    java.lang.String getTypeString() -> getTypeString
    int getGeoClassType() -> getGeoClassType
    geogebra.kernel.GeoElement copy() -> copy
    void setCoords(double,double,double) -> setCoords
    void setCoords(geogebra.kernel.GeoVec3D) -> setCoords
    boolean isIntersectionPointIncident(geogebra.kernel.GeoPoint,double) -> isIntersectionPointIncident
    boolean isOnFullLine(geogebra.kernel.GeoPoint,double) -> isOnFullLine
    boolean isParallel(geogebra.kernel.GeoLine) -> isParallel
    boolean isPerpendicular(geogebra.kernel.GeoLine) -> isPerpendicular
    double distance(geogebra.kernel.GeoPoint) -> distance
    double distanceHom(geogebra.kernel.GeoPoint) -> distanceHom
    double distance(geogebra.kernel.GeoLine) -> distance
    void getDirection(geogebra.kernel.GeoVec3D) -> getDirection
    void getDirection(double[]) -> getDirection
    void getInhomPointOnLine(double[]) -> getInhomPointOnLine
    void getPointOnLine(geogebra.kernel.GeoPoint) -> getPointOnLine
    void setStartPoint(geogebra.kernel.GeoPoint) -> setStartPoint
    void setEndPoint(geogebra.kernel.GeoPoint) -> setEndPoint
    geogebra.kernel.GeoPoint getStartPoint() -> getStartPoint
    geogebra.kernel.GeoPoint getEndPoint() -> getEndPoint
    boolean isDefined() -> isDefined
    boolean showInEuclidianView() -> showInEuclidianView
    boolean showInAlgebraView() -> showInAlgebraView
    void set(geogebra.kernel.GeoElement) -> set
    boolean isEqual(geogebra.kernel.GeoElement) -> isEqual
    boolean isDefinedTangent(geogebra.kernel.GeoConic) -> isDefinedTangent
    boolean isDefinedAsymptote(geogebra.kernel.GeoConic) -> isDefinedAsymptote
    void translate(geogebra.kernel.GeoVector) -> translate
    boolean isTranslateable() -> isTranslateable
    void dilate(geogebra.kernel.arithmetic.NumberValue,geogebra.kernel.GeoPoint) -> dilate
    void rotate(geogebra.kernel.arithmetic.NumberValue) -> rotate
    void rotate(geogebra.kernel.arithmetic.NumberValue,geogebra.kernel.GeoPoint) -> rotate
    void mirror(geogebra.kernel.GeoPoint) -> mirror
    void mirror(geogebra.kernel.GeoLine) -> mirror
    void setToParametric(java.lang.String) -> setToParametric
    void setToExplicit() -> setToExplicit
    void setToImplicit() -> setToImplicit
    void setMode(int) -> setMode
    java.lang.String toString() -> toString
    java.lang.String toValueString() -> toValueString
    java.lang.StringBuffer buildValueString() -> buildValueString
    java.lang.StringBuffer toStringLHS() -> toStringLHS
    java.lang.String getXMLtags() -> getXMLtags
    boolean isClosedPath() -> isClosedPath
    void pointChanged(geogebra.kernel.GeoPoint) -> pointChanged
    void pathChanged(geogebra.kernel.GeoPoint) -> pathChanged
    boolean isOnPath(geogebra.kernel.GeoPoint,double) -> isOnPath
    boolean isPath() -> isPath
    boolean isGeoLine() -> isGeoLine
    double getMinParameter() -> getMinParameter
    double getMaxParameter() -> getMaxParameter
    geogebra.kernel.PathMover createPathMover() -> createPathMover
geogebra.kernel.GeoLine$PathMoverLine -> geogebra.kernel.cj:
    geogebra.kernel.GeoPoint moverStartPoint -> a
    geogebra.kernel.GeoLine this$0 -> a
    void init(geogebra.kernel.GeoPoint) -> b
    void calcPoint(geogebra.kernel.GeoPoint) -> a
    boolean hasNext() -> a
geogebra.kernel.GeoList -> geogebra.kernel.GeoList:
    java.lang.String STR_OPEN -> b
    java.lang.String STR_CLOSE -> c
    java.util.ArrayList condListenersShowObject -> a
    java.util.ArrayList geoList -> b
    java.util.ArrayList cacheList -> c
    boolean isDefined -> a
    boolean isDrawable -> e
    int elementType -> a
    java.lang.StringBuffer sbToString -> a
    java.lang.StringBuffer sbBuildValueString -> b
    void setParentAlgorithm(geogebra.kernel.AlgoElement) -> setParentAlgorithm
    java.lang.String getClassName() -> getClassName
    java.lang.String getTypeString() -> getTypeString
    int getGeoClassType() -> getGeoClassType
    int getElementType() -> getElementType
    geogebra.kernel.GeoElement copy() -> copy
    void set(geogebra.kernel.GeoElement) -> set
    void copyListElements(geogebra.kernel.GeoList) -> copyListElements
    geogebra.kernel.GeoElement getCopyForList(geogebra.kernel.GeoElement) -> getCopyForList
    void applyVisualStyle(geogebra.kernel.GeoElement) -> applyVisualStyle
    void setVisualStyle(geogebra.kernel.GeoElement) -> setVisualStyle
    void setObjColor(java.awt.Color) -> setObjColor
    void setEuclidianVisible(boolean) -> setEuclidianVisible
    void setElementEuclidianVisible(geogebra.kernel.GeoElement,boolean) -> setElementEuclidianVisible
    geogebra.kernel.arithmetic.MyList getMyList() -> getMyList
    geogebra.kernel.GeoElement[] toArray() -> toArray
    boolean isDefined() -> isDefined
    void setDefined(boolean) -> setDefined
    void setUndefined() -> setUndefined
    boolean showInEuclidianView() -> showInEuclidianView
    boolean isDrawable() -> isDrawable
    boolean showInAlgebraView() -> showInAlgebraView
    void clear() -> clear
    void add(geogebra.kernel.GeoElement) -> add
    void remove(geogebra.kernel.GeoElement) -> remove
    void remove(int) -> remove
    geogebra.kernel.GeoElement get(int) -> get
    void ensureCapacity(int) -> ensureCapacity
    int size() -> size
    int getCacheSize() -> getCacheSize
    geogebra.kernel.GeoElement getCached(int) -> getCached
    java.lang.String toString() -> toString
    java.lang.String toValueString() -> toValueString
    java.lang.StringBuffer buildValueString() -> buildValueString
    boolean isGeoList() -> isGeoList
    boolean isListValue() -> isListValue
    java.util.ArrayList getMoveableParentPoints() -> getMoveableParentPoints
    java.lang.String getXML() -> getXML
    void registerConditionListener(geogebra.kernel.GeoElement) -> registerConditionListener
    void unregisterConditionListener(geogebra.kernel.GeoElement) -> unregisterConditionListener
    void update() -> update
    void doRemove() -> doRemove
    boolean isEqual(geogebra.kernel.GeoElement) -> isEqual
geogebra.kernel.GeoLocus -> geogebra.kernel.H:
    boolean defined -> a
    java.util.ArrayList myPointList -> a
    double closestPointDist -> a
    int closestPointIndex -> a
    geogebra.kernel.GeoElement copy() -> copy
    void set(geogebra.kernel.GeoElement) -> set
    void clearPoints() -> a
    void insertPoint(double,double,boolean) -> a
    java.util.ArrayList getMyPointList() -> a
    java.lang.String toString() -> toString
    boolean showInAlgebraView() -> showInAlgebraView
    java.lang.String getClassName() -> getClassName
    java.lang.String getTypeString() -> getTypeString
    int getGeoClassType() -> getGeoClassType
    boolean showToolTipText() -> showToolTipText
    java.lang.String getXMLtags() -> getXMLtags
    boolean isDefined() -> isDefined
    void setDefined(boolean) -> a
    void setUndefined() -> setUndefined
    java.lang.String toValueString() -> toValueString
    boolean showInEuclidianView() -> showInEuclidianView
    boolean isGeoLocus() -> isGeoLocus
    geogebra.kernel.PathMover createPathMover() -> createPathMover
    double getMaxParameter() -> getMaxParameter
    double getMinParameter() -> getMinParameter
    boolean isClosedPath() -> isClosedPath
    boolean isOnPath(geogebra.kernel.GeoPoint,double) -> isOnPath
    geogebra.kernel.MyPoint getClosestPoint(geogebra.kernel.GeoPoint) -> a
    void pathChanged(geogebra.kernel.GeoPoint) -> pathChanged
    void pointChanged(geogebra.kernel.GeoPoint) -> pointChanged
    boolean isPath() -> isPath
    boolean isEqual(geogebra.kernel.GeoElement) -> isEqual
geogebra.kernel.GeoNumeric -> geogebra.kernel.GeoNumeric:
    int DEFAULT_SLIDER_WIDTH_RW -> a
    int DEFAULT_SLIDER_WIDTH_PIXEL -> i
    double DEFAULT_SLIDER_MIN -> a
    double DEFAULT_SLIDER_MAX -> b
    double value -> c
    boolean isDrawable -> e
    boolean isUsedForRandom -> f
    int slopeTriangleSize -> j
    boolean intervalMinActive -> g
    boolean intervalMaxActive -> h
    double intervalMin -> d
    double intervalMax -> e
    double sliderWidth -> g
    double sliderX -> h
    double sliderY -> i
    boolean sliderFixed -> i
    boolean sliderHorizontal -> j
    boolean hasAbsoluteScreenLocation -> a
    java.lang.StringBuffer sbToString -> a
    java.lang.String getClassName() -> getClassName
    java.lang.String getTypeString() -> getTypeString
    int getGeoClassType() -> getGeoClassType
    geogebra.kernel.GeoElement copy() -> copy
    boolean isDrawable() -> isDrawable
    boolean isFillable() -> isFillable
    void setDrawable(boolean) -> setDrawable
    void setEuclidianVisible(boolean) -> setEuclidianVisible
    int countSliders() -> countSliders
    boolean isSlider() -> isSlider
    boolean showInEuclidianView() -> showInEuclidianView
    boolean showInAlgebraView() -> showInAlgebraView
    void set(geogebra.kernel.GeoElement) -> set
    void setUndefined() -> setUndefined
    boolean isDefined() -> isDefined
    boolean isFinite() -> isFinite
    boolean isInfinite() -> isInfinite
    boolean isEqual(geogebra.kernel.GeoElement) -> isEqual
    void setValue(double) -> setValue
    void setValue(geogebra.kernel.arithmetic.MyDouble) -> setValue
    double getValue() -> getValue
    void setMode(int) -> setMode
    int getMode() -> getMode
    java.lang.String toString() -> toString
    java.lang.String toValueString() -> toValueString
    geogebra.kernel.arithmetic.MyDouble getNumber() -> getNumber
    double getDouble() -> getDouble
    boolean isConstant() -> isConstant
    boolean isLeaf() -> isLeaf
    java.util.HashSet getVariables() -> getVariables
    geogebra.kernel.arithmetic.ExpressionValue evaluate() -> evaluate
    void setAllVisualProperties(geogebra.kernel.GeoElement) -> setAllVisualProperties
    void setVisualStyle(geogebra.kernel.GeoElement) -> setVisualStyle
    java.lang.String getXMLtags() -> getXMLtags
    boolean isSliderable() -> isSliderable
    boolean isFixable() -> isFixable
    java.lang.String getXMLsliderTag() -> getXMLsliderTag
    boolean isNumberValue() -> isNumberValue
    boolean isGeoNumeric() -> isGeoNumeric
    boolean isVectorValue() -> isVectorValue
    boolean isPolynomialInstance() -> isPolynomialInstance
    int getSlopeTriangleSize() -> getSlopeTriangleSize
    void setSlopeTriangleSize(int) -> setSlopeTriangleSize
    boolean isTextValue() -> isTextValue
    void setIntervalMax(double) -> setIntervalMax
    void setIntervalMin(double) -> setIntervalMin
    void setSliderWidth(double) -> setSliderWidth
    void setSliderLocation(double,double) -> setSliderLocation
    double getIntervalMax() -> getIntervalMax
    double getIntervalMin() -> getIntervalMin
    double getSliderWidth() -> getSliderWidth
    double getSliderX() -> getSliderX
    double getSliderY() -> getSliderY
    boolean isIntervalMaxActive() -> isIntervalMaxActive
    boolean isIntervalMinActive() -> isIntervalMinActive
    void setIntervalMaxInactive() -> setIntervalMaxInactive
    void setIntervalMinInactive() -> setIntervalMinInactive
    boolean isSliderFixed() -> isSliderFixed
    void setSliderFixed(boolean) -> setSliderFixed
    boolean isSliderHorizontal() -> isSliderHorizontal
    void setSliderHorizontal(boolean) -> setSliderHorizontal
    void setAbsoluteScreenLoc(int,int) -> setAbsoluteScreenLoc
    int getAbsoluteScreenLocX() -> getAbsoluteScreenLocX
    int getAbsoluteScreenLocY() -> getAbsoluteScreenLocY
    void setRealWorldLoc(double,double) -> setRealWorldLoc
    double getRealWorldLocX() -> getRealWorldLocX
    double getRealWorldLocY() -> getRealWorldLocY
    void setAbsoluteScreenLocActive(boolean) -> setAbsoluteScreenLocActive
    boolean isAbsoluteScreenLocActive() -> isAbsoluteScreenLocActive
    boolean isAbsoluteScreenLocateable() -> isAbsoluteScreenLocateable
    geogebra.kernel.GeoFunction getGeoFunction() -> getGeoFunction
    boolean isGeoFunctionable() -> isGeoFunctionable
    boolean isUsedForRandom() -> isUsedForRandom
    void setUsedForRandom(boolean) -> setUsedForRandom
geogebra.kernel.GeoPoint -> geogebra.kernel.GeoPoint:
    int pointSize -> a
    geogebra.kernel.Path path -> a
    geogebra.kernel.PathParameter pathParameter -> a
    double inhomX -> d
    double inhomY -> e
    boolean isInfinite -> e
    boolean isDefined -> f
    boolean showUndefinedInAlgebraView -> g
    java.util.ArrayList locateableList -> a
    geogebra.kernel.PathParameter tempPathParameter -> b
    java.lang.StringBuffer sbToString -> a
    java.lang.StringBuffer sbBuildValueString -> b
    java.lang.String getClassName() -> getClassName
    java.lang.String getTypeString() -> getTypeString
    int getGeoClassType() -> getGeoClassType
    void set(geogebra.kernel.GeoElement) -> set
    geogebra.kernel.GeoElement copy() -> copy
    void setPointSize(int) -> setPointSize
    int getPointSize() -> getPointSize
    boolean isChangeable() -> isChangeable
    boolean isPointOnPath() -> isPointOnPath
    boolean hasPath() -> hasPath
    geogebra.kernel.Path getPath() -> getPath
    void addToPathParameter(double) -> addToPathParameter
    void initPathParameter(geogebra.kernel.PathParameter) -> initPathParameter
    boolean isInfinite() -> isInfinite
    boolean isFinite() -> isFinite
    boolean showInEuclidianView() -> showInEuclidianView
    boolean showInAlgebraView() -> showInAlgebraView
    boolean isDefined() -> isDefined
    boolean isFixable() -> isFixable
    void setCoords(double,double,double) -> setCoords
    void updateCoords() -> updateCoords
    void setPolarCoords(double,double) -> setPolarCoords
    void setCoords(geogebra.kernel.GeoVec3D) -> setCoords
    void setCoords(geogebra.kernel.GeoVec2D) -> setCoords
    boolean isEqual(geogebra.kernel.GeoElement) -> isEqual
    void getInhomCoords(double[]) -> getInhomCoords
    double distance(geogebra.kernel.GeoPoint) -> distance
    double distanceSqr(geogebra.kernel.GeoPoint) -> distanceSqr
    boolean collinear(geogebra.kernel.GeoPoint,geogebra.kernel.GeoPoint,geogebra.kernel.GeoPoint) -> collinear
    double det(geogebra.kernel.GeoPoint,geogebra.kernel.GeoPoint) -> det
    double affineRatio(geogebra.kernel.GeoPoint,geogebra.kernel.GeoPoint,geogebra.kernel.GeoPoint) -> affineRatio
    void translate(geogebra.kernel.GeoVector) -> translate
    boolean isTranslateable() -> isTranslateable
    void dilate(geogebra.kernel.arithmetic.NumberValue,geogebra.kernel.GeoPoint) -> dilate
    void rotate(geogebra.kernel.arithmetic.NumberValue) -> rotate
    void rotate(geogebra.kernel.arithmetic.NumberValue,geogebra.kernel.GeoPoint) -> rotate
    void mirror(geogebra.kernel.GeoPoint) -> mirror
    void mirror(geogebra.kernel.GeoConic) -> mirror
    void mirror(geogebra.kernel.GeoLine) -> mirror
    void mirror(double) -> mirror
    java.lang.String toString() -> toString
    java.lang.String toValueString() -> toValueString
    java.lang.StringBuffer buildValueString() -> buildValueString
    geogebra.kernel.GeoVec2D getVector() -> getVector
    boolean isConstant() -> isConstant
    boolean isLeaf() -> isLeaf
    java.util.HashSet getVariables() -> getVariables
    geogebra.kernel.arithmetic.ExpressionValue evaluate() -> evaluate
    java.lang.String getXMLtags() -> getXMLtags
    java.lang.String getStartPointXML() -> getStartPointXML
    boolean isAbsoluteStartPoint() -> isAbsoluteStartPoint
    boolean isNumberValue() -> isNumberValue
    boolean isVectorValue() -> isVectorValue
    boolean isPolynomialInstance() -> isPolynomialInstance
    boolean isTextValue() -> isTextValue
    void update() -> update
    void registerLocateable(geogebra.kernel.Locateable) -> registerLocateable
    void unregisterLocateable(geogebra.kernel.Locateable) -> unregisterLocateable
    void doRemove() -> doRemove
    void setVisualStyle(geogebra.kernel.GeoElement) -> setVisualStyle
    boolean isGeoPoint() -> isGeoPoint
    void showUndefinedInAlgebraView(boolean) -> showUndefinedInAlgebraView
geogebra.kernel.GeoPolygon -> geogebra.kernel.GeoPolygon:
    geogebra.kernel.GeoPoint[] points -> a
    geogebra.kernel.GeoSegment[] segments -> a
    double area -> a
    boolean defined -> a
    java.lang.StringBuffer sbToString -> a
    java.lang.String getClassName() -> getClassName
    java.lang.String getTypeString() -> getTypeString
    int getGeoClassType() -> getGeoClassType
    void setPoints(geogebra.kernel.GeoPoint[]) -> setPoints
    void initLabels(java.lang.String[]) -> initLabels
    void defaultSegmentLabels() -> defaultSegmentLabels
    void setLabel(geogebra.kernel.GeoSegment,geogebra.kernel.GeoPoint) -> setLabel
    void updateSegments() -> updateSegments
    geogebra.kernel.GeoElement copy() -> copy
    geogebra.kernel.GeoElement copyInternal(geogebra.kernel.Construction) -> copyInternal
    void set(geogebra.kernel.GeoElement) -> set
    geogebra.kernel.GeoPoint[] getPoints() -> getPoints
    geogebra.kernel.GeoSegment[] getSegments() -> getSegments
    boolean isFillable() -> isFillable
    void calcArea() -> calcArea
    double getArea() -> getArea
    double getDirection() -> getDirection
    double calcArea(geogebra.kernel.GeoPoint[]) -> calcArea
    double calcAreaWithSign(geogebra.kernel.GeoPoint[]) -> calcAreaWithSign
    void calcCentroid(geogebra.kernel.GeoPoint) -> calcCentroid
    double pointsClosedX(int) -> pointsClosedX
    double pointsClosedY(int) -> pointsClosedY
    double getAreaWithSign() -> getAreaWithSign
    boolean isDefined() -> isDefined
    void setDefined() -> setDefined
    void setUndefined() -> setUndefined
    boolean showInAlgebraView() -> showInAlgebraView
    boolean isEqual(geogebra.kernel.GeoElement) -> isEqual
    void setEuclidianVisible(boolean) -> setEuclidianVisible
    void setObjColor(java.awt.Color) -> setObjColor
    void setLineType(int) -> setLineType
    void setLineThickness(int) -> setLineThickness
    java.lang.String toString() -> toString
    java.lang.String toValueString() -> toValueString
    geogebra.kernel.arithmetic.MyDouble getNumber() -> getNumber
    double getDouble() -> getDouble
    boolean isConstant() -> isConstant
    boolean isLeaf() -> isLeaf
    java.util.HashSet getVariables() -> getVariables
    geogebra.kernel.arithmetic.ExpressionValue evaluate() -> evaluate
    void setMode(int) -> setMode
    int getMode() -> getMode
    boolean showInEuclidianView() -> showInEuclidianView
    boolean isNumberValue() -> isNumberValue
    boolean isVectorValue() -> isVectorValue
    boolean isPolynomialInstance() -> isPolynomialInstance
    boolean isTextValue() -> isTextValue
    boolean isGeoPolygon() -> isGeoPolygon
    boolean isPath() -> isPath
    geogebra.kernel.PathMover createPathMover() -> createPathMover
    double getMaxParameter() -> getMaxParameter
    double getMinParameter() -> getMinParameter
    boolean isClosedPath() -> isClosedPath
    boolean isOnPath(geogebra.kernel.GeoPoint,double) -> isOnPath
    void pathChanged(geogebra.kernel.GeoPoint) -> pathChanged
    void pointChanged(geogebra.kernel.GeoPoint) -> pointChanged
geogebra.kernel.GeoRay -> geogebra.kernel.bF:
    boolean allowOutlyingIntersections -> e
    boolean keepTypeOnGeometricTransform -> f
    geogebra.kernel.PathParameter tempPP -> a
    java.lang.String getClassName() -> getClassName
    java.lang.String getTypeString() -> getTypeString
    int getGeoClassType() -> getGeoClassType
    geogebra.kernel.GeoElement copyInternal(geogebra.kernel.Construction) -> copyInternal
    void set(geogebra.kernel.GeoElement) -> set
    void setVisualStyle(geogebra.kernel.GeoElement) -> setVisualStyle
    void pointChanged(geogebra.kernel.GeoPoint) -> pointChanged
    void pathChanged(geogebra.kernel.GeoPoint) -> pathChanged
    boolean allowOutlyingIntersections() -> allowOutlyingIntersections
    void setAllowOutlyingIntersections(boolean) -> setAllowOutlyingIntersections
    void setKeepTypeOnGeometricTransform(boolean) -> setKeepTypeOnGeometricTransform
    boolean isLimitedPath() -> isLimitedPath
    boolean isIntersectionPointIncident(geogebra.kernel.GeoPoint,double) -> isIntersectionPointIncident
    boolean isOnPath(geogebra.kernel.GeoPoint,double) -> isOnPath
    double getMinParameter() -> getMinParameter
    double getMaxParameter() -> getMaxParameter
    geogebra.kernel.PathMover createPathMover() -> createPathMover
    java.lang.String getXMLtags() -> getXMLtags
    geogebra.kernel.GeoElement[] createTransformedObject(int,java.lang.String,geogebra.kernel.GeoPoint,geogebra.kernel.GeoLine,geogebra.kernel.GeoVector,geogebra.kernel.arithmetic.NumberValue) -> createTransformedObject
    boolean isGeoRay() -> isGeoRay
    boolean isEqual(geogebra.kernel.GeoElement) -> isEqual
geogebra.kernel.GeoSegment -> geogebra.kernel.GeoSegment:
    double length -> d
    boolean defined -> e
    boolean allowOutlyingIntersections -> f
    boolean keepTypeOnGeometricTransform -> g
    java.lang.StringBuffer sbToString -> b
    geogebra.kernel.PathParameter tempPP -> a
    java.lang.Integer[] getDecoTypes() -> getDecoTypes
    void setDecorationType(int) -> setDecorationType
    java.lang.String getClassName() -> getClassName
    java.lang.String getTypeString() -> getTypeString
    int getGeoClassType() -> getGeoClassType
    geogebra.kernel.GeoElement copyInternal(geogebra.kernel.Construction) -> copyInternal
    void set(geogebra.kernel.GeoElement) -> set
    void setVisualStyle(geogebra.kernel.GeoElement) -> setVisualStyle
    void calcLength() -> calcLength
    double getLength() -> getLength
    boolean isDefined() -> isDefined
    void setUndefined() -> setUndefined
    boolean showInAlgebraView() -> showInAlgebraView
    boolean showInEuclidianView() -> showInEuclidianView
    boolean isEqual(geogebra.kernel.GeoElement) -> isEqual
    java.lang.String toString() -> toString
    java.lang.String toValueString() -> toValueString
    geogebra.kernel.arithmetic.MyDouble getNumber() -> getNumber
    double getDouble() -> getDouble
    boolean isConstant() -> isConstant
    boolean isLeaf() -> isLeaf
    java.util.HashSet getVariables() -> getVariables
    geogebra.kernel.arithmetic.ExpressionValue evaluate() -> evaluate
    boolean isNumberValue() -> isNumberValue
    boolean isVectorValue() -> isVectorValue
    boolean isPolynomialInstance() -> isPolynomialInstance
    boolean allowOutlyingIntersections() -> allowOutlyingIntersections
    void setAllowOutlyingIntersections(boolean) -> setAllowOutlyingIntersections
    boolean keepsTypeOnGeometricTransform() -> keepsTypeOnGeometricTransform
    void setKeepTypeOnGeometricTransform(boolean) -> setKeepTypeOnGeometricTransform
    boolean isLimitedPath() -> isLimitedPath
    boolean isIntersectionPointIncident(geogebra.kernel.GeoPoint,double) -> isIntersectionPointIncident
    boolean isOnPath(geogebra.kernel.GeoPoint,double) -> isOnPath
    void pointChanged(geogebra.kernel.GeoPoint) -> pointChanged
    void pathChanged(geogebra.kernel.GeoPoint) -> pathChanged
    double getMinParameter() -> getMinParameter
    double getMaxParameter() -> getMaxParameter
    geogebra.kernel.PathMover createPathMover() -> createPathMover
    java.lang.String getXMLtags() -> getXMLtags
    geogebra.kernel.GeoElement[] createTransformedObject(int,java.lang.String,geogebra.kernel.GeoPoint,geogebra.kernel.GeoLine,geogebra.kernel.GeoVector,geogebra.kernel.arithmetic.NumberValue) -> createTransformedObject
    boolean isGeoSegment() -> isGeoSegment
geogebra.kernel.GeoText -> geogebra.kernel.GeoText:
    java.lang.String str -> b
    geogebra.kernel.GeoPoint startPoint -> a
    boolean isLaTeX -> e
    java.awt.geom.Rectangle2D boundingBox -> a
    boolean needsUpdatedBoundingBox -> f
    boolean serifFont -> g
    int fontStyle -> a
    int fontSize -> i
    int printDecimals -> j
    boolean hasAbsoluteScreenLocation -> a
    java.lang.StringBuffer sbToString -> a
    geogebra.kernel.GeoElement copy() -> copy
    void set(geogebra.kernel.GeoElement) -> set
    void setVisualStyle(geogebra.kernel.GeoElement) -> setVisualStyle
    void setTextString(java.lang.String) -> setTextString
    java.lang.String getTextString() -> getTextString
    void initStartPoint(geogebra.kernel.GeoPoint,int) -> initStartPoint
    void setStartPoint(geogebra.kernel.GeoPoint,int) -> setStartPoint
    void removeStartPoint(geogebra.kernel.GeoPoint) -> removeStartPoint
    void setStartPoint(geogebra.kernel.GeoPoint) -> setStartPoint
    void doRemove() -> doRemove
    geogebra.kernel.GeoPoint getStartPoint() -> getStartPoint
    geogebra.kernel.GeoPoint[] getStartPoints() -> getStartPoints
    boolean hasAbsoluteLocation() -> hasAbsoluteLocation
    void setWaitForStartPoint() -> setWaitForStartPoint
    void setMode(int) -> setMode
    int getMode() -> getMode
    boolean isDefined() -> isDefined
    void setUndefined() -> setUndefined
    java.lang.String toValueString() -> toValueString
    java.lang.String toOutputValueString() -> toOutputValueString
    java.lang.String toString() -> toString
    boolean showInAlgebraView() -> showInAlgebraView
    boolean showInEuclidianView() -> showInEuclidianView
    java.lang.String getClassName() -> getClassName
    java.lang.String getTypeString() -> getTypeString
    int getGeoClassType() -> getGeoClassType
    boolean isMoveable() -> isMoveable
    boolean isFixable() -> isFixable
    boolean isNumberValue() -> isNumberValue
    boolean isVectorValue() -> isVectorValue
    boolean isPolynomialInstance() -> isPolynomialInstance
    boolean isTextValue() -> isTextValue
    boolean isGeoText() -> isGeoText
    geogebra.kernel.arithmetic.MyStringBuffer getText() -> getText
    java.lang.String getXML() -> getXML
    java.lang.String getXMLtags() -> getXMLtags
    java.lang.String getXMLlocation() -> getXMLlocation
    void setAllVisualProperties(geogebra.kernel.GeoElement) -> setAllVisualProperties
    void setSameLocation(geogebra.kernel.GeoText) -> setSameLocation
    boolean isLaTeX() -> isLaTeX
    void setLaTeX(boolean,boolean) -> setLaTeX
    void setAbsoluteScreenLoc(int,int) -> setAbsoluteScreenLoc
    int getAbsoluteScreenLocX() -> getAbsoluteScreenLocX
    int getAbsoluteScreenLocY() -> getAbsoluteScreenLocY
    double getRealWorldLocX() -> getRealWorldLocX
    double getRealWorldLocY() -> getRealWorldLocY
    void setRealWorldLoc(double,double) -> setRealWorldLoc
    void setAbsoluteScreenLocActive(boolean) -> setAbsoluteScreenLocActive
    boolean isAbsoluteScreenLocActive() -> isAbsoluteScreenLocActive
    boolean isAbsoluteScreenLocateable() -> isAbsoluteScreenLocateable
    int getFontSize() -> getFontSize
    void setFontSize(int) -> setFontSize
    int getFontStyle() -> getFontStyle
    void setFontStyle(int) -> setFontStyle
    int getPrintDecimals() -> getPrintDecimals
    void setPrintDecimals(int) -> setPrintDecimals
    boolean isSerifFont() -> isSerifFont
    void setSerifFont(boolean) -> setSerifFont
    void calculateCornerPoint(geogebra.kernel.GeoPoint,int) -> calculateCornerPoint
    void setBoundingBox(java.awt.geom.Rectangle2D) -> setBoundingBox
    boolean isNeedsUpdatedBoundingBox() -> isNeedsUpdatedBoundingBox
    void setNeedsUpdatedBoundingBox(boolean) -> setNeedsUpdatedBoundingBox
    boolean isEqual(geogebra.kernel.GeoElement) -> isEqual
geogebra.kernel.GeoVec2D -> geogebra.kernel.w:
    double x -> a
    double y -> b
    int mode -> a
    geogebra.kernel.Kernel kernel -> a
    java.lang.StringBuffer sbToString -> a
    geogebra.kernel.arithmetic.ExpressionValue deepCopy(geogebra.kernel.Kernel) -> deepCopy
    void resolveVariables() -> resolveVariables
    void setCoords(geogebra.kernel.GeoVec2D) -> a
    double getX() -> a
    double getY() -> b
    double length(double,double) -> a
    void rotate(double) -> a
    void mirror(geogebra.kernel.GeoPoint) -> a
    void mirror(double) -> b
    void add(geogebra.kernel.GeoVec2D,geogebra.kernel.GeoVec2D,geogebra.kernel.GeoVec2D) -> a
    void sub(geogebra.kernel.GeoVec2D,geogebra.kernel.GeoVec2D,geogebra.kernel.GeoVec2D) -> b
    void mult(double) -> c
    void mult(geogebra.kernel.GeoVec2D,double,geogebra.kernel.GeoVec2D) -> a
    void complexDivide(geogebra.kernel.GeoVec2D,geogebra.kernel.GeoVec2D,geogebra.kernel.GeoVec2D) -> c
    void inner(geogebra.kernel.GeoVec2D,geogebra.kernel.GeoVec2D,geogebra.kernel.arithmetic.MyDouble) -> a
    void div(geogebra.kernel.GeoVec2D,double,geogebra.kernel.GeoVec2D) -> b
    boolean isDefined() -> a
    java.lang.String toString() -> toString
    geogebra.kernel.GeoVec2D getVector() -> getVector
    boolean isConstant() -> isConstant
    boolean isLeaf() -> isLeaf
    int getMode() -> a
    geogebra.kernel.arithmetic.ExpressionValue evaluate() -> evaluate
    java.util.HashSet getVariables() -> getVariables
    void setMode(int) -> a
    java.lang.String toValueString() -> toValueString
    java.lang.String toLaTeXString(boolean) -> toLaTeXString
    boolean isNumberValue() -> isNumberValue
    boolean isVectorValue() -> isVectorValue
    boolean isBooleanValue() -> isBooleanValue
    boolean isPolynomialInstance() -> isPolynomialInstance
    boolean isTextValue() -> isTextValue
    boolean isExpressionNode() -> isExpressionNode
    boolean isListValue() -> isListValue
    boolean contains(geogebra.kernel.arithmetic.ExpressionValue) -> contains
geogebra.kernel.GeoVec3D -> geogebra.kernel.GeoVec3D:
    double x -> a
    double y -> b
    double z -> c
    boolean trace -> a
    java.lang.StringBuffer sbToString -> a
    boolean isDefined() -> isDefined
    void setUndefined() -> setUndefined
    boolean showInEuclidianView() -> showInEuclidianView
    boolean showInAlgebraView() -> showInAlgebraView
    void set(geogebra.kernel.GeoElement) -> set
    void setCoords(double,double,double) -> setCoords
    void setCoords(geogebra.kernel.GeoVec3D) -> setCoords
    double getX() -> getX
    double getY() -> getY
    double getZ() -> getZ
    void getCoords(double[]) -> getCoords
    void getInhomCoords(double[]) -> getInhomCoords
    boolean isPolar() -> isPolar
    int getMode() -> getMode
    void setMode(int) -> setMode
    void setPolar() -> setPolar
    void setCartesian() -> setCartesian
    boolean equals(geogebra.kernel.GeoVec3D) -> equals
    boolean isTraceable() -> isTraceable
    void setTrace(boolean) -> setTrace
    boolean getTrace() -> getTrace
    boolean linDep(geogebra.kernel.GeoVec3D) -> linDep
    boolean isZero() -> isZero
    void cross(geogebra.kernel.GeoVec3D,geogebra.kernel.GeoVec3D,geogebra.kernel.GeoVec3D) -> cross
    void lineThroughPoints(geogebra.kernel.GeoPoint,geogebra.kernel.GeoPoint,geogebra.kernel.GeoLine) -> lineThroughPoints
    void lineThroughPointVector(geogebra.kernel.GeoPoint,geogebra.kernel.GeoVec3D,geogebra.kernel.GeoLine) -> lineThroughPointVector
    void cross(geogebra.kernel.GeoVec3D,double,double,double,geogebra.kernel.GeoVec3D) -> cross
    double inner(geogebra.kernel.GeoVec3D) -> inner
    void changeSign() -> changeSign
    void add(geogebra.kernel.GeoVec3D,geogebra.kernel.GeoVec3D,geogebra.kernel.GeoVec3D) -> add
    void sub(geogebra.kernel.GeoVec3D,geogebra.kernel.GeoVec3D,geogebra.kernel.GeoVec3D) -> sub
    java.lang.String toString() -> toString
    java.lang.String getXMLtags() -> getXMLtags
    boolean isNumberValue() -> isNumberValue
    boolean isVectorValue() -> isVectorValue
    boolean isPolynomialInstance() -> isPolynomialInstance
geogebra.kernel.GeoVector -> geogebra.kernel.GeoVector:
    geogebra.kernel.GeoPoint startPoint -> a
    geogebra.kernel.GeoSegment pathSegment -> a
    geogebra.kernel.GeoPoint pathStartPoint -> b
    geogebra.kernel.GeoPoint pathEndPoint -> c
    boolean waitingForStartPoint -> e
    java.util.HashSet waitingPointSet -> a
    java.lang.StringBuffer sbToString -> a
    java.lang.StringBuffer sbBuildValueString -> b
    java.lang.String getClassName() -> getClassName
    java.lang.String getTypeString() -> getTypeString
    int getGeoClassType() -> getGeoClassType
    void setCoords(double,double,double) -> setCoords
    void setCoords(geogebra.kernel.GeoVec3D) -> setCoords
    void set(geogebra.kernel.GeoElement) -> set
    geogebra.kernel.GeoElement copy() -> copy
    void setPolarCoords(double,double) -> setPolarCoords
    void setCoords(geogebra.kernel.GeoVec2D) -> setCoords
    geogebra.kernel.GeoVec2D getInhomVec() -> getInhomVec
    geogebra.kernel.GeoPoint getStartPoint() -> getStartPoint
    geogebra.kernel.GeoPoint[] getStartPoints() -> getStartPoints
    boolean hasAbsoluteLocation() -> hasAbsoluteLocation
    void setStartPoint(geogebra.kernel.GeoPoint,int) -> setStartPoint
    void initStartPoint(geogebra.kernel.GeoPoint,int) -> initStartPoint
    void removeStartPoint(geogebra.kernel.GeoPoint) -> removeStartPoint
    void setStartPoint(geogebra.kernel.GeoPoint) -> setStartPoint
    void setWaitForStartPoint() -> setWaitForStartPoint
    void doRemove() -> doRemove
    boolean isFinite() -> isFinite
    boolean isInfinite() -> isInfinite
    boolean showInEuclidianView() -> showInEuclidianView
    boolean showInAlgebraView() -> showInAlgebraView
    boolean isEqual(geogebra.kernel.GeoElement) -> isEqual
    void rotate(geogebra.kernel.arithmetic.NumberValue) -> rotate
    java.lang.String toString() -> toString
    java.lang.String toValueString() -> toValueString
    java.lang.StringBuffer buildValueString() -> buildValueString
    geogebra.kernel.GeoVec2D getVector() -> getVector
    boolean isConstant() -> isConstant
    boolean isLeaf() -> isLeaf
    java.util.HashSet getVariables() -> getVariables
    geogebra.kernel.arithmetic.ExpressionValue evaluate() -> evaluate
    java.lang.String getXMLtags() -> getXMLtags
    boolean isNumberValue() -> isNumberValue
    boolean isVectorValue() -> isVectorValue
    boolean isPolynomialInstance() -> isPolynomialInstance
    boolean isTextValue() -> isTextValue
    boolean isClosedPath() -> isClosedPath
    void pointChanged(geogebra.kernel.GeoPoint) -> pointChanged
    void pathChanged(geogebra.kernel.GeoPoint) -> pathChanged
    boolean isOnPath(geogebra.kernel.GeoPoint,double) -> isOnPath
    boolean isPath() -> isPath
    double getMinParameter() -> getMinParameter
    double getMaxParameter() -> getMaxParameter
    geogebra.kernel.PathMover createPathMover() -> createPathMover
    void initPathSegment() -> initPathSegment
    void updatePathSegment() -> updatePathSegment
    boolean isGeoVector() -> isGeoVector
geogebra.kernel.Kernel -> geogebra.kernel.Kernel:
    double EPSILON -> b
    int coordStyle -> a
    double SQRT_2_HALF -> a
    double PRINT_PRECISION -> c
    java.text.NumberFormat nf -> a
    int casPrintForm -> b
    java.lang.String casPrintFormPI -> a
    boolean arcusFunctionCreatesAngle -> a
    boolean translateCommandName -> b
    boolean undoActive -> c
    boolean notifyViewsActive -> d
    boolean viewReiniting -> e
    boolean allowVisibilitySideEffects -> f
    double xmin -> d
    double xmax -> e
    double ymin -> f
    double ymax -> g
    double xscale -> h
    double yscale -> i
    geogebra.View[] views -> a
    int viewCnt -> c
    geogebra.kernel.Construction cons -> a
    geogebra.Application app -> a
    geogebra.kernel.commands.AlgebraProcessor algProcessor -> a
    geogebra.kernel.EquationSolver eqnSolver -> a
    geogebra.kernel.optimization.ExtremumFinder extrFinder -> a
    geogebra.algebra.parser.Parser parser -> a
    geogebra.cas.GeoGebraCAS ggbCAS -> a
    boolean continuous -> g
    geogebra.kernel.MacroManager macroManager -> a
    java.util.ArrayList euclidianViewAlgos -> a
    int oldViewCnt -> d
    boolean notifyRepaint -> h
    java.util.ArrayList intersectionAlgos -> b
    double[] temp -> a
    java.lang.StringBuffer sbBuildImplicitVarPart -> a
    java.lang.StringBuffer sbBuildImplicitEquation -> b
    java.lang.StringBuffer sbBuildLHS -> c
    java.lang.StringBuffer sbBuildExplicitConicEquation -> d
    java.lang.StringBuffer sbBuildExplicitLineEquation -> e
    java.lang.StringBuffer sbFormat -> f
    java.lang.StringBuffer sbFormatSigned -> g
    java.lang.StringBuffer sbFormatAngle -> h
    geogebra.kernel.commands.AlgebraProcessor getAlgebraProcessor() -> getAlgebraProcessor
    geogebra.kernel.GeoElement lookupLabel(java.lang.String) -> lookupLabel
    geogebra.kernel.GeoAxis getXAxis() -> getXAxis
    geogebra.kernel.GeoAxis getYAxis() -> getYAxis
    boolean isAxis(geogebra.kernel.GeoElement) -> isAxis
    void updateLocalAxesNames() -> updateLocalAxesNames
    geogebra.Application getApplication() -> getApplication
    void setShowOnlyBreakpoints(boolean) -> setShowOnlyBreakpoints
    boolean showOnlyBreakpoints() -> showOnlyBreakpoints
    geogebra.kernel.EquationSolver getEquationSolver() -> getEquationSolver
    geogebra.kernel.optimization.ExtremumFinder getExtremumFinder() -> getExtremumFinder
    geogebra.algebra.parser.Parser getParser() -> getParser
    java.lang.String evaluateYACAS(java.lang.String) -> evaluateYACAS
    java.lang.String evaluateYACASRaw(java.lang.String) -> evaluateYACASRaw
    java.lang.String evaluateJASYMCA(java.lang.String) -> evaluateJASYMCA
    void initCAS() -> initCAS
    java.lang.String[] getPolynomialCoeffs(java.lang.String,java.lang.String) -> getPolynomialCoeffs
    void setEpsilon(double) -> setEpsilon
    double getEpsilon() -> getEpsilon
    void setMinPrecision() -> setMinPrecision
    void resetPrecision() -> resetPrecision
    void setEuclidianViewBounds(double,double,double,double,double,double) -> setEuclidianViewBounds
    double getXmax() -> getXmax
    double getXmin() -> getXmin
    double getXscale() -> getXscale
    double getYmax() -> getYmax
    double getYmin() -> getYmin
    double getYscale() -> getYscale
    void registerEuclidianViewAlgo(geogebra.kernel.EuclidianViewAlgo) -> registerEuclidianViewAlgo
    void unregisterEuclidianViewAlgo(geogebra.kernel.EuclidianViewAlgo) -> unregisterEuclidianViewAlgo
    void notifyEuclidianViewAlgos() -> notifyEuclidianViewAlgos
    void setAngleUnit(int) -> setAngleUnit
    int getAngleUnit() -> getAngleUnit
    int getMaximumFractionDigits() -> getMaximumFractionDigits
    void setMaximumFractionDigits(int) -> setMaximumFractionDigits
    void setCASPrintForm(int) -> setCASPrintForm
    int getCASPrintForm() -> getCASPrintForm
    void setPrintDecimals(int) -> setPrintDecimals
    int getPrintDecimals() -> getPrintDecimals
    double getPrintPrecision() -> getPrintPrecision
    int getCoordStyle() -> getCoordStyle
    void setCoordStyle(int) -> setCoordStyle
    geogebra.kernel.GeoElement createGeoElement(geogebra.kernel.Construction,java.lang.String) -> createGeoElement
    geogebra.kernel.ConstructionElement getConstructionElement(geogebra.kernel.GeoElement) -> getConstructionElement
    geogebra.kernel.Construction getConstruction() -> getConstruction
    geogebra.kernel.ConstructionElement getConstructionElement(int) -> getConstructionElement
    void setConstructionStep(int) -> setConstructionStep
    int getConstructionStep() -> getConstructionStep
    int getLastConstructionStep() -> getLastConstructionStep
    void firstStep() -> firstStep
    void lastStep() -> lastStep
    void nextStep() -> nextStep
    int getNextBreakpoint(int) -> getNextBreakpoint
    void previousStep() -> previousStep
    int getPreviousBreakpoint(int) -> getPreviousBreakpoint
    boolean moveInConstructionList(int,int) -> moveInConstructionList
    void clearConstruction() -> clearConstruction
    void updateConstruction() -> updateConstruction
    boolean isEmpty() -> isEmpty
    void setUndoActive(boolean) -> setUndoActive
    void storeUndoInfo() -> storeUndoInfo
    void restoreCurrentUndoInfo() -> restoreCurrentUndoInfo
    void initUndoInfo() -> initUndoInfo
    void redo() -> redo
    void undo() -> undo
    boolean undoPossible() -> undoPossible
    boolean redoPossible() -> redoPossible
    void attach(geogebra.View) -> attach
    void detach(geogebra.View) -> detach
    void notifyAddAll(geogebra.View) -> notifyAddAll
    void notifyAddAll(geogebra.View,int) -> notifyAddAll
    void notifyAdd(geogebra.kernel.GeoElement) -> notifyAdd
    void notifyRemove(geogebra.kernel.GeoElement) -> notifyRemove
    void notifyUpdate(geogebra.kernel.GeoElement) -> notifyUpdate
    void notifyUpdateAuxiliaryObject(geogebra.kernel.GeoElement) -> notifyUpdateAuxiliaryObject
    void notifyRename(geogebra.kernel.GeoElement) -> notifyRename
    void setNotifyViewsActive(boolean) -> setNotifyViewsActive
    boolean isNotifyViewsActive() -> isNotifyViewsActive
    void setNotifyRepaintActive(boolean) -> setNotifyRepaintActive
    boolean isNotifyRepaintActive() -> isNotifyRepaintActive
    void notifyRepaint() -> notifyRepaint
    void notifyReset() -> notifyReset
    void notifyClearView() -> notifyClearView
    void addMacro(geogebra.kernel.Macro) -> addMacro
    void removeMacro(geogebra.kernel.Macro) -> removeMacro
    void removeAllMacros() -> removeAllMacros
    boolean setMacroCommandName(geogebra.kernel.Macro,java.lang.String) -> setMacroCommandName
    geogebra.kernel.Macro getMacro(java.lang.String) -> getMacro
    int getMacroNumber() -> getMacroNumber
    java.util.ArrayList getAllMacros() -> getAllMacros
    geogebra.kernel.Macro getMacro(int) -> getMacro
    int getMacroID(geogebra.kernel.Macro) -> getMacroID
    geogebra.kernel.GeoElement[] useMacro(java.lang.String[],geogebra.kernel.Macro,geogebra.kernel.GeoElement[]) -> useMacro
    java.lang.String getMacroXML(java.util.ArrayList) -> getMacroXML
    boolean hasMacros() -> hasMacros
    geogebra.kernel.GeoPoint Point(java.lang.String,double,double) -> Point
    geogebra.kernel.GeoVector Vector(java.lang.String,double,double) -> Vector
    geogebra.kernel.GeoLine Line(java.lang.String,double,double,double) -> Line
    geogebra.kernel.GeoConic Conic(java.lang.String,double,double,double,double,double,double) -> Conic
    geogebra.kernel.GeoAngle Angle(java.lang.String,geogebra.kernel.GeoNumeric) -> Angle
    geogebra.kernel.GeoFunction Function(java.lang.String,geogebra.kernel.arithmetic.Function) -> Function
    geogebra.kernel.GeoText Text(java.lang.String,java.lang.String) -> Text
    geogebra.kernel.GeoBoolean Boolean(java.lang.String,boolean) -> Boolean
    geogebra.kernel.GeoList List(java.lang.String,java.util.ArrayList,boolean) -> List
    geogebra.kernel.GeoList ListExpression(java.lang.String,geogebra.kernel.arithmetic.ExpressionNode) -> ListExpression
    geogebra.kernel.GeoElement If(java.lang.String,geogebra.kernel.GeoBoolean,geogebra.kernel.GeoElement,geogebra.kernel.GeoElement) -> If
    geogebra.kernel.GeoFunction If(java.lang.String,geogebra.kernel.GeoFunction,geogebra.kernel.GeoFunction,geogebra.kernel.GeoFunction) -> If
    geogebra.kernel.GeoElement[] Sequence(java.lang.String,geogebra.kernel.GeoElement,geogebra.kernel.GeoNumeric,geogebra.kernel.arithmetic.NumberValue,geogebra.kernel.arithmetic.NumberValue,geogebra.kernel.arithmetic.NumberValue) -> Sequence
    geogebra.kernel.GeoCurveCartesian CurveCartesian(java.lang.String,geogebra.kernel.arithmetic.NumberValue,geogebra.kernel.arithmetic.NumberValue,geogebra.kernel.GeoNumeric,geogebra.kernel.arithmetic.NumberValue,geogebra.kernel.arithmetic.NumberValue) -> CurveCartesian
    geogebra.kernel.arithmetic.ExpressionNode convertNumberValueToExpressionNode(geogebra.kernel.arithmetic.NumberValue) -> convertNumberValueToExpressionNode
    geogebra.kernel.GeoNumeric DependentNumber(java.lang.String,geogebra.kernel.arithmetic.ExpressionNode,boolean) -> DependentNumber
    geogebra.kernel.GeoPoint DependentPoint(java.lang.String,geogebra.kernel.arithmetic.ExpressionNode) -> DependentPoint
    geogebra.kernel.GeoVector DependentVector(java.lang.String,geogebra.kernel.arithmetic.ExpressionNode) -> DependentVector
    geogebra.kernel.GeoLine DependentLine(java.lang.String,geogebra.kernel.arithmetic.Equation) -> DependentLine
    geogebra.kernel.GeoConic DependentConic(java.lang.String,geogebra.kernel.arithmetic.Equation) -> DependentConic
    geogebra.kernel.GeoFunction DependentFunction(java.lang.String,geogebra.kernel.arithmetic.Function) -> DependentFunction
    geogebra.kernel.GeoText DependentText(java.lang.String,geogebra.kernel.arithmetic.ExpressionNode) -> DependentText
    geogebra.kernel.GeoText Name(java.lang.String,geogebra.kernel.GeoElement) -> Name
    geogebra.kernel.GeoNumeric Step(java.lang.String) -> Step
    geogebra.kernel.GeoNumeric Step(java.lang.String,geogebra.kernel.GeoElement) -> Step
    geogebra.kernel.GeoBoolean DependentBoolean(java.lang.String,geogebra.kernel.arithmetic.ExpressionNode) -> DependentBoolean
    geogebra.kernel.GeoPoint Point(java.lang.String,geogebra.kernel.Path,double,double) -> Point
    geogebra.kernel.GeoPoint Point(java.lang.String,geogebra.kernel.Path) -> Point
    geogebra.kernel.GeoPoint Point(java.lang.String,geogebra.kernel.GeoPoint,geogebra.kernel.GeoVector) -> Point
    geogebra.kernel.GeoPoint ProjectedPoint(geogebra.kernel.GeoPoint,geogebra.kernel.GeoLine) -> ProjectedPoint
    geogebra.kernel.GeoPoint Midpoint(java.lang.String,geogebra.kernel.GeoPoint,geogebra.kernel.GeoPoint) -> Midpoint
    geogebra.kernel.GeoPoint Midpoint(geogebra.kernel.GeoPoint,geogebra.kernel.GeoPoint) -> Midpoint
    geogebra.kernel.GeoPoint Midpoint(java.lang.String,geogebra.kernel.GeoSegment) -> Midpoint
    geogebra.kernel.GeoSegment Segment(java.lang.String,geogebra.kernel.GeoPoint,geogebra.kernel.GeoPoint) -> Segment
    geogebra.kernel.GeoLine Line(java.lang.String,geogebra.kernel.GeoPoint,geogebra.kernel.GeoPoint) -> Line
    geogebra.kernel.GeoLine Line(java.lang.String,geogebra.kernel.GeoPoint,geogebra.kernel.GeoVector) -> Line
    geogebra.kernel.GeoRay Ray(java.lang.String,geogebra.kernel.GeoPoint,geogebra.kernel.GeoPoint) -> Ray
    geogebra.kernel.GeoRay Ray(java.lang.String,geogebra.kernel.GeoPoint,geogebra.kernel.GeoVector) -> Ray
    geogebra.kernel.GeoLine Line(java.lang.String,geogebra.kernel.GeoPoint,geogebra.kernel.GeoLine) -> Line
    geogebra.kernel.GeoLine OrthogonalLine(java.lang.String,geogebra.kernel.GeoPoint,geogebra.kernel.GeoVector) -> OrthogonalLine
    geogebra.kernel.GeoLine OrthogonalLine(java.lang.String,geogebra.kernel.GeoPoint,geogebra.kernel.GeoLine) -> OrthogonalLine
    geogebra.kernel.GeoLine LineBisector(java.lang.String,geogebra.kernel.GeoPoint,geogebra.kernel.GeoPoint) -> LineBisector
    geogebra.kernel.GeoLine LineBisector(java.lang.String,geogebra.kernel.GeoSegment) -> LineBisector
    geogebra.kernel.GeoLine AngularBisector(java.lang.String,geogebra.kernel.GeoPoint,geogebra.kernel.GeoPoint,geogebra.kernel.GeoPoint) -> AngularBisector
    geogebra.kernel.GeoLine[] AngularBisector(java.lang.String[],geogebra.kernel.GeoLine,geogebra.kernel.GeoLine) -> AngularBisector
    geogebra.kernel.GeoVector Vector(java.lang.String,geogebra.kernel.GeoPoint,geogebra.kernel.GeoPoint) -> Vector
    geogebra.kernel.GeoVector Vector(java.lang.String,geogebra.kernel.GeoPoint) -> Vector
    geogebra.kernel.GeoVector Direction(java.lang.String,geogebra.kernel.GeoLine) -> Direction
    geogebra.kernel.GeoNumeric Slope(java.lang.String,geogebra.kernel.GeoLine) -> Slope
    geogebra.kernel.GeoFunction Slope(java.lang.String,geogebra.kernel.GeoFunction) -> Slope
    geogebra.kernel.GeoNumeric UpperSum(java.lang.String,geogebra.kernel.GeoFunction,geogebra.kernel.arithmetic.NumberValue,geogebra.kernel.arithmetic.NumberValue,geogebra.kernel.arithmetic.NumberValue) -> UpperSum
    geogebra.kernel.GeoNumeric LowerSum(java.lang.String,geogebra.kernel.GeoFunction,geogebra.kernel.arithmetic.NumberValue,geogebra.kernel.arithmetic.NumberValue,geogebra.kernel.arithmetic.NumberValue) -> LowerSum
    geogebra.kernel.GeoVector UnitVector(java.lang.String,geogebra.kernel.GeoLine) -> UnitVector
    geogebra.kernel.GeoVector UnitVector(java.lang.String,geogebra.kernel.GeoVector) -> UnitVector
    geogebra.kernel.GeoVector OrthogonalVector(java.lang.String,geogebra.kernel.GeoLine) -> OrthogonalVector
    geogebra.kernel.GeoVector OrthogonalVector(java.lang.String,geogebra.kernel.GeoVector) -> OrthogonalVector
    geogebra.kernel.GeoVector UnitOrthogonalVector(java.lang.String,geogebra.kernel.GeoLine) -> UnitOrthogonalVector
    geogebra.kernel.GeoVector UnitOrthogonalVector(java.lang.String,geogebra.kernel.GeoVector) -> UnitOrthogonalVector
    geogebra.kernel.GeoNumeric Length(java.lang.String,geogebra.kernel.GeoVec3D) -> Length
    geogebra.kernel.GeoNumeric Distance(java.lang.String,geogebra.kernel.GeoPoint,geogebra.kernel.GeoPoint) -> Distance
    geogebra.kernel.GeoNumeric Distance(java.lang.String,geogebra.kernel.GeoPoint,geogebra.kernel.GeoLine) -> Distance
    geogebra.kernel.GeoNumeric Distance(java.lang.String,geogebra.kernel.GeoLine,geogebra.kernel.GeoLine) -> Distance
    geogebra.kernel.GeoNumeric Area(java.lang.String,geogebra.kernel.GeoPoint[]) -> Area
    geogebra.kernel.GeoNumeric Area(java.lang.String,geogebra.kernel.GeoConic) -> Area
    geogebra.kernel.GeoNumeric Mod(java.lang.String,geogebra.kernel.arithmetic.NumberValue,geogebra.kernel.arithmetic.NumberValue) -> Mod
    geogebra.kernel.GeoNumeric Div(java.lang.String,geogebra.kernel.arithmetic.NumberValue,geogebra.kernel.arithmetic.NumberValue) -> Div
    geogebra.kernel.GeoNumeric Min(java.lang.String,geogebra.kernel.arithmetic.NumberValue,geogebra.kernel.arithmetic.NumberValue) -> Min
    geogebra.kernel.GeoNumeric Min(java.lang.String,geogebra.kernel.GeoList) -> Min
    geogebra.kernel.GeoNumeric Max(java.lang.String,geogebra.kernel.arithmetic.NumberValue,geogebra.kernel.arithmetic.NumberValue) -> Max
    geogebra.kernel.GeoNumeric Max(java.lang.String,geogebra.kernel.GeoList) -> Max
    geogebra.kernel.GeoNumeric LCM(java.lang.String,geogebra.kernel.arithmetic.NumberValue,geogebra.kernel.arithmetic.NumberValue) -> LCM
    geogebra.kernel.GeoNumeric LCM(java.lang.String,geogebra.kernel.GeoList) -> LCM
    geogebra.kernel.GeoNumeric GCD(java.lang.String,geogebra.kernel.arithmetic.NumberValue,geogebra.kernel.arithmetic.NumberValue) -> GCD
    geogebra.kernel.GeoNumeric GCD(java.lang.String,geogebra.kernel.GeoList) -> GCD
    geogebra.kernel.GeoNumeric SigmaXY(java.lang.String,geogebra.kernel.GeoList) -> SigmaXY
    geogebra.kernel.GeoNumeric SigmaYY(java.lang.String,geogebra.kernel.GeoList) -> SigmaYY
    geogebra.kernel.GeoNumeric Covariance(java.lang.String,geogebra.kernel.GeoList) -> Covariance
    geogebra.kernel.GeoNumeric SXX(java.lang.String,geogebra.kernel.GeoList) -> SXX
    geogebra.kernel.GeoNumeric SXY(java.lang.String,geogebra.kernel.GeoList) -> SXY
    geogebra.kernel.GeoNumeric SYY(java.lang.String,geogebra.kernel.GeoList) -> SYY
    geogebra.kernel.GeoNumeric MeanX(java.lang.String,geogebra.kernel.GeoList) -> MeanX
    geogebra.kernel.GeoNumeric MeanY(java.lang.String,geogebra.kernel.GeoList) -> MeanY
    geogebra.kernel.GeoNumeric PMCC(java.lang.String,geogebra.kernel.GeoList) -> PMCC
    geogebra.kernel.GeoNumeric SigmaXY(java.lang.String,geogebra.kernel.GeoList,geogebra.kernel.GeoList) -> SigmaXY
    geogebra.kernel.GeoNumeric SigmaXX(java.lang.String,geogebra.kernel.GeoList,geogebra.kernel.GeoList) -> SigmaXX
    geogebra.kernel.GeoNumeric SigmaYY(java.lang.String,geogebra.kernel.GeoList,geogebra.kernel.GeoList) -> SigmaYY
    geogebra.kernel.GeoNumeric MeanX(java.lang.String,geogebra.kernel.GeoList,geogebra.kernel.GeoList) -> MeanX
    geogebra.kernel.GeoNumeric MeanY(java.lang.String,geogebra.kernel.GeoList,geogebra.kernel.GeoList) -> MeanY
    geogebra.kernel.GeoNumeric Covariance(java.lang.String,geogebra.kernel.GeoList,geogebra.kernel.GeoList) -> Covariance
    geogebra.kernel.GeoNumeric SXX(java.lang.String,geogebra.kernel.GeoList,geogebra.kernel.GeoList) -> SXX
    geogebra.kernel.GeoNumeric SYY(java.lang.String,geogebra.kernel.GeoList,geogebra.kernel.GeoList) -> SYY
    geogebra.kernel.GeoNumeric SXY(java.lang.String,geogebra.kernel.GeoList,geogebra.kernel.GeoList) -> SXY
    geogebra.kernel.GeoNumeric PMCC(java.lang.String,geogebra.kernel.GeoList,geogebra.kernel.GeoList) -> PMCC
    geogebra.kernel.GeoLine FitLineY(java.lang.String,geogebra.kernel.GeoList) -> FitLineY
    geogebra.kernel.GeoLine FitLineX(java.lang.String,geogebra.kernel.GeoList) -> FitLineX
    geogebra.kernel.GeoFunction FitPoly(java.lang.String,geogebra.kernel.GeoList,geogebra.kernel.arithmetic.NumberValue) -> FitPoly
    geogebra.kernel.GeoFunction FitExp(java.lang.String,geogebra.kernel.GeoList) -> FitExp
    geogebra.kernel.GeoFunction FitLog(java.lang.String,geogebra.kernel.GeoList) -> FitLog
    geogebra.kernel.GeoFunction FitPow(java.lang.String,geogebra.kernel.GeoList) -> FitPow
    geogebra.kernel.GeoNumeric Binomial(java.lang.String,geogebra.kernel.arithmetic.NumberValue,geogebra.kernel.arithmetic.NumberValue) -> Binomial
    geogebra.kernel.GeoNumeric RandomNormal(java.lang.String,geogebra.kernel.arithmetic.NumberValue,geogebra.kernel.arithmetic.NumberValue) -> RandomNormal
    geogebra.kernel.GeoNumeric InverseNormal(java.lang.String,geogebra.kernel.arithmetic.NumberValue,geogebra.kernel.arithmetic.NumberValue,geogebra.kernel.arithmetic.NumberValue) -> InverseNormal
    geogebra.kernel.GeoNumeric Normal(java.lang.String,geogebra.kernel.arithmetic.NumberValue,geogebra.kernel.arithmetic.NumberValue,geogebra.kernel.arithmetic.NumberValue) -> Normal
    geogebra.kernel.GeoList Row(java.lang.String,geogebra.kernel.arithmetic.NumberValue,geogebra.kernel.arithmetic.NumberValue) -> Row
    geogebra.kernel.GeoList Sort(java.lang.String,geogebra.kernel.GeoList) -> Sort
    geogebra.kernel.GeoList First(java.lang.String,geogebra.kernel.GeoList,geogebra.kernel.GeoNumeric) -> First
    geogebra.kernel.GeoList Last(java.lang.String,geogebra.kernel.GeoList,geogebra.kernel.GeoNumeric) -> Last
    geogebra.kernel.GeoList Take(java.lang.String,geogebra.kernel.GeoList,geogebra.kernel.GeoNumeric,geogebra.kernel.GeoNumeric) -> Take
    geogebra.kernel.GeoList Clean(java.lang.String,geogebra.kernel.GeoList) -> Clean
    geogebra.kernel.GeoBoolean Defined(java.lang.String,geogebra.kernel.GeoElement) -> Defined
    geogebra.kernel.GeoList Mode(java.lang.String,geogebra.kernel.GeoList) -> Mode
    geogebra.kernel.GeoList Reverse(java.lang.String,geogebra.kernel.GeoList) -> Reverse
    geogebra.kernel.GeoNumeric Sum(java.lang.String,geogebra.kernel.GeoList) -> Sum
    geogebra.kernel.GeoNumeric Sum(java.lang.String,geogebra.kernel.GeoList,geogebra.kernel.GeoNumeric) -> Sum
    geogebra.kernel.GeoNumeric Mean(java.lang.String,geogebra.kernel.GeoList) -> Mean
    geogebra.kernel.GeoNumeric Variance(java.lang.String,geogebra.kernel.GeoList) -> Variance
    geogebra.kernel.GeoNumeric StandardDeviation(java.lang.String,geogebra.kernel.GeoList) -> StandardDeviation
    geogebra.kernel.GeoNumeric SigmaXX(java.lang.String,geogebra.kernel.GeoList) -> SigmaXX
    geogebra.kernel.GeoNumeric Median(java.lang.String,geogebra.kernel.GeoList) -> Median
    geogebra.kernel.GeoNumeric Q1(java.lang.String,geogebra.kernel.GeoList) -> Q1
    geogebra.kernel.GeoNumeric Q3(java.lang.String,geogebra.kernel.GeoList) -> Q3
    geogebra.kernel.GeoNumeric Iteration(java.lang.String,geogebra.kernel.GeoFunction,geogebra.kernel.arithmetic.NumberValue,geogebra.kernel.arithmetic.NumberValue) -> Iteration
    geogebra.kernel.GeoList IterationList(java.lang.String,geogebra.kernel.GeoFunction,geogebra.kernel.arithmetic.NumberValue,geogebra.kernel.arithmetic.NumberValue) -> IterationList
    geogebra.kernel.GeoElement Element(java.lang.String,geogebra.kernel.GeoList,geogebra.kernel.arithmetic.NumberValue) -> Element
    geogebra.kernel.GeoNumeric Length(java.lang.String,geogebra.kernel.GeoList) -> Length
    geogebra.kernel.GeoNumeric Perimeter(java.lang.String,geogebra.kernel.GeoPolygon) -> Perimeter
    geogebra.kernel.GeoNumeric Circumference(java.lang.String,geogebra.kernel.GeoConic) -> Circumference
    geogebra.kernel.GeoElement[] Polygon(java.lang.String[],geogebra.kernel.GeoPoint[]) -> Polygon
    geogebra.kernel.GeoElement[] RegularPolygon(java.lang.String[],geogebra.kernel.GeoPoint,geogebra.kernel.GeoPoint,geogebra.kernel.arithmetic.NumberValue) -> RegularPolygon
    geogebra.kernel.GeoElement[] Segment(java.lang.String[],geogebra.kernel.GeoPoint,geogebra.kernel.arithmetic.NumberValue) -> Segment
    geogebra.kernel.GeoElement[] Angle(java.lang.String[],geogebra.kernel.GeoPoint,geogebra.kernel.GeoPoint,geogebra.kernel.arithmetic.NumberValue) -> Angle
    geogebra.kernel.GeoElement[] Angle(java.lang.String[],geogebra.kernel.GeoPoint,geogebra.kernel.GeoPoint,geogebra.kernel.arithmetic.NumberValue,boolean) -> Angle
    geogebra.kernel.GeoAngle Angle(java.lang.String,geogebra.kernel.GeoLine,geogebra.kernel.GeoLine) -> Angle
    geogebra.kernel.GeoAngle Angle(java.lang.String,geogebra.kernel.GeoVector,geogebra.kernel.GeoVector) -> Angle
    geogebra.kernel.GeoAngle Angle(java.lang.String,geogebra.kernel.GeoVec3D) -> Angle
    geogebra.kernel.GeoAngle Angle(java.lang.String,geogebra.kernel.GeoPoint,geogebra.kernel.GeoPoint,geogebra.kernel.GeoPoint) -> Angle
    geogebra.kernel.GeoAngle[] Angles(java.lang.String[],geogebra.kernel.GeoPolygon) -> Angles
    geogebra.kernel.GeoPoint IntersectLines(java.lang.String,geogebra.kernel.GeoLine,geogebra.kernel.GeoLine) -> IntersectLines
    geogebra.kernel.GeoPoint IntersectFunctions(java.lang.String,geogebra.kernel.GeoFunction,geogebra.kernel.GeoFunction,geogebra.kernel.GeoPoint) -> IntersectFunctions
    geogebra.kernel.GeoPoint IntersectFunctionLine(java.lang.String,geogebra.kernel.GeoFunction,geogebra.kernel.GeoLine,geogebra.kernel.GeoPoint) -> IntersectFunctionLine
    geogebra.kernel.GeoConic Circle(java.lang.String,geogebra.kernel.GeoPoint,geogebra.kernel.arithmetic.NumberValue) -> Circle
    geogebra.kernel.GeoConic Circle(java.lang.String,geogebra.kernel.GeoPoint,geogebra.kernel.GeoPoint,geogebra.kernel.GeoPoint,boolean) -> Circle
    geogebra.kernel.GeoConic Circle(java.lang.String,geogebra.kernel.GeoPoint,geogebra.kernel.GeoSegment) -> Circle
    geogebra.kernel.GeoConic Circle(java.lang.String,geogebra.kernel.GeoPoint,geogebra.kernel.GeoPoint) -> Circle
    geogebra.kernel.GeoConicPart Semicircle(java.lang.String,geogebra.kernel.GeoPoint,geogebra.kernel.GeoPoint) -> Semicircle
    geogebra.kernel.GeoLocus Locus(java.lang.String,geogebra.kernel.GeoPoint,geogebra.kernel.GeoPoint) -> Locus
    geogebra.kernel.GeoConic Circle(java.lang.String,geogebra.kernel.GeoPoint,geogebra.kernel.GeoPoint,geogebra.kernel.GeoPoint) -> Circle
    geogebra.kernel.GeoConicPart ConicArc(java.lang.String,geogebra.kernel.GeoConic,geogebra.kernel.arithmetic.NumberValue,geogebra.kernel.arithmetic.NumberValue) -> ConicArc
    geogebra.kernel.GeoConicPart ConicArc(java.lang.String,geogebra.kernel.GeoConic,geogebra.kernel.GeoPoint,geogebra.kernel.GeoPoint) -> ConicArc
    geogebra.kernel.GeoConicPart ConicSector(java.lang.String,geogebra.kernel.GeoConic,geogebra.kernel.arithmetic.NumberValue,geogebra.kernel.arithmetic.NumberValue) -> ConicSector
    geogebra.kernel.GeoConicPart ConicSector(java.lang.String,geogebra.kernel.GeoConic,geogebra.kernel.GeoPoint,geogebra.kernel.GeoPoint) -> ConicSector
    geogebra.kernel.GeoConicPart CircumcircleArc(java.lang.String,geogebra.kernel.GeoPoint,geogebra.kernel.GeoPoint,geogebra.kernel.GeoPoint) -> CircumcircleArc
    geogebra.kernel.GeoConicPart CircumcircleSector(java.lang.String,geogebra.kernel.GeoPoint,geogebra.kernel.GeoPoint,geogebra.kernel.GeoPoint) -> CircumcircleSector
    geogebra.kernel.GeoConicPart CircleArc(java.lang.String,geogebra.kernel.GeoPoint,geogebra.kernel.GeoPoint,geogebra.kernel.GeoPoint) -> CircleArc
    geogebra.kernel.GeoConicPart CircleSector(java.lang.String,geogebra.kernel.GeoPoint,geogebra.kernel.GeoPoint,geogebra.kernel.GeoPoint) -> CircleSector
    geogebra.kernel.GeoPoint[] Focus(java.lang.String[],geogebra.kernel.GeoConic) -> Focus
    geogebra.kernel.GeoPoint[] Vertex(java.lang.String[],geogebra.kernel.GeoConic) -> Vertex
    geogebra.kernel.GeoPoint Center(java.lang.String,geogebra.kernel.GeoConic) -> Center
    geogebra.kernel.GeoPoint Centroid(java.lang.String,geogebra.kernel.GeoPolygon) -> Centroid
    geogebra.kernel.GeoPoint Corner(java.lang.String,geogebra.kernel.GeoImage,geogebra.kernel.arithmetic.NumberValue) -> Corner
    geogebra.kernel.GeoPoint Corner(java.lang.String,geogebra.kernel.GeoText,geogebra.kernel.arithmetic.NumberValue) -> Corner
    geogebra.kernel.GeoPoint CornerOfDrawingPad(java.lang.String,geogebra.kernel.arithmetic.NumberValue) -> CornerOfDrawingPad
    geogebra.kernel.GeoConic Parabola(java.lang.String,geogebra.kernel.GeoPoint,geogebra.kernel.GeoLine) -> Parabola
    geogebra.kernel.GeoConic Ellipse(java.lang.String,geogebra.kernel.GeoPoint,geogebra.kernel.GeoPoint,geogebra.kernel.arithmetic.NumberValue) -> Ellipse
    geogebra.kernel.GeoConic Ellipse(java.lang.String,geogebra.kernel.GeoPoint,geogebra.kernel.GeoPoint,geogebra.kernel.GeoPoint) -> Ellipse
    geogebra.kernel.GeoConic Hyperbola(java.lang.String,geogebra.kernel.GeoPoint,geogebra.kernel.GeoPoint,geogebra.kernel.arithmetic.NumberValue) -> Hyperbola
    geogebra.kernel.GeoConic Hyperbola(java.lang.String,geogebra.kernel.GeoPoint,geogebra.kernel.GeoPoint,geogebra.kernel.GeoPoint) -> Hyperbola
    geogebra.kernel.GeoConic Conic(java.lang.String,geogebra.kernel.GeoPoint[]) -> Conic
    geogebra.kernel.GeoPoint[] IntersectLineConic(java.lang.String[],geogebra.kernel.GeoLine,geogebra.kernel.GeoConic) -> IntersectLineConic
    geogebra.kernel.GeoPoint[] IntersectConics(java.lang.String[],geogebra.kernel.GeoConic,geogebra.kernel.GeoConic) -> IntersectConics
    geogebra.kernel.GeoPoint[] IntersectPolynomials(java.lang.String[],geogebra.kernel.GeoFunction,geogebra.kernel.GeoFunction) -> IntersectPolynomials
    geogebra.kernel.GeoPoint IntersectPolynomialsSingle(java.lang.String,geogebra.kernel.GeoFunction,geogebra.kernel.GeoFunction,double,double) -> IntersectPolynomialsSingle
    geogebra.kernel.GeoPoint IntersectPolynomialsSingle(java.lang.String,geogebra.kernel.GeoFunction,geogebra.kernel.GeoFunction,geogebra.kernel.arithmetic.NumberValue) -> IntersectPolynomialsSingle
    geogebra.kernel.GeoPoint[] IntersectPolynomialLine(java.lang.String[],geogebra.kernel.GeoFunction,geogebra.kernel.GeoLine) -> IntersectPolynomialLine
    geogebra.kernel.GeoPoint IntersectPolynomialLineSingle(java.lang.String,geogebra.kernel.GeoFunction,geogebra.kernel.GeoLine,double,double) -> IntersectPolynomialLineSingle
    geogebra.kernel.GeoPoint IntersectPolynomialLineSingle(java.lang.String,geogebra.kernel.GeoFunction,geogebra.kernel.GeoLine,geogebra.kernel.arithmetic.NumberValue) -> IntersectPolynomialLineSingle
    geogebra.kernel.GeoPoint IntersectLineConicSingle(java.lang.String,geogebra.kernel.GeoLine,geogebra.kernel.GeoConic,double,double) -> IntersectLineConicSingle
    geogebra.kernel.GeoPoint IntersectLineConicSingle(java.lang.String,geogebra.kernel.GeoLine,geogebra.kernel.GeoConic,geogebra.kernel.arithmetic.NumberValue) -> IntersectLineConicSingle
    geogebra.kernel.GeoPoint IntersectConicsSingle(java.lang.String,geogebra.kernel.GeoConic,geogebra.kernel.GeoConic,double,double) -> IntersectConicsSingle
    geogebra.kernel.GeoPoint IntersectConicsSingle(java.lang.String,geogebra.kernel.GeoConic,geogebra.kernel.GeoConic,geogebra.kernel.arithmetic.NumberValue) -> IntersectConicsSingle
    geogebra.kernel.AlgoIntersectLineConic getIntersectionAlgorithm(geogebra.kernel.GeoLine,geogebra.kernel.GeoConic) -> getIntersectionAlgorithm
    geogebra.kernel.AlgoIntersectConics getIntersectionAlgorithm(geogebra.kernel.GeoConic,geogebra.kernel.GeoConic) -> getIntersectionAlgorithm
    geogebra.kernel.AlgoIntersectPolynomials getIntersectionAlgorithm(geogebra.kernel.GeoFunction,geogebra.kernel.GeoFunction) -> getIntersectionAlgorithm
    geogebra.kernel.AlgoIntersectPolynomialLine getIntersectionAlgorithm(geogebra.kernel.GeoFunction,geogebra.kernel.GeoLine) -> getIntersectionAlgorithm
    geogebra.kernel.AlgoElement findExistingIntersectionAlgorithm(geogebra.kernel.GeoElement,geogebra.kernel.GeoElement) -> findExistingIntersectionAlgorithm
    void removeIntersectionAlgorithm(geogebra.kernel.AlgoIntersect) -> removeIntersectionAlgorithm
    geogebra.kernel.GeoLine PolarLine(java.lang.String,geogebra.kernel.GeoPoint,geogebra.kernel.GeoConic) -> PolarLine
    geogebra.kernel.GeoLine DiameterLine(java.lang.String,geogebra.kernel.GeoLine,geogebra.kernel.GeoConic) -> DiameterLine
    geogebra.kernel.GeoLine DiameterLine(java.lang.String,geogebra.kernel.GeoVector,geogebra.kernel.GeoConic) -> DiameterLine
    geogebra.kernel.GeoLine[] Tangent(java.lang.String[],geogebra.kernel.GeoPoint,geogebra.kernel.GeoConic) -> Tangent
    geogebra.kernel.GeoLine[] Tangent(java.lang.String[],geogebra.kernel.GeoLine,geogebra.kernel.GeoConic) -> Tangent
    geogebra.kernel.GeoLine Tangent(java.lang.String,geogebra.kernel.arithmetic.NumberValue,geogebra.kernel.GeoFunction) -> Tangent
    geogebra.kernel.GeoLine Tangent(java.lang.String,geogebra.kernel.GeoPoint,geogebra.kernel.GeoFunction) -> Tangent
    geogebra.kernel.GeoLine[] Asymptote(java.lang.String[],geogebra.kernel.GeoConic) -> Asymptote
    geogebra.kernel.GeoLine[] Axes(java.lang.String[],geogebra.kernel.GeoConic) -> Axes
    geogebra.kernel.GeoLine FirstAxis(java.lang.String,geogebra.kernel.GeoConic) -> FirstAxis
    geogebra.kernel.GeoLine SecondAxis(java.lang.String,geogebra.kernel.GeoConic) -> SecondAxis
    geogebra.kernel.GeoLine Directrix(java.lang.String,geogebra.kernel.GeoConic) -> Directrix
    geogebra.kernel.GeoNumeric Excentricity(java.lang.String,geogebra.kernel.GeoConic) -> Excentricity
    geogebra.kernel.GeoNumeric FirstAxisLength(java.lang.String,geogebra.kernel.GeoConic) -> FirstAxisLength
    geogebra.kernel.GeoNumeric SecondAxisLength(java.lang.String,geogebra.kernel.GeoConic) -> SecondAxisLength
    geogebra.kernel.GeoNumeric Parameter(java.lang.String,geogebra.kernel.GeoConic) -> Parameter
    geogebra.kernel.GeoNumeric Radius(java.lang.String,geogebra.kernel.GeoConic) -> Radius
    geogebra.kernel.GeoAngle Angle(java.lang.String,geogebra.kernel.GeoConic) -> Angle
    geogebra.kernel.GeoElement[] Translate(java.lang.String,geogebra.kernel.Translateable,geogebra.kernel.GeoVector) -> Translate
    geogebra.kernel.GeoVector Translate(java.lang.String,geogebra.kernel.GeoVector,geogebra.kernel.GeoPoint) -> Translate
    geogebra.kernel.GeoElement[] Rotate(java.lang.String,geogebra.kernel.Rotateable,geogebra.kernel.arithmetic.NumberValue) -> Rotate
    geogebra.kernel.GeoElement[] Rotate(java.lang.String,geogebra.kernel.PointRotateable,geogebra.kernel.arithmetic.NumberValue,geogebra.kernel.GeoPoint) -> Rotate
    geogebra.kernel.GeoElement[] Dilate(java.lang.String,geogebra.kernel.Dilateable,geogebra.kernel.arithmetic.NumberValue,geogebra.kernel.GeoPoint) -> Dilate
    geogebra.kernel.GeoElement[] Mirror(java.lang.String,geogebra.kernel.Mirrorable,geogebra.kernel.GeoConic) -> Mirror
    geogebra.kernel.GeoElement[] Mirror(java.lang.String,geogebra.kernel.Mirrorable,geogebra.kernel.GeoPoint) -> Mirror
    geogebra.kernel.GeoElement[] Mirror(java.lang.String,geogebra.kernel.GeoPoint,geogebra.kernel.GeoConic) -> Mirror
    geogebra.kernel.GeoElement[] Mirror(java.lang.String,geogebra.kernel.Mirrorable,geogebra.kernel.GeoLine) -> Mirror
    geogebra.kernel.GeoElement[] Translate(java.lang.String,geogebra.kernel.GeoPolygon,geogebra.kernel.GeoVector) -> Translate
    geogebra.kernel.GeoPoint[] translatePoints(geogebra.kernel.GeoPoint[],geogebra.kernel.GeoVector) -> translatePoints
    java.lang.String transformedGeoLabel(geogebra.kernel.GeoElement) -> transformedGeoLabel
    geogebra.kernel.GeoElement[] Rotate(java.lang.String,geogebra.kernel.GeoPolygon,geogebra.kernel.arithmetic.NumberValue) -> Rotate
    geogebra.kernel.GeoElement[] Rotate(java.lang.String,geogebra.kernel.GeoPolygon,geogebra.kernel.arithmetic.NumberValue,geogebra.kernel.GeoPoint) -> Rotate
    geogebra.kernel.GeoPoint[] rotPoints(geogebra.kernel.GeoPoint[],geogebra.kernel.arithmetic.NumberValue,geogebra.kernel.GeoPoint) -> rotPoints
    geogebra.kernel.GeoElement[] Dilate(java.lang.String,geogebra.kernel.GeoPolygon,geogebra.kernel.arithmetic.NumberValue,geogebra.kernel.GeoPoint) -> Dilate
    geogebra.kernel.GeoPoint[] dilatePoints(geogebra.kernel.GeoPoint[],geogebra.kernel.arithmetic.NumberValue,geogebra.kernel.GeoPoint) -> dilatePoints
    geogebra.kernel.GeoElement[] Mirror(java.lang.String,geogebra.kernel.GeoPolygon,geogebra.kernel.GeoPoint) -> Mirror
    geogebra.kernel.GeoElement[] Mirror(java.lang.String,geogebra.kernel.GeoPolygon,geogebra.kernel.GeoLine) -> Mirror
    geogebra.kernel.GeoPoint[] mirrorPoints(geogebra.kernel.GeoPoint[],geogebra.kernel.GeoPoint,geogebra.kernel.GeoLine) -> mirrorPoints
    geogebra.kernel.GeoElement[] transformPoly(java.lang.String,geogebra.kernel.GeoPolygon,geogebra.kernel.GeoPoint[]) -> transformPoly
    geogebra.kernel.GeoPoint[] transformPoints(int,geogebra.kernel.GeoPoint[],geogebra.kernel.GeoPoint,geogebra.kernel.GeoLine,geogebra.kernel.GeoVector,geogebra.kernel.arithmetic.NumberValue) -> transformPoints
    geogebra.kernel.GeoLine getTransformedLine(int,geogebra.kernel.GeoLine,geogebra.kernel.GeoPoint,geogebra.kernel.GeoLine,geogebra.kernel.GeoVector,geogebra.kernel.arithmetic.NumberValue) -> getTransformedLine
    geogebra.kernel.GeoConic getTransformedConic(int,geogebra.kernel.GeoConic,geogebra.kernel.GeoPoint,geogebra.kernel.GeoLine,geogebra.kernel.GeoVector,geogebra.kernel.arithmetic.NumberValue) -> getTransformedConic
    geogebra.kernel.GeoFunction Function(java.lang.String,geogebra.kernel.GeoFunction,geogebra.kernel.arithmetic.NumberValue,geogebra.kernel.arithmetic.NumberValue) -> Function
    geogebra.kernel.GeoElement Derivative(java.lang.String,geogebra.kernel.GeoDeriveable) -> Derivative
    geogebra.kernel.GeoElement Derivative(java.lang.String,geogebra.kernel.GeoDeriveable,geogebra.kernel.arithmetic.NumberValue) -> Derivative
    geogebra.kernel.GeoFunction PolynomialFunction(java.lang.String,geogebra.kernel.GeoFunction) -> PolynomialFunction
    geogebra.kernel.GeoFunction PolynomialFunction(java.lang.String,geogebra.kernel.GeoList) -> PolynomialFunction
    geogebra.kernel.GeoElement Expand(java.lang.String,geogebra.kernel.GeoFunction) -> Expand
    geogebra.kernel.GeoFunction Factor(java.lang.String,geogebra.kernel.GeoFunction) -> Factor
    geogebra.kernel.GeoFunction TaylorSeries(java.lang.String,geogebra.kernel.GeoFunction,geogebra.kernel.arithmetic.NumberValue,geogebra.kernel.arithmetic.NumberValue) -> TaylorSeries
    geogebra.kernel.GeoFunction Integral(java.lang.String,geogebra.kernel.GeoFunction) -> Integral
    geogebra.kernel.GeoNumeric Integral(java.lang.String,geogebra.kernel.GeoFunction,geogebra.kernel.arithmetic.NumberValue,geogebra.kernel.arithmetic.NumberValue) -> Integral
    geogebra.kernel.GeoNumeric Integral(java.lang.String,geogebra.kernel.GeoFunction,geogebra.kernel.GeoFunction,geogebra.kernel.arithmetic.NumberValue,geogebra.kernel.arithmetic.NumberValue) -> Integral
    geogebra.kernel.GeoPoint[] Root(java.lang.String[],geogebra.kernel.GeoFunction) -> Root
    geogebra.kernel.GeoPoint Root(java.lang.String,geogebra.kernel.GeoFunction,geogebra.kernel.arithmetic.NumberValue) -> Root
    geogebra.kernel.GeoPoint Root(java.lang.String,geogebra.kernel.GeoFunction,geogebra.kernel.arithmetic.NumberValue,geogebra.kernel.arithmetic.NumberValue) -> Root
    geogebra.kernel.GeoPoint[] Extremum(java.lang.String[],geogebra.kernel.GeoFunction) -> Extremum
    geogebra.kernel.GeoPoint[] TurningPoint(java.lang.String[],geogebra.kernel.GeoFunction) -> TurningPoint
    geogebra.kernel.GeoNumeric AffineRatio(java.lang.String,geogebra.kernel.GeoPoint,geogebra.kernel.GeoPoint,geogebra.kernel.GeoPoint) -> AffineRatio
    geogebra.kernel.GeoNumeric CrossRatio(java.lang.String,geogebra.kernel.GeoPoint,geogebra.kernel.GeoPoint,geogebra.kernel.GeoPoint,geogebra.kernel.GeoPoint) -> CrossRatio
    geogebra.kernel.GeoVector CurvatureVector(java.lang.String,geogebra.kernel.GeoPoint,geogebra.kernel.GeoFunction) -> CurvatureVector
    geogebra.kernel.GeoVector CurvatureVectorCurve(java.lang.String,geogebra.kernel.GeoPoint,geogebra.kernel.GeoCurveCartesian) -> CurvatureVectorCurve
    geogebra.kernel.GeoNumeric Curvature(java.lang.String,geogebra.kernel.GeoPoint,geogebra.kernel.GeoFunction) -> Curvature
    geogebra.kernel.GeoNumeric CurvatureCurve(java.lang.String,geogebra.kernel.GeoPoint,geogebra.kernel.GeoCurveCartesian) -> CurvatureCurve
    geogebra.kernel.GeoConic OsculatingCircle(java.lang.String,geogebra.kernel.GeoPoint,geogebra.kernel.GeoFunction) -> OsculatingCircle
    geogebra.kernel.GeoConic OsculatingCircleCurve(java.lang.String,geogebra.kernel.GeoPoint,geogebra.kernel.GeoCurveCartesian) -> OsculatingCircleCurve
    geogebra.kernel.GeoNumeric FunctionLength(java.lang.String,geogebra.kernel.GeoFunction,geogebra.kernel.GeoNumeric,geogebra.kernel.GeoNumeric) -> FunctionLength
    geogebra.kernel.GeoNumeric FunctionLength2Points(java.lang.String,geogebra.kernel.GeoFunction,geogebra.kernel.GeoPoint,geogebra.kernel.GeoPoint) -> FunctionLength2Points
    geogebra.kernel.GeoNumeric CurveLength(java.lang.String,geogebra.kernel.GeoCurveCartesian,geogebra.kernel.GeoNumeric,geogebra.kernel.GeoNumeric) -> CurveLength
    geogebra.kernel.GeoNumeric CurveLength2Points(java.lang.String,geogebra.kernel.GeoCurveCartesian,geogebra.kernel.GeoPoint,geogebra.kernel.GeoPoint) -> CurveLength2Points
    geogebra.kernel.GeoLine Tangent(java.lang.String,geogebra.kernel.GeoPoint,geogebra.kernel.GeoCurveCartesian) -> Tangent
    double chop(double) -> chop
    boolean isZero(double) -> isZero
    boolean isZero(double[]) -> isZero
    boolean isEqual(double,double) -> isEqual
    boolean isEqual(double,double,double) -> isEqual
    boolean isGreater(double,double) -> isGreater
    boolean isGreaterEqual(double,double) -> isGreaterEqual
    boolean isEqual(double[],double[]) -> isEqual
    boolean isInteger(double) -> isInteger
    double convertToAngleValue(double) -> convertToAngleValue
    double maxAbs(double[]) -> maxAbs
    void copy(double[],double[]) -> copy
    void negative(double[],double[]) -> negative
    void divide(double[],double,double[]) -> divide
    java.lang.StringBuffer buildImplicitVarPart(double[],java.lang.String[],boolean) -> buildImplicitVarPart
    java.lang.StringBuffer buildImplicitEquation(double[],java.lang.String[],boolean) -> buildImplicitEquation
    java.lang.StringBuffer buildLHS(double[],java.lang.String[],boolean) -> buildLHS
    java.lang.StringBuffer buildExplicitConicEquation(double[],java.lang.String[],int,boolean) -> buildExplicitConicEquation
    java.lang.StringBuffer buildExplicitLineEquation(double[],java.lang.String[]) -> buildExplicitLineEquation
    java.lang.String formatCoeff(double) -> formatCoeff
    java.lang.String format(double) -> format
    java.lang.String formatPiE(double,java.text.NumberFormat) -> formatPiE
    java.lang.StringBuffer formatSigned(double) -> formatSigned
    java.lang.StringBuffer formatAngle(double) -> formatAngle
    char sign(double) -> sign
    long gcd(long,long) -> gcd
    long gcd(long[]) -> gcd
    double roundToScale(double,double) -> roundToScale
    double checkInteger(double) -> checkInteger
    java.lang.String getConstructionXML() -> getConstructionXML
    boolean isTranslateCommandName() -> isTranslateCommandName
    void setTranslateCommandName(boolean) -> setTranslateCommandName
    boolean isContinuous() -> isContinuous
    void setContinuous(boolean) -> setContinuous
    boolean isAllowVisibilitySideEffects() -> isAllowVisibilitySideEffects
    void setAllowVisibilitySideEffects(boolean) -> setAllowVisibilitySideEffects
    boolean isMacroKernel() -> isMacroKernel
geogebra.kernel.LimitedPath -> geogebra.kernel.aX:
    boolean allowOutlyingIntersections() -> allowOutlyingIntersections
    void setAllowOutlyingIntersections(boolean) -> setAllowOutlyingIntersections
    void setKeepTypeOnGeometricTransform(boolean) -> setKeepTypeOnGeometricTransform
    geogebra.kernel.GeoElement[] createTransformedObject(int,java.lang.String,geogebra.kernel.GeoPoint,geogebra.kernel.GeoLine,geogebra.kernel.GeoVector,geogebra.kernel.arithmetic.NumberValue) -> createTransformedObject
geogebra.kernel.Locateable -> geogebra.kernel.aG:
    void setStartPoint(geogebra.kernel.GeoPoint) -> setStartPoint
    void removeStartPoint(geogebra.kernel.GeoPoint) -> removeStartPoint
    geogebra.kernel.GeoPoint getStartPoint() -> getStartPoint
    void setStartPoint(geogebra.kernel.GeoPoint,int) -> setStartPoint
    geogebra.kernel.GeoPoint[] getStartPoints() -> getStartPoints
    void initStartPoint(geogebra.kernel.GeoPoint,int) -> initStartPoint
    void setWaitForStartPoint() -> setWaitForStartPoint
    geogebra.kernel.GeoElement toGeoElement() -> toGeoElement
geogebra.kernel.Macro -> geogebra.kernel.Macro:
    geogebra.kernel.Kernel kernel -> a
    java.lang.String cmdName -> a
    java.lang.String toolName -> b
    java.lang.String toolHelp -> c
    java.lang.String iconFileName -> d
    boolean showInToolBar -> a
    geogebra.kernel.Construction macroCons -> a
    geogebra.kernel.GeoElement[] macroInput -> a
    geogebra.kernel.GeoElement[] macroOutput -> b
    java.lang.String[] macroInputLabels -> a
    java.lang.String[] macroOutputLabels -> b
    java.lang.Class[] inputTypes -> a
    java.util.LinkedList usingAlgos -> a
    boolean wantsEuclidianViewUpdate -> b
    boolean wantsEuclidianViewUpdateFirstTime -> c
    geogebra.kernel.GeoElement[] getMacroInput() -> getMacroInput
    geogebra.kernel.GeoElement[] getMacroOutput() -> getMacroOutput
    boolean isInMacroConstruction(geogebra.kernel.GeoElement) -> isInMacroConstruction
    geogebra.kernel.Construction getMacroConstruction() -> getMacroConstruction
    void initMacro(geogebra.kernel.Construction,java.lang.String[],java.lang.String[]) -> initMacro
    void initInputOutput() -> initInputOutput
    void initMacro(geogebra.kernel.GeoElement[],geogebra.kernel.GeoElement[]) -> initMacro
    void addDependentElement(geogebra.kernel.GeoElement,java.util.TreeSet) -> addDependentElement
    void addSpecialInputElement(geogebra.kernel.GeoElement,java.util.TreeSet) -> addSpecialInputElement
    java.lang.String buildMacroXML(geogebra.kernel.Kernel,java.util.TreeSet) -> buildMacroXML
    geogebra.kernel.Construction createMacroConstruction(java.lang.String) -> createMacroConstruction
    void registerAlgorithm(geogebra.kernel.AlgoMacro) -> registerAlgorithm
    void unregisterAlgorithm(geogebra.kernel.AlgoMacro) -> unregisterAlgorithm
    boolean isUsed() -> isUsed
    void setUnused() -> setUnused
    java.lang.Class[] getInputTypes() -> getInputTypes
    java.lang.String getToolHelp() -> getToolHelp
    java.lang.String getNeededTypesString() -> getNeededTypesString
    void setToolHelp(java.lang.String) -> setToolHelp
    java.lang.String getCommandName() -> getCommandName
    void setCommandName(java.lang.String) -> setCommandName
    java.lang.String getToolName() -> getToolName
    java.lang.String getToolOrCommandName() -> getToolOrCommandName
    void setToolName(java.lang.String) -> setToolName
    void setIconFileName(java.lang.String) -> setIconFileName
    java.lang.String getIconFileName() -> getIconFileName
    java.lang.String toString() -> toString
    java.lang.String getXML() -> getXML
    boolean isShowInToolBar() -> isShowInToolBar
    void setShowInToolBar(boolean) -> setShowInToolBar
    java.util.ArrayList getUsedMacros() -> getUsedMacros
    boolean wantsEuclidianViewUpdate() -> wantsEuclidianViewUpdate
geogebra.kernel.MacroConstruction -> geogebra.kernel.bS:
    geogebra.kernel.Construction parentCons -> a
    java.util.HashSet reservedLabels -> a
    boolean globalVariableLookup -> a
    void loadXML(java.lang.String) -> a
    void addReservedLabel(java.lang.String) -> b
    geogebra.kernel.GeoElement lookupLabel(java.lang.String) -> lookupLabel
    boolean isReservedLabel(java.lang.String) -> a
    void setGlobalVariableLookup(boolean) -> a
geogebra.kernel.MacroKernel -> geogebra.kernel.aN:
    geogebra.kernel.Kernel parentKernel -> a
    geogebra.kernel.MacroConstruction macroCons -> a
    boolean isMacroKernel() -> isMacroKernel
    geogebra.kernel.Kernel getParentKernel() -> a
    void addReservedLabel(java.lang.String) -> a
    void setGlobalVariableLookup(boolean) -> a
    void loadXML(java.lang.String) -> b
    geogebra.kernel.GeoElement lookupLabel(java.lang.String) -> lookupLabel
    double getXmax() -> getXmax
    double getXmin() -> getXmin
    double getXscale() -> getXscale
    double getYmax() -> getYmax
    double getYmin() -> getYmin
    double getYscale() -> getYscale
    void addMacro(geogebra.kernel.Macro) -> addMacro
    geogebra.kernel.Macro getMacro(java.lang.String) -> getMacro
geogebra.kernel.MacroManager -> geogebra.kernel.bQ:
    java.util.HashMap macroMap -> a
    java.util.ArrayList macroList -> a
    void addMacro(geogebra.kernel.Macro) -> a
    geogebra.kernel.Macro getMacro(java.lang.String) -> a
    void removeMacro(geogebra.kernel.Macro) -> b
    void removeAllMacros() -> a
    void setMacroCommandName(geogebra.kernel.Macro,java.lang.String) -> a
    geogebra.kernel.Macro getMacro(int) -> a
    int getMacroID(geogebra.kernel.Macro) -> a
    void setAllMacrosUnused() -> b
    int getMacroNumber() -> a
    java.util.ArrayList getAllMacros() -> a
    java.lang.String getMacroXML(java.util.ArrayList) -> a
geogebra.kernel.Mirrorable -> geogebra.kernel.Mirrorable:
    void mirror(geogebra.kernel.GeoPoint) -> mirror
    void mirror(geogebra.kernel.GeoLine) -> mirror
    geogebra.kernel.GeoElement toGeoElement() -> toGeoElement
geogebra.kernel.MyPoint -> geogebra.kernel.cT:
    double x -> a
    double y -> b
    boolean lineTo -> a
    double distSqr(double,double) -> a
    boolean isEqual(double,double) -> a
geogebra.kernel.NameDescriptionComparator -> geogebra.kernel.bz:
    int compare(java.lang.Object,java.lang.Object) -> compare
geogebra.kernel.ParametricCurve -> geogebra.kernel.cE:
    double getMinParameter() -> getMinParameter
    double getMaxParameter() -> getMaxParameter
    geogebra.kernel.roots.RealRootFunction getRealRootFunctionX() -> getRealRootFunctionX
    geogebra.kernel.roots.RealRootFunction getRealRootFunctionY() -> getRealRootFunctionY
    void evaluateCurve(double,double[]) -> evaluateCurve
    geogebra.kernel.GeoVec2D evaluateCurve(double) -> evaluateCurve
    boolean isFunctionInX() -> isFunctionInX
    geogebra.kernel.GeoElement toGeoElement() -> toGeoElement
geogebra.kernel.ParametricCurveDistanceFunction -> geogebra.kernel.cZ:
    double px -> a
    double py -> b
    geogebra.kernel.roots.RealRootFunction funX -> a
    geogebra.kernel.roots.RealRootFunction funY -> b
    void setDistantPoint(double,double) -> a
    double evaluate(double) -> evaluate
geogebra.kernel.Path -> geogebra.kernel.Path:
    void pointChanged(geogebra.kernel.GeoPoint) -> pointChanged
    void pathChanged(geogebra.kernel.GeoPoint) -> pathChanged
    boolean isOnPath(geogebra.kernel.GeoPoint,double) -> isOnPath
    geogebra.kernel.GeoElement toGeoElement() -> toGeoElement
    double getMinParameter() -> getMinParameter
    double getMaxParameter() -> getMaxParameter
    boolean isClosedPath() -> isClosedPath
    geogebra.kernel.PathMover createPathMover() -> createPathMover
geogebra.kernel.PathMover -> geogebra.kernel.cY:
    void init(geogebra.kernel.GeoPoint) -> b
    boolean getNext(geogebra.kernel.GeoPoint) -> a
    boolean hasNext() -> a
    void resetStartParameter() -> a
    boolean hasPositiveOrientation() -> b
    boolean smallerStep() -> c
    boolean biggerStep() -> d
    void stepBack() -> b
geogebra.kernel.PathMoverGeneric -> geogebra.kernel.X:
    geogebra.kernel.Path path -> a
    double start_param -> a
    double start_paramUP -> b
    double curr_param -> c
    double last_param -> d
    double param_extent -> e
    double min_param -> f
    double max_param -> g
    double max_step_width -> h
    double init_step_width -> i
    double step_width -> j
    double offset -> k
    int mode -> a
    boolean posOrientation -> a
    boolean maxBorderSet -> b
    boolean minBorderSet -> c
    void init(geogebra.kernel.GeoPoint) -> b
    void init(double) -> a
    void resetStartParameter() -> a
    boolean getNext(geogebra.kernel.GeoPoint) -> a
    void calcPoint(geogebra.kernel.GeoPoint) -> a
    boolean hasNext() -> a
    boolean hasPositiveOrientation() -> b
    boolean smallerStep() -> c
    boolean biggerStep() -> d
    boolean changeStep(double) -> a
    void stepBack() -> b
    double infFunction(double) -> a
    double inverseInfFunction(double) -> b
geogebra.kernel.PathMoverLocus -> geogebra.kernel.O:
    java.util.ArrayList myPointList -> a
    void calcPoint(geogebra.kernel.GeoPoint) -> a
geogebra.kernel.PathParameter -> geogebra.kernel.cf:
    double t -> a
    int branch -> a
    int pathType -> b
    void set(geogebra.kernel.PathParameter) -> a
geogebra.kernel.PointPair -> geogebra.kernel.ag:
    int indexP -> a
    boolean isPalive -> a
    int indexQ -> b
    boolean isQonPath -> b
    double dist -> a
    geogebra.kernel.PointPair next -> a
geogebra.kernel.PointPairList -> geogebra.kernel.bs:
    geogebra.kernel.PointPair head -> a
    boolean isEmpty() -> a
    void clear() -> a
    void insertPointPair(int,boolean,int,boolean,double) -> a
    boolean smallerThan(geogebra.kernel.PointPair,geogebra.kernel.PointPair) -> a
    boolean smallerThan2(geogebra.kernel.PointPair,geogebra.kernel.PointPair) -> b
    void removeAllPairs(geogebra.kernel.PointPair) -> a
    geogebra.kernel.PointPair getHead() -> a
geogebra.kernel.PointRotateable -> geogebra.kernel.PointRotateable:
    void rotate(geogebra.kernel.arithmetic.NumberValue,geogebra.kernel.GeoPoint) -> rotate
geogebra.kernel.Relation -> geogebra.kernel.bg:
    geogebra.Application app -> a
    geogebra.kernel.Kernel kernel -> a
    geogebra.kernel.Construction cons -> a
    java.lang.String relation(geogebra.kernel.GeoElement,geogebra.kernel.GeoElement) -> a
    java.lang.String relation(geogebra.kernel.arithmetic.NumberValue,geogebra.kernel.arithmetic.NumberValue) -> a
    java.lang.String relation(geogebra.kernel.GeoSegment,geogebra.kernel.GeoSegment) -> a
    java.lang.String relation(geogebra.kernel.GeoPoint,geogebra.kernel.GeoPoint) -> a
    java.lang.String relation(geogebra.kernel.GeoVector,geogebra.kernel.GeoVector) -> a
    java.lang.String relation(geogebra.kernel.GeoPoint,geogebra.kernel.Path) -> a
    java.lang.String relation(geogebra.kernel.GeoLine,geogebra.kernel.GeoLine) -> a
    java.lang.String relation(geogebra.kernel.GeoLine,geogebra.kernel.GeoConic) -> a
    java.lang.String relation(geogebra.kernel.GeoConicPart,geogebra.kernel.GeoConicPart) -> a
    java.lang.String relation(geogebra.kernel.GeoConic,geogebra.kernel.GeoConic) -> a
    java.lang.String equalityString(geogebra.kernel.GeoElement,geogebra.kernel.GeoElement,boolean) -> a
    java.lang.String linDependencyString(geogebra.kernel.GeoElement,geogebra.kernel.GeoElement,boolean) -> b
    java.lang.String incidenceString(geogebra.kernel.GeoPoint,geogebra.kernel.GeoElement,boolean) -> a
    java.lang.String parallelString(geogebra.kernel.GeoLine,geogebra.kernel.GeoLine) -> b
    java.lang.String perpendicularString(geogebra.kernel.GeoLine,geogebra.kernel.GeoLine) -> c
    java.lang.String intersectString(geogebra.kernel.GeoElement,geogebra.kernel.GeoElement,boolean) -> c
    java.lang.String lineConicString(geogebra.kernel.GeoLine,geogebra.kernel.GeoConic,int) -> a
geogebra.kernel.Rotateable -> geogebra.kernel.Rotateable:
    void rotate(geogebra.kernel.arithmetic.NumberValue) -> rotate
    geogebra.kernel.GeoElement toGeoElement() -> toGeoElement
geogebra.kernel.Traceable -> geogebra.kernel.cO:
    boolean getTrace() -> getTrace
    void setTrace(boolean) -> setTrace
    void updateRepaint() -> updateRepaint
geogebra.kernel.Translateable -> geogebra.kernel.Translateable:
    void translate(geogebra.kernel.GeoVector) -> translate
    geogebra.kernel.GeoElement toGeoElement() -> toGeoElement
    boolean isTranslateable() -> isTranslateable
geogebra.kernel.UndoManager -> geogebra.kernel.bb:
    geogebra.kernel.Construction construction -> a
    java.util.LinkedList undoInfoList -> a
    java.util.ListIterator iterator -> a
    geogebra.io.MyXMLio xmlio -> a
    java.lang.String lastUndoXML -> a
    void initUndoInfo() -> a
    void undo() -> b
    void redo() -> c
    void restoreCurrentUndoInfo() -> d
    void storeUndoInfo() -> e
    void loadUndoInfo(java.lang.Object) -> a
    boolean undoPossible() -> a
    boolean redoPossible() -> b
    void processXML(java.lang.String) -> a
geogebra.kernel.arithmetic.Assignment -> geogebra.kernel.arithmetic.h:
    java.lang.String var -> a
    java.lang.String getVariable() -> a
    java.lang.String toString() -> toString
geogebra.kernel.arithmetic.BooleanValue -> geogebra.kernel.arithmetic.m:
    geogebra.kernel.arithmetic.MyBoolean getMyBoolean() -> getMyBoolean
    boolean getBoolean() -> getBoolean
geogebra.kernel.arithmetic.Command -> geogebra.kernel.arithmetic.t:
    java.util.ArrayList args -> a
    java.lang.String name -> a
    geogebra.kernel.Kernel kernel -> a
    geogebra.Application app -> a
    geogebra.kernel.GeoElement evalGeo -> a
    geogebra.kernel.Macro macro -> a
    geogebra.kernel.Kernel getKernel() -> a
    void addArgument(geogebra.kernel.arithmetic.ValidExpression) -> a
    java.lang.String getVariableName(int) -> a
    geogebra.kernel.arithmetic.ExpressionNode[] getArguments() -> a
    geogebra.kernel.arithmetic.ExpressionNode getArgument(int) -> a
    void setArgument(int,geogebra.kernel.arithmetic.ExpressionNode) -> a
    int getArgumentNumber() -> a
    java.lang.String getName() -> a
    java.lang.String toString() -> toString
    geogebra.kernel.arithmetic.ExpressionValue evaluate() -> evaluate
    void resolveVariables() -> resolveVariables
    boolean isConstant() -> isConstant
    boolean isLeaf() -> isLeaf
    boolean isNumberValue() -> isNumberValue
    boolean isVectorValue() -> isVectorValue
    boolean isBooleanValue() -> isBooleanValue
    boolean isPolynomialInstance() -> isPolynomialInstance
    boolean isTextValue() -> isTextValue
    geogebra.kernel.arithmetic.ExpressionValue deepCopy(geogebra.kernel.Kernel) -> deepCopy
    java.util.HashSet getVariables() -> getVariables
    java.lang.String toValueString() -> toValueString
    java.lang.String toLaTeXString(boolean) -> toLaTeXString
    boolean isExpressionNode() -> isExpressionNode
    boolean contains(geogebra.kernel.arithmetic.ExpressionValue) -> contains
    boolean isListValue() -> isListValue
    geogebra.kernel.Macro getMacro() -> a
    void setMacro(geogebra.kernel.Macro) -> a
geogebra.kernel.arithmetic.Equation -> geogebra.kernel.arithmetic.Equation:
    geogebra.kernel.arithmetic.ExpressionNode lhs -> a
    geogebra.kernel.arithmetic.ExpressionNode rhs -> b
    geogebra.kernel.arithmetic.Polynomial leftPoly -> a
    geogebra.kernel.arithmetic.Polynomial rightPoly -> b
    geogebra.kernel.arithmetic.Polynomial normalForm -> c
    geogebra.kernel.Kernel kernel -> a
    geogebra.kernel.arithmetic.ExpressionNode getRHS() -> getRHS
    geogebra.kernel.arithmetic.ExpressionNode getLHS() -> getLHS
    void initEquation() -> initEquation
    geogebra.kernel.arithmetic.Polynomial getNormalForm() -> getNormalForm
    int degree() -> degree
    geogebra.kernel.arithmetic.ExpressionValue getCoefficient(java.lang.String) -> getCoefficient
    double getCoeffValue(java.lang.String) -> getCoeffValue
    geogebra.kernel.GeoElement[] getGeoElementVariables() -> getGeoElementVariables
    boolean isIndependent() -> isIndependent
    boolean isExplicit(java.lang.String) -> isExplicit
    boolean isImplicit() -> isImplicit
    java.lang.String toString() -> toString
geogebra.kernel.arithmetic.ExpressionNode -> geogebra.kernel.arithmetic.ExpressionNode:
    geogebra.Application app -> a
    geogebra.kernel.Kernel kernel -> a
    geogebra.kernel.arithmetic.ExpressionValue left -> a
    geogebra.kernel.arithmetic.ExpressionValue right -> b
    int operation -> a
    boolean forceVector -> a
    boolean forcePoint -> b
    boolean holdsLaTeXtext -> c
    boolean leaf -> d
    geogebra.kernel.Kernel getKernel() -> getKernel
    int getOperation() -> getOperation
    void setOperation(int) -> setOperation
    void setHoldsLaTeXtext(boolean) -> setHoldsLaTeXtext
    geogebra.kernel.arithmetic.ExpressionValue getLeft() -> getLeft
    void setLeft(geogebra.kernel.arithmetic.ExpressionValue) -> setLeft
    geogebra.kernel.arithmetic.ExpressionNode getLeftTree() -> getLeftTree
    geogebra.kernel.arithmetic.ExpressionValue getRight() -> getRight
    void setRight(geogebra.kernel.arithmetic.ExpressionValue) -> setRight
    geogebra.kernel.arithmetic.ExpressionNode getRightTree() -> getRightTree
    geogebra.kernel.arithmetic.ExpressionValue deepCopy(geogebra.kernel.Kernel) -> deepCopy
    geogebra.kernel.arithmetic.ExpressionNode getCopy(geogebra.kernel.Kernel) -> getCopy
    geogebra.kernel.arithmetic.ExpressionValue copy(geogebra.kernel.arithmetic.ExpressionValue,geogebra.kernel.Kernel) -> copy
    void simplifyLeafs() -> simplifyLeafs
    void simplifyConstants() -> simplifyConstants
    geogebra.kernel.arithmetic.ExpressionValue evaluate() -> evaluate
    geogebra.kernel.arithmetic.MyBoolean evalEquals(geogebra.kernel.arithmetic.ExpressionValue,geogebra.kernel.arithmetic.ExpressionValue) -> evalEquals
    void resolveVariables() -> resolveVariables
    void doResolveVariables() -> doResolveVariables
    boolean includesPolynomial() -> includesPolynomial
    boolean isFunctionInX() -> isFunctionInX
    boolean includesDivisionBy(geogebra.kernel.arithmetic.ExpressionValue) -> includesDivisionBy
    int replacePolynomials(geogebra.kernel.arithmetic.FunctionVariable) -> replacePolynomials
    geogebra.kernel.arithmetic.ExpressionNode replace(geogebra.kernel.arithmetic.ExpressionValue,geogebra.kernel.arithmetic.ExpressionValue) -> replace
    void replaceChildrenByValues(geogebra.kernel.GeoElement) -> replaceChildrenByValues
    boolean contains(geogebra.kernel.arithmetic.ExpressionValue) -> contains
    void makePolynomialTree() -> makePolynomialTree
    boolean isConstant() -> isConstant
    boolean isVectorValue() -> isVectorValue
    void forceVector() -> forceVector
    void forcePoint() -> forcePoint
    boolean hasOperations() -> hasOperations
    java.util.HashSet getVariables() -> getVariables
    geogebra.kernel.GeoElement[] getGeoElementVariables() -> getGeoElementVariables
    boolean isLeaf() -> isLeaf
    boolean isSingleVariable() -> isSingleVariable
    java.lang.String getCASstring(int,boolean) -> getCASstring
    java.lang.String printCASstring(boolean) -> printCASstring
    java.lang.String toString() -> toString
    java.lang.String toValueString() -> toValueString
    java.lang.String toLaTeXString(boolean) -> toLaTeXString
    java.lang.String operationToString(java.lang.String,java.lang.String,boolean) -> operationToString
    int opID(geogebra.kernel.arithmetic.ExpressionValue) -> opID
    boolean isNumberValue() -> isNumberValue
    boolean isBooleanValue() -> isBooleanValue
    boolean isListValue() -> isListValue
    boolean isPolynomialInstance() -> isPolynomialInstance
    boolean isTextValue() -> isTextValue
    boolean isExpressionNode() -> isExpressionNode
geogebra.kernel.arithmetic.ExpressionValue -> geogebra.kernel.arithmetic.ExpressionValue:
    boolean isConstant() -> isConstant
    boolean isLeaf() -> isLeaf
    boolean isNumberValue() -> isNumberValue
    boolean isVectorValue() -> isVectorValue
    boolean isListValue() -> isListValue
    boolean isBooleanValue() -> isBooleanValue
    boolean isPolynomialInstance() -> isPolynomialInstance
    boolean isTextValue() -> isTextValue
    boolean isExpressionNode() -> isExpressionNode
    boolean isGeoElement() -> isGeoElement
    boolean isVariable() -> isVariable
    boolean isInTree() -> isInTree
    void setInTree(boolean) -> setInTree
    boolean contains(geogebra.kernel.arithmetic.ExpressionValue) -> contains
    geogebra.kernel.arithmetic.ExpressionValue deepCopy(geogebra.kernel.Kernel) -> deepCopy
    geogebra.kernel.arithmetic.ExpressionValue evaluate() -> evaluate
    java.util.HashSet getVariables() -> getVariables
    java.lang.String toValueString() -> toValueString
    java.lang.String toLaTeXString(boolean) -> toLaTeXString
    void resolveVariables() -> resolveVariables
geogebra.kernel.arithmetic.Function -> geogebra.kernel.arithmetic.Function:
    geogebra.kernel.arithmetic.ExpressionNode expression -> a
    geogebra.kernel.arithmetic.FunctionVariable fVar -> a
    boolean isBooleanFunction -> a
    boolean isConstantFunction -> b
    geogebra.Application app -> a
    geogebra.kernel.Kernel kernel -> a
    boolean interval -> c
    double a -> a
    double b -> b
    java.lang.StringBuffer sb -> a
    geogebra.kernel.arithmetic.ExpressionNode factorParentExp -> b
    java.util.LinkedList symbolicPolyFactorList -> a
    java.util.LinkedList numericPolyFactorList -> b
    boolean symbolicPolyFactorListDefined -> d
    geogebra.kernel.arithmetic.ExpressionNode diffParentExp -> c
    geogebra.kernel.arithmetic.ExpressionNode intParentExp -> d
    geogebra.util.FastHashMapKeyless derivativeMap -> a
    geogebra.kernel.arithmetic.Function integralFun -> a
    geogebra.kernel.GeoFunction geoDeriv -> a
    geogebra.kernel.Kernel getKernel() -> getKernel
    geogebra.kernel.arithmetic.ExpressionValue deepCopy(geogebra.kernel.Kernel) -> deepCopy
    geogebra.kernel.arithmetic.ExpressionNode getExpression() -> getExpression
    void resolveVariables() -> resolveVariables
    void replaceChildrenByValues(geogebra.kernel.GeoElement) -> replaceChildrenByValues
    void setExpression(geogebra.kernel.arithmetic.ExpressionNode) -> setExpression
    void setExpression(geogebra.kernel.arithmetic.ExpressionNode,geogebra.kernel.arithmetic.FunctionVariable) -> setExpression
    geogebra.kernel.arithmetic.Function getFunction() -> getFunction
    geogebra.kernel.arithmetic.FunctionVariable getFunctionVariable() -> getFunctionVariable
    void initFunction() -> initFunction
    void initType() -> initType
    boolean isBooleanFunction() -> isBooleanFunction
    boolean isConstantFunction() -> isConstantFunction
    boolean isConstant() -> isConstant
    boolean isLeaf() -> isLeaf
    geogebra.kernel.arithmetic.ExpressionValue evaluate() -> evaluate
    double evaluate(double) -> evaluate
    boolean setInterval(double,double) -> setInterval
    boolean evaluateBoolean(double) -> evaluateBoolean
    java.util.HashSet getVariables() -> getVariables
    geogebra.kernel.GeoElement[] getGeoElementVariables() -> getGeoElementVariables
    java.lang.String toString() -> toString
    java.lang.String toValueString() -> toValueString
    java.lang.String toLaTeXString(boolean) -> toLaTeXString
    void translate(double,double) -> translate
    void translateX(geogebra.kernel.arithmetic.ExpressionNode,double) -> translateX
    geogebra.kernel.arithmetic.ExpressionNode shiftXnode(double) -> shiftXnode
    void translateY(double) -> translateY
    void addNumber(double) -> addNumber
    java.util.LinkedList getPolynomialFactors(boolean) -> getPolynomialFactors
    java.util.LinkedList getSymbolicPolynomialDerivativeFactors(int,boolean) -> getSymbolicPolynomialDerivativeFactors
    geogebra.kernel.arithmetic.PolyFunction getNumericPolynomialDerivative(int) -> getNumericPolynomialDerivative
    java.util.LinkedList getSymbolicPolynomialFactors(boolean) -> getSymbolicPolynomialFactors
    java.util.LinkedList getNumericPolynomialFactors(boolean) -> getNumericPolynomialFactors
    boolean addPolynomialFactors(geogebra.kernel.arithmetic.ExpressionValue,java.util.List,boolean,boolean) -> addPolynomialFactors
    geogebra.kernel.arithmetic.PolyFunction expandToPolyFunction(geogebra.kernel.arithmetic.ExpressionValue,boolean) -> expandToPolyFunction
    geogebra.kernel.arithmetic.ExpressionNode evaluateToExpressionNode(java.lang.String) -> evaluateToExpressionNode
    geogebra.kernel.GeoFunction getGeoDerivative(int) -> getGeoDerivative
    geogebra.kernel.arithmetic.Function getDerivative(int) -> getDerivative
    geogebra.kernel.arithmetic.Function getIntegral() -> getIntegral
    geogebra.kernel.arithmetic.Function derivative(int) -> derivative
    void difference(geogebra.kernel.arithmetic.Function,geogebra.kernel.arithmetic.Function,geogebra.kernel.arithmetic.Function) -> difference
    void difference(geogebra.kernel.arithmetic.Function,geogebra.kernel.GeoLine,geogebra.kernel.arithmetic.Function) -> difference
    geogebra.kernel.arithmetic.Function integral() -> integral
    boolean isNumberValue() -> isNumberValue
    boolean isVectorValue() -> isVectorValue
    boolean isBooleanValue() -> isBooleanValue
    boolean isListValue() -> isListValue
    boolean isPolynomialInstance() -> isPolynomialInstance
    boolean isTextValue() -> isTextValue
    boolean isExpressionNode() -> isExpressionNode
    boolean contains(geogebra.kernel.arithmetic.ExpressionValue) -> contains
    geogebra.kernel.roots.RealRootDerivFunction getRealRootDerivFunction() -> getRealRootDerivFunction
    double getIntervalMin() -> getIntervalMin
    double getIntervalMax() -> getIntervalMax
    boolean hasInterval() -> hasInterval
    boolean includesDivisionByVariable() -> includesDivisionByVariable
geogebra.kernel.arithmetic.Function$DerivFunction -> geogebra.kernel.arithmetic.a:
    geogebra.kernel.arithmetic.Function fun -> b
    geogebra.kernel.arithmetic.Function derivative -> c
    double[] ret -> a
    geogebra.kernel.arithmetic.Function this$0 -> a
    double[] evaluateDerivFunc(double) -> a
    double evaluate(double) -> evaluate
geogebra.kernel.arithmetic.FunctionVariable -> geogebra.kernel.arithmetic.f:
    java.lang.String varStr -> a
    boolean isConstant() -> isConstant
    void setVarString(java.lang.String) -> a
    java.lang.String toString() -> toString
geogebra.kernel.arithmetic.Functional -> geogebra.kernel.arithmetic.q:
    double evaluate(double) -> evaluate
    geogebra.kernel.arithmetic.Function getFunction() -> getFunction
    geogebra.kernel.GeoFunction getGeoDerivative(int) -> getGeoDerivative
geogebra.kernel.arithmetic.ListValue -> geogebra.kernel.arithmetic.e:
    geogebra.kernel.arithmetic.MyList getMyList() -> getMyList
geogebra.kernel.arithmetic.MyBoolean -> geogebra.kernel.arithmetic.j:
    boolean value -> a
    void setValue(boolean) -> a
    java.lang.String toString() -> toString
    boolean isConstant() -> isConstant
    boolean isLeaf() -> isLeaf
    void resolveVariables() -> resolveVariables
    boolean isNumberValue() -> isNumberValue
    boolean isVectorValue() -> isVectorValue
    boolean isBooleanValue() -> isBooleanValue
    boolean isPolynomialInstance() -> isPolynomialInstance
    boolean isTextValue() -> isTextValue
    geogebra.kernel.arithmetic.ExpressionValue deepCopy(geogebra.kernel.Kernel) -> deepCopy
    geogebra.kernel.arithmetic.ExpressionValue evaluate() -> evaluate
    java.util.HashSet getVariables() -> getVariables
    java.lang.String toValueString() -> toValueString
    java.lang.String toLaTeXString(boolean) -> toLaTeXString
    boolean isExpressionNode() -> isExpressionNode
    boolean isListValue() -> isListValue
    boolean contains(geogebra.kernel.arithmetic.ExpressionValue) -> contains
    geogebra.kernel.arithmetic.MyBoolean getMyBoolean() -> getMyBoolean
    boolean getBoolean() -> getBoolean
geogebra.kernel.arithmetic.MyDouble -> geogebra.kernel.arithmetic.g:
    double val -> a
    boolean isAngle -> a
    geogebra.kernel.Kernel kernel -> a
    geogebra.kernel.arithmetic.ExpressionValue deepCopy(geogebra.kernel.Kernel) -> deepCopy
    void set(double) -> a
    void resolveVariables() -> resolveVariables
    java.lang.String toString() -> toString
    java.lang.String toValueString() -> toValueString
    java.lang.String toLaTeXString(boolean) -> toLaTeXString
    void setAngle() -> a
    boolean isAngle() -> a
    void add(geogebra.kernel.arithmetic.MyDouble,geogebra.kernel.arithmetic.MyDouble,geogebra.kernel.arithmetic.MyDouble) -> a
    void sub(geogebra.kernel.arithmetic.MyDouble,geogebra.kernel.arithmetic.MyDouble,geogebra.kernel.arithmetic.MyDouble) -> b
    void mult(geogebra.kernel.arithmetic.MyDouble,geogebra.kernel.arithmetic.MyDouble,geogebra.kernel.arithmetic.MyDouble) -> c
    void div(geogebra.kernel.arithmetic.MyDouble,geogebra.kernel.arithmetic.MyDouble,geogebra.kernel.arithmetic.MyDouble) -> d
    void pow(geogebra.kernel.arithmetic.MyDouble,geogebra.kernel.arithmetic.MyDouble,geogebra.kernel.arithmetic.MyDouble) -> e
    geogebra.kernel.arithmetic.MyDouble cos() -> a
    geogebra.kernel.arithmetic.MyDouble sin() -> b
    geogebra.kernel.arithmetic.MyDouble tan() -> c
    geogebra.kernel.arithmetic.MyDouble acos() -> d
    geogebra.kernel.arithmetic.MyDouble asin() -> e
    geogebra.kernel.arithmetic.MyDouble atan() -> f
    geogebra.kernel.arithmetic.MyDouble log() -> g
    geogebra.kernel.arithmetic.MyDouble log10() -> h
    geogebra.kernel.arithmetic.MyDouble log2() -> i
    geogebra.kernel.arithmetic.MyDouble exp() -> j
    geogebra.kernel.arithmetic.MyDouble sqrt() -> k
    geogebra.kernel.arithmetic.MyDouble cbrt() -> l
    geogebra.kernel.arithmetic.MyDouble abs() -> m
    geogebra.kernel.arithmetic.MyDouble floor() -> n
    geogebra.kernel.arithmetic.MyDouble ceil() -> o
    geogebra.kernel.arithmetic.MyDouble round() -> p
    geogebra.kernel.arithmetic.MyDouble sgn() -> q
    geogebra.kernel.arithmetic.MyDouble cosh() -> r
    geogebra.kernel.arithmetic.MyDouble sinh() -> s
    geogebra.kernel.arithmetic.MyDouble tanh() -> t
    geogebra.kernel.arithmetic.MyDouble acosh() -> u
    geogebra.kernel.arithmetic.MyDouble asinh() -> v
    geogebra.kernel.arithmetic.MyDouble atanh() -> w
    geogebra.kernel.arithmetic.MyDouble factorial() -> x
    geogebra.kernel.arithmetic.MyDouble gamma() -> y
    geogebra.kernel.arithmetic.MyDouble apply(geogebra.kernel.arithmetic.Functional) -> a
    geogebra.kernel.arithmetic.MyDouble getNumber() -> getNumber
    boolean isConstant() -> isConstant
    java.util.HashSet getVariables() -> getVariables
    boolean isLeaf() -> isLeaf
    geogebra.kernel.arithmetic.ExpressionValue evaluate() -> evaluate
    double getDouble() -> getDouble
    geogebra.kernel.GeoElement toGeoElement() -> toGeoElement
    boolean isNumberValue() -> isNumberValue
    boolean isVectorValue() -> isVectorValue
    boolean isBooleanValue() -> isBooleanValue
    boolean isPolynomialInstance() -> isPolynomialInstance
    boolean isTextValue() -> isTextValue
    boolean isExpressionNode() -> isExpressionNode
    boolean isListValue() -> isListValue
    boolean contains(geogebra.kernel.arithmetic.ExpressionValue) -> contains
geogebra.kernel.arithmetic.MyList -> geogebra.kernel.arithmetic.d:
    geogebra.kernel.Kernel kernel -> a
    java.util.ArrayList listElements -> a
    void addListElement(geogebra.kernel.arithmetic.ExpressionNode) -> a
    void applyRight(int,geogebra.kernel.arithmetic.ExpressionValue) -> a
    void applyLeft(int,geogebra.kernel.arithmetic.ExpressionValue) -> b
    void apply(int,geogebra.kernel.arithmetic.ExpressionValue,boolean) -> a
    geogebra.kernel.arithmetic.ExpressionValue getCell(geogebra.kernel.arithmetic.MyList,int,int) -> a
    java.lang.String toString() -> toString
    int size() -> a
    void resolveVariables() -> resolveVariables
    geogebra.kernel.arithmetic.ExpressionNode getListElement(int) -> a
    geogebra.kernel.arithmetic.ExpressionValue evaluate() -> evaluate
    boolean isConstant() -> isConstant
    boolean isLeaf() -> isLeaf
    boolean isNumberValue() -> isNumberValue
    boolean isVectorValue() -> isVectorValue
    boolean isBooleanValue() -> isBooleanValue
    boolean isPolynomialInstance() -> isPolynomialInstance
    boolean isTextValue() -> isTextValue
    geogebra.kernel.arithmetic.ExpressionValue deepCopy(geogebra.kernel.Kernel) -> deepCopy
    java.util.HashSet getVariables() -> getVariables
    java.lang.String toValueString() -> toValueString
    java.lang.String toLaTeXString(boolean) -> toLaTeXString
    boolean isExpressionNode() -> isExpressionNode
    boolean isListValue() -> isListValue
    boolean contains(geogebra.kernel.arithmetic.ExpressionValue) -> contains
    geogebra.kernel.arithmetic.MyList getMyList() -> getMyList
geogebra.kernel.arithmetic.MySpecialDouble -> geogebra.kernel.arithmetic.c:
    java.lang.String strToString -> a
    java.lang.String toString() -> toString
geogebra.kernel.arithmetic.MyStringBuffer -> geogebra.kernel.arithmetic.u:
    java.lang.StringBuffer sb -> a
    void append(java.lang.String) -> a
    void insert(int,java.lang.String) -> a
    java.lang.String toString() -> toString
    void resolveVariables() -> resolveVariables
    boolean isConstant() -> isConstant
    boolean isLeaf() -> isLeaf
    boolean isNumberValue() -> isNumberValue
    boolean isVectorValue() -> isVectorValue
    boolean isBooleanValue() -> isBooleanValue
    boolean isPolynomialInstance() -> isPolynomialInstance
    boolean isTextValue() -> isTextValue
    geogebra.kernel.arithmetic.ExpressionValue deepCopy(geogebra.kernel.Kernel) -> deepCopy
    geogebra.kernel.arithmetic.ExpressionValue evaluate() -> evaluate
    java.util.HashSet getVariables() -> getVariables
    java.lang.String toValueString() -> toValueString
    java.lang.String toLaTeXString(boolean) -> toLaTeXString
    geogebra.kernel.arithmetic.MyStringBuffer getText() -> getText
    boolean isExpressionNode() -> isExpressionNode
    boolean isListValue() -> isListValue
    boolean contains(geogebra.kernel.arithmetic.ExpressionValue) -> contains
geogebra.kernel.arithmetic.MyVecNode -> geogebra.kernel.arithmetic.l:
    geogebra.kernel.arithmetic.ExpressionValue x -> a
    geogebra.kernel.arithmetic.ExpressionValue y -> b
    int mode -> a
    geogebra.kernel.Kernel kernel -> a
    geogebra.kernel.arithmetic.ExpressionValue deepCopy(geogebra.kernel.Kernel) -> deepCopy
    void resolveVariables() -> resolveVariables
    void setPolarCoords(geogebra.kernel.arithmetic.ExpressionValue,geogebra.kernel.arithmetic.ExpressionValue) -> a
    void setCoords(geogebra.kernel.arithmetic.ExpressionValue,geogebra.kernel.arithmetic.ExpressionValue) -> b
    double[] getCoords() -> a
    java.lang.String toString() -> toString
    java.lang.String toValueString() -> toValueString
    java.lang.String toLaTeXString(boolean) -> toLaTeXString
    geogebra.kernel.GeoVec2D getVector() -> getVector
    boolean isConstant() -> isConstant
    boolean isLeaf() -> isLeaf
    geogebra.kernel.arithmetic.ExpressionValue evaluate() -> evaluate
    java.util.HashSet getVariables() -> getVariables
    boolean isVectorValue() -> isVectorValue
    boolean isNumberValue() -> isNumberValue
    boolean isBooleanValue() -> isBooleanValue
    boolean isPolynomialInstance() -> isPolynomialInstance
    boolean isTextValue() -> isTextValue
    boolean isListValue() -> isListValue
    boolean isExpressionNode() -> isExpressionNode
    boolean contains(geogebra.kernel.arithmetic.ExpressionValue) -> contains
geogebra.kernel.arithmetic.NumberValue -> geogebra.kernel.arithmetic.NumberValue:
    geogebra.kernel.arithmetic.MyDouble getNumber() -> getNumber
    double getDouble() -> getDouble
    geogebra.kernel.GeoElement toGeoElement() -> toGeoElement
geogebra.kernel.arithmetic.Parametric -> geogebra.kernel.arithmetic.b:
    geogebra.kernel.arithmetic.ExpressionNode P -> a
    geogebra.kernel.arithmetic.ExpressionNode v -> b
    java.lang.String parameter -> a
    geogebra.kernel.Kernel kernel -> a
    geogebra.kernel.arithmetic.ExpressionNode getP() -> a
    geogebra.kernel.arithmetic.ExpressionNode getv() -> b
    java.lang.String getParameter() -> a
    java.lang.String toString() -> toString
geogebra.kernel.arithmetic.PolyFunction -> geogebra.kernel.arithmetic.k:
    double[] coeffs -> a
    int degree -> a
    geogebra.kernel.arithmetic.PolyFunction derivative -> a
    double[] ret -> b
    double[] getCoeffsCopy() -> a
    boolean updateCoeffValues() -> a
    geogebra.kernel.arithmetic.PolyFunction getDerivative() -> a
    geogebra.kernel.arithmetic.PolyFunction buildDerivative() -> b
    double[] evaluateDerivFunc(double) -> a
    double evaluate(double) -> evaluate
geogebra.kernel.arithmetic.Polynomial -> geogebra.kernel.arithmetic.i:
    java.util.ArrayList terms -> a
    geogebra.kernel.Kernel kernel -> a
    geogebra.kernel.arithmetic.ExpressionValue deepCopy(geogebra.kernel.Kernel) -> deepCopy
    geogebra.kernel.arithmetic.Term getTerm(int) -> a
    int length() -> a
    boolean isX() -> a
    void append(geogebra.kernel.arithmetic.Term) -> a
    void add(geogebra.kernel.arithmetic.Polynomial) -> a
    void sub(geogebra.kernel.arithmetic.Polynomial) -> b
    void multiply(geogebra.kernel.arithmetic.Polynomial) -> c
    void multiply(geogebra.kernel.arithmetic.ExpressionValue) -> a
    void divide(geogebra.kernel.arithmetic.ExpressionValue) -> b
    void divide(geogebra.kernel.arithmetic.Polynomial) -> d
    void multiply(double) -> a
    void power(int) -> a
    geogebra.kernel.arithmetic.ExpressionValue getConstantCoefficient() -> a
    geogebra.kernel.arithmetic.ExpressionValue getCoefficient(java.lang.String) -> a
    double getCoeffValue(java.lang.String) -> a
    double getConstantCoeffValue() -> a
    void simplify() -> a
    boolean contains(java.lang.String) -> a
    int degree() -> b
    java.lang.String toString() -> toString
    java.lang.String toValueString() -> toValueString
    java.lang.String toLaTeXString(boolean) -> toLaTeXString
    java.util.HashSet getVariables() -> getVariables
    void resolveVariables() -> resolveVariables
    boolean isConstant() -> isConstant
    boolean isLeaf() -> isLeaf
    geogebra.kernel.arithmetic.ExpressionValue evaluate() -> evaluate
    boolean isNumberValue() -> isNumberValue
    boolean isBooleanValue() -> isBooleanValue
    boolean isVectorValue() -> isVectorValue
    boolean isPolynomialInstance() -> isPolynomialInstance
    boolean isTextValue() -> isTextValue
    boolean isExpressionNode() -> isExpressionNode
    boolean isListValue() -> isListValue
    boolean contains(geogebra.kernel.arithmetic.ExpressionValue) -> contains
geogebra.kernel.arithmetic.SymbolicPolyFunction -> geogebra.kernel.arithmetic.p:
    geogebra.kernel.arithmetic.ExpressionNode[] symbCoeffs -> a
    geogebra.kernel.arithmetic.ExpressionNode[] getSymbolicCoeffs() -> a
    boolean updateCoeffValues() -> a
geogebra.kernel.arithmetic.Term -> geogebra.kernel.arithmetic.v:
    geogebra.kernel.arithmetic.ExpressionValue coefficient -> a
    java.lang.StringBuffer variables -> a
    geogebra.kernel.Kernel kernel -> a
    geogebra.kernel.arithmetic.ExpressionValue getCoefficient() -> a
    java.lang.String getVars() -> a
    int degree() -> a
    void addToCoefficient(geogebra.kernel.arithmetic.ExpressionValue) -> a
    geogebra.kernel.arithmetic.ExpressionValue add(geogebra.kernel.arithmetic.ExpressionValue,geogebra.kernel.arithmetic.ExpressionValue) -> a
    geogebra.kernel.arithmetic.ExpressionValue sub(geogebra.kernel.arithmetic.ExpressionValue,geogebra.kernel.arithmetic.ExpressionValue) -> b
    void multiply(geogebra.kernel.arithmetic.Term) -> a
    void multiply(geogebra.kernel.arithmetic.ExpressionValue) -> b
    geogebra.kernel.arithmetic.ExpressionValue multiply(geogebra.kernel.arithmetic.ExpressionValue,geogebra.kernel.arithmetic.ExpressionValue) -> c
    void divide(geogebra.kernel.arithmetic.ExpressionValue) -> c
    geogebra.kernel.arithmetic.ExpressionValue divide(geogebra.kernel.arithmetic.ExpressionValue,geogebra.kernel.arithmetic.ExpressionValue) -> d
    void sort(java.lang.StringBuffer) -> a
    boolean equals(java.lang.Object) -> equals
    boolean contains(java.lang.String) -> a
    int compareTo(java.lang.Object) -> compareTo
    java.lang.String toString() -> toString
    java.lang.String coeffString(geogebra.kernel.arithmetic.ExpressionValue) -> a
    java.lang.String variableString() -> b
geogebra.kernel.arithmetic.TextValue -> geogebra.kernel.arithmetic.s:
    geogebra.kernel.arithmetic.MyStringBuffer getText() -> getText
geogebra.kernel.arithmetic.ValidExpression -> geogebra.kernel.arithmetic.o:
    java.util.Vector labels -> a
    boolean inTree -> a
    void addLabel(java.lang.String) -> addLabel
    void initLabels() -> initLabels
    void addNullLabel() -> addNullLabel
    void addLabel(java.util.Vector) -> addLabel
    int labelCount() -> labelCount
    java.lang.String getLabel(int) -> getLabel
    java.lang.String[] getLabels() -> getLabels
    java.lang.String getLabel() -> getLabel
    void setLabel(java.lang.String) -> setLabel
    void setLabels(java.lang.String[]) -> setLabels
    boolean isVariable() -> isVariable
    boolean isInTree() -> isInTree
    void setInTree(boolean) -> setInTree
    boolean isGeoElement() -> isGeoElement
geogebra.kernel.arithmetic.Variable -> geogebra.kernel.arithmetic.r:
    java.lang.String name -> a
    geogebra.kernel.Kernel kernel -> a
    geogebra.kernel.arithmetic.ExpressionValue deepCopy(geogebra.kernel.Kernel) -> deepCopy
    java.lang.String getName() -> a
    boolean isConstant() -> isConstant
    boolean isLeaf() -> isLeaf
    geogebra.kernel.arithmetic.ExpressionValue evaluate() -> evaluate
    geogebra.kernel.GeoElement resolve() -> a
    java.util.HashSet getVariables() -> getVariables
    void resolveVariables() -> resolveVariables
    java.lang.String toString() -> toString
    java.lang.String toValueString() -> toValueString
    java.lang.String toLaTeXString(boolean) -> toLaTeXString
    boolean isNumberValue() -> isNumberValue
    boolean isVectorValue() -> isVectorValue
    boolean isBooleanValue() -> isBooleanValue
    boolean isPolynomialInstance() -> isPolynomialInstance
    boolean isTextValue() -> isTextValue
    boolean isExpressionNode() -> isExpressionNode
    boolean isVariable() -> isVariable
    boolean isListValue() -> isListValue
    boolean contains(geogebra.kernel.arithmetic.ExpressionValue) -> contains
geogebra.kernel.arithmetic.VectorValue -> geogebra.kernel.arithmetic.n:
    geogebra.kernel.GeoVec2D getVector() -> getVector
geogebra.kernel.commands.AlgebraProcessor -> geogebra.kernel.a.br:
    geogebra.kernel.Kernel kernel -> a
    geogebra.kernel.Construction cons -> a
    geogebra.Application app -> a
    geogebra.algebra.parser.Parser parser -> a
    geogebra.kernel.commands.CommandDispatcher cmdDispatcher -> a
    java.util.Iterator getCmdNameIterator() -> a
    geogebra.kernel.GeoElement[] processCommand(geogebra.kernel.arithmetic.Command,boolean) -> a
    geogebra.kernel.GeoElement changeGeoElement(geogebra.kernel.GeoElement,java.lang.String,boolean) -> a
    geogebra.kernel.GeoElement changeGeoElementNoExceptionHandling(geogebra.kernel.GeoElement,java.lang.String,boolean) -> b
    geogebra.kernel.GeoElement[] processAlgebraCommand(java.lang.String,boolean) -> a
    geogebra.kernel.GeoElement[] processAlgebraCommandNoExceptionHandling(java.lang.String,boolean) -> b
    double evaluateToDouble(java.lang.String) -> a
    geogebra.kernel.GeoBoolean evaluateToBoolean(java.lang.String) -> a
    geogebra.kernel.GeoList evaluateToList(java.lang.String) -> a
    geogebra.kernel.GeoFunction evaluateToFunction(java.lang.String) -> a
    geogebra.kernel.GeoPoint evaluateToPoint(java.lang.String) -> a
    geogebra.kernel.GeoText evaluateToText(java.lang.String,boolean) -> a
    java.lang.String parseLabel(java.lang.String) -> a
    geogebra.kernel.GeoElement[] processValidExpression(geogebra.kernel.arithmetic.ValidExpression) -> a
    geogebra.kernel.GeoElement[] processValidExpression(geogebra.kernel.arithmetic.ValidExpression,boolean) -> a
    geogebra.kernel.GeoElement[] processFunction(geogebra.kernel.arithmetic.Function) -> a
    geogebra.kernel.GeoElement[] processEquation(geogebra.kernel.arithmetic.Equation) -> a
    geogebra.kernel.GeoElement[] processLine(geogebra.kernel.arithmetic.Equation) -> b
    geogebra.kernel.GeoElement[] processConic(geogebra.kernel.arithmetic.Equation) -> c
    geogebra.kernel.GeoElement[] processParametric(geogebra.kernel.arithmetic.Parametric) -> a
    geogebra.kernel.GeoElement[] processExpressionNode(geogebra.kernel.arithmetic.ExpressionNode) -> a
    geogebra.kernel.GeoElement[] processNumber(geogebra.kernel.arithmetic.ExpressionNode,geogebra.kernel.arithmetic.ExpressionValue) -> a
    geogebra.kernel.GeoElement[] processList(geogebra.kernel.arithmetic.ExpressionNode,geogebra.kernel.arithmetic.MyList) -> a
    geogebra.kernel.GeoElement[] processText(geogebra.kernel.arithmetic.ExpressionNode,geogebra.kernel.arithmetic.ExpressionValue) -> b
    geogebra.kernel.GeoElement[] processBoolean(geogebra.kernel.arithmetic.ExpressionNode,geogebra.kernel.arithmetic.ExpressionValue) -> c
    geogebra.kernel.GeoElement[] processPointVector(geogebra.kernel.arithmetic.ExpressionNode,geogebra.kernel.arithmetic.ExpressionValue) -> d
    geogebra.kernel.GeoElement[] processAssignment(geogebra.kernel.arithmetic.Assignment) -> a
geogebra.kernel.commands.CmdAffineRatio -> geogebra.kernel.a.bp:
    geogebra.kernel.GeoElement[] process(geogebra.kernel.arithmetic.Command) -> a
geogebra.kernel.commands.CmdAngle -> geogebra.kernel.a.bg:
    geogebra.kernel.GeoElement[] process(geogebra.kernel.arithmetic.Command) -> a
geogebra.kernel.commands.CmdAngularBisector -> geogebra.kernel.a.W:
    geogebra.kernel.GeoElement[] process(geogebra.kernel.arithmetic.Command) -> a
geogebra.kernel.commands.CmdArc -> geogebra.kernel.a.bj:
    geogebra.kernel.GeoElement[] process(geogebra.kernel.arithmetic.Command) -> a
geogebra.kernel.commands.CmdArea -> geogebra.kernel.a.aK:
    geogebra.kernel.GeoElement[] process(geogebra.kernel.arithmetic.Command) -> a
geogebra.kernel.commands.CmdAsymptote -> geogebra.kernel.a.aY:
    geogebra.kernel.GeoElement[] process(geogebra.kernel.arithmetic.Command) -> a
geogebra.kernel.commands.CmdAxes -> geogebra.kernel.a.o:
    geogebra.kernel.GeoElement[] process(geogebra.kernel.arithmetic.Command) -> a
geogebra.kernel.commands.CmdBinomial -> geogebra.kernel.a.P:
    geogebra.kernel.GeoElement doCommand(java.lang.String,geogebra.kernel.arithmetic.NumberValue,geogebra.kernel.arithmetic.NumberValue) -> a
geogebra.kernel.commands.CmdCenter -> geogebra.kernel.a.w:
geogebra.kernel.commands.CmdCentroid -> geogebra.kernel.a.bx:
    geogebra.kernel.GeoElement[] process(geogebra.kernel.arithmetic.Command) -> a
geogebra.kernel.commands.CmdCircle -> geogebra.kernel.a.e:
    geogebra.kernel.GeoElement[] process(geogebra.kernel.arithmetic.Command) -> a
geogebra.kernel.commands.CmdCircleArc -> geogebra.kernel.a.ar:
    geogebra.kernel.GeoElement[] process(geogebra.kernel.arithmetic.Command) -> a
geogebra.kernel.commands.CmdCircleSector -> geogebra.kernel.a.X:
    geogebra.kernel.GeoElement[] process(geogebra.kernel.arithmetic.Command) -> a
geogebra.kernel.commands.CmdCircumcircleArc -> geogebra.kernel.a.aD:
    geogebra.kernel.GeoElement[] process(geogebra.kernel.arithmetic.Command) -> a
geogebra.kernel.commands.CmdCircumcircleSector -> geogebra.kernel.a.bv:
    geogebra.kernel.GeoElement[] process(geogebra.kernel.arithmetic.Command) -> a
geogebra.kernel.commands.CmdCircumference -> geogebra.kernel.a.N:
geogebra.kernel.commands.CmdClean -> geogebra.kernel.a.ax:
    geogebra.kernel.GeoElement[] process(geogebra.kernel.arithmetic.Command) -> a
geogebra.kernel.commands.CmdConic -> geogebra.kernel.a.u:
    geogebra.kernel.GeoElement[] process(geogebra.kernel.arithmetic.Command) -> a
geogebra.kernel.commands.CmdCorner -> geogebra.kernel.a.bq:
geogebra.kernel.commands.CmdCovariance -> geogebra.kernel.a.ah:
    geogebra.kernel.GeoElement doCommand(java.lang.String,geogebra.kernel.GeoList) -> a
    geogebra.kernel.GeoElement doCommand(java.lang.String,geogebra.kernel.GeoList,geogebra.kernel.GeoList) -> a
geogebra.kernel.commands.CmdCrossRatio -> geogebra.kernel.a.ag:
    geogebra.kernel.GeoElement[] process(geogebra.kernel.arithmetic.Command) -> a
geogebra.kernel.commands.CmdCurvature -> geogebra.kernel.a.v:
    geogebra.kernel.GeoElement[] process(geogebra.kernel.arithmetic.Command) -> a
geogebra.kernel.commands.CmdCurvatureVector -> geogebra.kernel.a.az:
    geogebra.kernel.GeoElement[] process(geogebra.kernel.arithmetic.Command) -> a
geogebra.kernel.commands.CmdCurveCartesian -> geogebra.kernel.a.aM:
    geogebra.kernel.GeoElement[] process(geogebra.kernel.arithmetic.Command) -> a
geogebra.kernel.commands.CmdDefined -> geogebra.kernel.a.U:
    geogebra.kernel.GeoElement[] process(geogebra.kernel.arithmetic.Command) -> a
geogebra.kernel.commands.CmdDelete -> geogebra.kernel.a.ad:
    geogebra.kernel.GeoElement[] process(geogebra.kernel.arithmetic.Command) -> a
geogebra.kernel.commands.CmdDerivative -> geogebra.kernel.a.an:
    geogebra.kernel.GeoElement[] process(geogebra.kernel.arithmetic.Command) -> a
    java.lang.String getDerivLabel(geogebra.kernel.GeoElement,int) -> a
geogebra.kernel.commands.CmdDiameter -> geogebra.kernel.a.ab:
    geogebra.kernel.GeoElement[] process(geogebra.kernel.arithmetic.Command) -> a
geogebra.kernel.commands.CmdDilate -> geogebra.kernel.a.J:
    geogebra.kernel.GeoElement[] process(geogebra.kernel.arithmetic.Command) -> a
geogebra.kernel.commands.CmdDirection -> geogebra.kernel.a.q:
    geogebra.kernel.GeoElement[] process(geogebra.kernel.arithmetic.Command) -> a
geogebra.kernel.commands.CmdDirectrix -> geogebra.kernel.a.be:
    geogebra.kernel.GeoElement[] process(geogebra.kernel.arithmetic.Command) -> a
geogebra.kernel.commands.CmdDistance -> geogebra.kernel.a.bn:
    geogebra.kernel.GeoElement[] process(geogebra.kernel.arithmetic.Command) -> a
geogebra.kernel.commands.CmdDiv -> geogebra.kernel.a.aj:
    geogebra.kernel.GeoElement doCommand(java.lang.String,geogebra.kernel.arithmetic.NumberValue,geogebra.kernel.arithmetic.NumberValue) -> a
geogebra.kernel.commands.CmdElement -> geogebra.kernel.a.A:
    geogebra.kernel.GeoElement[] process(geogebra.kernel.arithmetic.Command) -> a
geogebra.kernel.commands.CmdEllipse -> geogebra.kernel.a.bb:
    geogebra.kernel.GeoElement[] process(geogebra.kernel.arithmetic.Command) -> a
geogebra.kernel.commands.CmdExcentricity -> geogebra.kernel.a.k:
    geogebra.kernel.GeoElement[] process(geogebra.kernel.arithmetic.Command) -> a
geogebra.kernel.commands.CmdExpand -> geogebra.kernel.a.ao:
    geogebra.kernel.GeoElement[] process(geogebra.kernel.arithmetic.Command) -> a
geogebra.kernel.commands.CmdExtremum -> geogebra.kernel.a.ap:
    geogebra.kernel.GeoElement[] process(geogebra.kernel.arithmetic.Command) -> a
geogebra.kernel.commands.CmdFactor -> geogebra.kernel.a.r:
    geogebra.kernel.GeoElement[] process(geogebra.kernel.arithmetic.Command) -> a
geogebra.kernel.commands.CmdFirst -> geogebra.kernel.a.f:
    geogebra.kernel.GeoElement[] process(geogebra.kernel.arithmetic.Command) -> a
geogebra.kernel.commands.CmdFirstAxis -> geogebra.kernel.a.m:
    geogebra.kernel.GeoElement[] process(geogebra.kernel.arithmetic.Command) -> a
geogebra.kernel.commands.CmdFirstAxisLength -> geogebra.kernel.a.aB:
    geogebra.kernel.GeoElement[] process(geogebra.kernel.arithmetic.Command) -> a
geogebra.kernel.commands.CmdFitExp -> geogebra.kernel.a.al:
    geogebra.kernel.GeoElement doCommand(java.lang.String,geogebra.kernel.GeoList) -> a
geogebra.kernel.commands.CmdFitLineX -> geogebra.kernel.a.aL:
    geogebra.kernel.GeoElement doCommand(java.lang.String,geogebra.kernel.GeoList) -> a
geogebra.kernel.commands.CmdFitLineY -> geogebra.kernel.a.aO:
    geogebra.kernel.GeoElement doCommand(java.lang.String,geogebra.kernel.GeoList) -> a
geogebra.kernel.commands.CmdFitLog -> geogebra.kernel.a.Z:
    geogebra.kernel.GeoElement doCommand(java.lang.String,geogebra.kernel.GeoList) -> a
geogebra.kernel.commands.CmdFitPoly -> geogebra.kernel.a.E:
    geogebra.kernel.GeoElement[] process(geogebra.kernel.arithmetic.Command) -> a
geogebra.kernel.commands.CmdFitPow -> geogebra.kernel.a.I:
    geogebra.kernel.GeoElement doCommand(java.lang.String,geogebra.kernel.GeoList) -> a
geogebra.kernel.commands.CmdFocus -> geogebra.kernel.a.bw:
    geogebra.kernel.GeoElement[] process(geogebra.kernel.arithmetic.Command) -> a
geogebra.kernel.commands.CmdFunction -> geogebra.kernel.a.bo:
    geogebra.kernel.GeoElement[] process(geogebra.kernel.arithmetic.Command) -> a
geogebra.kernel.commands.CmdGCD -> geogebra.kernel.a.Q:
    geogebra.kernel.GeoElement[] process(geogebra.kernel.arithmetic.Command) -> a
geogebra.kernel.commands.CmdHyperbola -> geogebra.kernel.a.g:
    geogebra.kernel.GeoElement[] process(geogebra.kernel.arithmetic.Command) -> a
geogebra.kernel.commands.CmdIf -> geogebra.kernel.a.aU:
    geogebra.kernel.GeoElement[] process(geogebra.kernel.arithmetic.Command) -> a
geogebra.kernel.commands.CmdIntegral -> geogebra.kernel.a.C:
    geogebra.kernel.GeoElement[] process(geogebra.kernel.arithmetic.Command) -> a
geogebra.kernel.commands.CmdIntersect -> geogebra.kernel.a.au:
    geogebra.kernel.GeoElement[] process(geogebra.kernel.arithmetic.Command) -> a
geogebra.kernel.commands.CmdInverseNormal -> geogebra.kernel.a.t:
    geogebra.kernel.GeoElement[] process(geogebra.kernel.arithmetic.Command) -> a
geogebra.kernel.commands.CmdIteration -> geogebra.kernel.a.a:
    geogebra.kernel.GeoElement[] process(geogebra.kernel.arithmetic.Command) -> a
geogebra.kernel.commands.CmdIterationList -> geogebra.kernel.a.F:
    geogebra.kernel.GeoElement[] process(geogebra.kernel.arithmetic.Command) -> a
geogebra.kernel.commands.CmdLCM -> geogebra.kernel.a.s:
    geogebra.kernel.GeoElement[] process(geogebra.kernel.arithmetic.Command) -> a
geogebra.kernel.commands.CmdLast -> geogebra.kernel.a.Y:
    geogebra.kernel.GeoElement[] process(geogebra.kernel.arithmetic.Command) -> a
geogebra.kernel.commands.CmdLength -> geogebra.kernel.a.aN:
    geogebra.kernel.GeoElement[] process(geogebra.kernel.arithmetic.Command) -> a
geogebra.kernel.commands.CmdLine -> geogebra.kernel.a.aA:
    geogebra.kernel.GeoElement[] process(geogebra.kernel.arithmetic.Command) -> a
geogebra.kernel.commands.CmdLineBisector -> geogebra.kernel.a.bB:
    geogebra.kernel.GeoElement[] process(geogebra.kernel.arithmetic.Command) -> a
geogebra.kernel.commands.CmdLocus -> geogebra.kernel.a.as:
    geogebra.kernel.GeoElement[] process(geogebra.kernel.arithmetic.Command) -> a
geogebra.kernel.commands.CmdLowerSum -> geogebra.kernel.a.B:
    geogebra.kernel.GeoElement[] process(geogebra.kernel.arithmetic.Command) -> a
geogebra.kernel.commands.CmdMax -> geogebra.kernel.a.bf:
    geogebra.kernel.GeoElement[] process(geogebra.kernel.arithmetic.Command) -> a
geogebra.kernel.commands.CmdMean -> geogebra.kernel.a.R:
    geogebra.kernel.GeoElement doCommand(java.lang.String,geogebra.kernel.GeoList) -> a
geogebra.kernel.commands.CmdMeanX -> geogebra.kernel.a.aI:
    geogebra.kernel.GeoElement doCommand(java.lang.String,geogebra.kernel.GeoList) -> a
    geogebra.kernel.GeoElement doCommand(java.lang.String,geogebra.kernel.GeoList,geogebra.kernel.GeoList) -> a
geogebra.kernel.commands.CmdMeanY -> geogebra.kernel.a.aH:
    geogebra.kernel.GeoElement doCommand(java.lang.String,geogebra.kernel.GeoList) -> a
    geogebra.kernel.GeoElement doCommand(java.lang.String,geogebra.kernel.GeoList,geogebra.kernel.GeoList) -> a
geogebra.kernel.commands.CmdMedian -> geogebra.kernel.a.aT:
    geogebra.kernel.GeoElement doCommand(java.lang.String,geogebra.kernel.GeoList) -> a
geogebra.kernel.commands.CmdMidpoint -> geogebra.kernel.a.aS:
    geogebra.kernel.GeoElement[] process(geogebra.kernel.arithmetic.Command) -> a
geogebra.kernel.commands.CmdMin -> geogebra.kernel.a.bu:
    geogebra.kernel.GeoElement[] process(geogebra.kernel.arithmetic.Command) -> a
geogebra.kernel.commands.CmdMirror -> geogebra.kernel.a.bA:
    geogebra.kernel.GeoElement[] process(geogebra.kernel.arithmetic.Command) -> a
geogebra.kernel.commands.CmdMod -> geogebra.kernel.a.c:
    geogebra.kernel.GeoElement doCommand(java.lang.String,geogebra.kernel.arithmetic.NumberValue,geogebra.kernel.arithmetic.NumberValue) -> a
geogebra.kernel.commands.CmdMode -> geogebra.kernel.a.K:
    geogebra.kernel.GeoElement doCommand(java.lang.String,geogebra.kernel.GeoList) -> a
geogebra.kernel.commands.CmdName -> geogebra.kernel.a.aG:
    geogebra.kernel.GeoElement[] process(geogebra.kernel.arithmetic.Command) -> a
geogebra.kernel.commands.CmdNormal -> geogebra.kernel.a.M:
    geogebra.kernel.GeoElement[] process(geogebra.kernel.arithmetic.Command) -> a
geogebra.kernel.commands.CmdOneListFunction -> geogebra.kernel.a.O:
    geogebra.kernel.GeoElement[] process(geogebra.kernel.arithmetic.Command) -> a
    geogebra.kernel.GeoElement doCommand(java.lang.String,geogebra.kernel.GeoList) -> a
geogebra.kernel.commands.CmdOneOrTwoListsFunction -> geogebra.kernel.a.bh:
    geogebra.kernel.GeoElement[] process(geogebra.kernel.arithmetic.Command) -> a
    geogebra.kernel.GeoElement doCommand(java.lang.String,geogebra.kernel.GeoList) -> a
    geogebra.kernel.GeoElement doCommand(java.lang.String,geogebra.kernel.GeoList,geogebra.kernel.GeoList) -> a
geogebra.kernel.commands.CmdOrthogonalLine -> geogebra.kernel.a.ay:
    geogebra.kernel.GeoElement[] process(geogebra.kernel.arithmetic.Command) -> a
geogebra.kernel.commands.CmdOrthogonalVector -> geogebra.kernel.a.n:
    geogebra.kernel.GeoElement[] process(geogebra.kernel.arithmetic.Command) -> a
geogebra.kernel.commands.CmdOsculatingCircle -> geogebra.kernel.a.ac:
    geogebra.kernel.GeoElement[] process(geogebra.kernel.arithmetic.Command) -> a
geogebra.kernel.commands.CmdPMCC -> geogebra.kernel.a.G:
    geogebra.kernel.GeoElement doCommand(java.lang.String,geogebra.kernel.GeoList) -> a
    geogebra.kernel.GeoElement doCommand(java.lang.String,geogebra.kernel.GeoList,geogebra.kernel.GeoList) -> a
geogebra.kernel.commands.CmdParabola -> geogebra.kernel.a.aa:
    geogebra.kernel.GeoElement[] process(geogebra.kernel.arithmetic.Command) -> a
geogebra.kernel.commands.CmdParameter -> geogebra.kernel.a.at:
    geogebra.kernel.GeoElement[] process(geogebra.kernel.arithmetic.Command) -> a
geogebra.kernel.commands.CmdPerimeter -> geogebra.kernel.a.by:
    geogebra.kernel.GeoElement[] process(geogebra.kernel.arithmetic.Command) -> a
geogebra.kernel.commands.CmdPoint -> geogebra.kernel.a.H:
    geogebra.kernel.GeoElement[] process(geogebra.kernel.arithmetic.Command) -> a
geogebra.kernel.commands.CmdPolar -> geogebra.kernel.a.i:
    geogebra.kernel.GeoElement[] process(geogebra.kernel.arithmetic.Command) -> a
geogebra.kernel.commands.CmdPolygon -> geogebra.kernel.a.j:
    geogebra.kernel.GeoElement[] process(geogebra.kernel.arithmetic.Command) -> a
geogebra.kernel.commands.CmdPolynomial -> geogebra.kernel.a.z:
    geogebra.kernel.GeoElement[] process(geogebra.kernel.arithmetic.Command) -> a
geogebra.kernel.commands.CmdQ1 -> geogebra.kernel.a.aX:
    geogebra.kernel.GeoElement doCommand(java.lang.String,geogebra.kernel.GeoList) -> a
geogebra.kernel.commands.CmdQ3 -> geogebra.kernel.a.aW:
    geogebra.kernel.GeoElement doCommand(java.lang.String,geogebra.kernel.GeoList) -> a
geogebra.kernel.commands.CmdRadius -> geogebra.kernel.a.L:
    geogebra.kernel.GeoElement[] process(geogebra.kernel.arithmetic.Command) -> a
geogebra.kernel.commands.CmdRandomNormal -> geogebra.kernel.a.aC:
    geogebra.kernel.GeoElement doCommand(java.lang.String,geogebra.kernel.arithmetic.NumberValue,geogebra.kernel.arithmetic.NumberValue) -> a
geogebra.kernel.commands.CmdRay -> geogebra.kernel.a.d:
    geogebra.kernel.GeoElement[] process(geogebra.kernel.arithmetic.Command) -> a
geogebra.kernel.commands.CmdRelation -> geogebra.kernel.a.bz:
    geogebra.kernel.GeoElement[] process(geogebra.kernel.arithmetic.Command) -> a
geogebra.kernel.commands.CmdReverse -> geogebra.kernel.a.aF:
    geogebra.kernel.GeoElement doCommand(java.lang.String,geogebra.kernel.GeoList) -> a
geogebra.kernel.commands.CmdRoot -> geogebra.kernel.a.ba:
    geogebra.kernel.GeoElement[] process(geogebra.kernel.arithmetic.Command) -> a
geogebra.kernel.commands.CmdRotate -> geogebra.kernel.a.bs:
    geogebra.kernel.GeoElement[] process(geogebra.kernel.arithmetic.Command) -> a
geogebra.kernel.commands.CmdRow -> geogebra.kernel.a.aq:
    geogebra.kernel.GeoElement doCommand(java.lang.String,geogebra.kernel.arithmetic.NumberValue,geogebra.kernel.arithmetic.NumberValue) -> a
geogebra.kernel.commands.CmdSD -> geogebra.kernel.a.ak:
    geogebra.kernel.GeoElement doCommand(java.lang.String,geogebra.kernel.GeoList) -> a
geogebra.kernel.commands.CmdSXX -> geogebra.kernel.a.S:
    geogebra.kernel.GeoElement doCommand(java.lang.String,geogebra.kernel.GeoList) -> a
    geogebra.kernel.GeoElement doCommand(java.lang.String,geogebra.kernel.GeoList,geogebra.kernel.GeoList) -> a
geogebra.kernel.commands.CmdSXY -> geogebra.kernel.a.T:
    geogebra.kernel.GeoElement doCommand(java.lang.String,geogebra.kernel.GeoList) -> a
    geogebra.kernel.GeoElement doCommand(java.lang.String,geogebra.kernel.GeoList,geogebra.kernel.GeoList) -> a
geogebra.kernel.commands.CmdSYY -> geogebra.kernel.a.V:
    geogebra.kernel.GeoElement doCommand(java.lang.String,geogebra.kernel.GeoList) -> a
    geogebra.kernel.GeoElement doCommand(java.lang.String,geogebra.kernel.GeoList,geogebra.kernel.GeoList) -> a
geogebra.kernel.commands.CmdSecondAxis -> geogebra.kernel.a.x:
    geogebra.kernel.GeoElement[] process(geogebra.kernel.arithmetic.Command) -> a
geogebra.kernel.commands.CmdSecondAxisLength -> geogebra.kernel.a.bk:
    geogebra.kernel.GeoElement[] process(geogebra.kernel.arithmetic.Command) -> a
geogebra.kernel.commands.CmdSector -> geogebra.kernel.a.bC:
    geogebra.kernel.GeoElement[] process(geogebra.kernel.arithmetic.Command) -> a
geogebra.kernel.commands.CmdSegment -> geogebra.kernel.a.bt:
    geogebra.kernel.GeoElement[] process(geogebra.kernel.arithmetic.Command) -> a
geogebra.kernel.commands.CmdSemicircle -> geogebra.kernel.a.ae:
    geogebra.kernel.GeoElement[] process(geogebra.kernel.arithmetic.Command) -> a
geogebra.kernel.commands.CmdSequence -> geogebra.kernel.a.l:
    geogebra.kernel.GeoElement[] process(geogebra.kernel.arithmetic.Command) -> a
geogebra.kernel.commands.CmdSigmaXX -> geogebra.kernel.a.aw:
    geogebra.kernel.GeoElement doCommand(java.lang.String,geogebra.kernel.GeoList) -> a
    geogebra.kernel.GeoElement doCommand(java.lang.String,geogebra.kernel.GeoList,geogebra.kernel.GeoList) -> a
geogebra.kernel.commands.CmdSigmaXY -> geogebra.kernel.a.av:
    geogebra.kernel.GeoElement doCommand(java.lang.String,geogebra.kernel.GeoList) -> a
    geogebra.kernel.GeoElement doCommand(java.lang.String,geogebra.kernel.GeoList,geogebra.kernel.GeoList) -> a
geogebra.kernel.commands.CmdSigmaYY -> geogebra.kernel.a.aZ:
    geogebra.kernel.GeoElement doCommand(java.lang.String,geogebra.kernel.GeoList) -> a
    geogebra.kernel.GeoElement doCommand(java.lang.String,geogebra.kernel.GeoList,geogebra.kernel.GeoList) -> a
geogebra.kernel.commands.CmdSlope -> geogebra.kernel.a.h:
    geogebra.kernel.GeoElement[] process(geogebra.kernel.arithmetic.Command) -> a
geogebra.kernel.commands.CmdSort -> geogebra.kernel.a.aE:
    geogebra.kernel.GeoElement doCommand(java.lang.String,geogebra.kernel.GeoList) -> a
geogebra.kernel.commands.CmdStep -> geogebra.kernel.a.b:
    geogebra.kernel.GeoElement[] process(geogebra.kernel.arithmetic.Command) -> a
geogebra.kernel.commands.CmdSum -> geogebra.kernel.a.bl:
    geogebra.kernel.GeoElement[] process(geogebra.kernel.arithmetic.Command) -> a
geogebra.kernel.commands.CmdTake -> geogebra.kernel.a.D:
    geogebra.kernel.GeoElement[] process(geogebra.kernel.arithmetic.Command) -> a
geogebra.kernel.commands.CmdTangent -> geogebra.kernel.a.ai:
    geogebra.kernel.GeoElement[] process(geogebra.kernel.arithmetic.Command) -> a
geogebra.kernel.commands.CmdTaylorSeries -> geogebra.kernel.a.am:
    geogebra.kernel.GeoElement[] process(geogebra.kernel.arithmetic.Command) -> a
geogebra.kernel.commands.CmdTranslate -> geogebra.kernel.a.aR:
    geogebra.kernel.GeoElement[] process(geogebra.kernel.arithmetic.Command) -> a
geogebra.kernel.commands.CmdTurningPoint -> geogebra.kernel.a.aP:
    geogebra.kernel.GeoElement[] process(geogebra.kernel.arithmetic.Command) -> a
geogebra.kernel.commands.CmdTwoNumFunction -> geogebra.kernel.a.y:
    geogebra.kernel.GeoElement[] process(geogebra.kernel.arithmetic.Command) -> a
    geogebra.kernel.GeoElement doCommand(java.lang.String,geogebra.kernel.arithmetic.NumberValue,geogebra.kernel.arithmetic.NumberValue) -> a
geogebra.kernel.commands.CmdUnitOrthogonalVector -> geogebra.kernel.a.p:
    geogebra.kernel.GeoElement[] process(geogebra.kernel.arithmetic.Command) -> a
geogebra.kernel.commands.CmdUnitVector -> geogebra.kernel.a.bm:
    geogebra.kernel.GeoElement[] process(geogebra.kernel.arithmetic.Command) -> a
geogebra.kernel.commands.CmdUpperSum -> geogebra.kernel.a.aJ:
    geogebra.kernel.GeoElement[] process(geogebra.kernel.arithmetic.Command) -> a
geogebra.kernel.commands.CmdVariance -> geogebra.kernel.a.bd:
    geogebra.kernel.GeoElement doCommand(java.lang.String,geogebra.kernel.GeoList) -> a
geogebra.kernel.commands.CmdVector -> geogebra.kernel.a.aV:
    geogebra.kernel.GeoElement[] process(geogebra.kernel.arithmetic.Command) -> a
geogebra.kernel.commands.CmdVertex -> geogebra.kernel.a.aQ:
    geogebra.kernel.GeoElement[] process(geogebra.kernel.arithmetic.Command) -> a
geogebra.kernel.commands.CommandDispatcher -> geogebra.kernel.a.bc:
    geogebra.kernel.Kernel kernel -> a
    geogebra.kernel.Construction cons -> a
    geogebra.Application app -> a
    java.util.HashMap cmdTable -> a
    geogebra.kernel.commands.MacroProcessor macroProc -> a
    java.util.Iterator getCmdNameIterator() -> a
    geogebra.kernel.GeoElement[] processCommand(geogebra.kernel.arithmetic.Command,boolean) -> a
    void initCmdTable() -> a
geogebra.kernel.commands.CommandProcessor -> geogebra.kernel.a.bi:
    geogebra.Application app -> a
    geogebra.kernel.Kernel kernel -> a
    geogebra.kernel.Construction cons -> a
    geogebra.kernel.commands.AlgebraProcessor algProcessor -> a
    geogebra.kernel.GeoElement[] process(geogebra.kernel.arithmetic.Command) -> a
    geogebra.kernel.GeoElement[] resArgs(geogebra.kernel.arithmetic.Command) -> b
    geogebra.kernel.GeoElement[] resArg(geogebra.kernel.arithmetic.ExpressionNode) -> a
    geogebra.kernel.GeoElement[] resArgsLocalNumVar(geogebra.kernel.arithmetic.Command,int) -> a
    geogebra.MyError argErr(geogebra.Application,java.lang.String,java.lang.Object) -> a
    geogebra.MyError argNumErr(geogebra.Application,java.lang.String,int) -> a
    geogebra.kernel.GeoList wrapInList(geogebra.kernel.GeoElement[],int) -> a
geogebra.kernel.commands.MacroProcessor -> geogebra.kernel.a.af:
    geogebra.kernel.GeoElement[] process(geogebra.kernel.arithmetic.Command) -> a
geogebra.kernel.complex.Complex -> geogebra.kernel.e.a:
    double real -> a
    double imag -> b
    geogebra.kernel.complex.Complex plusJay -> a
    geogebra.kernel.complex.Complex minusJay -> b
    void setImag(double) -> a
    void set(double,double) -> a
    void set(geogebra.kernel.complex.Complex) -> a
    double getReal() -> a
    double getImag() -> b
    java.lang.String toString() -> toString
    geogebra.kernel.complex.Complex[] oneDarray(int) -> a
    geogebra.kernel.complex.Complex copy(geogebra.kernel.complex.Complex) -> a
    geogebra.kernel.complex.Complex plus(geogebra.kernel.complex.Complex,geogebra.kernel.complex.Complex,geogebra.kernel.complex.Complex) -> a
    geogebra.kernel.complex.Complex minus(geogebra.kernel.complex.Complex,geogebra.kernel.complex.Complex,geogebra.kernel.complex.Complex) -> b
    geogebra.kernel.complex.Complex times(geogebra.kernel.complex.Complex,geogebra.kernel.complex.Complex,geogebra.kernel.complex.Complex) -> c
    geogebra.kernel.complex.Complex times(geogebra.kernel.complex.Complex,double,geogebra.kernel.complex.Complex) -> a
    geogebra.kernel.complex.Complex over(geogebra.kernel.complex.Complex,geogebra.kernel.complex.Complex,geogebra.kernel.complex.Complex) -> d
    double abs(geogebra.kernel.complex.Complex) -> a
    geogebra.kernel.complex.Complex conjugate(geogebra.kernel.complex.Complex,geogebra.kernel.complex.Complex) -> a
    geogebra.kernel.complex.Complex sqrt(geogebra.kernel.complex.Complex,geogebra.kernel.complex.Complex) -> b
    geogebra.kernel.complex.Complex square(geogebra.kernel.complex.Complex,geogebra.kernel.complex.Complex) -> c
    boolean isZero() -> a
    boolean isEqual(geogebra.kernel.complex.Complex,geogebra.kernel.complex.Complex) -> a
geogebra.kernel.complex.ComplexPoly -> geogebra.kernel.e.b:
    int deg -> b
    int degwz -> c
    geogebra.kernel.complex.Complex[] coeff -> a
    geogebra.kernel.complex.Complex[] coeffwz -> b
    int MAX_STEPS -> a
    geogebra.kernel.complex.Complex b -> a
    geogebra.kernel.complex.Complex d -> b
    geogebra.kernel.complex.Complex f -> c
    geogebra.kernel.complex.Complex g -> d
    geogebra.kernel.complex.Complex g2 -> e
    geogebra.kernel.complex.Complex h -> f
    geogebra.kernel.complex.Complex sq -> g
    geogebra.kernel.complex.Complex gp -> h
    geogebra.kernel.complex.Complex gm -> i
    geogebra.kernel.complex.Complex dx -> j
    geogebra.kernel.complex.Complex x1 -> k
    geogebra.kernel.complex.Complex temp1 -> l
    geogebra.kernel.complex.Complex temp2 -> m
    double[] frac -> a
    geogebra.kernel.complex.Complex coeffCopy(int) -> a
    java.lang.String toString() -> toString
    geogebra.kernel.complex.Complex[] roots(boolean,geogebra.kernel.complex.Complex) -> a
    geogebra.kernel.complex.Complex laguerre(geogebra.kernel.complex.Complex,geogebra.kernel.complex.Complex[],int) -> a
    geogebra.kernel.complex.Complex[] laguerreAll(boolean,geogebra.kernel.complex.Complex) -> b
geogebra.kernel.integration.EllipticArcLength -> geogebra.kernel.f.a:
    double[] halfAxes -> a
    geogebra.kernel.roots.RealRootFunction arcLengthFunction -> a
    geogebra.kernel.integration.GaussQuadIntegration gauss -> a
    double compute(double,double) -> a
    double[] access$0(geogebra.kernel.integration.EllipticArcLength) -> a
geogebra.kernel.integration.EllipticArcLength$EllipticArcLengthFunction -> geogebra.kernel.f.b:
    geogebra.kernel.integration.EllipticArcLength this$0 -> a
    double evaluate(double) -> evaluate
geogebra.kernel.integration.GaussQuadIntegration -> geogebra.kernel.f.c:
    int nPoints -> a
    double[] gaussQuadDist -> a
    double[] gaussQuadWeight -> b
    double integrate(geogebra.kernel.roots.RealRootFunction,double,double) -> a
    void gaussQuadCoeff(double[],double[],int) -> a
geogebra.kernel.optimization.ExtremumFinder -> geogebra.kernel.c.a:
    int MAX_ITERATIONS -> a
    double findMinimum(double,double,geogebra.kernel.roots.RealRootFunction,double) -> a
geogebra.kernel.optimization.NegativeRealRootFunction -> geogebra.kernel.c.b:
    geogebra.kernel.roots.RealRootFunction f -> a
    double evaluate(double) -> evaluate
geogebra.kernel.roots.RealRoot -> geogebra.kernel.d.a:
    double tol -> a
    double tolClass -> b
    int iterMax -> a
    int iterN -> b
    double brent(geogebra.kernel.roots.RealRootFunction,double,double) -> a
    double bisectNewtonRaphson(geogebra.kernel.roots.RealRootDerivFunction,double,double) -> a
    double newtonRaphson(geogebra.kernel.roots.RealRootDerivFunction,double) -> a
geogebra.kernel.roots.RealRootDerivFunction -> geogebra.kernel.d.d:
    double[] evaluateDerivFunc(double) -> a
geogebra.kernel.roots.RealRootFunction -> geogebra.kernel.d.c:
    double evaluate(double) -> evaluate
geogebra.kernel.roots.RealRootUtil -> geogebra.kernel.d.b:
    int ITER_MAX -> a
    double EPSILON -> a
    double[] getDefinedInterval(geogebra.kernel.roots.RealRootFunction,double,double) -> a
    double getDefinitionBorder(geogebra.kernel.roots.RealRootFunction,double,double) -> a
geogebra.kernel.statistics.AlgoDoubleListCovariance -> geogebra.kernel.b.i:
    java.lang.String getClassName() -> getClassName
geogebra.kernel.statistics.AlgoDoubleListMeanX -> geogebra.kernel.b.l:
    java.lang.String getClassName() -> getClassName
geogebra.kernel.statistics.AlgoDoubleListMeanY -> geogebra.kernel.b.k:
    java.lang.String getClassName() -> getClassName
geogebra.kernel.statistics.AlgoDoubleListPMCC -> geogebra.kernel.b.f:
    java.lang.String getClassName() -> getClassName
geogebra.kernel.statistics.AlgoDoubleListSXX -> geogebra.kernel.b.u:
    java.lang.String getClassName() -> getClassName
geogebra.kernel.statistics.AlgoDoubleListSXY -> geogebra.kernel.b.t:
    java.lang.String getClassName() -> getClassName
geogebra.kernel.statistics.AlgoDoubleListSYY -> geogebra.kernel.b.s:
    java.lang.String getClassName() -> getClassName
geogebra.kernel.statistics.AlgoDoubleListSigmaXX -> geogebra.kernel.b.c:
    java.lang.String getClassName() -> getClassName
geogebra.kernel.statistics.AlgoDoubleListSigmaXY -> geogebra.kernel.b.b:
    java.lang.String getClassName() -> getClassName
geogebra.kernel.statistics.AlgoDoubleListSigmaYY -> geogebra.kernel.b.o:
    java.lang.String getClassName() -> getClassName
geogebra.kernel.statistics.AlgoFitExp -> geogebra.kernel.b.F:
    geogebra.kernel.GeoList geolist -> a
    geogebra.kernel.GeoFunction geofunction -> a
    java.lang.String getClassName() -> getClassName
    void setInputOutput() -> setInputOutput
    geogebra.kernel.GeoFunction getFitExp() -> a
    void compute() -> compute
geogebra.kernel.statistics.AlgoFitLineX -> geogebra.kernel.b.v:
    geogebra.kernel.GeoList geoList -> a
    geogebra.kernel.GeoLine g -> a
    java.lang.String getClassName() -> getClassName
    void setInputOutput() -> setInputOutput
    geogebra.kernel.GeoLine getFitLineX() -> a
    void compute() -> compute
geogebra.kernel.statistics.AlgoFitLineY -> geogebra.kernel.b.w:
    geogebra.kernel.GeoList geoList -> a
    geogebra.kernel.GeoLine g -> a
    java.lang.String getClassName() -> getClassName
    void setInputOutput() -> setInputOutput
    geogebra.kernel.GeoLine getFitLineY() -> a
    void compute() -> compute
geogebra.kernel.statistics.AlgoFitLog -> geogebra.kernel.b.A:
    geogebra.kernel.GeoList geolist -> a
    geogebra.kernel.GeoFunction geofunction -> a
    java.lang.String getClassName() -> getClassName
    void setInputOutput() -> setInputOutput
    geogebra.kernel.GeoFunction getFitLog() -> a
    void compute() -> compute
geogebra.kernel.statistics.AlgoFitPoly -> geogebra.kernel.b.g:
    geogebra.kernel.GeoList geolist -> a
    geogebra.kernel.arithmetic.NumberValue degree -> a
    geogebra.kernel.GeoFunction geofunction -> a
    geogebra.kernel.GeoElement geodegree -> a
    java.lang.String getClassName() -> getClassName
    void setInputOutput() -> setInputOutput
    geogebra.kernel.GeoFunction getFitPoly() -> a
    void compute() -> compute
geogebra.kernel.statistics.AlgoFitPow -> geogebra.kernel.b.z:
    geogebra.kernel.GeoList geolist -> a
    geogebra.kernel.GeoFunction geofunction -> a
    java.lang.String getClassName() -> getClassName
    void setInputOutput() -> setInputOutput
    geogebra.kernel.GeoFunction getFitPow() -> a
    void compute() -> compute
geogebra.kernel.statistics.AlgoInverseNormal -> geogebra.kernel.b.D:
    geogebra.kernel.arithmetic.NumberValue a -> a
    geogebra.kernel.arithmetic.NumberValue b -> b
    geogebra.kernel.arithmetic.NumberValue c -> c
    geogebra.kernel.GeoNumeric num -> a
    double[] ICDF_A -> a
    double[] ICDF_B -> b
    double[] ICDF_C -> c
    double[] ICDF_D -> d
    double[] ERF_A -> e
    double[] ERF_B -> f
    double[] ERF_C -> g
    double[] ERF_D -> h
    double[] ERF_P -> i
    double[] ERF_Q -> j
    double PI_SQRT -> a
    double X_HUGE -> b
    double X_MAX -> c
    java.lang.String getClassName() -> getClassName
    void setInputOutput() -> setInputOutput
    geogebra.kernel.GeoNumeric getResult() -> a
    void compute() -> compute
    double getInvCDF(double,boolean) -> a
    double calerf(double,int) -> a
    double erfc(double) -> a
    double refine(double,double) -> a
geogebra.kernel.statistics.AlgoListCovariance -> geogebra.kernel.b.E:
    java.lang.String getClassName() -> getClassName
geogebra.kernel.statistics.AlgoListMeanX -> geogebra.kernel.b.e:
    java.lang.String getClassName() -> getClassName
geogebra.kernel.statistics.AlgoListMeanY -> geogebra.kernel.b.d:
    java.lang.String getClassName() -> getClassName
geogebra.kernel.statistics.AlgoListPMCC -> geogebra.kernel.b.r:
    java.lang.String getClassName() -> getClassName
geogebra.kernel.statistics.AlgoListSXX -> geogebra.kernel.b.J:
    java.lang.String getClassName() -> getClassName
geogebra.kernel.statistics.AlgoListSXY -> geogebra.kernel.b.I:
    java.lang.String getClassName() -> getClassName
geogebra.kernel.statistics.AlgoListSYY -> geogebra.kernel.b.H:
    java.lang.String getClassName() -> getClassName
geogebra.kernel.statistics.AlgoListSigmaXX -> geogebra.kernel.b.M:
    java.lang.String getClassName() -> getClassName
geogebra.kernel.statistics.AlgoListSigmaXY -> geogebra.kernel.b.N:
    java.lang.String getClassName() -> getClassName
geogebra.kernel.statistics.AlgoListSigmaYY -> geogebra.kernel.b.L:
    java.lang.String getClassName() -> getClassName
geogebra.kernel.statistics.AlgoMean -> geogebra.kernel.b.h:
    java.lang.String getClassName() -> getClassName
geogebra.kernel.statistics.AlgoMedian -> geogebra.kernel.b.p:
    geogebra.kernel.GeoList inputList -> a
    geogebra.kernel.GeoNumeric median -> a
    int size -> a
    java.lang.String getClassName() -> getClassName
    void setInputOutput() -> setInputOutput
    geogebra.kernel.GeoNumeric getMedian() -> a
    void compute() -> compute
geogebra.kernel.statistics.AlgoMode -> geogebra.kernel.b.C:
    geogebra.kernel.GeoList inputList -> a
    geogebra.kernel.GeoList outputList -> b
    int size -> a
    java.lang.String getClassName() -> getClassName
    void setInputOutput() -> setInputOutput
    geogebra.kernel.GeoList getResult() -> a
    void compute() -> compute
    void setListElement(int,double) -> a
geogebra.kernel.statistics.AlgoNormal -> geogebra.kernel.b.G:
    geogebra.kernel.arithmetic.NumberValue a -> a
    geogebra.kernel.arithmetic.NumberValue b -> b
    geogebra.kernel.arithmetic.NumberValue c -> c
    geogebra.kernel.GeoNumeric num -> a
    java.lang.String getClassName() -> getClassName
    void setInputOutput() -> setInputOutput
    geogebra.kernel.GeoNumeric getResult() -> a
    void compute() -> compute
    double getCDF(double) -> a
geogebra.kernel.statistics.AlgoQ1 -> geogebra.kernel.b.x:
    geogebra.kernel.GeoList inputList -> a
    geogebra.kernel.GeoNumeric Q1 -> a
    int size -> a
    java.lang.String getClassName() -> getClassName
    void setInputOutput() -> setInputOutput
    geogebra.kernel.GeoNumeric getQ1() -> a
    void compute() -> compute
geogebra.kernel.statistics.AlgoQ3 -> geogebra.kernel.b.y:
    geogebra.kernel.GeoList inputList -> a
    geogebra.kernel.GeoNumeric Q3 -> a
    int size -> a
    java.lang.String getClassName() -> getClassName
    void setInputOutput() -> setInputOutput
    geogebra.kernel.GeoNumeric getQ3() -> a
    void compute() -> compute
geogebra.kernel.statistics.AlgoRandomNormal -> geogebra.kernel.b.q:
    java.lang.String getClassName() -> getClassName
    void compute() -> compute
    double randomNormal(double,double) -> a
geogebra.kernel.statistics.AlgoSigmaXX -> geogebra.kernel.b.K:
    java.lang.String getClassName() -> getClassName
geogebra.kernel.statistics.AlgoStandardDeviation -> geogebra.kernel.b.a:
    java.lang.String getClassName() -> getClassName
geogebra.kernel.statistics.AlgoStats1D -> geogebra.kernel.b.j:
    geogebra.kernel.GeoList geoList -> a
    geogebra.kernel.GeoNumeric Truncate -> a
    geogebra.kernel.GeoNumeric result -> b
    int stat -> a
    java.lang.String getClassName() -> getClassName
    void setInputOutput() -> setInputOutput
    geogebra.kernel.GeoNumeric getResult() -> a
    void compute() -> compute
geogebra.kernel.statistics.AlgoStats2D -> geogebra.kernel.b.n:
    geogebra.kernel.GeoList geoListx -> a
    geogebra.kernel.GeoList geoListy -> b
    geogebra.kernel.GeoNumeric result -> a
    int mode -> a
    int stat -> b
    java.lang.String getClassName() -> getClassName
    void setInputOutput() -> setInputOutput
    geogebra.kernel.GeoNumeric getResult() -> a
    void compute() -> compute
geogebra.kernel.statistics.AlgoSum -> geogebra.kernel.b.B:
    java.lang.String getClassName() -> getClassName
geogebra.kernel.statistics.AlgoVariance -> geogebra.kernel.b.m:
    java.lang.String getClassName() -> getClassName
geogebra.plugin.ClassPathManipulator -> geogebra.plugin.b:
    java.lang.String nl -> a
    java.lang.Class class$0 -> a
    java.lang.Class class$1 -> b
    void addURL(java.net.URL) -> a
geogebra.plugin.GgbAPI -> geogebra.plugin.GgbAPI:
    geogebra.Application app -> a
    geogebra.kernel.Kernel kernel -> a
    geogebra.kernel.Construction construction -> a
    geogebra.kernel.commands.AlgebraProcessor algebraprocessor -> a
    geogebra.plugin.PluginManager pluginmanager -> a
    java.lang.String[] objNames -> a
    int lastGeoElementsIteratorSize -> a
    geogebra.Application getApplication() -> getApplication
    geogebra.kernel.Construction getConstruction() -> getConstruction
    geogebra.kernel.Kernel getKernel() -> getKernel
    geogebra.kernel.commands.AlgebraProcessor getAlgebraProcessor() -> getAlgebraProcessor
    geogebra.plugin.PluginManager getPluginManager() -> getPluginManager
    geogebra.plugin.ClassPathManipulator getClassPathManipulator() -> getClassPathManipulator
    byte[] getGGBfile() -> getGGBfile
    java.lang.String getXML() -> getXML
    void setXML(java.lang.String) -> setXML
    void evalXML(java.lang.String) -> evalXML
    boolean evalCommand(java.lang.String) -> evalCommand
    java.lang.String evalYacas(java.lang.String) -> evalYacas
    void setErrorDialogsActive(boolean) -> setErrorDialogsActive
    void reset() -> reset
    void refreshViews() -> refreshViews
    void openFile(java.lang.String) -> openFile
    void setVisible(java.lang.String,boolean) -> setVisible
    void setLayer(java.lang.String,int) -> setLayer
    int getLayer(java.lang.String) -> getLayer
    void setLayerVisible(int,boolean) -> setLayerVisible
    void setFixed(java.lang.String,boolean) -> setFixed
    void setTrace(java.lang.String,boolean) -> setTrace
    void setLabelVisible(java.lang.String,boolean) -> setLabelVisible
    void setLabelStyle(java.lang.String,int) -> setLabelStyle
    void setLabelMode(java.lang.String,boolean) -> setLabelMode
    void setColor(java.lang.String,int,int,int) -> setColor
    java.lang.String getColor(java.lang.String) -> getColor
    void deleteObject(java.lang.String) -> deleteObject
    boolean exists(java.lang.String) -> exists
    boolean isDefined(java.lang.String) -> isDefined
    java.lang.String getValueString(java.lang.String) -> getValueString
    java.lang.String getDefinitionString(java.lang.String) -> getDefinitionString
    java.lang.String getCommandString(java.lang.String) -> getCommandString
    double getXcoord(java.lang.String) -> getXcoord
    double getYcoord(java.lang.String) -> getYcoord
    void setCoords(java.lang.String,double,double) -> setCoords
    double getValue(java.lang.String) -> getValue
    void setValue(java.lang.String,double) -> setValue
    void setRepaintingActive(boolean) -> setRepaintingActive
    void setCoordSystem(double,double,double,double) -> setCoordSystem
    void setAxesVisible(boolean,boolean) -> setAxesVisible
    void setGridVisible(boolean) -> setGridVisible
    java.lang.String[] getObjNames() -> getObjNames
    java.lang.String[] getAllObjectNames() -> getAllObjectNames
    int getObjectNumber() -> getObjectNumber
    java.lang.String getObjectName(int) -> getObjectName
    java.lang.String getObjectType(java.lang.String) -> getObjectType
    void setMode(int) -> setMode
geogebra.plugin.PlugLetIF -> geogebra.plugin.PlugLetIF:
    java.lang.String getMenuText() -> getMenuText
    void init(geogebra.plugin.GgbAPI,java.lang.String) -> init
    void execute() -> execute
    void start() -> start
    void stop() -> stop
    void destroy() -> destroy
geogebra.plugin.PluginManager -> geogebra.plugin.a:
    java.lang.String nl -> a
    java.util.Hashtable plugintable -> a
    geogebra.GeoGebra ggb -> a
    geogebra.Application app -> a
    javax.swing.JMenu pluginmenu -> a
    java.lang.String startdir -> b
    java.util.ArrayList lines -> a
    geogebra.plugin.ClassPathManipulator cpm -> a
    javax.swing.JMenu getPluginMenu() -> a
    void addPath(java.lang.String) -> a
    void addPlugin(java.lang.String,java.lang.String) -> a
    void installPlugins() -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
    void addPaths(java.util.ArrayList) -> a
    geogebra.plugin.PlugLetIF getPluginInstance(java.lang.String) -> a
    void loadProperties() -> b
    void debug(java.lang.String) -> b
geogebra.spreadsheet.ContextMenu -> geogebra.b.H:
    java.awt.Color bgColor -> a
    geogebra.spreadsheet.MyTable table -> a
    javax.swing.JPopupMenu menu -> b
    int row1 -> a
    int row2 -> b
    int column1 -> c
    int column2 -> d
    javax.swing.JPopupMenu initMenu(geogebra.Application) -> b
    void showPopupMenu(geogebra.spreadsheet.MyTable,java.awt.Component,int,int,int,int,int,int) -> b
geogebra.spreadsheet.ContextMenu$ActionListener1 -> geogebra.b.c:
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
geogebra.spreadsheet.ContextMenu$ActionListener2 -> geogebra.b.e:
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
geogebra.spreadsheet.ContextMenu$ActionListener3 -> geogebra.b.d:
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
geogebra.spreadsheet.ContextMenu$ActionListener4 -> geogebra.b.f:
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
geogebra.spreadsheet.ContextMenuCol -> geogebra.b.h:
    javax.swing.JPopupMenu menu2 -> a
    javax.swing.JPopupMenu initMenu2(geogebra.Application) -> a
    void showPopupMenu2(geogebra.spreadsheet.MyTable,java.awt.Component,int,int,int,int,int,int) -> a
geogebra.spreadsheet.ContextMenuCol$ActionListener5 -> geogebra.b.p:
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
geogebra.spreadsheet.ContextMenuCol$ActionListener6 -> geogebra.b.t:
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
geogebra.spreadsheet.ContextMenuCol$ActionListener7 -> geogebra.b.s:
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
geogebra.spreadsheet.ContextMenuRow -> geogebra.b.w:
    javax.swing.JPopupMenu menu2 -> a
    javax.swing.JPopupMenu initMenu2(geogebra.Application) -> a
    void showPopupMenu2(geogebra.spreadsheet.MyTable,java.awt.Component,int,int,int,int,int,int) -> a
geogebra.spreadsheet.ContextMenuRow$ActionListener5 -> geogebra.b.m:
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
geogebra.spreadsheet.ContextMenuRow$ActionListener6 -> geogebra.b.k:
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
geogebra.spreadsheet.ContextMenuRow$ActionListener7 -> geogebra.b.l:
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
geogebra.spreadsheet.CopyPasteCut -> geogebra.b.i:
    geogebra.kernel.Kernel kernel -> a
    geogebra.spreadsheet.MyTable table -> a
    java.lang.String externalBuf -> a
    geogebra.kernel.GeoElement[][] internalBuf -> a
    int bufColumn -> a
    int bufRow -> b
    java.util.regex.Pattern pattern -> a
    void copy(int,int,int,int) -> a
    void paste(int,int,int,int) -> b
    void pasteInternal(int,int) -> a
    void pasteExternal(java.lang.String,int,int) -> a
    void delete(int,int,int,int) -> c
geogebra.spreadsheet.MyCellEditor -> geogebra.b.C:
    geogebra.kernel.Kernel kernel -> a
    geogebra.kernel.GeoElement value -> a
    geogebra.spreadsheet.MyTable table -> a
    int column -> a
    int row -> b
    boolean editing -> a
    java.awt.Component getTableCellEditorComponent(javax.swing.JTable,java.lang.Object,boolean,int,int) -> getTableCellEditorComponent
    boolean isEditing() -> a
    void addLabel(int,int) -> a
    void addLabel(java.lang.String) -> a
    java.lang.String getEditingValue() -> a
    java.lang.Object getCellEditorValue() -> getCellEditorValue
    boolean stopCellEditing() -> stopCellEditing
    void undoEdit() -> a
    geogebra.kernel.GeoElement prepareAddingValueToTable(geogebra.kernel.Kernel,geogebra.spreadsheet.MyTable,java.lang.String,geogebra.kernel.GeoElement,int,int) -> a
    void access$0(geogebra.spreadsheet.MyCellEditor) -> a
geogebra.spreadsheet.MyCellEditor$KeyListener4 -> geogebra.b.z:
    geogebra.spreadsheet.MyCellEditor this$0 -> a
    void keyTyped(java.awt.event.KeyEvent) -> keyTyped
    void keyPressed(java.awt.event.KeyEvent) -> keyPressed
    void keyReleased(java.awt.event.KeyEvent) -> keyReleased
geogebra.spreadsheet.MyTable -> geogebra.b.I:
    java.awt.Color SELECTED_BACKGROUND_COLOR -> a
    java.awt.Color SELECTED_BACKGROUND_COLOR_HEADER -> b
    geogebra.kernel.Kernel kernel -> a
    geogebra.spreadsheet.MyCellEditor editor -> a
    geogebra.spreadsheet.RelativeCopy relativeCopy -> a
    geogebra.spreadsheet.CopyPasteCut copyPasteCut -> a
    java.awt.event.KeyListener[] defaultKeyListeners -> a
    geogebra.spreadsheet.MyTable$TableCellRenderer1 columnHeader -> a
    geogebra.spreadsheet.SpreadsheetView view -> a
    geogebra.spreadsheet.MyTableModel tableModel -> a
    int Column -> a
    int minSelectionRow -> b
    int maxSelectionRow -> c
    int minSelectionColumn -> d
    int maxSelectionColumn -> e
    boolean isDragingDot -> a
    int dragingToRow -> f
    int dragingToColumn -> g
    boolean ctrlPressed -> b
    boolean shiftPressed -> c
    int column0 -> h
    boolean ctrlPressed2 -> d
    boolean shiftPressed2 -> e
    java.lang.Class class$0 -> a
    void setView(geogebra.spreadsheet.SpreadsheetView) -> a
    geogebra.spreadsheet.SpreadsheetView getView() -> a
    void selectionChanged() -> a
    java.awt.Point getPixel(int,int,boolean) -> a
    java.awt.Point getMinSelectionPixel() -> a
    java.awt.Point getMaxSelectionPixel() -> b
    java.awt.Point getIndexFromPixel(int,int) -> a
    void paint(java.awt.Graphics) -> paint
geogebra.spreadsheet.MyTable$KeyListener1 -> geogebra.b.a:
    geogebra.spreadsheet.MyTable this$0 -> a
    void keyTyped(java.awt.event.KeyEvent) -> keyTyped
    void keyPressed(java.awt.event.KeyEvent) -> keyPressed
    void keyReleased(java.awt.event.KeyEvent) -> keyReleased
geogebra.spreadsheet.MyTable$KeyListener2 -> geogebra.b.b:
    geogebra.spreadsheet.MyTable this$0 -> a
    void keyTyped(java.awt.event.KeyEvent) -> keyTyped
    void keyPressed(java.awt.event.KeyEvent) -> keyPressed
    void keyReleased(java.awt.event.KeyEvent) -> keyReleased
geogebra.spreadsheet.MyTable$ListSelectionListener1 -> geogebra.b.r:
    geogebra.spreadsheet.MyTable this$0 -> a
    void valueChanged(javax.swing.event.ListSelectionEvent) -> valueChanged
geogebra.spreadsheet.MyTable$ListSelectionListener2 -> geogebra.b.q:
    geogebra.spreadsheet.MyTable this$0 -> a
    void valueChanged(javax.swing.event.ListSelectionEvent) -> valueChanged
geogebra.spreadsheet.MyTable$MouseListener1 -> geogebra.b.o:
    geogebra.spreadsheet.MyTable this$0 -> a
    void mouseClicked(java.awt.event.MouseEvent) -> mouseClicked
    void mouseEntered(java.awt.event.MouseEvent) -> mouseEntered
    void mouseExited(java.awt.event.MouseEvent) -> mouseExited
    void mousePressed(java.awt.event.MouseEvent) -> mousePressed
    void mouseReleased(java.awt.event.MouseEvent) -> mouseReleased
geogebra.spreadsheet.MyTable$MouseListener2 -> geogebra.b.n:
    geogebra.spreadsheet.MyTable this$0 -> a
    void mouseClicked(java.awt.event.MouseEvent) -> mouseClicked
    void mouseEntered(java.awt.event.MouseEvent) -> mouseEntered
    void mouseExited(java.awt.event.MouseEvent) -> mouseExited
    void mousePressed(java.awt.event.MouseEvent) -> mousePressed
    void mouseReleased(java.awt.event.MouseEvent) -> mouseReleased
geogebra.spreadsheet.MyTable$MouseMotionListener1 -> geogebra.b.A:
    geogebra.spreadsheet.MyTable this$0 -> a
    void mouseDragged(java.awt.event.MouseEvent) -> mouseDragged
    void mouseMoved(java.awt.event.MouseEvent) -> mouseMoved
geogebra.spreadsheet.MyTable$MouseMotionListener2 -> geogebra.b.B:
    geogebra.spreadsheet.MyTable this$0 -> a
    void mouseDragged(java.awt.event.MouseEvent) -> mouseDragged
    void mouseMoved(java.awt.event.MouseEvent) -> mouseMoved
geogebra.spreadsheet.MyTable$MyCellRenderer -> geogebra.b.v:
    geogebra.spreadsheet.MyTable this$0 -> a
    void setValue(java.lang.Object) -> setValue
geogebra.spreadsheet.MyTable$TableCellRenderer1 -> geogebra.b.D:
    boolean[] selected -> a
    java.awt.Color defaultBackground -> a
    geogebra.spreadsheet.MyTable this$0 -> a
    java.awt.Component getTableCellRendererComponent(javax.swing.JTable,java.lang.Object,boolean,boolean,int,int) -> getTableCellRendererComponent
    void valueChanged(javax.swing.event.ListSelectionEvent) -> valueChanged
geogebra.spreadsheet.MyTableModel -> geogebra.b.j:
    java.util.HashMap data -> a
    int rowCount -> a
    java.lang.Class class$0 -> a
    int getRowCount() -> getRowCount
    java.lang.Class getColumnClass(int) -> getColumnClass
    java.lang.Object getValueAt(int,int) -> getValueAt
    boolean isCellEditable(int,int) -> isCellEditable
    void setValueAt(java.lang.Object,int,int) -> setValueAt
geogebra.spreadsheet.RelativeCopy -> geogebra.b.u:
    geogebra.kernel.Kernel kernel -> a
    geogebra.spreadsheet.MyTable table -> a
    java.util.regex.Pattern pattern2 -> a
    boolean doCopy(int,int,int,int,int,int,int,int) -> a
    void doCopyHorizontal(int,int,int,int,int) -> a
    void doCopyVertical(int,int,int,int,int) -> b
    void doCopy0(geogebra.kernel.Kernel,geogebra.spreadsheet.MyTable,geogebra.kernel.GeoElement,geogebra.kernel.GeoElement,int,int) -> a
    void doCopy1(geogebra.kernel.Kernel,geogebra.spreadsheet.MyTable,java.lang.String,int,int) -> a
    java.lang.String replaceAll(java.util.regex.Pattern,java.lang.String,java.lang.String,java.lang.String) -> a
    geogebra.kernel.GeoElement[] getDependentObjects(geogebra.kernel.GeoElement) -> a
    geogebra.kernel.GeoElement[][] getValues(geogebra.spreadsheet.MyTable,int,int,int,int) -> a
    geogebra.kernel.GeoElement getValue(geogebra.spreadsheet.MyTable,int,int) -> a
geogebra.spreadsheet.SpreadsheetView -> geogebra.b.F:
    geogebra.spreadsheet.MyTable table -> a
    geogebra.spreadsheet.MyTableModel tableModel -> a
    javax.swing.JList rowHeader -> a
    int minSelectionRow -> a
    int maxSelectionRow -> b
    int row0 -> c
    boolean ctrlPressed -> a
    boolean shiftPressed -> b
    void add(geogebra.kernel.GeoElement) -> a
    void remove(geogebra.kernel.GeoElement) -> b
    void rename(geogebra.kernel.GeoElement) -> c
    void update(geogebra.kernel.GeoElement) -> d
    void updateAuxiliaryObject(geogebra.kernel.GeoElement) -> e
    void repaintView() -> e
    void reset() -> c
    void clearView() -> d
geogebra.spreadsheet.SpreadsheetView$KeyListener1 -> geogebra.b.g:
    geogebra.spreadsheet.SpreadsheetView this$0 -> a
    void keyTyped(java.awt.event.KeyEvent) -> keyTyped
    void keyPressed(java.awt.event.KeyEvent) -> keyPressed
    void keyReleased(java.awt.event.KeyEvent) -> keyReleased
geogebra.spreadsheet.SpreadsheetView$MouseListener1 -> geogebra.b.y:
    geogebra.spreadsheet.SpreadsheetView this$0 -> a
    void mouseClicked(java.awt.event.MouseEvent) -> mouseClicked
    void mouseEntered(java.awt.event.MouseEvent) -> mouseEntered
    void mouseExited(java.awt.event.MouseEvent) -> mouseExited
    void mousePressed(java.awt.event.MouseEvent) -> mousePressed
    void mouseReleased(java.awt.event.MouseEvent) -> mouseReleased
geogebra.spreadsheet.SpreadsheetView$MouseMotionListener1 -> geogebra.b.x:
    geogebra.spreadsheet.SpreadsheetView this$0 -> a
    void mouseDragged(java.awt.event.MouseEvent) -> mouseDragged
    void mouseMoved(java.awt.event.MouseEvent) -> mouseMoved
geogebra.spreadsheet.SpreadsheetView$MyListModel -> geogebra.b.G:
    geogebra.spreadsheet.MyTableModel model -> a
    int getSize() -> getSize
    java.lang.Object getElementAt(int) -> getElementAt
geogebra.spreadsheet.SpreadsheetView$RowHeaderRenderer -> geogebra.b.E:
    javax.swing.table.JTableHeader header -> a
    javax.swing.JList rowHeader -> a
    javax.swing.ListSelectionModel selectionModel -> a
    java.awt.Color defaultBackground -> a
    geogebra.spreadsheet.SpreadsheetView this$0 -> a
    java.awt.Component getListCellRendererComponent(javax.swing.JList,java.lang.Object,int,boolean,boolean) -> getListCellRendererComponent
    void valueChanged(javax.swing.event.ListSelectionEvent) -> valueChanged
geogebra.util.CopyURLToFile -> geogebra.e.j:
    boolean copyURLToFile(java.net.URL,java.io.File) -> a
geogebra.util.DisposeDialogAction -> geogebra.e.g:
    javax.swing.JDialog dialog -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
geogebra.util.FastHashMapKeyless -> geogebra.e.i:
    int mask_ -> a
    int count_ -> b
    float fillFactor_ -> a
    int limit_ -> c
    int modif_ -> d
    geogebra.util.FastHashMapKeyless$EmptyHashIterator EMPTY_ITERATOR -> a
    java.util.Set entrySet_ -> a
    java.util.Set keySet_ -> b
    int[] keyTable_ -> a
    java.lang.Object[] valueTable_ -> a
    java.lang.Long REMOVED -> a
    java.util.Collection values -> a
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean containsValue(java.lang.Object) -> containsValue
    boolean containsKey(java.lang.Object) -> containsKey
    boolean containsKey(int) -> a
    java.lang.Object get(java.lang.Object) -> get
    java.lang.Object get(int) -> a
    void rehash() -> a
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    java.lang.Object remove(java.lang.Object) -> remove
    java.lang.Object remove(int) -> b
    void clear() -> clear
    java.lang.Object clone() -> clone
    java.util.Set keySet() -> keySet
    java.util.Collection values() -> values
    java.util.Set entrySet() -> entrySet
    java.util.Iterator getHashIterator(int) -> a
    java.lang.Object put(int,java.lang.Object) -> a
    int[] access$0(geogebra.util.FastHashMapKeyless) -> a
    int access$1(geogebra.util.FastHashMapKeyless) -> a
    java.lang.Object[] access$2(geogebra.util.FastHashMapKeyless) -> a
    java.lang.Long access$3() -> a
    java.util.Iterator access$4(geogebra.util.FastHashMapKeyless,int) -> a
    int access$5(geogebra.util.FastHashMapKeyless) -> b
geogebra.util.FastHashMapKeyless$1 -> geogebra.e.e:
    geogebra.util.FastHashMapKeyless this$0 -> a
    java.util.Iterator iterator() -> iterator
    int size() -> size
    boolean contains(java.lang.Object) -> contains
    boolean remove(java.lang.Object) -> remove
    void clear() -> clear
geogebra.util.FastHashMapKeyless$2 -> geogebra.e.c:
    geogebra.util.FastHashMapKeyless this$0 -> a
    java.util.Iterator iterator() -> iterator
    int size() -> size
    boolean contains(java.lang.Object) -> contains
    void clear() -> clear
geogebra.util.FastHashMapKeyless$3 -> geogebra.e.d:
    geogebra.util.FastHashMapKeyless this$0 -> a
    java.util.Iterator iterator() -> iterator
    boolean contains(java.lang.Object) -> contains
    boolean remove(java.lang.Object) -> remove
    int size() -> size
    void clear() -> clear
geogebra.util.FastHashMapKeyless$EmptyHashIterator -> geogebra.e.h:
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    void remove() -> remove
geogebra.util.FastHashMapKeyless$Entry -> geogebra.e.k:
    int key_ -> a
    java.lang.Object[] value_ -> a
    int idx_ -> b
    java.lang.Object clone() -> clone
    java.lang.Object getKey() -> getKey
    java.lang.Object getValue() -> getValue
    java.lang.Object setValue(java.lang.Object) -> setValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
geogebra.util.FastHashMapKeyless$HashIterator -> geogebra.e.f:
    int index_ -> a
    java.lang.Object entry_ -> a
    int lastReturned_ -> b
    int type_ -> c
    int expectedModif_ -> d
    geogebra.util.FastHashMapKeyless this$0 -> a
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    void remove() -> remove
geogebra.util.ImageManager -> geogebra.e.b:
    java.util.Hashtable iconTable -> a
    java.util.Hashtable internalImageTable -> b
    java.util.Hashtable externalImageTable -> c
    java.awt.Toolkit toolKit -> a
    java.awt.MediaTracker tracker -> a
    java.lang.Class class$0 -> a
    javax.swing.ImageIcon getImageIcon(java.lang.String) -> a
    javax.swing.ImageIcon getImageIcon(java.lang.String,java.awt.Color) -> a
    java.awt.Image addBorder(java.awt.Image,java.awt.Color) -> a
    java.awt.Image getInternalImage(java.lang.String) -> a
    void addExternalImage(java.lang.String,java.awt.image.BufferedImage) -> a
    java.awt.image.BufferedImage getExternalImage(java.lang.String) -> a
    java.awt.Image getImageResource(java.lang.String) -> b
    java.awt.image.BufferedImage toBufferedImage(java.awt.Image) -> a
    boolean hasAlpha(java.awt.Image) -> a
geogebra.util.MyMath -> geogebra.e.a:
    double LOG10 -> a
    double LOG2 -> b
    int factorialTop -> a
    double[] factorialTable -> a
    double[] cof -> b
    double cbrt(double) -> a
    double sgn(geogebra.kernel.Kernel,double) -> a
    double cosh(double) -> b
    double sinh(double) -> c
    double tanh(double) -> d
    double acosh(double) -> e
    double asinh(double) -> f
    double atanh(double) -> g
    double gamma(double,geogebra.kernel.Kernel) -> a
    double factorial(double) -> h
    double gammln(double) -> i
geogebra.util.RegressionMath -> geogebra.e.l:
    boolean error -> a
    int regtype -> a
    double r -> a
    double p1 -> b
    double p2 -> c
    double p3 -> d
    double p4 -> e
    double p5 -> f
    double sigmax -> g
    double sigmax2 -> h
    double sigmax3 -> i
    double sigmax4 -> j
    double sigmax5 -> k
    double sigmax6 -> l
    double sigmax7 -> m
    double sigmax8 -> n
    double sigmay -> o
    double sigmay2 -> p
    double sigmaxy -> q
    double sigmax2y -> r
    double sigmax3y -> s
    double sigmax4y -> t
    geogebra.kernel.GeoList geolist -> a
    double[] xlist -> a
    double[] ylist -> b
    int size -> b
    double getP1() -> a
    double getP2() -> b
    double getP3() -> c
    double getP4() -> d
    double getP5() -> e
    boolean doLinear(geogebra.kernel.GeoList) -> a
    boolean doQuad(geogebra.kernel.GeoList) -> b
    boolean doCubic(geogebra.kernel.GeoList) -> c
    boolean doQuart(geogebra.kernel.GeoList) -> d
    boolean doExp(geogebra.kernel.GeoList) -> e
    boolean doLog(geogebra.kernel.GeoList) -> f
    boolean doPow(geogebra.kernel.GeoList) -> g
    double det22(double,double,double,double) -> a
    double det33(double,double,double,double,double,double,double,double,double) -> a
    double det44(double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double) -> a
    double det55(double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double) -> a
    void doSums(int) -> a
    void getPoints() -> a
    double corrCoeff() -> f
geogebra.util.Util -> geogebra.e.m:
    char[] hexChar -> a
    java.lang.StringBuffer sbReplaceExp -> a
    boolean existsHttpURL(java.net.URL) -> a
    java.lang.String toHexString(java.awt.Color) -> a
    java.lang.String toHTMLString(java.lang.String) -> a
    java.lang.String encodeXML(java.lang.String) -> b
    double getJavaVersion() -> a
    void addKeyListenerToAll(java.awt.Container,java.awt.event.KeyListener) -> a
    byte[] loadIntoMemory(java.io.InputStream) -> a
    void copyStream(java.io.InputStream,java.io.OutputStream) -> a
    java.lang.String toLaTeXString(java.lang.String,boolean) -> a
    void registerForDisposeOnEscape(javax.swing.JDialog) -> a
    java.lang.String keepOnlyLettersAndDigits(java.lang.String) -> c
    java.lang.String processFilename(java.lang.String) -> d
hoteqn.ColorMaskFilter -> b.b:
    java.awt.Color color -> a
    boolean maskORinvert -> a
    int filterRGB(int,int,int) -> filterRGB
hoteqn.EqScanner -> b.a:
    java.lang.String equation -> a
    int count -> a
    int countT -> b
    hoteqn.EqToken token -> a
    boolean EOF -> a
    java.util.Vector TokenV -> a
    boolean selectB -> b
    boolean collectB -> c
    int selectCount1 -> c
    int selectCount2 -> d
    java.lang.StringBuffer selectSB -> a
    java.lang.String getSelectedArea(int,int) -> a
    void setEquation(java.lang.String) -> a
    void start() -> a
    int get_count() -> a
    void set_count(int) -> a
    hoteqn.EqToken nextToken() -> a
    boolean EoT() -> a
    char getChar() -> a
    void advance() -> b
    hoteqn.EqToken ScanNextToken() -> b
hoteqn.EqToken -> b.d:
    int typ -> a
    java.lang.String stringS -> a
hoteqn.SymbolLoader -> b.c:
    java.awt.image.ImageProducer[] imageSources -> a
    java.lang.String[] fontsizes -> a
    java.util.Hashtable fontdesH -> a
    boolean kLocalFonts -> a
    java.awt.Image getImage(boolean,boolean,java.lang.String,java.awt.Graphics,java.applet.Applet) -> a
    java.awt.image.ImageProducer getBigImage(boolean,boolean,java.lang.String,java.applet.Applet) -> a
    java.awt.image.ImageProducer getLocalImageSource(java.lang.String) -> a
hoteqn.cHotEqnImpl -> b.e:
    java.awt.Component component -> a
    int width -> a
    int height -> b
    java.lang.String nameS -> a
    java.lang.String equation -> b
    java.lang.String Fontname -> c
    hoteqn.EqScanner eqScan -> a
    hoteqn.EqToken eqTok -> a
    boolean italic -> d
    int fontStyle -> c
    java.awt.Font f1 -> a
    java.awt.Font f2 -> b
    java.awt.Font f3 -> c
    java.awt.Font f4 -> d
    int[] GreekFontSizes -> a
    int[] GreekFontDescents -> b
    int[] GreekSize -> c
    int[] GreekDescent -> d
    int[] EmbedFontSizes -> e
    java.awt.Graphics2D g2Dtemp -> a
    java.awt.Image bufferImage -> a
    boolean imageOK -> e
    int localWidth -> d
    int localHeight -> e
    java.awt.Color BGColor -> a
    java.awt.Color EnvColor -> b
    java.awt.Color FGColor -> c
    java.awt.Color BorderColor -> d
    boolean borderB -> f
    boolean roundRectBorderB -> g
    int border -> f
    java.lang.String halign -> d
    java.lang.String valign -> e
    int xpos -> g
    int ypos -> h
    boolean drawn -> h
    hoteqn.SymbolLoader symbolLoader -> a
    java.awt.MediaTracker tracker -> a
    java.util.Hashtable imageH -> a
    java.applet.Applet app -> a
    boolean appletB -> a
    boolean beanB -> b
    boolean debug -> c
    boolean editMode -> i
    boolean editableB -> j
    int mouse1X -> i
    int mouse1Y -> j
    int mouse2X -> k
    int mouse2Y -> l
    int xOFF -> m
    int yOFF -> n
    int y0 -> o
    int x0 -> p
    int y1 -> q
    int x1 -> r
    int editModeRec -> s
    boolean editModeFind -> k
    int editModeCount1 -> t
    int editModeCount2 -> u
    java.awt.Image selectImage -> b
    void printStatusImpl(java.lang.String) -> a
    void displayStatus(java.lang.String) -> c
    void setDebugImpl(boolean) -> a
    void setFontnameImpl(java.lang.String) -> b
    void setFontStyle(int) -> a
    void setFontsizesImpl(int,int,int,int) -> a
    void setBackgroundImpl(java.awt.Color) -> a
    java.awt.Color getBackgroundImpl() -> a
    void setForegroundImpl(java.awt.Color) -> b
    java.awt.Color getForegroundImpl() -> b
    void setEditableImpl(boolean) -> b
    void processMouseEventImpl(java.awt.event.MouseEvent) -> a
    void processMouseMotionEventImpl(java.awt.event.MouseEvent) -> b
    java.awt.Dimension getPreferredSizeImpl() -> a
    java.awt.Dimension getSizeofImpl(java.lang.String) -> a
    java.awt.Dimension getMinimumSizeImpl() -> b
    void paintImpl(java.awt.Graphics) -> a
    void generateImageImpl(java.awt.Graphics) -> b
    hoteqn.cHotEqnImpl$BoxC eqn(int,int,boolean,java.awt.Graphics,int) -> a
    hoteqn.cHotEqnImpl$BoxC eqn(int,int,boolean,java.awt.Graphics,int,boolean) -> a
    hoteqn.cHotEqnImpl$BoxC ACCENT(int,int,boolean,java.awt.Graphics,int) -> b
    hoteqn.cHotEqnImpl$BoxC ANGLE(int,int,boolean,java.awt.Graphics) -> a
    hoteqn.cHotEqnImpl$BoxC ARRAY(int,int,boolean,java.awt.Graphics,int) -> c
    hoteqn.cHotEqnImpl$BoxC BEGIN(int,int,boolean,java.awt.Graphics,int) -> d
    hoteqn.cHotEqnImpl$BoxC FBOX(int,int,boolean,java.awt.Graphics,int) -> e
    hoteqn.cHotEqnImpl$BoxC FG_BGColor(int,int,boolean,java.awt.Graphics,int,boolean) -> b
    hoteqn.cHotEqnImpl$BoxC FRAC(int,int,boolean,java.awt.Graphics,int,boolean) -> c
    hoteqn.cHotEqnImpl$BoxC Id(int,int,boolean,java.awt.Graphics) -> b
    void arc(java.awt.Graphics,int,int,int,int,int) -> a
    void drawBracket(java.awt.Graphics,java.lang.String,int,int,int,int,int,int) -> a
    hoteqn.cHotEqnImpl$BoxC LEFT(int,int,boolean,java.awt.Graphics,int) -> f
    hoteqn.cHotEqnImpl$BoxC LIM(int,int,boolean,java.awt.Graphics,int) -> g
    hoteqn.cHotEqnImpl$BoxC MBOX(int,int,boolean,java.awt.Graphics) -> c
    hoteqn.cHotEqnImpl$BoxC NOT(int,int,boolean,java.awt.Graphics,int) -> h
    hoteqn.cHotEqnImpl$BoxC Op(int,int,boolean,java.awt.Graphics) -> d
    hoteqn.cHotEqnImpl$BoxC OverBRACE(int,int,boolean,java.awt.Graphics,int) -> i
    hoteqn.cHotEqnImpl$BoxC UnderBRACE(int,int,boolean,java.awt.Graphics,int) -> j
    hoteqn.cHotEqnImpl$BoxC OverUnderLINE(int,int,boolean,java.awt.Graphics,int,boolean) -> d
    hoteqn.cHotEqnImpl$BoxC Paren(int,int,boolean,java.awt.Graphics) -> e
    hoteqn.cHotEqnImpl$BoxC Plain(int,int,boolean,java.awt.Graphics) -> f
    hoteqn.cHotEqnImpl$BoxC SPACE(int,int,boolean,java.awt.Graphics) -> g
    hoteqn.cHotEqnImpl$BoxC SQRT(int,int,boolean,java.awt.Graphics,int) -> k
    hoteqn.cHotEqnImpl$BoxC STACKREL(int,int,boolean,java.awt.Graphics,int) -> l
    hoteqn.cHotEqnImpl$BoxC SUB(int,int,boolean,java.awt.Graphics,int,boolean) -> e
    hoteqn.cHotEqnImpl$BoxC SUP(int,int,boolean,java.awt.Graphics,int,boolean) -> f
    java.awt.Image getSymbol(java.awt.Graphics,int) -> a
    hoteqn.cHotEqnImpl$BoxC SYMBOP(int,int,boolean,java.awt.Graphics,int,boolean) -> g
    hoteqn.cHotEqnImpl$BoxC SYMBOLBIG(int,int,boolean,java.awt.Graphics,int) -> m
    hoteqn.cHotEqnImpl$BoxC VEC(int,int,boolean,java.awt.Graphics,int) -> n
    boolean expect(int) -> a
    boolean expect(int,java.lang.String) -> a
    boolean expect(int,int,java.lang.String) -> a
    void rec_Font(java.awt.Graphics,int) -> a
hoteqn.cHotEqnImpl$BoxC -> b.g:
    int dx -> a
    int dy_pos -> b
    int dy_neg -> c
hoteqn.sHotEqn -> b.f:
    hoteqn.cHotEqnImpl impl -> a
    void setDebug(boolean) -> a
    void setFontname(java.lang.String) -> a
    void setFontsizes(int,int,int,int) -> a
    void setFontStyle(int) -> a
    void setBackground(java.awt.Color) -> setBackground
    java.awt.Color getBackground() -> getBackground
    void setForeground(java.awt.Color) -> setForeground
    java.awt.Color getForeground() -> getForeground
    void setEditable(boolean) -> b
    void mousePressed(java.awt.event.MouseEvent) -> mousePressed
    void mouseReleased(java.awt.event.MouseEvent) -> mouseReleased
    void mouseEntered(java.awt.event.MouseEvent) -> mouseEntered
    void mouseExited(java.awt.event.MouseEvent) -> mouseExited
    void mouseClicked(java.awt.event.MouseEvent) -> mouseClicked
    void mouseMoved(java.awt.event.MouseEvent) -> mouseMoved
    void mouseDragged(java.awt.event.MouseEvent) -> mouseDragged
    void processMouseEvent(java.awt.event.MouseEvent) -> processMouseEvent
    void processMouseMotionEvent(java.awt.event.MouseEvent) -> processMouseMotionEvent
    java.awt.Dimension getPreferredSize() -> getPreferredSize
    java.awt.Dimension getSizeof(java.lang.String) -> a
    java.awt.Dimension getMinimumSize() -> getMinimumSize
    void paintComponent(java.awt.Graphics) -> paintComponent
jasymca.Add -> jasymca.l:
    java.lang.Object lambda(java.lang.Object) -> a
jasymca.Algebraic -> jasymca.x:
    jasymca.Algebraic add(jasymca.Algebraic) -> b
    jasymca.Algebraic mult(jasymca.Algebraic) -> c
    jasymca.Algebraic div(jasymca.Algebraic) -> d
    jasymca.Algebraic deriv(jasymca.Variable) -> a
    jasymca.Algebraic integrate(jasymca.Variable) -> b
    double norm() -> a
    jasymca.Algebraic rat() -> c
    jasymca.Algebraic map(jasymca.LambdaAlgebraic) -> a
    jasymca.Algebraic[] div(jasymca.Algebraic,jasymca.Algebraic[]) -> a
    boolean depends(jasymca.Variable) -> b
    jasymca.Algebraic horner(jasymca.Variable,jasymca.Algebraic[],int) -> a
    jasymca.Algebraic horner(jasymca.Variable,jasymca.Algebraic[]) -> a
    jasymca.Algebraic sub(jasymca.Algebraic) -> f
    jasymca.Algebraic reduce() -> b
    boolean equals(java.lang.Object) -> equals
    java.lang.Object toPrefix() -> a
    jasymca.Algebraic pow_n(int) -> b
    jasymca.Algebraic value(jasymca.Variable,jasymca.Algebraic) -> a
    jasymca.Algebraic realpart() -> d
    jasymca.Algebraic imagpart() -> e
    jasymca.Algebraic cc() -> a
    int degree(jasymca.Variable) -> a
    jasymca.Algebraic coefficient(jasymca.Variable,int) -> a
    jasymca.Algebraic polydiv(jasymca.Algebraic) -> g
    jasymca.Algebraic mod(jasymca.Algebraic,jasymca.Variable) -> a
    jasymca.Algebraic euclid(jasymca.Algebraic,jasymca.Variable) -> b
    jasymca.Algebraic poly_gcd(jasymca.Algebraic) -> h
    jasymca.Algebraic content(jasymca.Variable) -> c
    void p(java.lang.String) -> a
jasymca.Assign -> jasymca.a:
    java.lang.Object lambda(java.lang.Object) -> a
jasymca.CollectExp -> jasymca.o:
    java.util.Vector v -> a
    jasymca.Algebraic f_exakt(jasymca.Algebraic) -> a
    int cfs(double) -> a
jasymca.Comma -> jasymca.E:
    java.lang.Object lambda(java.lang.Object) -> a
jasymca.Constant -> jasymca.d:
    jasymca.Unexakt value -> a
    boolean smaller(jasymca.Variable) -> a
jasymca.CreateVector -> jasymca.m:
    java.lang.Object lambda(java.lang.Object) -> a
jasymca.DeExp -> jasymca.p:
    jasymca.Algebraic f_exakt(jasymca.Algebraic) -> a
jasymca.Div -> jasymca.k:
    java.lang.Object lambda(java.lang.Object) -> a
jasymca.Environment -> jasymca.D:
    jasymca.Polynomial NULL -> a
    void putValue(java.lang.String,java.lang.Object) -> a
    java.lang.Object getValue(java.lang.String) -> a
    jasymca.Zahl getnum(java.lang.String) -> a
    void initLambdaFunctions() -> a
jasymca.Exakt -> jasymca.K:
    java.math.BigInteger[] real -> a
    java.math.BigInteger[] imag -> b
    java.math.BigInteger double2big(double) -> a
    java.math.BigInteger[] double2rat(double) -> a
    double[] cfs(double,double) -> a
    void cfsd(java.util.Vector,double[]) -> a
    jasymca.Exakt cfs(double) -> a
    java.math.BigInteger[] cfs(java.util.Vector) -> a
    java.math.BigInteger[] reducev(java.math.BigInteger[]) -> a
    jasymca.Algebraic realpart() -> d
    jasymca.Algebraic imagpart() -> e
    double floatValue(java.math.BigInteger[]) -> a
    jasymca.Unexakt tofloat() -> b
    java.math.BigInteger[] add(java.math.BigInteger[],java.math.BigInteger[]) -> a
    java.math.BigInteger[] sub(java.math.BigInteger[],java.math.BigInteger[]) -> b
    java.math.BigInteger[] mult(java.math.BigInteger[],java.math.BigInteger[]) -> c
    java.math.BigInteger[] div(java.math.BigInteger[],java.math.BigInteger[]) -> d
    boolean equals(java.math.BigInteger[],java.math.BigInteger[]) -> a
    jasymca.Algebraic add(jasymca.Algebraic) -> b
    jasymca.Algebraic mult(jasymca.Algebraic) -> c
    jasymca.Algebraic div(jasymca.Algebraic) -> d
    jasymca.Algebraic[] div(jasymca.Algebraic,jasymca.Algebraic[]) -> a
    java.lang.String b2string(java.math.BigInteger[]) -> a
    java.lang.String toString() -> toString
    boolean integerq() -> b
    boolean smaller(jasymca.Zahl) -> a
    boolean komplexq() -> a
    boolean equals(java.lang.Object) -> equals
    double norm() -> a
    jasymca.Algebraic rat() -> c
    jasymca.Zahl abs() -> a
    jasymca.Exakt gcd(jasymca.Exakt) -> a
    int intval() -> a
jasymca.ExpandConstants -> jasymca.g:
    jasymca.Algebraic f_exakt(jasymca.Algebraic) -> a
jasymca.ExpandUser -> jasymca.f:
    jasymca.Algebraic f_exakt(jasymca.Algebraic) -> a
jasymca.Exponential -> jasymca.h:
    jasymca.Variable expvar -> a
    jasymca.Algebraic exp_b -> a
    jasymca.Algebraic poly2exp(jasymca.Algebraic) -> a
    jasymca.Algebraic cc() -> a
    boolean containsexp(jasymca.Algebraic) -> a
    jasymca.Algebraic add(jasymca.Algebraic) -> b
    jasymca.Algebraic mult(jasymca.Algebraic) -> c
    jasymca.Algebraic reduce() -> b
    jasymca.Algebraic div(jasymca.Algebraic) -> d
    jasymca.Algebraic map(jasymca.LambdaAlgebraic) -> a
jasymca.Fact -> jasymca.b:
    java.lang.Object lambda(java.lang.Object) -> a
    jasymca.Algebraic f_exakt(jasymca.Algebraic) -> a
    jasymca.Zahl f(jasymca.Zahl) -> a
jasymca.FunctionDefine -> jasymca.v:
    java.lang.Object lambda(java.lang.Object) -> a
jasymca.FunctionVariable -> jasymca.H:
    java.lang.String fname -> a
    jasymca.Algebraic arg -> a
    jasymca.LambdaAlgebraic la -> a
    jasymca.Algebraic deriv(jasymca.Variable) -> a
    jasymca.Algebraic integrate(jasymca.Variable) -> b
    jasymca.Algebraic create(java.lang.String,jasymca.Algebraic) -> a
    boolean equals(java.lang.Object) -> equals
    jasymca.Algebraic value(jasymca.Variable,jasymca.Algebraic) -> a
    java.lang.Object toPrefix() -> a
    boolean smaller(jasymca.Variable) -> a
    jasymca.Variable cc() -> a
    java.lang.String toString() -> toString
jasymca.GeoGebraJasymca -> jasymca.G:
    java.lang.StringBuffer sb -> a
    java.lang.String evaluate(java.lang.String) -> a
    java.lang.String[] getPolynomialCoeffs(java.lang.String,java.lang.String) -> a
jasymca.GetExpVars -> jasymca.n:
    java.util.Vector v -> a
    jasymca.Algebraic f_exakt(jasymca.Algebraic) -> a
jasymca.Jasymca -> jasymca.s:
    java.lang.String JasymcaRC -> a
    jasymca.Environment env -> a
    java.lang.String EXIT -> b
    java.io.InputStream getFileInputStream(java.lang.String) -> a
    java.io.OutputStream getFileOutputStream(java.lang.String,boolean) -> a
    java.lang.String formatExpression(java.lang.Object) -> a
    boolean binaryq(java.lang.String) -> a
    java.lang.String infix(java.lang.Object) -> b
    java.lang.Object eval(java.lang.String) -> a
    java.lang.Object evalPrefix(java.lang.Object,boolean,jasymca.Environment) -> a
    jasymca.Algebraic evalx(java.lang.String,jasymca.Algebraic,jasymca.Environment) -> a
jasymca.JasymcaException -> jasymca.j:
jasymca.Lambda -> jasymca.Lambda:
    jasymca.Environment env -> a
    java.lang.Object lambda(java.lang.Object) -> a
    java.util.Vector getArgs(java.lang.Object) -> a
jasymca.LambdaACOS -> jasymca.LambdaACOS:
    jasymca.Zahl f(jasymca.Zahl) -> a
    jasymca.Algebraic f_exakt(jasymca.Algebraic) -> a
jasymca.LambdaACOSH -> jasymca.LambdaACOSH:
    jasymca.Zahl f(jasymca.Zahl) -> a
    jasymca.Algebraic f_exakt(jasymca.Algebraic) -> a
jasymca.LambdaALGSYS -> jasymca.LambdaALGSYS:
    java.lang.Object lambda(java.lang.Object) -> a
    jasymca.Vektor solvesys(java.util.Vector,java.util.Vector) -> a
    java.util.Vector clonev(java.util.Vector) -> a
    jasymca.Vektor solve(java.util.Vector,java.util.Vector,int) -> a
jasymca.LambdaALLROOTS -> jasymca.LambdaALLROOTS:
    java.lang.Object lambda(java.lang.Object) -> a
jasymca.LambdaASIN -> jasymca.LambdaASIN:
    jasymca.Zahl f(jasymca.Zahl) -> a
    jasymca.Algebraic f_exakt(jasymca.Algebraic) -> a
jasymca.LambdaASINH -> jasymca.LambdaASINH:
    jasymca.Zahl f(jasymca.Zahl) -> a
    jasymca.Algebraic f_exakt(jasymca.Algebraic) -> a
jasymca.LambdaATAN -> jasymca.LambdaATAN:
    jasymca.Zahl f(jasymca.Zahl) -> a
    jasymca.Algebraic f_exakt(jasymca.Algebraic) -> a
jasymca.LambdaATANH -> jasymca.LambdaATANH:
    jasymca.Zahl f(jasymca.Zahl) -> a
    jasymca.Algebraic f_exakt(jasymca.Algebraic) -> a
jasymca.LambdaAlgebraic -> jasymca.LambdaAlgebraic:
    java.lang.String diffrule -> b
    java.lang.String intrule -> c
    java.lang.String trigrule -> d
    java.lang.Object lambda(java.lang.Object) -> a
    jasymca.Zahl f(jasymca.Zahl) -> a
    jasymca.Algebraic f_exakt(jasymca.Algebraic) -> a
    jasymca.Algebraic integrate(jasymca.Algebraic,jasymca.Variable) -> a
jasymca.LambdaCBRT -> jasymca.LambdaCBRT:
    jasymca.Zahl f(jasymca.Zahl) -> a
    jasymca.Algebraic f_exakt(jasymca.Algebraic) -> a
jasymca.LambdaCFS -> jasymca.LambdaCFS:
    java.lang.Object lambda(java.lang.Object) -> a
jasymca.LambdaCOS -> jasymca.LambdaCOS:
    jasymca.Zahl f(jasymca.Zahl) -> a
    jasymca.Algebraic f_exakt(jasymca.Algebraic) -> a
jasymca.LambdaCOSH -> jasymca.LambdaCOSH:
    jasymca.Zahl f(jasymca.Zahl) -> a
    jasymca.Algebraic f_exakt(jasymca.Algebraic) -> a
jasymca.LambdaDIFF -> jasymca.LambdaDIFF:
    java.lang.Object lambda(java.lang.Object) -> a
jasymca.LambdaDIVIDE -> jasymca.LambdaDIVIDE:
    java.lang.Object lambda(java.lang.Object) -> a
jasymca.LambdaEXIT -> jasymca.LambdaEXIT:
    java.lang.Object lambda(java.lang.Object) -> a
jasymca.LambdaEXP -> jasymca.LambdaEXP:
    jasymca.Zahl f(jasymca.Zahl) -> a
    jasymca.Algebraic f_exakt(jasymca.Algebraic) -> a
    jasymca.Algebraic fzexakt(jasymca.Zahl) -> a
jasymca.LambdaEXPAND -> jasymca.LambdaEXPAND:
    java.lang.Object lambda(java.lang.Object) -> a
jasymca.LambdaFLOAT -> jasymca.LambdaFLOAT:
    double eps -> a
    java.lang.Object lambda(java.lang.Object) -> a
    jasymca.Zahl f(jasymca.Zahl) -> a
    jasymca.Algebraic f_exakt(jasymca.Algebraic) -> a
jasymca.LambdaGCD -> jasymca.LambdaGCD:
    java.lang.Object lambda(java.lang.Object) -> a
    jasymca.Algebraic gcd(jasymca.Algebraic,jasymca.Algebraic) -> a
jasymca.LambdaIMAGPART -> jasymca.LambdaIMAGPART:
    java.lang.Object lambda(java.lang.Object) -> a
jasymca.LambdaINTEGRATE -> jasymca.LambdaINTEGRATE:
    java.lang.Object lambda(java.lang.Object) -> a
jasymca.LambdaLINSOLVE -> jasymca.LambdaLINSOLVE:
    java.lang.Object lambda(java.lang.Object) -> a
    void pivot(jasymca.Matrix,jasymca.Vektor,int) -> a
    jasymca.Vektor Gauss(jasymca.Matrix,jasymca.Vektor) -> a
jasymca.LambdaLOADFILE -> jasymca.LambdaLOADFILE:
    java.lang.Object lambda(java.lang.Object) -> a
    java.lang.String readLine(java.io.InputStream) -> a
jasymca.LambdaLOG -> jasymca.LambdaLOG:
    jasymca.Zahl f(jasymca.Zahl) -> a
    jasymca.Algebraic f_exakt(jasymca.Algebraic) -> a
jasymca.LambdaLSUM -> jasymca.LambdaLSUM:
    java.lang.Object lambda(java.lang.Object) -> a
jasymca.LambdaRAT -> jasymca.LambdaRAT:
    java.lang.Object lambda(java.lang.Object) -> a
    jasymca.Algebraic f_exakt(jasymca.Algebraic) -> a
    jasymca.Zahl f(jasymca.Zahl) -> a
jasymca.LambdaREALPART -> jasymca.LambdaREALPART:
    java.lang.Object lambda(java.lang.Object) -> a
jasymca.LambdaROMBERG -> jasymca.LambdaROMBERG:
    java.lang.Object lambda(java.lang.Object) -> a
    jasymca.Algebraic trapez(jasymca.Algebraic,jasymca.Variable,int,double,double) -> a
jasymca.LambdaROOT -> jasymca.LambdaROOT:
    jasymca.Zahl f(jasymca.Zahl) -> a
    jasymca.Algebraic f_exakt(jasymca.Algebraic) -> a
jasymca.LambdaROUND -> jasymca.LambdaROUND:
    jasymca.Zahl f(jasymca.Zahl) -> a
    jasymca.Algebraic f_exakt(jasymca.Algebraic) -> a
jasymca.LambdaSAVE -> jasymca.LambdaSAVE:
    java.lang.Object lambda(java.lang.Object) -> a
jasymca.LambdaSIGN -> jasymca.LambdaSIGN:
    jasymca.Algebraic f_exakt(jasymca.Algebraic) -> a
    jasymca.Zahl f(jasymca.Zahl) -> a
jasymca.LambdaSIN -> jasymca.LambdaSIN:
    jasymca.Zahl f(jasymca.Zahl) -> a
    jasymca.Algebraic f_exakt(jasymca.Algebraic) -> a
jasymca.LambdaSINH -> jasymca.LambdaSINH:
    jasymca.Zahl f(jasymca.Zahl) -> a
    jasymca.Algebraic f_exakt(jasymca.Algebraic) -> a
jasymca.LambdaSOLVE -> jasymca.LambdaSOLVE:
    java.lang.Object lambda(java.lang.Object) -> a
    jasymca.Algebraic linfaktor(jasymca.Algebraic,jasymca.Variable) -> a
    jasymca.Vektor solve(jasymca.Algebraic,jasymca.Variable) -> a
    jasymca.Algebraic finvert(jasymca.FunctionVariable,jasymca.Algebraic) -> a
jasymca.LambdaSQFR -> jasymca.LambdaSQFR:
    java.lang.Object lambda(java.lang.Object) -> a
jasymca.LambdaSQRT -> jasymca.LambdaSQRT:
    java.lang.String intrule2 -> a
    jasymca.Algebraic integrate(jasymca.Algebraic,jasymca.Variable) -> a
    jasymca.Zahl f(jasymca.Zahl) -> a
    jasymca.Algebraic f_exakt(jasymca.Algebraic) -> a
    jasymca.Algebraic fzexakt(jasymca.Zahl) -> a
    long introot(long) -> a
jasymca.LambdaSUBST -> jasymca.LambdaSUBST:
    java.lang.Object lambda(java.lang.Object) -> a
jasymca.LambdaSUM -> jasymca.LambdaSUM:
    java.lang.Object lambda(java.lang.Object) -> a
jasymca.LambdaTAN -> jasymca.LambdaTAN:
    jasymca.Zahl f(jasymca.Zahl) -> a
    jasymca.Algebraic f_exakt(jasymca.Algebraic) -> a
jasymca.LambdaTANH -> jasymca.LambdaTANH:
    jasymca.Zahl f(jasymca.Zahl) -> a
    jasymca.Algebraic f_exakt(jasymca.Algebraic) -> a
jasymca.LambdaTAYLOR -> jasymca.LambdaTAYLOR:
    java.lang.Object lambda(java.lang.Object) -> a
jasymca.LambdaTRIGEXP -> jasymca.LambdaTRIGEXP:
    java.lang.Object lambda(java.lang.Object) -> a
jasymca.LambdaTRIGRAT -> jasymca.LambdaTRIGRAT:
    java.lang.Object lambda(java.lang.Object) -> a
jasymca.Lisp -> jasymca.t:
    java.lang.Object inpr_rules -> a
    java.lang.String[][] inpr_rules_in -> a
    java.lang.Class class$0 -> a
    void p(java.lang.String) -> a
    jasymca.Pair list(java.lang.Object) -> a
    java.lang.Object list(java.lang.Object,java.lang.Object) -> a
    boolean listq(java.lang.Object) -> a
    java.lang.Object car(java.lang.Object) -> b
    java.lang.Object cdr(java.lang.Object) -> c
    jasymca.Pair cons(java.lang.Object,java.lang.Object) -> a
    boolean equal(java.lang.Object,java.lang.Object) -> a
    int length(java.lang.Object) -> a
    java.lang.Object list2atom(java.lang.Object) -> d
    java.lang.Object reverse(java.lang.Object) -> e
    java.lang.Object mapreverse(java.lang.Object) -> f
    boolean kindof(java.lang.Object,java.lang.Class) -> a
    boolean algebraicq(java.lang.Object) -> b
    java.lang.Object read(java.lang.String) -> a
    boolean whitespace(char) -> a
    boolean oneof(char,java.lang.String) -> a
    java.lang.Object nextObject(java.lang.StringBuffer) -> a
    java.lang.Object expConstant(java.lang.String) -> b
    java.lang.Object expandMult(java.lang.Object) -> g
    java.lang.Object expandExp(java.lang.Object) -> h
    java.lang.Object expandFundef(java.lang.Object) -> i
    boolean noop(java.lang.Object) -> c
    boolean noinfixop(java.lang.Object) -> d
    boolean variableq(java.lang.Object) -> e
    boolean matches(java.lang.Object,java.lang.Object) -> b
    java.lang.Object pat_match(java.lang.Object,java.lang.Object) -> b
    java.lang.Object pat_match_rl(java.lang.Object,java.lang.Object) -> c
    java.lang.Object change(java.lang.Object,java.lang.Object) -> d
    java.lang.Object translator(java.lang.Object,java.lang.Object) -> e
    java.lang.Object exp_lhs(java.lang.Object) -> j
    java.lang.Object exp_rhs(java.lang.Object) -> k
    java.lang.Object in_pr(java.lang.Object) -> l
    java.lang.Object makeRules(java.lang.String[][]) -> a
    java.lang.Object compile_rule(java.lang.String) -> c
jasymca.Matrix -> jasymca.u:
    jasymca.Algebraic[][] a -> a
    jasymca.Algebraic add(jasymca.Algebraic) -> b
    jasymca.Algebraic mult(jasymca.Algebraic) -> c
    jasymca.Algebraic div(jasymca.Algebraic) -> d
    jasymca.Algebraic deriv(jasymca.Variable) -> a
    jasymca.Algebraic integrate(jasymca.Variable) -> b
    double norm() -> a
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
    jasymca.Algebraic map(jasymca.LambdaAlgebraic) -> a
jasymca.Mult -> jasymca.M:
    java.lang.Object lambda(java.lang.Object) -> a
jasymca.NormExp -> jasymca.e:
    jasymca.Algebraic f_exakt(jasymca.Algebraic) -> a
jasymca.Pair -> jasymca.C:
    java.lang.Object car -> a
    java.lang.Object cdr -> b
    java.lang.String toString() -> toString
    boolean equals(java.lang.Object) -> equals
jasymca.ParseException -> jasymca.J:
jasymca.Polynomial -> jasymca.r:
    jasymca.Algebraic[] coef -> a
    jasymca.Variable var -> b
    jasymca.Polynomial top -> a
    boolean loopPartial -> a
    jasymca.Algebraic[] norm(jasymca.Algebraic[]) -> a
    jasymca.Algebraic coefficient(int) -> a
    int degree() -> a
    jasymca.Algebraic add(jasymca.Algebraic) -> b
    jasymca.Algebraic mult(jasymca.Algebraic) -> c
    jasymca.Algebraic div(jasymca.Algebraic) -> d
    jasymca.Algebraic[] div(jasymca.Algebraic,jasymca.Algebraic[]) -> a
    jasymca.Algebraic reduce() -> b
    jasymca.Algebraic[] clone(jasymca.Algebraic[]) -> b
    java.lang.String toString() -> toString
    boolean equals(java.lang.Object) -> equals
    java.lang.Object toPrefix() -> a
    jasymca.Algebraic deriv(jasymca.Variable) -> a
    boolean constcoef(jasymca.Variable) -> a
    java.util.Vector depvars(jasymca.Variable) -> a
    boolean depends(jasymca.Variable) -> b
    jasymca.Algebraic integrate(jasymca.Variable) -> b
    jasymca.Algebraic cc() -> a
    jasymca.Algebraic value(jasymca.Variable,jasymca.Algebraic) -> a
    jasymca.Algebraic value(jasymca.Algebraic) -> e
    double norm() -> a
    jasymca.Polynomial monic() -> a
    jasymca.Algebraic map(jasymca.LambdaAlgebraic) -> a
    boolean dependsmult(jasymca.Variable) -> c
    jasymca.Algebraic[] square_free_dec(jasymca.Variable) -> a
    jasymca.Vektor solve(jasymca.Variable) -> a
    jasymca.Vektor solvepoly() -> a
    int gcd(int,int) -> a
    jasymca.Vektor bairstow() -> b
    jasymca.Zahl[] pqsolve(double,double) -> a
jasymca.Pow -> jasymca.y:
    java.lang.Object lambda(java.lang.Object) -> a
jasymca.Rational -> jasymca.A:
    jasymca.Algebraic nom -> a
    jasymca.Polynomial den -> a
    jasymca.Algebraic reduce() -> b
    jasymca.Algebraic add(jasymca.Algebraic) -> b
    jasymca.Algebraic sub(jasymca.Algebraic) -> f
    jasymca.Algebraic mult(jasymca.Algebraic) -> c
    jasymca.Algebraic div(jasymca.Algebraic) -> d
    jasymca.Algebraic[] div(jasymca.Algebraic,jasymca.Algebraic[]) -> a
    java.lang.String toString() -> toString
    boolean equals(java.lang.Object) -> equals
    jasymca.Algebraic deriv(jasymca.Variable) -> a
    jasymca.Algebraic integrate(jasymca.Variable) -> b
    double norm() -> a
    java.lang.Object toPrefix() -> a
    jasymca.Algebraic cc() -> a
    boolean depends(jasymca.Variable) -> b
    jasymca.Algebraic value(jasymca.Variable,jasymca.Algebraic) -> a
    jasymca.Algebraic map(jasymca.LambdaAlgebraic) -> a
    jasymca.Vektor horowitz(jasymca.Algebraic,jasymca.Polynomial,jasymca.Variable) -> a
    jasymca.Algebraic intrat(jasymca.Variable) -> d
    jasymca.Algebraic makelog(jasymca.Algebraic,jasymca.Variable,jasymca.Algebraic) -> a
jasymca.SimpleVariable -> jasymca.I:
    java.lang.String name -> a
    jasymca.SimpleVariable top -> a
    jasymca.Algebraic deriv(jasymca.Variable) -> a
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
    java.lang.Object toPrefix() -> a
    boolean smaller(jasymca.Variable) -> a
    jasymca.Algebraic value(jasymca.Variable,jasymca.Algebraic) -> a
jasymca.SqrtExpand -> jasymca.B:
    jasymca.Algebraic f_exakt(jasymca.Algebraic) -> a
jasymca.Sub -> jasymca.c:
    java.lang.Object lambda(java.lang.Object) -> a
jasymca.TrigExpand -> jasymca.q:
    jasymca.Algebraic f_exakt(jasymca.Algebraic) -> a
jasymca.TrigInverseExpand -> jasymca.F:
    jasymca.Algebraic f_exakt(jasymca.Algebraic) -> a
    boolean minus(jasymca.Algebraic) -> a
jasymca.Unexakt -> jasymca.L:
    double real -> a
    double imag -> b
    double norm() -> a
    jasymca.Algebraic add(jasymca.Algebraic) -> b
    jasymca.Algebraic mult(jasymca.Algebraic) -> c
    jasymca.Algebraic div(jasymca.Algebraic) -> d
    java.lang.String toString() -> toString
    boolean integerq() -> b
    boolean komplexq() -> a
    jasymca.Algebraic realpart() -> d
    jasymca.Algebraic imagpart() -> e
    boolean equals(java.lang.Object) -> equals
    boolean smaller(jasymca.Zahl) -> a
    int intval() -> a
    jasymca.Zahl abs() -> a
    jasymca.Algebraic rat() -> c
jasymca.UserFunction -> jasymca.z:
    java.lang.String fname -> a
    jasymca.Algebraic body -> a
    jasymca.Variable[] var -> a
    java.lang.Object lambda(java.lang.Object) -> a
    jasymca.Zahl f(jasymca.Zahl) -> a
    jasymca.Algebraic fv(jasymca.Vektor) -> a
    jasymca.Algebraic integrate(jasymca.Algebraic,jasymca.Variable) -> a
jasymca.Variable -> jasymca.N:
    jasymca.Algebraic deriv(jasymca.Variable) -> a
    java.lang.Object toPrefix() -> a
    boolean equals(java.lang.Object) -> equals
    boolean smaller(jasymca.Variable) -> a
    jasymca.Algebraic value(jasymca.Variable,jasymca.Algebraic) -> a
    jasymca.Variable cc() -> a
jasymca.Vektor -> jasymca.w:
    jasymca.Algebraic[] coord -> a
    jasymca.Vektor create(java.util.Vector) -> a
    jasymca.Algebraic komp(int) -> a
    int dim() -> a
    java.util.Vector vector() -> a
    jasymca.Algebraic reduce() -> b
    jasymca.Algebraic map(jasymca.LambdaAlgebraic) -> a
    jasymca.Algebraic add(jasymca.Algebraic) -> b
    jasymca.Algebraic mult(jasymca.Algebraic) -> c
    jasymca.Algebraic div(jasymca.Algebraic) -> d
    jasymca.Algebraic deriv(jasymca.Variable) -> a
    jasymca.Algebraic integrate(jasymca.Variable) -> b
    double norm() -> a
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
    boolean number() -> a
    boolean depends(jasymca.Variable) -> b
jasymca.Zahl -> jasymca.i:
    jasymca.Zahl ZERO -> a
    jasymca.Zahl ONE -> b
    jasymca.Zahl TWO -> c
    jasymca.Zahl MINUS -> d
    jasymca.Zahl IONE -> e
    jasymca.Zahl IMINUS -> f
    jasymca.Polynomial PI -> a
    jasymca.Algebraic SQRT2 -> a
    jasymca.Algebraic SQRT3 -> b
    void init() -> a
    jasymca.Algebraic div(jasymca.Algebraic) -> d
    jasymca.Algebraic deriv(jasymca.Variable) -> a
    jasymca.Algebraic integrate(jasymca.Variable) -> b
    int intval() -> a
    boolean komplexq() -> a
    jasymca.Algebraic value(jasymca.Variable,jasymca.Algebraic) -> a
    jasymca.Algebraic cc() -> a
    jasymca.Exakt exakt() -> a
    jasymca.Unexakt unexakt() -> a
    jasymca.Algebraic map(jasymca.LambdaAlgebraic) -> a
    jasymca.Zahl gcd(jasymca.Zahl) -> a
    boolean smaller(jasymca.Zahl) -> a
    jasymca.Algebraic[] div(jasymca.Algebraic,jasymca.Algebraic[]) -> a
    boolean integerq() -> b
org.freehep.graphics2d.AbstractVectorGraphics -> org.freehep.graphics2d.e:
    org.freehep.util.UserProperties properties -> a
    java.lang.String creator -> a
    boolean isDeviceIndependent -> a
    org.freehep.graphics2d.SymbolShape cachedShape -> a
    int colorMode -> a
    java.awt.Color backgroundColor -> a
    java.awt.Color currentColor -> b
    java.awt.Paint currentPaint -> a
    java.awt.Font currentFont -> a
    void setProperties(java.util.Properties) -> setProperties
    void initProperties(java.util.Properties) -> initProperties
    java.util.Properties getProperties() -> getProperties
    java.lang.String getProperty(java.lang.String) -> getProperty
    java.awt.Color getPropertyColor(java.lang.String) -> getPropertyColor
    java.awt.Rectangle getPropertyRectangle(java.lang.String) -> getPropertyRectangle
    java.awt.Insets getPropertyInsets(java.lang.String) -> getPropertyInsets
    java.awt.Dimension getPropertyDimension(java.lang.String) -> getPropertyDimension
    int getPropertyInt(java.lang.String) -> getPropertyInt
    double getPropertyDouble(java.lang.String) -> getPropertyDouble
    boolean isProperty(java.lang.String) -> isProperty
    java.lang.String getCreator() -> getCreator
    void setCreator(java.lang.String) -> setCreator
    boolean isDeviceIndependent() -> isDeviceIndependent
    void setDeviceIndependent(boolean) -> setDeviceIndependent
    java.awt.Font getFont() -> getFont
    void setFont(java.awt.Font) -> setFont
    void drawSymbol(int,int,int,int) -> drawSymbol
    void fillSymbol(int,int,int,int) -> fillSymbol
    void fillAndDrawSymbol(int,int,int,int,java.awt.Color) -> fillAndDrawSymbol
    void drawSymbol(double,double,double,int) -> drawSymbol
    void drawSymbol(org.freehep.graphics2d.VectorGraphics,double,double,double,int) -> drawSymbol
    void fillSymbol(double,double,double,int) -> fillSymbol
    void fillSymbol(org.freehep.graphics2d.VectorGraphics,double,double,double,int) -> fillSymbol
    void fillAndDrawSymbol(double,double,double,int,java.awt.Color) -> fillAndDrawSymbol
    void fillAndDraw(java.awt.Shape,java.awt.Color) -> fillAndDraw
    void clearRect(int,int,int,int) -> clearRect
    void drawLine(int,int,int,int) -> drawLine
    void drawRect(int,int,int,int) -> drawRect
    void fillRect(int,int,int,int) -> fillRect
    void drawArc(int,int,int,int,int,int) -> drawArc
    void fillArc(int,int,int,int,int,int) -> fillArc
    void drawOval(int,int,int,int) -> drawOval
    void fillOval(int,int,int,int) -> fillOval
    void drawRoundRect(int,int,int,int,int,int) -> drawRoundRect
    void fillRoundRect(int,int,int,int,int,int) -> fillRoundRect
    void translate(int,int) -> translate
    void setLineWidth(int) -> setLineWidth
    void setLineWidth(double) -> setLineWidth
    void drawString(java.lang.String,int,int) -> drawString
    void drawString(java.lang.String,float,float) -> drawString
    void drawString(java.text.AttributedCharacterIterator,int,int) -> drawString
    java.awt.geom.Point2D drawFrameAndBanner(java.awt.font.TextLayout,double,double,int,int,boolean,java.awt.Color,double,boolean,java.awt.Color) -> drawFrameAndBanner
    void drawString(java.lang.String,double,double,int,int,boolean,java.awt.Color,double,boolean,java.awt.Color) -> drawString
    void drawString(org.freehep.graphics2d.TagString,double,double,int,int,boolean,java.awt.Color,double,boolean,java.awt.Color) -> drawString
    void drawString(java.lang.String,double,double,int,int) -> drawString
    void drawString(org.freehep.graphics2d.TagString,double,double) -> drawString
    void drawString(org.freehep.graphics2d.TagString,double,double,int,int) -> drawString
    int getColorMode() -> getColorMode
    void setColorMode(int) -> setColorMode
    java.awt.Color getBackground() -> getBackground
    void setBackground(java.awt.Color) -> setBackground
    void setColor(java.awt.Color) -> setColor
    java.awt.Color getColor() -> getColor
    void setPaint(java.awt.Paint) -> setPaint
    java.awt.Paint getPaint() -> getPaint
    java.awt.Color getPrintColor(java.awt.Color) -> getPrintColor
    void rotate(double,double,double) -> rotate
    void drawArc(double,double,double,double,double,double) -> drawArc
    void drawLine(double,double,double,double) -> drawLine
    void drawOval(double,double,double,double) -> drawOval
    void drawPolyline(int[],int[],int) -> drawPolyline
    void drawPolyline(double[],double[],int) -> drawPolyline
    void drawPolygon(int[],int[],int) -> drawPolygon
    void drawPolygon(double[],double[],int) -> drawPolygon
    void drawRect(double,double,double,double) -> drawRect
    void drawRoundRect(double,double,double,double,double,double) -> drawRoundRect
    void fillArc(double,double,double,double,double,double) -> fillArc
    void fillOval(double,double,double,double) -> fillOval
    void fillPolygon(int[],int[],int) -> fillPolygon
    void fillPolygon(double[],double[],int) -> fillPolygon
    void fillRect(double,double,double,double) -> fillRect
    void fillRoundRect(double,double,double,double,double,double) -> fillRoundRect
    java.awt.Shape createShape(double[],double[],int,boolean) -> createShape
    java.awt.Shape createShape(int[],int[],int,boolean,boolean) -> createShape
    boolean hit(java.awt.Rectangle,java.awt.Shape,boolean) -> hit
org.freehep.graphics2d.ArrayPath -> org.freehep.graphics2d.d:
    double[] xPoints -> a
    double[] yPoints -> b
    int nPoints -> a
    boolean closed -> a
    int resolution -> b
    boolean contains(double,double) -> contains
    boolean contains(double,double,double,double) -> contains
    boolean contains(java.awt.geom.Point2D) -> contains
    boolean contains(java.awt.geom.Rectangle2D) -> contains
    boolean intersects(double,double,double,double) -> intersects
    boolean intersects(java.awt.geom.Rectangle2D) -> intersects
    java.awt.geom.PathIterator getPathIterator(java.awt.geom.AffineTransform,double) -> getPathIterator
    java.awt.geom.Rectangle2D getBounds2D() -> getBounds2D
    java.awt.Rectangle getBounds() -> getBounds
    java.awt.geom.PathIterator getPathIterator(java.awt.geom.AffineTransform) -> getPathIterator
org.freehep.graphics2d.ArrayPath$ArrayPathIterator -> org.freehep.graphics2d.c:
    double[] xPoints -> a
    double[] yPoints -> b
    double lastX -> a
    double lastY -> b
    int nPoints -> a
    boolean closed -> a
    int resolution -> b
    int currentPoint -> c
    boolean isDone -> b
    org.freehep.graphics2d.ArrayPath this$0 -> a
    boolean isDone() -> isDone
    void next() -> next
    int currentSegment(double[]) -> currentSegment
    int currentSegment(float[]) -> currentSegment
    int getWindingRule() -> getWindingRule
org.freehep.graphics2d.GenericTagHandler -> org.freehep.graphics2d.i:
    java.lang.Integer UNDERLINE_OVERLINE -> a
    java.awt.Graphics2D graphics -> a
    java.lang.StringBuffer clearedText -> a
    java.util.Vector attributes -> a
    java.util.Hashtable tags -> a
    java.util.Stack fontFamilyStack -> a
    double superscriptCorrection -> a
    void print(org.freehep.graphics2d.TagString,double,double,double) -> a
    java.awt.font.TextLayout createTextLayout(org.freehep.graphics2d.TagString,double) -> a
    java.lang.String openTag(java.lang.String) -> c
    java.lang.String closeTag(java.lang.String) -> d
    java.lang.String text(java.lang.String) -> e
org.freehep.graphics2d.GenericTagHandler$AttributeEntry -> org.freehep.graphics2d.h:
    int begin -> a
    int end -> b
    java.awt.font.TextAttribute textAttribute -> a
    java.lang.Object value -> a
    org.freehep.graphics2d.GenericTagHandler this$0 -> a
    void apply(java.text.AttributedString) -> a
org.freehep.graphics2d.PixelGraphics2D -> org.freehep.graphics2d.f:
    java.awt.RenderingHints$Key KEY_SYMBOL_BLIT -> a
    java.lang.Object VALUE_SYMBOL_BLIT_ON -> a
    java.lang.Object VALUE_SYMBOL_BLIT_OFF -> b
    java.awt.Graphics2D hostGraphics -> a
    double lineWidth -> a
    int resolution -> a
    org.freehep.graphics2d.GenericTagHandler tagHandler -> a
    java.util.Map symbols -> a
    org.freehep.graphics2d.WebColor webColor -> a
    boolean displayX11 -> a
    boolean displayLocal -> b
    void setHostGraphics(java.awt.Graphics) -> a
    void startExport() -> startExport
    void endExport() -> endExport
    void printComment(java.lang.String) -> printComment
    java.awt.Graphics create(double,double,double,double) -> create
    void clearRect(int,int,int,int) -> clearRect
    void clipRect(int,int,int,int) -> clipRect
    void copyArea(int,int,int,int,int,int) -> copyArea
    java.awt.Graphics create() -> create
    void dispose() -> dispose
    void drawArc(int,int,int,int,int,int) -> drawArc
    boolean drawImage(java.awt.Image,int,int,java.awt.Color,java.awt.image.ImageObserver) -> drawImage
    boolean drawImage(java.awt.Image,int,int,java.awt.image.ImageObserver) -> drawImage
    boolean drawImage(java.awt.Image,int,int,int,int,java.awt.Color,java.awt.image.ImageObserver) -> drawImage
    boolean drawImage(java.awt.Image,int,int,int,int,java.awt.image.ImageObserver) -> drawImage
    boolean drawImage(java.awt.Image,int,int,int,int,int,int,int,int,java.awt.Color,java.awt.image.ImageObserver) -> drawImage
    boolean drawImage(java.awt.Image,int,int,int,int,int,int,int,int,java.awt.image.ImageObserver) -> drawImage
    void drawLine(int,int,int,int) -> drawLine
    void drawOval(int,int,int,int) -> drawOval
    void drawPolygon(int[],int[],int) -> drawPolygon
    void drawPolygon(java.awt.Polygon) -> drawPolygon
    void drawPolyline(int[],int[],int) -> drawPolyline
    void drawRect(int,int,int,int) -> drawRect
    void drawString(java.lang.String,int,int) -> drawString
    void fillArc(int,int,int,int,int,int) -> fillArc
    void fillOval(int,int,int,int) -> fillOval
    void fillPolygon(int[],int[],int) -> fillPolygon
    void fillPolygon(java.awt.Polygon) -> fillPolygon
    void fillRect(int,int,int,int) -> fillRect
    void drawSymbol(double,double,double,int) -> drawSymbol
    void fillSymbol(double,double,double,int) -> fillSymbol
    void fillAndDrawSymbol(double,double,double,int,java.awt.Color) -> fillAndDrawSymbol
    void blitSymbol(double,double,int,int,boolean) -> a
    void setLineWidth(double) -> setLineWidth
    java.awt.Shape getClip() -> getClip
    java.awt.Rectangle getClipBounds() -> getClipBounds
    java.awt.Rectangle getClipBounds(java.awt.Rectangle) -> getClipBounds
    java.awt.FontMetrics getFontMetrics(java.awt.Font) -> getFontMetrics
    void setClip(int,int,int,int) -> setClip
    void setClip(java.awt.Shape) -> setClip
    void setFont(java.awt.Font) -> setFont
    void setColor(java.awt.Color) -> setColor
    void setPaint(java.awt.Paint) -> setPaint
    void setPaintMode() -> setPaintMode
    void setXORMode(java.awt.Color) -> setXORMode
    void translate(int,int) -> translate
    void addRenderingHints(java.util.Map) -> addRenderingHints
    void clip(java.awt.Shape) -> clip
    void draw(java.awt.Shape) -> draw
    void drawGlyphVector(java.awt.font.GlyphVector,float,float) -> drawGlyphVector
    void drawImage(java.awt.image.BufferedImage,java.awt.image.BufferedImageOp,int,int) -> drawImage
    boolean drawImage(java.awt.Image,java.awt.geom.AffineTransform,java.awt.image.ImageObserver) -> drawImage
    void drawRenderableImage(java.awt.image.renderable.RenderableImage,java.awt.geom.AffineTransform) -> drawRenderableImage
    void drawRenderedImage(java.awt.image.RenderedImage,java.awt.geom.AffineTransform) -> drawRenderedImage
    void drawString(java.text.AttributedCharacterIterator,float,float) -> drawString
    void drawString(java.text.AttributedCharacterIterator,int,int) -> drawString
    void drawString(java.lang.String,float,float) -> drawString
    void fill(java.awt.Shape) -> fill
    java.awt.Composite getComposite() -> getComposite
    java.awt.GraphicsConfiguration getDeviceConfiguration() -> getDeviceConfiguration
    java.awt.font.FontRenderContext getFontRenderContext() -> getFontRenderContext
    java.lang.Object getRenderingHint(java.awt.RenderingHints$Key) -> getRenderingHint
    java.awt.RenderingHints getRenderingHints() -> getRenderingHints
    java.awt.Stroke getStroke() -> getStroke
    java.awt.geom.AffineTransform getTransform() -> getTransform
    boolean hit(java.awt.Rectangle,java.awt.Shape,boolean) -> hit
    void rotate(double) -> rotate
    void rotate(double,double,double) -> rotate
    void scale(double,double) -> scale
    void setBackground(java.awt.Color) -> setBackground
    void setComposite(java.awt.Composite) -> setComposite
    void setRenderingHint(java.awt.RenderingHints$Key,java.lang.Object) -> setRenderingHint
    void setRenderingHints(java.util.Map) -> setRenderingHints
    void setStroke(java.awt.Stroke) -> setStroke
    void setTransform(java.awt.geom.AffineTransform) -> setTransform
    void shear(double,double) -> shear
    void transform(java.awt.geom.AffineTransform) -> transform
    void translate(double,double) -> translate
    void clearRect(double,double,double,double) -> clearRect
    void clipRect(double,double,double,double) -> clipRect
    void drawString(java.lang.String,double,double) -> drawString
    void setClip(double,double,double,double) -> setClip
    java.lang.String toString() -> toString
    boolean isDisplayLocal() -> a
    java.awt.Shape createShape(double[],double[],int,boolean) -> createShape
org.freehep.graphics2d.PixelGraphics2D$SymbolBlitKey -> org.freehep.graphics2d.a:
    boolean isCompatibleValue(java.lang.Object) -> isCompatibleValue
    java.lang.String toString() -> toString
org.freehep.graphics2d.PrintColor -> org.freehep.graphics2d.l:
    java.awt.Color[] defaultColors -> a
    float asGray -> a
    boolean asBlack -> a
    void testColorValueRange(float) -> a
    float getAsGray() -> a
    boolean getAsBlack() -> a
    org.freehep.graphics2d.PrintColor getColor(int) -> a
    org.freehep.graphics2d.PrintColor createPrintColor(java.awt.Color) -> a
    java.awt.Color mixColor(java.awt.Color,java.awt.Color) -> a
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
    org.freehep.graphics2d.PrintColor invert(java.awt.Color) -> b
org.freehep.graphics2d.SymbolShape -> org.freehep.graphics2d.g:
    double SQRT_2 -> a
    double SQRT_3 -> b
    double[] points -> a
    int[] type -> a
    org.freehep.graphics2d.SymbolShape$ArrayPathIterator pathIterator -> a
    double x -> c
    double y -> d
    double size -> e
    int symbol -> a
    boolean contains(double,double) -> contains
    boolean contains(double,double,double,double) -> contains
    boolean contains(java.awt.geom.Point2D) -> contains
    boolean contains(java.awt.geom.Rectangle2D) -> contains
    boolean intersects(double,double,double,double) -> intersects
    boolean intersects(java.awt.geom.Rectangle2D) -> intersects
    java.awt.geom.PathIterator getPathIterator(java.awt.geom.AffineTransform,double) -> getPathIterator
    java.awt.geom.Rectangle2D getBounds2D() -> getBounds2D
    java.awt.Rectangle getBounds() -> getBounds
    java.awt.geom.PathIterator getPathIterator(java.awt.geom.AffineTransform) -> getPathIterator
    void createNew(int) -> a
    void create(int,double,double,double) -> a
    java.lang.String toString() -> toString
    void createHLine(double,double,double) -> a
    void createVLine(double,double,double) -> b
    void createPlus(double,double,double) -> c
    void createCross(double,double,double) -> d
    void createStar(double,double,double) -> e
    void createUpTriangle(double,double,double) -> f
    void createDownTriangle(double,double,double) -> g
    void createDiamond(double,double,double) -> h
    void createBox(double,double,double) -> i
    void ensureNumberOfPoints(int) -> b
org.freehep.graphics2d.SymbolShape$ArrayPathIterator -> org.freehep.graphics2d.j:
    int currentPoint -> a
    double[] points -> a
    int[] type -> a
    int numberOfPoints -> b
    org.freehep.graphics2d.SymbolShape this$0 -> a
    boolean isDone() -> isDone
    void next() -> next
    int currentSegment(double[]) -> currentSegment
    int currentSegment(float[]) -> currentSegment
    int getWindingRule() -> getWindingRule
    void reset() -> a
    void done() -> b
    double[] access$1(org.freehep.graphics2d.SymbolShape$ArrayPathIterator) -> a
    void access$2(org.freehep.graphics2d.SymbolShape$ArrayPathIterator) -> a
    void access$3(org.freehep.graphics2d.SymbolShape$ArrayPathIterator,int) -> a
    void access$4(org.freehep.graphics2d.SymbolShape$ArrayPathIterator) -> b
org.freehep.graphics2d.TagHandler -> org.freehep.graphics2d.TagHandler:
    java.lang.String parse(org.freehep.graphics2d.TagString) -> a
    java.lang.String defaultEntity(java.lang.String) -> a
    java.lang.String entity(java.lang.String) -> b
    java.lang.String openTag(java.lang.String) -> c
    java.lang.String closeTag(java.lang.String) -> d
    java.lang.String text(java.lang.String) -> e
    void main(java.lang.String[]) -> main
org.freehep.graphics2d.TagString -> org.freehep.graphics2d.TagString:
    java.lang.String string -> a
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
org.freehep.graphics2d.VectorGraphics -> org.freehep.graphics2d.k:
    java.util.Hashtable symbols -> a
    java.util.Hashtable alignments -> b
    void setProperties(java.util.Properties) -> setProperties
    void initProperties(java.util.Properties) -> initProperties
    java.util.Properties getProperties() -> getProperties
    java.lang.String getProperty(java.lang.String) -> getProperty
    java.awt.Color getPropertyColor(java.lang.String) -> getPropertyColor
    java.awt.Rectangle getPropertyRectangle(java.lang.String) -> getPropertyRectangle
    java.awt.Dimension getPropertyDimension(java.lang.String) -> getPropertyDimension
    int getPropertyInt(java.lang.String) -> getPropertyInt
    double getPropertyDouble(java.lang.String) -> getPropertyDouble
    boolean isProperty(java.lang.String) -> isProperty
    void clearRect(int,int,int,int) -> clearRect
    void clipRect(int,int,int,int) -> clipRect
    void copyArea(int,int,int,int,int,int) -> copyArea
    java.awt.Graphics create() -> create
    java.awt.Graphics create(int,int,int,int) -> create
    void dispose() -> dispose
    void drawArc(int,int,int,int,int,int) -> drawArc
    boolean drawImage(java.awt.Image,int,int,java.awt.image.ImageObserver) -> drawImage
    boolean drawImage(java.awt.Image,int,int,int,int,java.awt.image.ImageObserver) -> drawImage
    boolean drawImage(java.awt.Image,int,int,java.awt.Color,java.awt.image.ImageObserver) -> drawImage
    boolean drawImage(java.awt.Image,int,int,int,int,java.awt.Color,java.awt.image.ImageObserver) -> drawImage
    boolean drawImage(java.awt.Image,int,int,int,int,int,int,int,int,java.awt.image.ImageObserver) -> drawImage
    boolean drawImage(java.awt.Image,int,int,int,int,int,int,int,int,java.awt.Color,java.awt.image.ImageObserver) -> drawImage
    void drawLine(int,int,int,int) -> drawLine
    void drawOval(int,int,int,int) -> drawOval
    void drawPolygon(int[],int[],int) -> drawPolygon
    void drawPolyline(int[],int[],int) -> drawPolyline
    void drawRect(int,int,int,int) -> drawRect
    void drawRoundRect(int,int,int,int,int,int) -> drawRoundRect
    void drawString(java.text.AttributedCharacterIterator,int,int) -> drawString
    void drawString(java.lang.String,int,int) -> drawString
    void fillArc(int,int,int,int,int,int) -> fillArc
    void fillOval(int,int,int,int) -> fillOval
    void fillPolygon(int[],int[],int) -> fillPolygon
    void fillRect(int,int,int,int) -> fillRect
    void fillRoundRect(int,int,int,int,int,int) -> fillRoundRect
    java.awt.Shape getClip() -> getClip
    java.awt.Rectangle getClipBounds() -> getClipBounds
    java.awt.Rectangle getClipBounds(java.awt.Rectangle) -> getClipBounds
    java.awt.Color getColor() -> getColor
    java.awt.Font getFont() -> getFont
    java.awt.FontMetrics getFontMetrics(java.awt.Font) -> getFontMetrics
    void setClip(int,int,int,int) -> setClip
    void setClip(java.awt.Shape) -> setClip
    void setColor(java.awt.Color) -> setColor
    void setFont(java.awt.Font) -> setFont
    void setPaintMode() -> setPaintMode
    void setXORMode(java.awt.Color) -> setXORMode
    java.lang.String toString() -> toString
    void translate(int,int) -> translate
    void addRenderingHints(java.util.Map) -> addRenderingHints
    void clip(java.awt.Shape) -> clip
    void draw(java.awt.Shape) -> draw
    void drawGlyphVector(java.awt.font.GlyphVector,float,float) -> drawGlyphVector
    void drawImage(java.awt.image.BufferedImage,java.awt.image.BufferedImageOp,int,int) -> drawImage
    boolean drawImage(java.awt.Image,java.awt.geom.AffineTransform,java.awt.image.ImageObserver) -> drawImage
    void drawRenderableImage(java.awt.image.renderable.RenderableImage,java.awt.geom.AffineTransform) -> drawRenderableImage
    void drawRenderedImage(java.awt.image.RenderedImage,java.awt.geom.AffineTransform) -> drawRenderedImage
    void drawString(java.text.AttributedCharacterIterator,float,float) -> drawString
    void drawString(java.lang.String,float,float) -> drawString
    void fill(java.awt.Shape) -> fill
    void fill(java.awt.Shape,java.awt.Paint) -> fill
    java.awt.Color getBackground() -> getBackground
    java.awt.Composite getComposite() -> getComposite
    java.awt.GraphicsConfiguration getDeviceConfiguration() -> getDeviceConfiguration
    java.awt.font.FontRenderContext getFontRenderContext() -> getFontRenderContext
    java.awt.Paint getPaint() -> getPaint
    java.lang.Object getRenderingHint(java.awt.RenderingHints$Key) -> getRenderingHint
    java.awt.RenderingHints getRenderingHints() -> getRenderingHints
    java.awt.Stroke getStroke() -> getStroke
    java.awt.geom.AffineTransform getTransform() -> getTransform
    boolean hit(java.awt.Rectangle,java.awt.Shape,boolean) -> hit
    void rotate(double) -> rotate
    void rotate(double,double,double) -> rotate
    void scale(double,double) -> scale
    void setBackground(java.awt.Color) -> setBackground
    void setComposite(java.awt.Composite) -> setComposite
    void setPaint(java.awt.Paint) -> setPaint
    void setRenderingHint(java.awt.RenderingHints$Key,java.lang.Object) -> setRenderingHint
    void setRenderingHints(java.util.Map) -> setRenderingHints
    void setStroke(java.awt.Stroke) -> setStroke
    void setTransform(java.awt.geom.AffineTransform) -> setTransform
    void shear(double,double) -> shear
    void transform(java.awt.geom.AffineTransform) -> transform
    void translate(double,double) -> translate
    void clearRect(double,double,double,double) -> clearRect
    void clipRect(double,double,double,double) -> clipRect
    java.awt.Graphics create(double,double,double,double) -> create
    void drawArc(double,double,double,double,double,double) -> drawArc
    void drawLine(double,double,double,double) -> drawLine
    void drawOval(double,double,double,double) -> drawOval
    void drawPolygon(double[],double[],int) -> drawPolygon
    void drawPolyline(double[],double[],int) -> drawPolyline
    void drawRect(double,double,double,double) -> drawRect
    void drawRoundRect(double,double,double,double,double,double) -> drawRoundRect
    void drawSymbol(int,int,int,int) -> drawSymbol
    void drawSymbol(double,double,double,int) -> drawSymbol
    void fillSymbol(int,int,int,int) -> fillSymbol
    void fillSymbol(double,double,double,int) -> fillSymbol
    void fillAndDrawSymbol(int,int,int,int,java.awt.Color) -> fillAndDrawSymbol
    void fillAndDrawSymbol(double,double,double,int,java.awt.Color) -> fillAndDrawSymbol
    void drawString(java.lang.String,double,double) -> drawString
    void drawString(org.freehep.graphics2d.TagString,double,double) -> drawString
    void drawString(java.lang.String,double,double,int,int) -> drawString
    void drawString(org.freehep.graphics2d.TagString,double,double,int,int) -> drawString
    void drawString(java.lang.String,double,double,int,int,boolean,java.awt.Color,double,boolean,java.awt.Color) -> drawString
    void drawString(org.freehep.graphics2d.TagString,double,double,int,int,boolean,java.awt.Color,double,boolean,java.awt.Color) -> drawString
    void endExport() -> endExport
    void fillAndDraw(java.awt.Shape,java.awt.Color) -> fillAndDraw
    void fillArc(double,double,double,double,double,double) -> fillArc
    void fillOval(double,double,double,double) -> fillOval
    void fillPolygon(double[],double[],int) -> fillPolygon
    void fillRect(double,double,double,double) -> fillRect
    void fillRoundRect(double,double,double,double,double,double) -> fillRoundRect
    int getColorMode() -> getColorMode
    java.lang.String getCreator() -> getCreator
    boolean isDeviceIndependent() -> isDeviceIndependent
    void printComment(java.lang.String) -> printComment
    void setClip(double,double,double,double) -> setClip
    void setColorMode(int) -> setColorMode
    void setCreator(java.lang.String) -> setCreator
    void setDeviceIndependent(boolean) -> setDeviceIndependent
    void setLineWidth(int) -> setLineWidth
    void setLineWidth(double) -> setLineWidth
    void startExport() -> startExport
    org.freehep.graphics2d.VectorGraphics create(java.awt.Graphics) -> create
    int getTextAlignment(java.lang.String) -> getTextAlignment
    int getSymbol(java.lang.String) -> getSymbol
    double getYalignment(double,double,double,int) -> getYalignment
    double getXalignment(double,double,int) -> getXalignment
org.freehep.graphics2d.WebColor -> org.freehep.graphics2d.b:
    org.freehep.graphics2d.WebColor white -> a
    org.freehep.graphics2d.WebColor WHITE -> b
    org.freehep.graphics2d.WebColor lightGray -> c
    org.freehep.graphics2d.WebColor LIGHT_GRAY -> d
    org.freehep.graphics2d.WebColor gray -> e
    org.freehep.graphics2d.WebColor GRAY -> f
    org.freehep.graphics2d.WebColor darkGray -> g
    org.freehep.graphics2d.WebColor DARK_GRAY -> h
    org.freehep.graphics2d.WebColor black -> i
    org.freehep.graphics2d.WebColor BLACK -> j
    org.freehep.graphics2d.WebColor red -> k
    org.freehep.graphics2d.WebColor RED -> l
    org.freehep.graphics2d.WebColor pink -> m
    org.freehep.graphics2d.WebColor PINK -> n
    org.freehep.graphics2d.WebColor orange -> o
    org.freehep.graphics2d.WebColor ORANGE -> p
    org.freehep.graphics2d.WebColor yellow -> q
    org.freehep.graphics2d.WebColor YELLOW -> r
    org.freehep.graphics2d.WebColor green -> s
    org.freehep.graphics2d.WebColor GREEN -> t
    org.freehep.graphics2d.WebColor magenta -> u
    org.freehep.graphics2d.WebColor MAGENTA -> v
    org.freehep.graphics2d.WebColor cyan -> w
    org.freehep.graphics2d.WebColor CYAN -> x
    org.freehep.graphics2d.WebColor blue -> y
    org.freehep.graphics2d.WebColor BLUE -> z
    org.freehep.graphics2d.WebColor create(java.awt.Color) -> a
org.freehep.graphics2d.font.AbstractCharTable -> org.freehep.graphics2d.a.a:
    int toEncoding(char) -> a
    java.lang.String toName(char) -> a
org.freehep.graphics2d.font.CharTable -> org.freehep.graphics2d.a.n:
    java.lang.String toName(java.lang.Character) -> a
    java.lang.String toName(int) -> a
    int toEncoding(java.lang.String) -> a
    int toEncoding(char) -> a
    char toUnicode(java.lang.String) -> a
    java.lang.String getName() -> a
    java.lang.String getEncoding() -> b
org.freehep.graphics2d.font.Expert -> org.freehep.graphics2d.a.e:
    java.util.Hashtable unicodeToName -> a
    java.util.Hashtable nameToUnicode -> b
    java.util.Hashtable nameToEnc -> c
    java.lang.String[] encToName -> a
    java.lang.String toName(java.lang.Character) -> a
    java.lang.String toName(int) -> a
    int toEncoding(java.lang.String) -> a
    char toUnicode(java.lang.String) -> a
    java.lang.String getName() -> a
    java.lang.String getEncoding() -> b
org.freehep.graphics2d.font.FontEncoder -> org.freehep.graphics2d.a.l:
    java.lang.String getEncodedString(java.lang.String,java.lang.String) -> a
    java.lang.String getEncodedString(java.lang.String,org.freehep.graphics2d.font.CharTable) -> a
org.freehep.graphics2d.font.FontUtilities -> org.freehep.graphics2d.a.j:
    java.util.Properties windowsFonts -> a
    org.freehep.graphics2d.font.CharTable[] STANDARD_CHAR_TABLES -> a
    java.awt.Font[] STANDARD_FONT -> a
    java.lang.String getWindowsFontName(java.lang.String) -> a
    void showString(java.awt.Font,java.lang.String,org.freehep.graphics2d.font.CharTable,org.freehep.graphics2d.font.FontUtilities$ShowString) -> a
    java.util.Hashtable getAttributes(java.awt.Font) -> a
org.freehep.graphics2d.font.FontUtilities$ShowString -> org.freehep.graphics2d.a.i:
    void showString(java.awt.Font,java.lang.String) -> a
org.freehep.graphics2d.font.ISOLatin -> org.freehep.graphics2d.a.d:
    java.util.Hashtable unicodeToName -> a
    java.util.Hashtable nameToUnicode -> b
    java.util.Hashtable nameToEnc -> c
    java.lang.String[] encToName -> a
    java.lang.String toName(java.lang.Character) -> a
    java.lang.String toName(int) -> a
    int toEncoding(java.lang.String) -> a
    char toUnicode(java.lang.String) -> a
    java.lang.String getName() -> a
    java.lang.String getEncoding() -> b
org.freehep.graphics2d.font.Lookup -> org.freehep.graphics2d.a.g:
    org.freehep.graphics2d.font.Lookup instance -> a
    org.freehep.graphics2d.font.CharTable[] tables -> a
    int ntables -> a
    org.freehep.graphics2d.font.Lookup getInstance() -> a
    org.freehep.graphics2d.font.CharTable getTable(java.lang.String) -> a
org.freehep.graphics2d.font.MACLatin -> org.freehep.graphics2d.a.k:
    java.util.Hashtable unicodeToName -> a
    java.util.Hashtable nameToUnicode -> b
    java.util.Hashtable nameToEnc -> c
    java.lang.String[] encToName -> a
    java.lang.String toName(java.lang.Character) -> a
    java.lang.String toName(int) -> a
    int toEncoding(java.lang.String) -> a
    char toUnicode(java.lang.String) -> a
    java.lang.String getName() -> a
    java.lang.String getEncoding() -> b
org.freehep.graphics2d.font.PDFLatin -> org.freehep.graphics2d.a.f:
    java.util.Hashtable unicodeToName -> a
    java.util.Hashtable nameToUnicode -> b
    java.util.Hashtable nameToEnc -> c
    java.lang.String[] encToName -> a
    java.lang.String toName(java.lang.Character) -> a
    java.lang.String toName(int) -> a
    int toEncoding(java.lang.String) -> a
    char toUnicode(java.lang.String) -> a
    java.lang.String getName() -> a
    java.lang.String getEncoding() -> b
org.freehep.graphics2d.font.STDLatin -> org.freehep.graphics2d.a.c:
    java.util.Hashtable unicodeToName -> a
    java.util.Hashtable nameToUnicode -> b
    java.util.Hashtable nameToEnc -> c
    java.lang.String[] encToName -> a
    java.lang.String toName(java.lang.Character) -> a
    java.lang.String toName(int) -> a
    int toEncoding(java.lang.String) -> a
    char toUnicode(java.lang.String) -> a
    java.lang.String getName() -> a
    java.lang.String getEncoding() -> b
org.freehep.graphics2d.font.Symbol -> org.freehep.graphics2d.a.h:
    java.util.Hashtable unicodeToName -> a
    java.util.Hashtable nameToUnicode -> b
    java.util.Hashtable nameToEnc -> c
    java.lang.String[] encToName -> a
    java.lang.String toName(java.lang.Character) -> a
    java.lang.String toName(int) -> a
    int toEncoding(java.lang.String) -> a
    char toUnicode(java.lang.String) -> a
    java.lang.String getName() -> a
    java.lang.String getEncoding() -> b
org.freehep.graphics2d.font.WINLatin -> org.freehep.graphics2d.a.m:
    java.util.Hashtable unicodeToName -> a
    java.util.Hashtable nameToUnicode -> b
    java.util.Hashtable nameToEnc -> c
    java.lang.String[] encToName -> a
    java.lang.String toName(java.lang.Character) -> a
    java.lang.String toName(int) -> a
    int toEncoding(java.lang.String) -> a
    char toUnicode(java.lang.String) -> a
    java.lang.String getName() -> a
    java.lang.String getEncoding() -> b
org.freehep.graphics2d.font.Zapfdingbats -> org.freehep.graphics2d.a.b:
    java.util.Hashtable unicodeToName -> a
    java.util.Hashtable nameToUnicode -> b
    java.util.Hashtable nameToEnc -> c
    java.lang.String[] encToName -> a
    java.lang.String toName(java.lang.Character) -> a
    java.lang.String toName(int) -> a
    int toEncoding(java.lang.String) -> a
    char toUnicode(java.lang.String) -> a
    java.lang.String getName() -> a
    java.lang.String getEncoding() -> b
org.freehep.graphicsio.AbstractPathConstructor -> org.freehep.graphicsio.f:
    double currentX -> a
    double currentY -> b
    void flush() -> b
    boolean addPath(java.awt.Shape) -> a
    boolean addPath(java.awt.Shape,java.awt.geom.AffineTransform) -> a
    boolean addPath(org.freehep.graphicsio.PathConstructor,java.awt.Shape,java.awt.geom.AffineTransform) -> a
    boolean isEvenOdd(java.awt.Shape) -> b
org.freehep.graphicsio.AbstractVectorGraphicsIO -> org.freehep.graphicsio.h:
    java.lang.String rootKey -> a
    java.lang.String EMIT_WARNINGS -> s
    java.lang.String TEXT_AS_SHAPES -> t
    java.lang.String EMIT_ERRORS -> u
    java.lang.String CLIP -> v
    java.awt.Dimension size -> a
    java.awt.Component component -> a
    boolean doRestoreOnDispose -> a
    java.awt.Rectangle deviceClip -> a
    java.awt.geom.Area userClip -> a
    java.awt.geom.AffineTransform currentTransform -> a
    java.awt.geom.AffineTransform oldTransform -> b
    java.awt.Composite currentComposite -> a
    java.awt.Stroke currentStroke -> a
    java.awt.RenderingHints hints -> a
    java.lang.Class class$0 -> b
    java.awt.Dimension getSize() -> getSize
    java.awt.Component getComponent() -> getComponent
    void startExport() -> startExport
    void endExport() -> endExport
    void writeHeader() -> writeHeader
    void writeGraphicsState() -> writeGraphicsState
    void writeBackground() -> writeBackground
    void writeTrailer() -> writeTrailer
    void closeStream() -> closeStream
    void printComment(java.lang.String) -> printComment
    void writeComment(java.lang.String) -> writeComment
    void resetClip(java.awt.Rectangle) -> resetClip
    void dispose() -> dispose
    void writeGraphicsSave() -> writeGraphicsSave
    void writeGraphicsRestore() -> writeGraphicsRestore
    boolean drawImage(java.awt.Image,int,int,java.awt.image.ImageObserver) -> drawImage
    boolean drawImage(java.awt.Image,int,int,int,int,java.awt.image.ImageObserver) -> drawImage
    boolean drawImage(java.awt.Image,int,int,int,int,java.awt.Color,java.awt.image.ImageObserver) -> drawImage
    boolean drawImage(java.awt.Image,int,int,java.awt.Color,java.awt.image.ImageObserver) -> drawImage
    boolean drawImage(java.awt.Image,int,int,int,int,int,int,int,int,java.awt.image.ImageObserver) -> drawImage
    boolean drawImage(java.awt.Image,java.awt.geom.AffineTransform,java.awt.image.ImageObserver) -> drawImage
    void drawImage(java.awt.image.BufferedImage,java.awt.image.BufferedImageOp,int,int) -> drawImage
    void drawRenderableImage(java.awt.image.renderable.RenderableImage,java.awt.geom.AffineTransform) -> drawRenderableImage
    boolean drawImage(java.awt.Image,int,int,int,int,int,int,int,int,java.awt.Color,java.awt.image.ImageObserver) -> drawImage
    void drawRenderedImage(java.awt.image.RenderedImage,java.awt.geom.AffineTransform) -> drawRenderedImage
    void writeImage(java.awt.image.RenderedImage,java.awt.geom.AffineTransform,java.awt.Color) -> writeImage
    void clearRect(double,double,double,double) -> clearRect
    void drawString(java.lang.String,double,double) -> drawString
    void writeString(java.lang.String,double,double) -> writeString
    void drawGlyphVector(java.awt.font.GlyphVector,float,float) -> drawGlyphVector
    void drawString(java.text.AttributedCharacterIterator,float,float) -> drawString
    java.awt.geom.AffineTransform getTransform() -> getTransform
    void setTransform(java.awt.geom.AffineTransform) -> setTransform
    void transform(java.awt.geom.AffineTransform) -> transform
    void translate(double,double) -> translate
    void rotate(double) -> rotate
    void scale(double,double) -> scale
    void shear(double,double) -> shear
    void writeTransform(java.awt.geom.AffineTransform) -> writeTransform
    void writeSetTransform(java.awt.geom.AffineTransform) -> writeSetTransform
    java.awt.Shape getClip() -> getClip
    java.awt.Rectangle getClipBounds() -> getClipBounds
    java.awt.Rectangle getClipBounds(java.awt.Rectangle) -> getClipBounds
    void clipRect(int,int,int,int) -> clipRect
    void clipRect(double,double,double,double) -> clipRect
    void setClip(int,int,int,int) -> setClip
    void setClip(double,double,double,double) -> setClip
    void setClip(java.awt.Shape) -> setClip
    void clip(java.awt.Shape) -> clip
    void writeClip(java.awt.Shape) -> writeClip
    void writeSetClip(java.awt.Shape) -> writeSetClip
    java.awt.Stroke getStroke() -> getStroke
    void setStroke(java.awt.Stroke) -> setStroke
    void writeStroke(java.awt.Stroke) -> writeStroke
    void writeWidth(float) -> writeWidth
    void writeCap(int) -> writeCap
    void writeJoin(int) -> writeJoin
    void writeMiterLimit(float) -> writeMiterLimit
    void writeDash(float[],float) -> writeDash
    void writeDash(double[],double) -> writeDash
    void setColor(java.awt.Color) -> setColor
    void setPaint(java.awt.Paint) -> setPaint
    void writePaint(java.awt.Color) -> writePaint
    void writePaint(java.awt.GradientPaint) -> writePaint
    void writePaint(java.awt.TexturePaint) -> writePaint
    void writePaint(java.awt.Paint) -> writePaint
    java.awt.font.FontRenderContext getFontRenderContext() -> getFontRenderContext
    java.awt.FontMetrics getFontMetrics(java.awt.Font) -> getFontMetrics
    java.awt.RenderingHints getRenderingHints() -> getRenderingHints
    void addRenderingHints(java.util.Map) -> addRenderingHints
    void setRenderingHints(java.util.Map) -> setRenderingHints
    java.lang.Object getRenderingHint(java.awt.RenderingHints$Key) -> getRenderingHint
    void setRenderingHint(java.awt.RenderingHints$Key,java.lang.Object) -> setRenderingHint
    void setFont(java.awt.Font) -> setFont
    void writeFont(java.awt.Font) -> writeFont
    java.awt.Composite getComposite() -> getComposite
    void setComposite(java.awt.Composite) -> setComposite
    void handleException(java.lang.Exception) -> handleException
    void writeWarning(java.lang.Exception) -> writeWarning
    void writeWarning(java.lang.String) -> writeWarning
    void writeError(java.lang.Exception) -> writeError
    java.awt.Shape createShape(double[],double[],int,boolean) -> createShape
    java.awt.Shape transformShape(java.awt.geom.AffineTransform,java.awt.Shape) -> transformShape
    java.awt.Shape transformShape(java.awt.Shape) -> transformShape
    java.awt.Shape untransformShape(java.awt.Shape) -> untransformShape
    void overLine(java.lang.String,java.awt.Font,float,float) -> overLine
org.freehep.graphicsio.CubicToQuadPathConstructor -> org.freehep.graphicsio.CubicToQuadPathConstructor:
    double resolutionSq -> c
    void move(double,double) -> a
    void line(double,double) -> b
    void cubic(double,double,double,double,double,double) -> a
    void closePath(double,double) -> c
    java.awt.geom.Point2D intersect(java.awt.geom.Point2D,java.awt.geom.Point2D,java.awt.geom.Point2D,java.awt.geom.Point2D) -> a
    java.awt.geom.Point2D midPoint(java.awt.geom.Point2D,java.awt.geom.Point2D) -> a
    void quadratify(java.awt.geom.Point2D,java.awt.geom.Point2D,java.awt.geom.Point2D,java.awt.geom.Point2D) -> a
    void main(java.lang.String[]) -> main
org.freehep.graphicsio.CubicToQuadPathConstructor$Test -> org.freehep.graphicsio.c:
    void quad(double,double,double,double) -> a
org.freehep.graphicsio.ImageGraphics2D -> org.freehep.graphicsio.d:
    java.lang.String[] alwaysCompressedFormats -> a
    java.lang.String[] nonTransparentFormats -> b
    java.util.Map defaultProperties -> a
    java.io.OutputStream os -> a
    java.awt.image.BufferedImage image -> a
    java.lang.String format -> a
    java.awt.Component component -> a
    java.lang.Class class$0 -> a
    void setProperties(java.util.Properties) -> setProperties
    void setPropertiesOnGraphics() -> c
    void setHintsOnGraphics() -> d
    java.awt.Graphics create() -> create
    java.awt.Graphics create(double,double,double,double) -> create
    void startExport() -> startExport
    void endExport() -> endExport
    void write() -> a
    void closeStream() -> b
    void handleException(java.lang.Exception) -> a
    java.awt.image.BufferedImage generateThumbnail(java.awt.Component,java.awt.Dimension) -> a
    void writeImage(java.awt.image.RenderedImage,java.lang.String,java.util.Properties,java.io.OutputStream) -> a
    javax.imageio.ImageWriter getPreferredImageWriter(java.lang.String) -> a
    java.util.SortedSet getImageWriters(java.util.Iterator) -> a
    boolean canWriteUncompressed(java.lang.String) -> a
    org.freehep.util.UserProperties getRAWProperties(java.awt.Color,java.lang.String) -> a
    byte[] toByteArray(java.awt.image.RenderedImage,java.lang.String,java.lang.String,java.util.Properties) -> a
org.freehep.graphicsio.ImageGraphics2D$1 -> org.freehep.graphicsio.k:
    int order(java.lang.Object) -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
org.freehep.graphicsio.ImageParamConverter -> org.freehep.graphicsio.a:
    javax.imageio.ImageWriteParam getWriteParam(java.util.Properties) -> a
org.freehep.graphicsio.MultiPageDocument -> org.freehep.graphicsio.i:
org.freehep.graphicsio.PageConstants -> org.freehep.graphicsio.g:
    java.util.Map sizeTable -> a
    java.util.Map marginTable -> b
    java.awt.Dimension getSize(java.lang.String,java.lang.String) -> a
    java.awt.Insets getMargins(java.lang.String) -> a
    java.awt.Insets getMargins(java.awt.Insets,java.lang.String) -> a
org.freehep.graphicsio.PathConstructor -> org.freehep.graphicsio.j:
    void move(double,double) -> a
    void line(double,double) -> b
    void quad(double,double,double,double) -> a
    void cubic(double,double,double,double,double,double) -> a
    void closePath(double,double) -> c
    void flush() -> b
org.freehep.graphicsio.QuadToCubicPathConstructor -> org.freehep.graphicsio.e:
    void move(double,double) -> a
    void line(double,double) -> b
    void quad(double,double,double,double) -> a
    void cubic(double,double,double,double,double,double) -> a
    void closePath(double,double) -> c
org.freehep.graphicsio.VectorGraphicsIO -> org.freehep.graphicsio.b:
    java.awt.Dimension getSize() -> getSize
    void printComment(java.lang.String) -> printComment
    void copyResourceTo(java.lang.Object,java.lang.String,java.io.PrintStream) -> copyResourceTo
    void copyResourceTo(java.lang.Object,java.lang.String,java.io.PrintWriter) -> copyResourceTo
org.freehep.graphicsio.emf.EMFGraphics2D -> org.freehep.graphicsio.a.g:
    org.freehep.graphicsio.emf.EMFHandleManager handleManager -> a
    int penHandle -> a
    int brushHandle -> b
    java.awt.Rectangle imageBounds -> a
    java.io.OutputStream ros -> a
    org.freehep.graphicsio.emf.EMFOutputStream os -> a
    java.awt.Color textColor -> a
    java.awt.Color penColor -> b
    java.awt.Color brushColor -> c
    java.util.Map fontTable -> a
    java.util.Map unitFontTable -> b
    org.freehep.graphicsio.emf.EMFPathConstructor pathConstructor -> a
    boolean evenOdd -> a
    java.awt.Rectangle dummy -> b
    java.lang.String rootKey -> d
    java.lang.String TRANSPARENT -> a
    java.lang.String BACKGROUND -> b
    java.lang.String BACKGROUND_COLOR -> c
    org.freehep.util.UserProperties defaultProperties -> a
    java.lang.Class class$0 -> a
    void init(java.io.OutputStream) -> a
    void writeHeader() -> writeHeader
    void writeGraphicsState() -> writeGraphicsState
    void writeBackground() -> writeBackground
    void writeTrailer() -> writeTrailer
    void closeStream() -> closeStream
    java.awt.Graphics create() -> create
    java.awt.Graphics create(double,double,double,double) -> create
    void writeGraphicsSave() -> writeGraphicsSave
    void writeGraphicsRestore() -> writeGraphicsRestore
    void draw(java.awt.Shape) -> draw
    void fill(java.awt.Shape) -> fill
    void fillAndDraw(java.awt.Shape,java.awt.Color) -> fillAndDraw
    void copyArea(int,int,int,int,int,int) -> copyArea
    void writeImage(java.awt.image.RenderedImage,java.awt.geom.AffineTransform,java.awt.Color) -> writeImage
    void writeString(java.lang.String,double,double) -> writeString
    void writeTransform(java.awt.geom.AffineTransform) -> writeTransform
    void writeSetTransform(java.awt.geom.AffineTransform) -> writeSetTransform
    void writeSetClip(java.awt.Shape) -> writeSetClip
    void writeClip(java.awt.Shape) -> writeClip
    void writeStroke(java.awt.Stroke) -> writeStroke
    void setPaintMode() -> setPaintMode
    void setXORMode(java.awt.Color) -> setXORMode
    void writePaint(java.awt.Color) -> writePaint
    void writePaint(java.awt.GradientPaint) -> writePaint
    void writePaint(java.awt.TexturePaint) -> writePaint
    void writePaint(java.awt.Paint) -> writePaint
    void writeFont(java.awt.Font) -> writeFont
    java.awt.GraphicsConfiguration getDeviceConfiguration() -> getDeviceConfiguration
    void writeComment(java.lang.String) -> writeComment
    java.lang.String toString() -> toString
    java.awt.Shape createShape(double[],double[],int,boolean) -> createShape
    boolean writePath(java.awt.Shape) -> a
    void writePen(java.awt.BasicStroke,java.awt.Color) -> a
    void writeBrush(java.awt.Color) -> a
    int toUnit(double) -> a
org.freehep.graphicsio.emf.EMFHandleManager -> org.freehep.graphicsio.a.b:
    java.util.BitSet handles -> a
    int maxHandle -> a
    int getHandle() -> a
    int freeHandle(int) -> a
    int nextClearBit() -> d
    int highestHandleInUse() -> b
    int maxHandlesUsed() -> c
org.freehep.graphicsio.emf.EMFHeader -> org.freehep.graphicsio.a.d:
    java.awt.Dimension screenMM -> a
    java.awt.Rectangle bounds -> a
    java.awt.Rectangle frame -> b
    java.lang.String signature -> a
    int versionMajor -> a
    int versionMinor -> b
    int bytes -> c
    int records -> d
    int handles -> e
    java.lang.String description -> b
    int palEntries -> f
    java.awt.Dimension device -> b
    java.awt.Dimension millimeters -> c
    java.awt.Dimension micrometers -> d
    boolean openGL -> a
    void write(org.freehep.graphicsio.emf.EMFOutputStream) -> a
    int size() -> a
    java.lang.String toString() -> toString
org.freehep.graphicsio.emf.EMFOutputStream -> org.freehep.graphicsio.a.f:
    java.lang.String application -> a
    java.lang.String name -> b
    int recordCount -> b
    java.awt.Rectangle imageBounds -> a
    int version -> c
    org.freehep.graphicsio.emf.EMFHandleManager handles -> a
    java.awt.Dimension device -> a
    void close() -> close
    void writeDWORD(int) -> b
    void writeDWORD(int[]) -> b
    void writeWORD(int) -> c
    void writeFLOAT(float) -> a
    void writeCOLORREF(java.awt.Color) -> a
    void writeCOLOR16(java.awt.Color) -> b
    void writeXFORM(java.awt.geom.AffineTransform) -> a
    void writePOINTS(java.awt.Point[]) -> a
    void writePOINTS(int,java.awt.Point[]) -> a
    void writePOINTS(java.awt.Point) -> a
    void writePOINTL(java.awt.Point[]) -> b
    void writePOINTL(int,java.awt.Point[]) -> b
    void writePOINTL(java.awt.Point) -> b
    void writeRECTL(java.awt.Rectangle) -> a
    void writeSIZEL(java.awt.Dimension) -> a
    void writeUINT(int) -> d
    void writeULONG(int) -> e
    void writeLONG(int) -> f
    void writeSHORT(short) -> a
    void writeBYTE(byte[]) -> b
    void writeBYTE(int) -> g
    void writeBYTE(boolean) -> a
    void writeDWORD(boolean) -> b
    void writeWCHAR(java.lang.String) -> a
    void writeWCHAR(java.lang.String,int) -> a
    int getTagAlignment() -> a
    void writeTagHeader(org.freehep.util.io.TagHeader) -> a
    void writeTag(org.freehep.util.io.Tag) -> a
    void writeHeader(org.freehep.graphicsio.emf.EMFHeader) -> a
    int getVersion() -> d
org.freehep.graphicsio.emf.EMFPathConstructor -> org.freehep.graphicsio.a.c:
    org.freehep.graphicsio.emf.EMFOutputStream os -> a
    java.awt.Rectangle imageBounds -> a
    boolean curved -> a
    int pointIndex -> a
    boolean wide -> b
    java.awt.Point[] points -> a
    void move(double,double) -> a
    void addPoint(int,double,double) -> a
    void line(double,double) -> b
    void cubic(double,double,double,double,double,double) -> a
    void closePath(double,double) -> c
    void flush() -> b
    int toUnit(double) -> a
org.freehep.graphicsio.emf.EMFTag -> org.freehep.graphicsio.a.e:
    java.util.logging.Logger logger -> a
    void write(int,org.freehep.util.io.TaggedOutputStream) -> a
    void write(int,org.freehep.graphicsio.emf.EMFOutputStream) -> a
    java.lang.String toString() -> toString
org.freehep.graphicsio.emf.EMFTagSet -> org.freehep.graphicsio.a.a:
org.freehep.graphicsio.emf.gdi.AbortPath -> org.freehep.graphicsio.a.a.E:
org.freehep.graphicsio.emf.gdi.AbstractArc -> org.freehep.graphicsio.a.a.an:
    java.awt.Rectangle bounds -> a
    java.awt.Point start -> a
    java.awt.Point end -> b
    void write(int,org.freehep.graphicsio.emf.EMFOutputStream) -> a
    java.lang.String toString() -> toString
org.freehep.graphicsio.emf.gdi.AbstractClipPath -> org.freehep.graphicsio.a.a.l:
    int mode -> a
    java.lang.String toString() -> toString
    int getMode() -> a
org.freehep.graphicsio.emf.gdi.AbstractExtTextOut -> org.freehep.graphicsio.a.a.m:
    java.awt.Rectangle bounds -> a
    int mode -> a
    float xScale -> a
    float yScale -> b
    org.freehep.graphicsio.emf.gdi.Text getText() -> a
    java.lang.String toString() -> toString
    void write(int,org.freehep.graphicsio.emf.EMFOutputStream) -> a
org.freehep.graphicsio.emf.gdi.AbstractPen -> org.freehep.graphicsio.a.a.aw:
    java.util.logging.Logger logger -> a
org.freehep.graphicsio.emf.gdi.AbstractPolyPolygon -> org.freehep.graphicsio.a.a.S:
    java.awt.Rectangle bounds -> a
    int[] numberOfPoints -> a
    java.awt.Point[][] points -> a
    java.lang.String toString() -> toString
    java.awt.Rectangle getBounds() -> a
    int[] getNumberOfPoints() -> a
    java.awt.Point[][] getPoints() -> a
org.freehep.graphicsio.emf.gdi.AbstractPolyPolyline -> org.freehep.graphicsio.a.a.a:
org.freehep.graphicsio.emf.gdi.AbstractPolygon -> org.freehep.graphicsio.a.a.ar:
    java.awt.Rectangle bounds -> a
    int numberOfPoints -> a
    java.awt.Point[] points -> a
    void write(int,org.freehep.graphicsio.emf.EMFOutputStream) -> a
    java.lang.String toString() -> toString
    java.awt.Rectangle getBounds() -> a
    int getNumberOfPoints() -> a
    java.awt.Point[] getPoints() -> a
org.freehep.graphicsio.emf.gdi.AlphaBlend -> org.freehep.graphicsio.a.a.T:
    java.awt.Rectangle bounds -> a
    int x -> a
    int y -> b
    int width -> c
    int height -> d
    org.freehep.graphicsio.emf.gdi.BlendFunction dwROP -> a
    int xSrc -> e
    int ySrc -> f
    java.awt.geom.AffineTransform transform -> a
    java.awt.Color bkg -> a
    int usage -> g
    org.freehep.graphicsio.emf.gdi.BitmapInfo bmi -> a
    java.awt.image.BufferedImage image -> a
    void write(int,org.freehep.graphicsio.emf.EMFOutputStream) -> a
    java.lang.String toString() -> toString
org.freehep.graphicsio.emf.gdi.AngleArc -> org.freehep.graphicsio.a.a.Y:
    java.awt.Point center -> a
    int radius -> a
    float startAngle -> a
    float sweepAngle -> b
    void write(int,org.freehep.graphicsio.emf.EMFOutputStream) -> a
    java.lang.String toString() -> toString
org.freehep.graphicsio.emf.gdi.Arc -> org.freehep.graphicsio.a.a.aR:
org.freehep.graphicsio.emf.gdi.ArcTo -> org.freehep.graphicsio.a.a.D:
org.freehep.graphicsio.emf.gdi.BeginPath -> org.freehep.graphicsio.a.a.f:
org.freehep.graphicsio.emf.gdi.BitBlt -> org.freehep.graphicsio.a.a.ai:
    java.awt.Rectangle bounds -> a
    int x -> a
    int y -> b
    int width -> c
    int height -> d
    int dwROP -> e
    int xSrc -> f
    int ySrc -> g
    java.awt.geom.AffineTransform transform -> a
    java.awt.Color bkg -> a
    int usage -> h
    org.freehep.graphicsio.emf.gdi.BitmapInfo bmi -> a
    java.awt.image.BufferedImage image -> a
    void write(int,org.freehep.graphicsio.emf.EMFOutputStream) -> a
    java.lang.String toString() -> toString
org.freehep.graphicsio.emf.gdi.BitmapInfo -> org.freehep.graphicsio.a.a.aH:
    org.freehep.graphicsio.emf.gdi.BitmapInfoHeader header -> a
    void write(org.freehep.graphicsio.emf.EMFOutputStream) -> a
    java.lang.String toString() -> toString
org.freehep.graphicsio.emf.gdi.BitmapInfoHeader -> org.freehep.graphicsio.a.a.d:
    int width -> a
    int height -> b
    int planes -> c
    int bitCount -> d
    int compression -> e
    int sizeImage -> f
    int xPelsPerMeter -> g
    int yPelsPerMeter -> h
    int clrUsed -> i
    int clrImportant -> j
    void write(org.freehep.graphicsio.emf.EMFOutputStream) -> a
    java.lang.String toString() -> toString
org.freehep.graphicsio.emf.gdi.BlendFunction -> org.freehep.graphicsio.a.a.aC:
    int blendOp -> a
    int blendFlags -> b
    int sourceConstantAlpha -> c
    int alphaFormat -> d
    void write(org.freehep.graphicsio.emf.EMFOutputStream) -> a
    java.lang.String toString() -> toString
org.freehep.graphicsio.emf.gdi.Chord -> org.freehep.graphicsio.a.a.M:
org.freehep.graphicsio.emf.gdi.CloseFigure -> org.freehep.graphicsio.a.a.aN:
org.freehep.graphicsio.emf.gdi.CreateBrushIndirect -> org.freehep.graphicsio.a.a.h:
    int index -> a
    org.freehep.graphicsio.emf.gdi.LogBrush32 brush -> a
    void write(int,org.freehep.graphicsio.emf.EMFOutputStream) -> a
    java.lang.String toString() -> toString
org.freehep.graphicsio.emf.gdi.CreateDIBPatternBrushPt -> org.freehep.graphicsio.a.a.H:
    int usage -> a
    org.freehep.graphicsio.emf.gdi.BitmapInfo bmi -> a
    void write(int,org.freehep.graphicsio.emf.EMFOutputStream) -> a
    java.lang.String toString() -> toString
org.freehep.graphicsio.emf.gdi.CreatePen -> org.freehep.graphicsio.a.a.ao:
    int index -> a
    org.freehep.graphicsio.emf.gdi.LogPen pen -> a
    void write(int,org.freehep.graphicsio.emf.EMFOutputStream) -> a
    java.lang.String toString() -> toString
org.freehep.graphicsio.emf.gdi.DeleteObject -> org.freehep.graphicsio.a.a.V:
    int index -> a
    void write(int,org.freehep.graphicsio.emf.EMFOutputStream) -> a
    java.lang.String toString() -> toString
org.freehep.graphicsio.emf.gdi.EMFPolygon -> org.freehep.graphicsio.a.a.bb:
org.freehep.graphicsio.emf.gdi.EMFRectangle -> org.freehep.graphicsio.a.a.aI:
    java.awt.Rectangle bounds -> a
    void write(int,org.freehep.graphicsio.emf.EMFOutputStream) -> a
    java.lang.String toString() -> toString
org.freehep.graphicsio.emf.gdi.EOF -> org.freehep.graphicsio.a.a.A:
    void write(int,org.freehep.graphicsio.emf.EMFOutputStream) -> a
org.freehep.graphicsio.emf.gdi.Ellipse -> org.freehep.graphicsio.a.a.P:
    java.awt.Rectangle bounds -> a
    void write(int,org.freehep.graphicsio.emf.EMFOutputStream) -> a
    java.lang.String toString() -> toString
org.freehep.graphicsio.emf.gdi.EndPath -> org.freehep.graphicsio.a.a.aS:
org.freehep.graphicsio.emf.gdi.ExcludeClipRect -> org.freehep.graphicsio.a.a.C:
    java.awt.Rectangle bounds -> a
    void write(int,org.freehep.graphicsio.emf.EMFOutputStream) -> a
    java.lang.String toString() -> toString
org.freehep.graphicsio.emf.gdi.ExtCreateFontIndirectW -> org.freehep.graphicsio.a.a.p:
    int index -> a
    org.freehep.graphicsio.emf.gdi.ExtLogFontW font -> a
    void write(int,org.freehep.graphicsio.emf.EMFOutputStream) -> a
    java.lang.String toString() -> toString
org.freehep.graphicsio.emf.gdi.ExtCreatePen -> org.freehep.graphicsio.a.a.B:
    int index -> a
    org.freehep.graphicsio.emf.gdi.ExtLogPen pen -> a
    void write(int,org.freehep.graphicsio.emf.EMFOutputStream) -> a
    java.lang.String toString() -> toString
org.freehep.graphicsio.emf.gdi.ExtFloodFill -> org.freehep.graphicsio.a.a.n:
    java.awt.Point start -> a
    java.awt.Color color -> a
    int mode -> a
    void write(int,org.freehep.graphicsio.emf.EMFOutputStream) -> a
    java.lang.String toString() -> toString
org.freehep.graphicsio.emf.gdi.ExtLogFontW -> org.freehep.graphicsio.a.a.aU:
    org.freehep.graphicsio.emf.gdi.LogFontW font -> a
    java.lang.String fullName -> a
    java.lang.String style -> b
    int version -> a
    int styleSize -> b
    int match -> c
    byte[] vendorID -> a
    int culture -> d
    org.freehep.graphicsio.emf.gdi.Panose panose -> a
    void write(org.freehep.graphicsio.emf.EMFOutputStream) -> a
    java.lang.String toString() -> toString
org.freehep.graphicsio.emf.gdi.ExtLogPen -> org.freehep.graphicsio.a.a.aY:
    int penStyle -> a
    int width -> b
    int brushStyle -> c
    java.awt.Color color -> a
    int hatch -> d
    int[] style -> a
    void write(org.freehep.graphicsio.emf.EMFOutputStream) -> a
    java.lang.String toString() -> toString
org.freehep.graphicsio.emf.gdi.ExtSelectClipRgn -> org.freehep.graphicsio.a.a.s:
    org.freehep.graphicsio.emf.gdi.Region rgn -> a
    void write(int,org.freehep.graphicsio.emf.EMFOutputStream) -> a
org.freehep.graphicsio.emf.gdi.ExtTextOutA -> org.freehep.graphicsio.a.a.z:
    org.freehep.graphicsio.emf.gdi.TextA text -> a
    org.freehep.graphicsio.emf.gdi.Text getText() -> a
org.freehep.graphicsio.emf.gdi.ExtTextOutW -> org.freehep.graphicsio.a.a.y:
    org.freehep.graphicsio.emf.gdi.TextW text -> a
    org.freehep.graphicsio.emf.gdi.Text getText() -> a
org.freehep.graphicsio.emf.gdi.FillPath -> org.freehep.graphicsio.a.a.as:
    java.awt.Rectangle bounds -> a
    void write(int,org.freehep.graphicsio.emf.EMFOutputStream) -> a
    java.lang.String toString() -> toString
org.freehep.graphicsio.emf.gdi.FlattenPath -> org.freehep.graphicsio.a.a.aQ:
org.freehep.graphicsio.emf.gdi.GDIComment -> org.freehep.graphicsio.a.a.aV:
    java.lang.String comment -> a
    void write(int,org.freehep.graphicsio.emf.EMFOutputStream) -> a
    java.lang.String toString() -> toString
org.freehep.graphicsio.emf.gdi.Gradient -> org.freehep.graphicsio.a.a.w:
    void write(org.freehep.graphicsio.emf.EMFOutputStream) -> a
org.freehep.graphicsio.emf.gdi.GradientFill -> org.freehep.graphicsio.a.a.aD:
    java.awt.Rectangle bounds -> a
    int mode -> a
    org.freehep.graphicsio.emf.gdi.TriVertex[] vertices -> a
    org.freehep.graphicsio.emf.gdi.Gradient[] gradients -> a
    void write(int,org.freehep.graphicsio.emf.EMFOutputStream) -> a
    java.lang.String toString() -> toString
org.freehep.graphicsio.emf.gdi.IntersectClipRect -> org.freehep.graphicsio.a.a.N:
    java.awt.Rectangle bounds -> a
    void write(int,org.freehep.graphicsio.emf.EMFOutputStream) -> a
    java.lang.String toString() -> toString
org.freehep.graphicsio.emf.gdi.LineTo -> org.freehep.graphicsio.a.a.v:
    java.awt.Point point -> a
    void write(int,org.freehep.graphicsio.emf.EMFOutputStream) -> a
    java.lang.String toString() -> toString
org.freehep.graphicsio.emf.gdi.LogBrush32 -> org.freehep.graphicsio.a.a.aE:
    int style -> a
    java.awt.Color color -> a
    int hatch -> b
    void write(org.freehep.graphicsio.emf.EMFOutputStream) -> a
    java.lang.String toString() -> toString
org.freehep.graphicsio.emf.gdi.LogFontW -> org.freehep.graphicsio.a.a.t:
    int height -> a
    int width -> b
    int escapement -> c
    int orientation -> d
    int weight -> e
    boolean italic -> a
    boolean underline -> b
    boolean strikeout -> c
    int charSet -> f
    int outPrecision -> g
    int clipPrecision -> h
    int quality -> i
    int pitchAndFamily -> j
    java.lang.String faceFamily -> a
    void write(org.freehep.graphicsio.emf.EMFOutputStream) -> a
    java.lang.String toString() -> toString
org.freehep.graphicsio.emf.gdi.LogPen -> org.freehep.graphicsio.a.a.q:
    int penStyle -> a
    int width -> b
    java.awt.Color color -> a
    void write(org.freehep.graphicsio.emf.EMFOutputStream) -> a
    java.lang.String toString() -> toString
org.freehep.graphicsio.emf.gdi.ModifyWorldTransform -> org.freehep.graphicsio.a.a.k:
    java.awt.geom.AffineTransform transform -> a
    int mode -> a
    void write(int,org.freehep.graphicsio.emf.EMFOutputStream) -> a
    java.lang.String toString() -> toString
org.freehep.graphicsio.emf.gdi.MoveToEx -> org.freehep.graphicsio.a.a.aW:
    java.awt.Point point -> a
    void write(int,org.freehep.graphicsio.emf.EMFOutputStream) -> a
    java.lang.String toString() -> toString
org.freehep.graphicsio.emf.gdi.OffsetClipRgn -> org.freehep.graphicsio.a.a.ak:
    java.awt.Point offset -> a
    void write(int,org.freehep.graphicsio.emf.EMFOutputStream) -> a
    java.lang.String toString() -> toString
org.freehep.graphicsio.emf.gdi.Panose -> org.freehep.graphicsio.a.a.aO:
    int familyType -> a
    int serifStyle -> b
    int weight -> c
    int proportion -> d
    int contrast -> e
    int strokeVariation -> f
    int armStyle -> g
    int letterForm -> h
    int midLine -> i
    int xHeight -> j
    void write(org.freehep.graphicsio.emf.EMFOutputStream) -> a
    java.lang.String toString() -> toString
org.freehep.graphicsio.emf.gdi.Pie -> org.freehep.graphicsio.a.a.Z:
org.freehep.graphicsio.emf.gdi.PolyBezier -> org.freehep.graphicsio.a.a.at:
org.freehep.graphicsio.emf.gdi.PolyBezier16 -> org.freehep.graphicsio.a.a.az:
    void write(int,org.freehep.graphicsio.emf.EMFOutputStream) -> a
org.freehep.graphicsio.emf.gdi.PolyBezierTo -> org.freehep.graphicsio.a.a.U:
org.freehep.graphicsio.emf.gdi.PolyBezierTo16 -> org.freehep.graphicsio.a.a.aP:
    void write(int,org.freehep.graphicsio.emf.EMFOutputStream) -> a
org.freehep.graphicsio.emf.gdi.PolyDraw -> org.freehep.graphicsio.a.a.O:
    java.awt.Rectangle bounds -> a
    java.awt.Point[] points -> a
    byte[] types -> a
    void write(int,org.freehep.graphicsio.emf.EMFOutputStream) -> a
    java.lang.String toString() -> toString
org.freehep.graphicsio.emf.gdi.PolyDraw16 -> org.freehep.graphicsio.a.a.aB:
    java.awt.Rectangle bounds -> a
    java.awt.Point[] points -> a
    byte[] types -> a
    void write(int,org.freehep.graphicsio.emf.EMFOutputStream) -> a
    java.lang.String toString() -> toString
org.freehep.graphicsio.emf.gdi.PolyPolygon -> org.freehep.graphicsio.a.a.aG:
    int start -> a
    int end -> b
    void write(int,org.freehep.graphicsio.emf.EMFOutputStream) -> a
org.freehep.graphicsio.emf.gdi.PolyPolygon16 -> org.freehep.graphicsio.a.a.Q:
    int numberOfPolys -> a
    void write(int,org.freehep.graphicsio.emf.EMFOutputStream) -> a
org.freehep.graphicsio.emf.gdi.PolyPolyline -> org.freehep.graphicsio.a.a.aL:
    int start -> a
    int end -> b
    void write(int,org.freehep.graphicsio.emf.EMFOutputStream) -> a
org.freehep.graphicsio.emf.gdi.PolyPolyline16 -> org.freehep.graphicsio.a.a.ag:
    int numberOfPolys -> a
    void write(int,org.freehep.graphicsio.emf.EMFOutputStream) -> a
org.freehep.graphicsio.emf.gdi.Polygon16 -> org.freehep.graphicsio.a.a.K:
    void write(int,org.freehep.graphicsio.emf.EMFOutputStream) -> a
org.freehep.graphicsio.emf.gdi.Polyline -> org.freehep.graphicsio.a.a.W:
org.freehep.graphicsio.emf.gdi.Polyline16 -> org.freehep.graphicsio.a.a.ab:
    void write(int,org.freehep.graphicsio.emf.EMFOutputStream) -> a
org.freehep.graphicsio.emf.gdi.PolylineTo -> org.freehep.graphicsio.a.a.o:
org.freehep.graphicsio.emf.gdi.PolylineTo16 -> org.freehep.graphicsio.a.a.af:
    void write(int,org.freehep.graphicsio.emf.EMFOutputStream) -> a
org.freehep.graphicsio.emf.gdi.RealizePalette -> org.freehep.graphicsio.a.a.aj:
org.freehep.graphicsio.emf.gdi.Region -> org.freehep.graphicsio.a.a.aM:
    java.awt.Rectangle bounds -> a
    java.awt.Rectangle region -> b
    void write(org.freehep.graphicsio.emf.EMFOutputStream) -> a
    int length() -> a
    java.lang.String toString() -> toString
org.freehep.graphicsio.emf.gdi.ResizePalette -> org.freehep.graphicsio.a.a.R:
    int index -> a
    int entries -> b
    void write(int,org.freehep.graphicsio.emf.EMFOutputStream) -> a
    java.lang.String toString() -> toString
org.freehep.graphicsio.emf.gdi.RestoreDC -> org.freehep.graphicsio.a.a.aZ:
    int savedDC -> a
    void write(int,org.freehep.graphicsio.emf.EMFOutputStream) -> a
    java.lang.String toString() -> toString
org.freehep.graphicsio.emf.gdi.RoundRect -> org.freehep.graphicsio.a.a.aA:
    java.awt.Rectangle bounds -> a
    java.awt.Dimension corner -> a
    void write(int,org.freehep.graphicsio.emf.EMFOutputStream) -> a
    java.lang.String toString() -> toString
org.freehep.graphicsio.emf.gdi.SaveDC -> org.freehep.graphicsio.a.a.i:
org.freehep.graphicsio.emf.gdi.ScaleViewportExtEx -> org.freehep.graphicsio.a.a.ac:
    int xNum -> a
    int xDenom -> b
    int yNum -> c
    int yDenom -> d
    void write(int,org.freehep.graphicsio.emf.EMFOutputStream) -> a
    java.lang.String toString() -> toString
org.freehep.graphicsio.emf.gdi.ScaleWindowExtEx -> org.freehep.graphicsio.a.a.x:
    int xNum -> a
    int xDenom -> b
    int yNum -> c
    int yDenom -> d
    void write(int,org.freehep.graphicsio.emf.EMFOutputStream) -> a
    java.lang.String toString() -> toString
org.freehep.graphicsio.emf.gdi.SelectClipPath -> org.freehep.graphicsio.a.a.j:
    void write(int,org.freehep.graphicsio.emf.EMFOutputStream) -> a
org.freehep.graphicsio.emf.gdi.SelectObject -> org.freehep.graphicsio.a.a.ah:
    int index -> a
    void write(int,org.freehep.graphicsio.emf.EMFOutputStream) -> a
    java.lang.String toString() -> toString
org.freehep.graphicsio.emf.gdi.SelectPalette -> org.freehep.graphicsio.a.a.ap:
    int index -> a
    void write(int,org.freehep.graphicsio.emf.EMFOutputStream) -> a
    java.lang.String toString() -> toString
org.freehep.graphicsio.emf.gdi.SetArcDirection -> org.freehep.graphicsio.a.a.F:
    int direction -> a
    void write(int,org.freehep.graphicsio.emf.EMFOutputStream) -> a
    java.lang.String toString() -> toString
org.freehep.graphicsio.emf.gdi.SetBkColor -> org.freehep.graphicsio.a.a.g:
    java.awt.Color color -> a
    void write(int,org.freehep.graphicsio.emf.EMFOutputStream) -> a
    java.lang.String toString() -> toString
org.freehep.graphicsio.emf.gdi.SetBkMode -> org.freehep.graphicsio.a.a.ay:
    int mode -> a
    void write(int,org.freehep.graphicsio.emf.EMFOutputStream) -> a
    java.lang.String toString() -> toString
org.freehep.graphicsio.emf.gdi.SetBrushOrgEx -> org.freehep.graphicsio.a.a.L:
    java.awt.Point point -> a
    void write(int,org.freehep.graphicsio.emf.EMFOutputStream) -> a
    java.lang.String toString() -> toString
org.freehep.graphicsio.emf.gdi.SetICMMode -> org.freehep.graphicsio.a.a.aJ:
    int mode -> a
    void write(int,org.freehep.graphicsio.emf.EMFOutputStream) -> a
    java.lang.String toString() -> toString
org.freehep.graphicsio.emf.gdi.SetMapMode -> org.freehep.graphicsio.a.a.am:
    int mode -> a
    void write(int,org.freehep.graphicsio.emf.EMFOutputStream) -> a
    java.lang.String toString() -> toString
org.freehep.graphicsio.emf.gdi.SetMapperFlags -> org.freehep.graphicsio.a.a.e:
    int flags -> a
    void write(int,org.freehep.graphicsio.emf.EMFOutputStream) -> a
    java.lang.String toString() -> toString
org.freehep.graphicsio.emf.gdi.SetMetaRgn -> org.freehep.graphicsio.a.a.G:
org.freehep.graphicsio.emf.gdi.SetMiterLimit -> org.freehep.graphicsio.a.a.aT:
    int limit -> a
    void write(int,org.freehep.graphicsio.emf.EMFOutputStream) -> a
    java.lang.String toString() -> toString
org.freehep.graphicsio.emf.gdi.SetPixelV -> org.freehep.graphicsio.a.a.ax:
    java.awt.Point point -> a
    java.awt.Color color -> a
    void write(int,org.freehep.graphicsio.emf.EMFOutputStream) -> a
    java.lang.String toString() -> toString
org.freehep.graphicsio.emf.gdi.SetPolyFillMode -> org.freehep.graphicsio.a.a.al:
    int mode -> a
    void write(int,org.freehep.graphicsio.emf.EMFOutputStream) -> a
    java.lang.String toString() -> toString
org.freehep.graphicsio.emf.gdi.SetROP2 -> org.freehep.graphicsio.a.a.ad:
    int mode -> a
    void write(int,org.freehep.graphicsio.emf.EMFOutputStream) -> a
    java.lang.String toString() -> toString
org.freehep.graphicsio.emf.gdi.SetStretchBltMode -> org.freehep.graphicsio.a.a.av:
    int mode -> a
    void write(int,org.freehep.graphicsio.emf.EMFOutputStream) -> a
    java.lang.String toString() -> toString
org.freehep.graphicsio.emf.gdi.SetTextAlign -> org.freehep.graphicsio.a.a.aa:
    int mode -> a
    void write(int,org.freehep.graphicsio.emf.EMFOutputStream) -> a
    java.lang.String toString() -> toString
org.freehep.graphicsio.emf.gdi.SetTextColor -> org.freehep.graphicsio.a.a.au:
    java.awt.Color color -> a
    void write(int,org.freehep.graphicsio.emf.EMFOutputStream) -> a
    java.lang.String toString() -> toString
org.freehep.graphicsio.emf.gdi.SetViewportExtEx -> org.freehep.graphicsio.a.a.aX:
    java.awt.Dimension size -> a
    void write(int,org.freehep.graphicsio.emf.EMFOutputStream) -> a
    java.lang.String toString() -> toString
org.freehep.graphicsio.emf.gdi.SetViewportOrgEx -> org.freehep.graphicsio.a.a.J:
    java.awt.Point point -> a
    void write(int,org.freehep.graphicsio.emf.EMFOutputStream) -> a
    java.lang.String toString() -> toString
org.freehep.graphicsio.emf.gdi.SetWindowExtEx -> org.freehep.graphicsio.a.a.ae:
    java.awt.Dimension size -> a
    void write(int,org.freehep.graphicsio.emf.EMFOutputStream) -> a
    java.lang.String toString() -> toString
org.freehep.graphicsio.emf.gdi.SetWindowOrgEx -> org.freehep.graphicsio.a.a.aK:
    java.awt.Point point -> a
    void write(int,org.freehep.graphicsio.emf.EMFOutputStream) -> a
    java.lang.String toString() -> toString
org.freehep.graphicsio.emf.gdi.SetWorldTransform -> org.freehep.graphicsio.a.a.ba:
    java.awt.geom.AffineTransform transform -> a
    void write(int,org.freehep.graphicsio.emf.EMFOutputStream) -> a
    java.lang.String toString() -> toString
org.freehep.graphicsio.emf.gdi.StretchDIBits -> org.freehep.graphicsio.a.a.b:
    java.awt.Rectangle bounds -> a
    int x -> a
    int y -> b
    int width -> c
    int height -> d
    int xSrc -> e
    int ySrc -> f
    int widthSrc -> g
    int heightSrc -> h
    int usage -> i
    int dwROP -> j
    java.awt.Color bkg -> a
    org.freehep.graphicsio.emf.gdi.BitmapInfo bmi -> a
    java.awt.image.BufferedImage image -> a
    void write(int,org.freehep.graphicsio.emf.EMFOutputStream) -> a
    java.lang.String toString() -> toString
org.freehep.graphicsio.emf.gdi.StrokeAndFillPath -> org.freehep.graphicsio.a.a.I:
    java.awt.Rectangle bounds -> a
    void write(int,org.freehep.graphicsio.emf.EMFOutputStream) -> a
    java.lang.String toString() -> toString
org.freehep.graphicsio.emf.gdi.StrokePath -> org.freehep.graphicsio.a.a.aF:
    java.awt.Rectangle bounds -> a
    void write(int,org.freehep.graphicsio.emf.EMFOutputStream) -> a
    java.lang.String toString() -> toString
org.freehep.graphicsio.emf.gdi.Text -> org.freehep.graphicsio.a.a.aq:
    java.awt.Point pos -> a
    java.lang.String string -> a
    int options -> a
    java.awt.Rectangle bounds -> a
    int[] widths -> a
    void write(org.freehep.graphicsio.emf.EMFOutputStream) -> a
org.freehep.graphicsio.emf.gdi.TextA -> org.freehep.graphicsio.a.a.r:
    void write(org.freehep.graphicsio.emf.EMFOutputStream) -> a
    java.lang.String toString() -> toString
org.freehep.graphicsio.emf.gdi.TextW -> org.freehep.graphicsio.a.a.u:
    void write(org.freehep.graphicsio.emf.EMFOutputStream) -> a
    java.lang.String toString() -> toString
org.freehep.graphicsio.emf.gdi.TriVertex -> org.freehep.graphicsio.a.a.X:
    int x -> a
    int y -> b
    java.awt.Color color -> a
    void write(org.freehep.graphicsio.emf.EMFOutputStream) -> a
    java.lang.String toString() -> toString
org.freehep.graphicsio.emf.gdi.WidenPath -> org.freehep.graphicsio.a.a.c:
org.freehep.graphicsio.font.CharstringEncoder -> org.freehep.graphicsio.c.b:
    java.io.OutputStream out -> a
    int currentX -> a
    int currentY -> b
    int writeNumber(double) -> a
    void writeNumber(int) -> b
    void writeCommand(int) -> a
    void writePoint(double,double) -> e
    void writeX(double) -> a
    void writeY(double) -> b
    void startChar(double,double) -> d
    void endchar() -> a
    int to(double,double) -> a
    void move(double,double) -> a
    void line(double,double) -> b
    void cubic(double,double,double,double,double,double) -> a
    void closePath(double,double) -> c
    void drawPath(java.awt.Shape) -> a
org.freehep.graphicsio.font.FontEmbedder -> org.freehep.graphicsio.c.a:
    double[] widths -> a
    java.awt.font.GlyphVector glyphs -> a
    java.awt.Font font -> a
    void writeGlyph(java.lang.String,java.awt.Shape,java.awt.font.GlyphMetrics) -> a
    void writeWidths(double[]) -> a
    void openGlyphs() -> a
    void closeGlyphs() -> b
    void closeEmbedFont() -> c
    double[] getAdvanceWidths() -> a
    java.awt.Shape getGlyph(int) -> a
    java.awt.font.GlyphMetrics getGlyphMetrics(int) -> a
    void includeFont(java.awt.Font,org.freehep.graphics2d.font.CharTable,java.lang.String) -> a
    java.awt.Shape createUndefined() -> a
org.freehep.graphicsio.font.FontEmbedderType1 -> org.freehep.graphicsio.c.f:
    java.io.PrintStream fontFile -> a
    java.io.PrintStream encrypted -> b
    org.freehep.util.io.CountedByteOutputStream byteCounter -> a
    int asciiEnd -> a
    int encEnd -> b
    boolean addZeros -> a
    void writeWidths(double[]) -> a
    void writeEncoding(org.freehep.graphics2d.font.CharTable) -> a
    void openIncludeFont() -> d
    void closeIncludeFont() -> f
    void openGlyphs() -> a
    void closeGlyphs() -> b
    void closeEmbedFont() -> c
    void writeGlyph(java.lang.String,java.awt.Shape,java.awt.font.GlyphMetrics) -> a
    int getAsciiLength() -> b
    int getEncryptedLength() -> c
org.freehep.graphicsio.font.FontIncluder -> org.freehep.graphicsio.c.d:
    java.awt.font.FontRenderContext context -> a
    java.awt.geom.Rectangle2D fontBBox -> a
    java.awt.Font font -> a
    java.lang.String fontName -> a
    org.freehep.graphics2d.font.CharTable charTable -> a
    char[] unicode -> a
    java.lang.String[] charName -> a
    int noDefinedChars -> a
    void openIncludeFont() -> d
    void writeEncoding(org.freehep.graphics2d.font.CharTable) -> a
    void closeIncludeFont() -> f
    java.awt.font.FontRenderContext getContext() -> a
    java.lang.String getFontName() -> c
    java.awt.Font getFont() -> a
    org.freehep.graphics2d.font.CharTable getEncodingTable() -> a
    java.awt.geom.Rectangle2D getFontBBox() -> a
    java.lang.String getCharName(int) -> a
    char getUnicode(int) -> a
    char[] getUnicode() -> a
    int getNODefinedChars() -> a
    void includeFont(java.awt.Font,org.freehep.graphics2d.font.CharTable,java.lang.String) -> a
    double getUndefinedWidth() -> a
org.freehep.graphicsio.font.FontTable -> org.freehep.graphicsio.c.c:
    java.util.Hashtable table -> a
    org.freehep.graphics2d.font.CharTable getEncodingTable() -> a
    void firstRequest(org.freehep.graphicsio.font.FontTable$Entry,boolean,java.lang.String) -> a
    java.lang.String createFontReference(java.awt.Font) -> a
    java.awt.Font substituteFont(java.awt.Font) -> a
    java.lang.String fontReference(java.awt.Font,boolean,java.lang.String) -> a
    java.lang.String getKey(java.awt.Font) -> b
    void normalize(java.util.Map) -> a
    java.util.Collection getEntries() -> a
    org.freehep.graphics2d.font.CharTable getEncodingTable(java.awt.Font) -> a
org.freehep.graphicsio.font.FontTable$Entry -> org.freehep.graphicsio.c.e:
    java.awt.Font font -> a
    java.lang.String ref -> a
    org.freehep.graphics2d.font.CharTable encoding -> a
    boolean written -> a
    org.freehep.graphicsio.font.FontTable this$0 -> a
    java.awt.Font getFont() -> a
    java.lang.String getReference() -> a
    org.freehep.graphics2d.font.CharTable getEncoding() -> a
    void setWritten(boolean) -> a
    boolean isWritten() -> a
    java.lang.String toString() -> toString
    java.lang.String access$1(org.freehep.graphicsio.font.FontTable$Entry) -> a
org.freehep.graphicsio.pdf.ImageBytes -> org.freehep.graphicsio.b.o:
    java.lang.String format -> a
    byte[] bytes -> a
    byte[] toZLIB(java.awt.image.RenderedImage,java.awt.Color,java.lang.String) -> a
    byte[] toJPG(java.awt.image.RenderedImage) -> a
    byte[] getBytes() -> a
    java.lang.String getFormat() -> a
org.freehep.graphicsio.pdf.PDF -> org.freehep.graphicsio.b.p:
    int generationNumber -> a
    java.util.Hashtable refsByName -> a
    java.util.Vector refsByNumber -> a
    java.util.Vector xrefsByNumber -> b
    int startXref -> b
    org.freehep.graphicsio.pdf.PDFByteWriter out -> a
    org.freehep.graphicsio.pdf.PDFName name(java.lang.String) -> a
    org.freehep.graphicsio.pdf.PDFRef ref(java.lang.String) -> a
    void setXRef(int,int) -> a
    void xref() -> a
    void trailer(java.lang.String,java.lang.String) -> a
    void startxref() -> b
org.freehep.graphicsio.pdf.PDFByteWriter -> org.freehep.graphicsio.b.f:
    int indent -> a
    java.lang.String indentString -> b
    void write(java.lang.String) -> a
    void close() -> close
    void print(java.lang.String) -> b
    void printPlain(java.lang.String) -> c
    void println() -> a
    void indent() -> b
    void outdent() -> c
    void println(java.lang.String) -> d
    void print(int) -> a
    void println(int) -> b
    void printPlain(java.lang.Object) -> a
org.freehep.graphicsio.pdf.PDFCatalog -> org.freehep.graphicsio.b.n:
    void setViewerPreferences(java.lang.String) -> a
    void setPageMode(java.lang.String) -> b
    void setOutlines(java.lang.String) -> c
    void setOpenAction(java.lang.Object[]) -> a
org.freehep.graphicsio.pdf.PDFCharTableWriter -> org.freehep.graphicsio.b.r:
    org.freehep.graphicsio.pdf.PDFCharTableWriter ctw -> a
    org.freehep.graphicsio.pdf.PDFCharTableWriter getInstance() -> a
    void writeObject(java.lang.Object,org.freehep.graphicsio.pdf.PDFRef,org.freehep.graphicsio.pdf.PDFWriter) -> a
org.freehep.graphicsio.pdf.PDFConstants -> org.freehep.graphicsio.b.G:
    java.lang.String EOL -> a
    java.text.SimpleDateFormat dateFormat -> a
org.freehep.graphicsio.pdf.PDFDictionary -> org.freehep.graphicsio.b.e:
    java.lang.String open -> b
    org.freehep.graphicsio.pdf.PDFByteWriter out -> a
    boolean ok -> a
    org.freehep.graphicsio.pdf.PDFObject object -> a
    org.freehep.graphicsio.pdf.PDF pdf -> a
    void close() -> a
    void entry(java.lang.String,java.lang.String) -> a
    void entry(java.lang.String,org.freehep.graphicsio.pdf.PDFName) -> a
    void entry(java.lang.String,int) -> a
    void entry(java.lang.String,double) -> a
    void entry(java.lang.String,boolean) -> a
    void entry(java.lang.String,org.freehep.graphicsio.pdf.PDFRef) -> a
    void entry(java.lang.String,java.util.Calendar) -> a
    void entry(java.lang.String,java.lang.Object[]) -> a
    void entry(java.lang.String,double[]) -> a
    void entry(java.lang.String,boolean[]) -> a
    org.freehep.graphicsio.pdf.PDFDictionary openDictionary(java.lang.String) -> a
    void close(org.freehep.graphicsio.pdf.PDFDictionary) -> a
org.freehep.graphicsio.pdf.PDFDocInfo -> org.freehep.graphicsio.b.H:
    void setTitle(java.lang.String) -> a
    void setAuthor(java.lang.String) -> b
    void setSubject(java.lang.String) -> c
    void setKeywords(java.lang.String) -> d
    void setCreator(java.lang.String) -> e
    void setProducer(java.lang.String) -> f
    void setCreationDate(java.util.Calendar) -> a
    void setModificationDate(java.util.Calendar) -> b
    void setTrapped(java.lang.String) -> g
org.freehep.graphicsio.pdf.PDFFontEmbedder -> org.freehep.graphicsio.b.w:
    org.freehep.graphicsio.pdf.PDFWriter pdf -> a
    org.freehep.graphicsio.pdf.PDFDictionary fontDict -> a
    java.lang.String reference -> a
    org.freehep.graphicsio.pdf.PDFRedundanceTracker redundanceTracker -> a
    java.lang.String getSubtype() -> a
    void addAdditionalEntries(org.freehep.graphicsio.pdf.PDFDictionary) -> a
    void addAdditionalInitDicts() -> e
    java.lang.String getReference() -> b
    void openIncludeFont() -> d
    void closeEmbedFont() -> c
    void writeWidths(double[]) -> a
    void writeEncoding(org.freehep.graphics2d.font.CharTable) -> a
    java.lang.String createCharacterReference(java.lang.String) -> a
org.freehep.graphicsio.pdf.PDFFontEmbedderType1 -> org.freehep.graphicsio.b.l:
    java.io.ByteArrayOutputStream byteBuffer -> a
    java.lang.String reference -> a
    org.freehep.graphicsio.pdf.PDFWriter pdf -> a
    org.freehep.graphicsio.pdf.PDFStream fontFile -> a
    org.freehep.graphicsio.pdf.PDFRedundanceTracker redundanceTracker -> a
    org.freehep.graphicsio.pdf.PDFFontEmbedderType1 create(java.awt.font.FontRenderContext,org.freehep.graphicsio.pdf.PDFWriter,java.lang.String,org.freehep.graphicsio.pdf.PDFRedundanceTracker) -> a
    java.lang.String getReference() -> a
    void openIncludeFont() -> d
    void writeWidths(double[]) -> a
    void openGlyphs() -> a
    void closeEmbedFont() -> c
org.freehep.graphicsio.pdf.PDFFontEmbedderType3 -> org.freehep.graphicsio.b.m:
    java.lang.String getSubtype() -> a
    void addAdditionalEntries(org.freehep.graphicsio.pdf.PDFDictionary) -> a
    void addAdditionalInitDicts() -> e
    void writeGlyph(java.lang.String,java.awt.Shape,java.awt.font.GlyphMetrics) -> a
org.freehep.graphicsio.pdf.PDFFontIncluder -> org.freehep.graphicsio.b.v:
    java.lang.String[][] STANDARD_FONT -> a
    org.freehep.graphicsio.pdf.PDFWriter pdf -> a
    java.lang.String reference -> a
    org.freehep.graphicsio.pdf.PDFRedundanceTracker redundanceTracker -> a
    void openIncludeFont() -> d
    void writeEncoding(org.freehep.graphics2d.font.CharTable) -> a
    boolean isStandardFont(java.awt.Font) -> a
    int getFontBaseIndex(java.awt.Font) -> a
    int getFontStyle(java.awt.Font) -> b
org.freehep.graphicsio.pdf.PDFFontTable -> org.freehep.graphicsio.b.a:
    int currentFontIndex -> a
    org.freehep.graphicsio.pdf.PDFWriter pdf -> a
    org.freehep.graphicsio.pdf.PDFRedundanceTracker tracker -> a
    java.util.Properties replaceFonts -> a
    int addFontDictionary() -> a
    void embedAll(java.awt.font.FontRenderContext,boolean,java.lang.String) -> a
    org.freehep.graphics2d.font.CharTable getEncodingTable() -> a
    void firstRequest(org.freehep.graphicsio.font.FontTable$Entry,boolean,java.lang.String) -> a
    java.awt.Font substituteFont(java.awt.Font) -> a
    java.lang.String createFontReference(java.awt.Font) -> a
org.freehep.graphicsio.pdf.PDFGraphics2D -> org.freehep.graphicsio.b.c:
    java.lang.String rootKey -> w
    java.lang.String TRANSPARENT -> a
    java.lang.String BACKGROUND -> b
    java.lang.String BACKGROUND_COLOR -> c
    java.lang.String PAGE_SIZE -> d
    java.lang.String PAGE_MARGINS -> e
    java.lang.String ORIENTATION -> f
    java.lang.String FIT_TO_PAGE -> g
    java.lang.String EMBED_FONTS -> h
    java.lang.String EMBED_FONTS_AS -> i
    java.lang.String THUMBNAILS -> j
    java.lang.String THUMBNAIL_SIZE -> k
    java.lang.String COMPRESS -> l
    java.lang.String VERSION -> m
    java.lang.String WRITE_IMAGES_AS -> n
    java.lang.String AUTHOR -> o
    java.lang.String TITLE -> p
    java.lang.String SUBJECT -> q
    java.lang.String KEYWORDS -> r
    org.freehep.util.UserProperties defaultProperties -> a
    java.lang.String[] COMPRESS_FILTERS -> a
    java.lang.String[] NO_FILTERS -> b
    java.io.OutputStream ros -> a
    org.freehep.graphicsio.pdf.PDFWriter os -> a
    org.freehep.graphicsio.pdf.PDFStream pageStream -> a
    org.freehep.graphicsio.pdf.PDFFontTable fontTable -> a
    org.freehep.graphicsio.pdf.PDFImageDelayQueue delayImageQueue -> a
    org.freehep.graphicsio.pdf.PDFPaintDelayQueue delayPaintQueue -> a
    int currentPage -> b
    boolean multiPage -> a
    org.freehep.graphics2d.TagString[] headerText -> a
    int headerUnderline -> c
    java.awt.Font headerFont -> a
    org.freehep.graphics2d.TagString[] footerText -> b
    int footerUnderline -> d
    java.awt.Font footerFont -> b
    java.util.List titles -> a
    int alphaIndex -> a
    java.util.Map extGStates -> a
    java.lang.Class class$0 -> a
    void init(java.io.OutputStream) -> a
    boolean isMultiPage() -> a
    void writeHeader() -> writeHeader
    void writeBackground() -> writeBackground
    void writeTrailer() -> writeTrailer
    void closeStream() -> closeStream
    void processDelayed() -> b
    void openPage(java.awt.Dimension,java.lang.String,java.awt.Component) -> a
    void closePage() -> a
    void writeHeadline(java.awt.geom.AffineTransform) -> a
    void writeFootline(java.awt.geom.AffineTransform) -> b
    void writeLine(java.awt.geom.AffineTransform,java.awt.Font,org.freehep.graphics2d.TagString[],double,int,double,int) -> a
    java.awt.Graphics create() -> create
    java.awt.Graphics create(double,double,double,double) -> create
    void writeGraphicsSave() -> writeGraphicsSave
    void writeGraphicsRestore() -> writeGraphicsRestore
    void draw(java.awt.Shape) -> draw
    void fill(java.awt.Shape) -> fill
    void copyArea(int,int,int,int,int,int) -> copyArea
    void writeImage(java.awt.image.RenderedImage,java.awt.geom.AffineTransform,java.awt.Color) -> writeImage
    void writeString(java.lang.String,double,double) -> writeString
    void writeTransform(java.awt.geom.AffineTransform) -> writeTransform
    void writeSetClip(java.awt.Shape) -> writeSetClip
    void writeClip(java.awt.Shape) -> writeClip
    void writeWidth(float) -> writeWidth
    void writeCap(int) -> writeCap
    void writeJoin(int) -> writeJoin
    void writeMiterLimit(float) -> writeMiterLimit
    void writeDash(float[],float) -> writeDash
    void setPaintMode() -> setPaintMode
    void setXORMode(java.awt.Color) -> setXORMode
    void writePaint(java.awt.Color) -> writePaint
    void writePaint(java.awt.GradientPaint) -> writePaint
    void writePaint(java.awt.TexturePaint) -> writePaint
    void writePaint(java.awt.Paint) -> writePaint
    void writeFont(java.awt.Font) -> writeFont
    java.awt.GraphicsConfiguration getDeviceConfiguration() -> getDeviceConfiguration
    void writeComment(java.lang.String) -> writeComment
    java.lang.String toString() -> toString
    void showString(java.awt.Font,java.lang.String) -> a
    void showCharacterCodes(java.lang.String) -> a
    double getWidth() -> a
    double getHeight() -> b
org.freehep.graphicsio.pdf.PDFImageDelayQueue -> org.freehep.graphicsio.b.E:
    int currentNumber -> a
    java.util.Map imageMap -> a
    java.util.List imageList -> a
    org.freehep.graphicsio.pdf.PDFWriter pdf -> a
    org.freehep.graphicsio.pdf.PDFName delayImage(java.awt.image.RenderedImage,java.awt.Color,java.lang.String) -> a
    void processAll() -> a
    int addXObjects() -> a
    int access$0(org.freehep.graphicsio.pdf.PDFImageDelayQueue) -> a
    void access$1(org.freehep.graphicsio.pdf.PDFImageDelayQueue,int) -> a
org.freehep.graphicsio.pdf.PDFImageDelayQueue$Entry -> org.freehep.graphicsio.b.i:
    java.awt.image.RenderedImage image -> a
    java.lang.String name -> a
    java.lang.String maskName -> b
    java.awt.Color bkg -> a
    java.lang.String writeAs -> c
    boolean written -> a
    org.freehep.graphicsio.pdf.PDFImageDelayQueue this$0 -> a
    java.lang.String access$1(org.freehep.graphicsio.pdf.PDFImageDelayQueue$Entry) -> a
    boolean access$2(org.freehep.graphicsio.pdf.PDFImageDelayQueue$Entry) -> a
    void access$3(org.freehep.graphicsio.pdf.PDFImageDelayQueue$Entry,boolean) -> a
    java.lang.String access$4(org.freehep.graphicsio.pdf.PDFImageDelayQueue$Entry) -> b
    java.awt.image.RenderedImage access$5(org.freehep.graphicsio.pdf.PDFImageDelayQueue$Entry) -> a
    java.awt.Color access$6(org.freehep.graphicsio.pdf.PDFImageDelayQueue$Entry) -> a
    java.lang.String access$7(org.freehep.graphicsio.pdf.PDFImageDelayQueue$Entry) -> c
org.freehep.graphicsio.pdf.PDFName -> org.freehep.graphicsio.b.x:
    java.lang.String name -> b
    java.lang.String toString() -> toString
org.freehep.graphicsio.pdf.PDFObject -> org.freehep.graphicsio.b.h:
    org.freehep.graphicsio.pdf.PDF pdf -> a
    org.freehep.graphicsio.pdf.PDFByteWriter out -> a
    java.lang.String open -> b
    boolean ok -> a
    void close() -> a
    void entry(int) -> a
    void entry(java.lang.Object[]) -> a
    org.freehep.graphicsio.pdf.PDFDictionary openDictionary() -> a
    org.freehep.graphicsio.pdf.PDFStream openStream(java.lang.String,java.lang.String[]) -> a
    org.freehep.graphicsio.pdf.PDFDocInfo openDocInfo(org.freehep.graphicsio.pdf.PDF) -> a
    org.freehep.graphicsio.pdf.PDFCatalog openCatalog(org.freehep.graphicsio.pdf.PDF,org.freehep.graphicsio.pdf.PDFRef) -> a
    org.freehep.graphicsio.pdf.PDFPageTree openPageTree(org.freehep.graphicsio.pdf.PDF,org.freehep.graphicsio.pdf.PDFRef) -> a
    org.freehep.graphicsio.pdf.PDFPage openPage(org.freehep.graphicsio.pdf.PDF,org.freehep.graphicsio.pdf.PDFRef) -> a
    org.freehep.graphicsio.pdf.PDFViewerPreferences openViewerPreferences(org.freehep.graphicsio.pdf.PDF) -> a
    org.freehep.graphicsio.pdf.PDFOutlineList openOutlineList(org.freehep.graphicsio.pdf.PDF,org.freehep.graphicsio.pdf.PDFRef,org.freehep.graphicsio.pdf.PDFRef) -> a
    org.freehep.graphicsio.pdf.PDFOutline openOutline(org.freehep.graphicsio.pdf.PDF,org.freehep.graphicsio.pdf.PDFRef,java.lang.String,org.freehep.graphicsio.pdf.PDFRef,org.freehep.graphicsio.pdf.PDFRef) -> a
org.freehep.graphicsio.pdf.PDFOutline -> org.freehep.graphicsio.b.F:
    void setDest(java.lang.Object[]) -> a
org.freehep.graphicsio.pdf.PDFOutlineList -> org.freehep.graphicsio.b.k:
org.freehep.graphicsio.pdf.PDFPage -> org.freehep.graphicsio.b.t:
    void setContents(java.lang.String) -> a
    void setThumb(java.lang.String) -> b
org.freehep.graphicsio.pdf.PDFPageBase -> org.freehep.graphicsio.b.z:
    void setResources(java.lang.String) -> c
    void setMediaBox(double,double,double,double) -> a
org.freehep.graphicsio.pdf.PDFPageTree -> org.freehep.graphicsio.b.D:
    java.util.Vector pages -> a
    void addPage(java.lang.String) -> a
    void close() -> a
org.freehep.graphicsio.pdf.PDFPaintDelayQueue -> org.freehep.graphicsio.b.q:
    int currentNumber -> a
    java.util.List paintList -> a
    org.freehep.graphicsio.pdf.PDFWriter pdf -> a
    java.awt.geom.AffineTransform pageMatrix -> a
    void setPageMatrix(java.awt.geom.AffineTransform) -> a
    org.freehep.graphicsio.pdf.PDFName delayPaint(java.awt.Paint,java.awt.geom.AffineTransform,java.lang.String) -> a
    void processAll() -> a
    int addPatterns() -> a
    void addGradientPaint(org.freehep.graphicsio.pdf.PDFPaintDelayQueue$Entry) -> a
    void addLinearFunction(java.lang.String,double[],double[],double[]) -> a
    void addTexturePaint(org.freehep.graphicsio.pdf.PDFPaintDelayQueue$Entry) -> b
    void setMatrix(org.freehep.graphicsio.pdf.PDFDictionary,org.freehep.graphicsio.pdf.PDFPaintDelayQueue$Entry,double,double) -> a
    int access$0() -> b
    void access$1(int) -> a
org.freehep.graphicsio.pdf.PDFPaintDelayQueue$Entry -> org.freehep.graphicsio.b.C:
    java.awt.Paint paint -> a
    java.lang.String name -> a
    java.awt.geom.AffineTransform trafo -> a
    java.lang.String writeAs -> b
    boolean written -> a
    org.freehep.graphicsio.pdf.PDFPaintDelayQueue this$0 -> a
    java.lang.String access$1(org.freehep.graphicsio.pdf.PDFPaintDelayQueue$Entry) -> a
    boolean access$2(org.freehep.graphicsio.pdf.PDFPaintDelayQueue$Entry) -> a
    void access$3(org.freehep.graphicsio.pdf.PDFPaintDelayQueue$Entry,boolean) -> a
    java.awt.Paint access$4(org.freehep.graphicsio.pdf.PDFPaintDelayQueue$Entry) -> a
    java.lang.String access$5(org.freehep.graphicsio.pdf.PDFPaintDelayQueue$Entry) -> b
    java.awt.geom.AffineTransform access$6(org.freehep.graphicsio.pdf.PDFPaintDelayQueue$Entry) -> a
org.freehep.graphicsio.pdf.PDFPathConstructor -> org.freehep.graphicsio.b.A:
    org.freehep.graphicsio.pdf.PDFStream stream -> a
    void move(double,double) -> a
    void line(double,double) -> b
    void cubic(double,double,double,double,double,double) -> a
    void closePath(double,double) -> c
org.freehep.graphicsio.pdf.PDFRedundanceTracker -> org.freehep.graphicsio.b.B:
    int refCount -> a
    org.freehep.graphicsio.pdf.PDFWriter pdf -> a
    java.util.Map objects -> a
    java.util.Vector orderedObjects -> a
    org.freehep.graphicsio.pdf.PDFRef getReference(java.lang.Object,java.lang.Object,org.freehep.graphicsio.pdf.PDFRedundanceTracker$Writer) -> a
    org.freehep.graphicsio.pdf.PDFRef getReference(java.lang.Object,org.freehep.graphicsio.pdf.PDFRedundanceTracker$Writer) -> a
    void writeAll() -> a
    org.freehep.graphicsio.pdf.PDFWriter access$0(org.freehep.graphicsio.pdf.PDFRedundanceTracker) -> a
    int access$1() -> a
    void access$2(int) -> a
org.freehep.graphicsio.pdf.PDFRedundanceTracker$Entry -> org.freehep.graphicsio.b.s:
    java.lang.Object object -> a
    org.freehep.graphicsio.pdf.PDFRedundanceTracker$Writer writer -> a
    boolean written -> a
    org.freehep.graphicsio.pdf.PDFRef reference -> a
    java.lang.Object groupID -> b
    org.freehep.graphicsio.pdf.PDFRedundanceTracker this$0 -> a
    org.freehep.graphicsio.pdf.PDFRef access$0(org.freehep.graphicsio.pdf.PDFRedundanceTracker$Entry) -> a
    boolean access$2(org.freehep.graphicsio.pdf.PDFRedundanceTracker$Entry) -> a
    org.freehep.graphicsio.pdf.PDFRedundanceTracker$Writer access$3(org.freehep.graphicsio.pdf.PDFRedundanceTracker$Entry) -> a
    java.lang.Object access$4(org.freehep.graphicsio.pdf.PDFRedundanceTracker$Entry) -> a
    void access$5(org.freehep.graphicsio.pdf.PDFRedundanceTracker$Entry,boolean) -> a
org.freehep.graphicsio.pdf.PDFRedundanceTracker$Writer -> org.freehep.graphicsio.b.y:
    void writeObject(java.lang.Object,org.freehep.graphicsio.pdf.PDFRef,org.freehep.graphicsio.pdf.PDFWriter) -> a
org.freehep.graphicsio.pdf.PDFRef -> org.freehep.graphicsio.b.g:
    java.lang.String name -> b
    int objectNumber -> a
    int generationNumber -> b
    java.lang.String getName() -> a
    int getObjectNumber() -> a
    int getGenerationNumber() -> b
    java.lang.String toString() -> toString
org.freehep.graphicsio.pdf.PDFStream -> org.freehep.graphicsio.b.d:
    java.lang.String name -> b
    org.freehep.graphicsio.pdf.PDFObject object -> a
    boolean dictionaryOpen -> a
    java.io.OutputStream[] stream -> a
    org.freehep.util.io.CountedByteOutputStream byteCountStream -> a
    java.lang.String[] encode -> a
    int gStates -> a
    boolean textOpen -> b
    boolean fontWasSet -> c
    boolean compatibilityOpen -> d
    void startStream() -> m
    void startStream(java.lang.String[]) -> a
    void write(int) -> c
    void write(byte[]) -> a
    org.freehep.graphicsio.pdf.PDFName[] decodeFilters(java.lang.String[]) -> a
    java.io.OutputStream[] openFilters(java.io.OutputStream,java.lang.String[]) -> a
    void closeFilters(java.io.OutputStream[]) -> a
    void write(java.lang.String) -> d
    void close() -> a
    java.lang.String getName() -> a
    int getLength() -> a
    void print(java.lang.String) -> a
    void println(java.lang.String) -> b
    void save() -> b
    void restore() -> c
    void matrix(java.awt.geom.AffineTransform) -> a
    void matrix(double,double,double,double,double,double) -> a
    void width(double) -> a
    void cap(int) -> a
    void join(int) -> b
    void mitterLimit(double) -> b
    void dash(float[],double) -> a
    void state(org.freehep.graphicsio.pdf.PDFName) -> a
    void cubic(double,double,double,double,double,double) -> b
    void move(double,double) -> a
    void line(double,double) -> b
    void closePath() -> d
    void stroke() -> e
    void fill() -> f
    void fillEvenOdd() -> g
    void endPath() -> h
    void clip() -> i
    void clipEvenOdd() -> j
    void beginText() -> k
    void endText() -> l
    void font(org.freehep.graphicsio.pdf.PDFName,double) -> a
    void text(double,double) -> c
    void show(java.lang.String) -> c
    void glyph(double,double,double,double,double,double) -> c
    void colorSpace(org.freehep.graphicsio.pdf.PDFName) -> b
    void colorSpaceStroke(org.freehep.graphicsio.pdf.PDFName) -> c
    void colorSpace(double[],org.freehep.graphicsio.pdf.PDFName) -> a
    void colorSpaceStroke(double[],org.freehep.graphicsio.pdf.PDFName) -> b
    void colorSpace(double,double,double) -> a
    void colorSpaceStroke(double,double,double) -> b
    org.freehep.graphicsio.pdf.PDFName[] getFilterName(java.lang.String) -> a
    void image(java.awt.image.RenderedImage,java.awt.Color,java.lang.String) -> a
    void imageMask(java.awt.image.RenderedImage,java.lang.String) -> a
    void inlineImage(java.awt.image.RenderedImage,java.awt.Color,java.lang.String) -> b
    void imageInfo(java.lang.String,int) -> b
    void imageInfo(java.lang.String,org.freehep.graphicsio.pdf.PDFName) -> b
    void imageInfo(java.lang.String,java.lang.Object[]) -> b
    boolean drawPath(java.awt.Shape) -> a
    void xObject(org.freehep.graphicsio.pdf.PDFName) -> d
org.freehep.graphicsio.pdf.PDFUtil -> org.freehep.graphicsio.b.b:
    org.freehep.util.ScientificFormat scientific -> a
    java.lang.String escape(java.lang.String) -> a
    java.lang.String date(java.util.Calendar) -> a
    java.lang.String fixedPrecision(double) -> a
org.freehep.graphicsio.pdf.PDFViewerPreferences -> org.freehep.graphicsio.b.j:
    void setFitWindow(boolean) -> a
    void setCenterWindow(boolean) -> b
org.freehep.graphicsio.pdf.PDFWriter -> org.freehep.graphicsio.b.u:
    java.lang.String open -> b
    java.lang.String catalogName -> c
    java.lang.String docInfoName -> d
    void close(java.lang.String,java.lang.String) -> b
    void object(java.lang.String,java.lang.Object[]) -> a
    void object(java.lang.String,int) -> a
    org.freehep.graphicsio.pdf.PDFObject openObject(java.lang.String) -> a
    void close(org.freehep.graphicsio.pdf.PDFObject) -> a
    org.freehep.graphicsio.pdf.PDFDictionary openDictionary(java.lang.String) -> a
    void close(org.freehep.graphicsio.pdf.PDFDictionary) -> a
    org.freehep.graphicsio.pdf.PDFStream openStream(java.lang.String) -> a
    org.freehep.graphicsio.pdf.PDFStream openStream(java.lang.String,java.lang.String[]) -> a
    void close(org.freehep.graphicsio.pdf.PDFStream) -> a
    void close() -> c
    org.freehep.graphicsio.pdf.PDFDocInfo openDocInfo(java.lang.String) -> a
    void close(org.freehep.graphicsio.pdf.PDFDocInfo) -> a
    org.freehep.graphicsio.pdf.PDFCatalog openCatalog(java.lang.String,java.lang.String) -> a
    void close(org.freehep.graphicsio.pdf.PDFCatalog) -> a
    org.freehep.graphicsio.pdf.PDFPageTree openPageTree(java.lang.String,java.lang.String) -> a
    void close(org.freehep.graphicsio.pdf.PDFPageTree) -> a
    org.freehep.graphicsio.pdf.PDFPage openPage(java.lang.String,java.lang.String) -> a
    void close(org.freehep.graphicsio.pdf.PDFPage) -> a
    org.freehep.graphicsio.pdf.PDFViewerPreferences openViewerPreferences(java.lang.String) -> a
    void close(org.freehep.graphicsio.pdf.PDFViewerPreferences) -> a
    org.freehep.graphicsio.pdf.PDFOutlineList openOutlineList(java.lang.String,java.lang.String,java.lang.String) -> a
    void close(org.freehep.graphicsio.pdf.PDFOutlineList) -> a
    org.freehep.graphicsio.pdf.PDFOutline openOutline(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> a
    void close(org.freehep.graphicsio.pdf.PDFOutline) -> a
org.freehep.graphicsio.raw.RawImageWriteParam -> org.freehep.graphicsio.raw.b:
    java.lang.String rootKey -> d
    java.lang.String BACKGROUND -> a
    java.lang.String CODE -> b
    java.lang.String PAD -> c
    java.awt.Color bkg -> a
    java.lang.String code -> e
    int pad -> a
    java.lang.Class class$0 -> a
    javax.imageio.ImageWriteParam getWriteParam(java.util.Properties) -> a
    java.awt.Color getBackground() -> a
    void setBackground(java.awt.Color) -> a
    java.lang.String getCode() -> a
    void setCode(java.lang.String) -> a
    int getPad() -> a
    void setPad(int) -> a
org.freehep.graphicsio.raw.RawImageWriter -> org.freehep.graphicsio.raw.a:
    void write(javax.imageio.metadata.IIOMetadata,javax.imageio.IIOImage,javax.imageio.ImageWriteParam) -> write
    javax.imageio.metadata.IIOMetadata convertStreamMetadata(javax.imageio.metadata.IIOMetadata,javax.imageio.ImageWriteParam) -> convertStreamMetadata
    javax.imageio.metadata.IIOMetadata convertImageMetadata(javax.imageio.metadata.IIOMetadata,javax.imageio.ImageTypeSpecifier,javax.imageio.ImageWriteParam) -> convertImageMetadata
    javax.imageio.metadata.IIOMetadata getDefaultImageMetadata(javax.imageio.ImageTypeSpecifier,javax.imageio.ImageWriteParam) -> getDefaultImageMetadata
    javax.imageio.metadata.IIOMetadata getDefaultStreamMetadata(javax.imageio.ImageWriteParam) -> getDefaultStreamMetadata
    javax.imageio.ImageWriteParam getDefaultWriteParam() -> getDefaultWriteParam
org.freehep.graphicsio.raw.RawImageWriterSpi -> org.freehep.graphicsio.raw.RawImageWriterSpi:
    java.lang.String getDescription(java.util.Locale) -> getDescription
    javax.imageio.ImageWriter createWriterInstance(java.lang.Object) -> createWriterInstance
    boolean canEncodeImage(javax.imageio.ImageTypeSpecifier) -> canEncodeImage
org.freehep.graphicsio.svg.SVGFontTable -> org.freehep.graphicsio.d.c:
    java.util.Hashtable glyphs -> a
    java.util.Properties replaceFonts -> a
    org.freehep.graphicsio.svg.SVGGlyph addGlyph(int,java.awt.Font) -> a
    org.freehep.graphicsio.svg.SVGGlyph createGlyph(int,java.awt.Font) -> b
    void addGlyphs(java.lang.String,java.awt.Font) -> a
    java.util.Hashtable getGlyphs(java.awt.Font) -> a
    java.lang.String toString() -> toString
    java.awt.Font untransform(java.awt.Font) -> a
    void normalize(java.util.Map) -> a
org.freehep.graphicsio.svg.SVGGlyph -> org.freehep.graphicsio.d.b:
    int FONT_SIZE -> a
    int UNITS_PER_EM -> b
    java.awt.Shape glyph -> a
    int unicode -> c
    java.awt.font.GlyphMetrics glyphMetrics -> a
    java.awt.geom.AffineTransform defaultTransform -> a
    java.lang.String toString() -> toString
    java.lang.String getPathString() -> a
    java.lang.String getHorizontalAdvanceXString() -> b
    java.lang.String getHorizontalAdvanceYString() -> c
org.freehep.graphicsio.svg.SVGGraphics2D -> org.freehep.graphicsio.d.a:
    java.lang.String rootKey -> n
    java.lang.String TRANSPARENT -> a
    java.lang.String BACKGROUND -> b
    java.lang.String BACKGROUND_COLOR -> c
    java.lang.String VERSION -> d
    java.lang.String COMPRESS -> e
    java.lang.String STYLABLE -> f
    java.lang.String IMAGE_SIZE -> g
    java.lang.String EXPORT_IMAGES -> h
    java.lang.String EXPORT_SUFFIX -> i
    java.lang.String WRITE_IMAGES_AS -> j
    java.lang.String FOR -> k
    java.lang.String TITLE -> l
    java.awt.BasicStroke defaultStroke -> a
    java.lang.String EMBED_FONTS -> m
    org.freehep.graphicsio.svg.SVGFontTable fontTable -> a
    org.freehep.util.UserProperties defaultProperties -> a
    java.lang.String filename -> o
    int bbx -> a
    int bby -> b
    int bbw -> c
    int bbh -> d
    java.io.OutputStream ros -> a
    java.io.PrintWriter os -> a
    java.util.Hashtable gradients -> a
    java.util.Hashtable textures -> b
    java.util.Stack closeTags -> a
    int imageNumber -> e
    org.freehep.util.Value clipNumber -> a
    int width -> f
    int height -> g
    java.text.DecimalFormat scientific -> a
    java.lang.Class class$0 -> a
    java.util.Properties getDefaultProperties() -> getDefaultProperties
    void setDefaultProperties(java.util.Properties) -> setDefaultProperties
    void init(java.io.OutputStream) -> init
    void setBoundingBox() -> setBoundingBox
    void writeHeader() -> writeHeader
    void writeBackground() -> writeBackground
    void writeTrailer() -> writeTrailer
    void closeStream() -> closeStream
    java.awt.Graphics create() -> create
    java.awt.Graphics create(double,double,double,double) -> create
    void writeGraphicsSave() -> writeGraphicsSave
    void writeGraphicsRestore() -> writeGraphicsRestore
    void draw(java.awt.Shape) -> draw
    void fill(java.awt.Shape) -> fill
    void writePathIterator(java.awt.geom.PathIterator,java.util.Properties) -> writePathIterator
    void copyArea(int,int,int,int,int,int) -> copyArea
    void writeImage(java.awt.image.RenderedImage,java.awt.geom.AffineTransform,java.awt.Color) -> writeImage
    void writeString(java.lang.String,double,double) -> writeString
    java.util.Properties getFontProperties(java.awt.Font) -> getFontProperties
    void writeTransform(java.awt.geom.AffineTransform) -> writeTransform
    void writeSetTransform(java.awt.geom.AffineTransform) -> writeSetTransform
    void writeClip(java.awt.Shape) -> writeClip
    void writeSetClip(java.awt.Shape) -> writeSetClip
    void writeWidth(float) -> writeWidth
    void writeCap(int) -> writeCap
    void writeJoin(int) -> writeJoin
    void writeMiterLimit(float) -> writeMiterLimit
    void writeDash(float[],float) -> writeDash
    java.util.Properties getStrokeProperties(java.awt.Stroke,boolean) -> getStrokeProperties
    void setPaintMode() -> setPaintMode
    void setXORMode(java.awt.Color) -> setXORMode
    void writePaint(java.awt.Color) -> writePaint
    void writePaint(java.awt.GradientPaint) -> writePaint
    void writePaint(java.awt.TexturePaint) -> writePaint
    void writePaint(java.awt.Paint) -> writePaint
    void writeFont(java.awt.Font) -> writeFont
    java.awt.GraphicsConfiguration getDeviceConfiguration() -> getDeviceConfiguration
    void writeComment(java.lang.String) -> writeComment
    java.lang.String toString() -> toString
    java.lang.String getTransformedString(java.awt.geom.AffineTransform,java.lang.String) -> getTransformedString
    java.lang.String getClippedString(java.lang.String) -> getClippedString
    float alphaColor(java.awt.Paint) -> alphaColor
    java.lang.String hexColor(java.awt.Paint) -> hexColor
    java.lang.String hexColor(java.awt.Color) -> hexColor
    java.lang.String hexColor(java.awt.GradientPaint) -> hexColor
    java.lang.String hexColor(java.awt.TexturePaint) -> hexColor
    java.lang.String getPathContent(java.awt.geom.PathIterator) -> getPathContent
    java.lang.String getPath(java.awt.geom.PathIterator) -> getPath
    java.lang.String style(java.util.Properties) -> style
    java.lang.String fixedPrecision(double) -> fixedPrecision
    java.io.PrintWriter getOutputStream() -> getOutputStream
org.freehep.util.DiscreteAngle -> org.freehep.util.DiscreteAngle:
    java.util.SortedSet angles -> a
    double getAngle(double) -> a
    java.lang.Double addAngle(double) -> a
    java.lang.String toString() -> toString
    void main(java.lang.String[]) -> main
org.freehep.util.DoubleWithError -> org.freehep.util.a:
    double value -> a
    double error -> b
    boolean asymmetricError -> a
    double minError -> c
    double getError() -> a
    double getPlusError() -> b
    double getMinError() -> c
    boolean hasAsymmetricError() -> a
    double getValue() -> d
    java.lang.String toString() -> toString
org.freehep.util.ScientificFormat -> org.freehep.util.b:
    int sigDigit -> a
    int maxWidth -> b
    boolean sciNote -> a
    java.text.DecimalFormat decimalFormat -> a
    double k -> a
    java.lang.StringBuffer format(java.lang.Object,java.lang.StringBuffer,java.text.FieldPosition) -> format
    java.lang.Object parseObject(java.lang.String,java.text.ParsePosition) -> parseObject
    void setSigDigits(int) -> a
    void setMaxWidth(int) -> b
    void setScientificNotationStyle(boolean) -> a
    double Log10(double) -> a
    int resolveErrorSigDigit(double,double) -> a
    java.text.DecimalFormat getDecimalFormat(int) -> a
    java.lang.String format(double) -> a
    java.lang.String format(double,int) -> a
org.freehep.util.UserProperties -> org.freehep.util.d:
    java.util.Properties altDefaults -> a
    java.util.Enumeration propertyNames() -> propertyNames
    void setProperties(java.util.Properties) -> a
    java.lang.Object setProperty(java.lang.String,java.lang.String) -> setProperty
    java.lang.Object setProperty(java.lang.String,java.awt.Color) -> a
    java.lang.Object setProperty(java.util.Properties,java.lang.String,java.awt.Color) -> a
    java.lang.Object setProperty(java.lang.String,java.awt.Insets) -> a
    java.lang.Object setProperty(java.util.Properties,java.lang.String,java.awt.Insets) -> a
    java.lang.Object setProperty(java.lang.String,java.awt.Dimension) -> a
    java.lang.Object setProperty(java.util.Properties,java.lang.String,java.awt.Dimension) -> a
    java.lang.Object setProperty(java.lang.String,int) -> a
    java.lang.Object setProperty(java.util.Properties,java.lang.String,int) -> a
    java.lang.Object setProperty(java.lang.String,boolean) -> a
    java.lang.Object setProperty(java.util.Properties,java.lang.String,boolean) -> a
    java.lang.String getProperty(java.lang.String) -> getProperty
    java.lang.String getProperty(java.lang.String,java.lang.String) -> getProperty
    java.awt.Color getPropertyColor(java.lang.String) -> a
    java.awt.Color getPropertyColor(java.lang.String,java.awt.Color) -> a
    java.awt.Rectangle getPropertyRectangle(java.lang.String) -> a
    java.awt.Rectangle getPropertyRectangle(java.lang.String,java.awt.Rectangle) -> a
    java.awt.Insets getPropertyInsets(java.lang.String) -> a
    java.awt.Insets getPropertyInsets(java.lang.String,java.awt.Insets) -> a
    java.awt.Dimension getPropertyDimension(java.lang.String) -> a
    java.awt.Dimension getPropertyDimension(java.lang.String,java.awt.Dimension) -> a
    int getPropertyInt(java.lang.String) -> a
    int getPropertyInt(java.lang.String,int) -> a
    double getPropertyDouble(java.lang.String) -> a
    double getPropertyDouble(java.lang.String,double) -> a
    float getPropertyFloat(java.lang.String) -> a
    float getPropertyFloat(java.lang.String,float) -> a
    boolean isProperty(java.lang.String) -> a
    boolean isProperty(java.lang.String,boolean) -> a
org.freehep.util.Value -> org.freehep.util.c:
    int intValue -> a
    short shortValue -> a
    long longValue -> a
    float floatValue -> a
    double doubleValue -> a
    boolean boolValue -> a
    byte byteValue -> a
    char charValue -> a
    java.lang.Object obj -> a
    java.lang.Class type -> m
    java.lang.Class TYPE_INTEGER -> a
    java.lang.Class TYPE_SHORT -> b
    java.lang.Class TYPE_LONG -> c
    java.lang.Class TYPE_FLOAT -> d
    java.lang.Class TYPE_DOUBLE -> e
    java.lang.Class TYPE_BOOLEAN -> f
    java.lang.Class TYPE_BYTE -> g
    java.lang.Class TYPE_CHAR -> h
    java.lang.Class TYPE_STRING -> i
    java.lang.Class TYPE_DATE -> j
    java.lang.Class class$0 -> k
    java.lang.Class class$1 -> l
    org.freehep.util.Value set(int) -> a
    int getInt() -> a
    java.lang.String getString() -> a
    java.lang.String toString() -> toString
org.freehep.util.images.ImageUtilities -> org.freehep.util.a.a:
    java.lang.Class class$0 -> a
    java.awt.image.RenderedImage createRenderedImage(java.awt.Image,java.awt.image.ImageObserver,java.awt.Color) -> a
    java.awt.image.BufferedImage createBufferedImage(java.awt.image.RenderedImage,java.awt.image.ImageObserver,java.awt.Color) -> a
    byte[] getBytes(java.awt.image.RenderedImage,java.awt.Color,java.lang.String,int) -> a
org.freehep.util.io.ASCII85InputStream -> org.freehep.util.io.ASCII85InputStream:
    boolean endReached -> a
    int[] b -> a
    int bIndex -> a
    int bLength -> b
    int[] c -> b
    int lineNo -> c
    int prev -> d
    java.io.InputStream in -> a
    int read() -> read
    int readTuple() -> a
    void main(java.lang.String[]) -> main
org.freehep.util.io.ASCII85OutputStream -> org.freehep.util.io.p:
    boolean end -> a
    int characters -> a
    int[] b -> a
    int bIndex -> b
    int[] c -> b
    java.lang.String newline -> a
    void write(int) -> write
    void finish() -> finish
    void close() -> close
    void writeTuple() -> a
    void writeEOD() -> b
    void writeChar(int) -> a
    void writeNewLine() -> c
org.freehep.util.io.ASCIIHexOutputStream -> org.freehep.util.io.g:
    int characters -> a
    boolean end -> a
    java.lang.String newline -> a
    void write(int) -> write
    void finish() -> finish
    void close() -> close
    void writeChar(int) -> a
    void writeNewLine() -> a
org.freehep.util.io.Action -> org.freehep.util.io.n:
    int code -> a
    java.lang.String name -> a
    int getCode() -> a
    java.lang.String getName() -> a
    java.lang.String toString() -> toString
org.freehep.util.io.Action$Unknown -> org.freehep.util.io.v:
    int[] data -> a
    java.lang.String toString() -> toString
org.freehep.util.io.ActionSet -> org.freehep.util.io.f:
    java.util.Map actions -> a
    org.freehep.util.io.Action defaultAction -> a
org.freehep.util.io.Base64OutputStream -> org.freehep.util.io.o:
    int MAX_LINE_LENGTH -> a
    int position -> b
    byte[] buffer -> a
    int lineLength -> c
    char[] intToBase64 -> a
    java.lang.String newline -> a
    void write(int) -> write
    void finish() -> finish
    void close() -> close
    void writeTuple() -> a
    void writeNewLine() -> b
org.freehep.util.io.BitOutputStream -> org.freehep.util.io.q:
    int bits -> a
    int bitPos -> b
    void write(int) -> write
    void finish() -> finish
    void close() -> close
    void flushByte() -> c
    void byteAlign() -> d
org.freehep.util.io.ByteCountOutputStream -> org.freehep.util.io.l:
    int currentBuffer -> b
    java.util.List bufferList -> a
    void write(int) -> write
    void pushBuffer() -> a
    int popBuffer() -> b
    int getBufferLength() -> c
    void append() -> b
    void close() -> close
org.freehep.util.io.ByteCountOutputStream$Buffer -> org.freehep.util.io.h:
    byte[] buffer -> a
    int len -> a
    void add(byte) -> a
    void add(org.freehep.util.io.ByteCountOutputStream$Buffer) -> a
    int getLength() -> a
    byte[] getBytes() -> a
org.freehep.util.io.ByteOrderOutputStream -> org.freehep.util.io.w:
    boolean little -> a
    int written -> a
    void write(int) -> write
    void writeBoolean(boolean) -> writeBoolean
    void writeChar(int) -> writeChar
    void writeByte(int) -> writeByte
    void writeByte(byte[]) -> a
    void writeUnsignedByte(int[]) -> a
    void writeShort(int) -> writeShort
    void writeUnsignedShort(int) -> a
    void writeInt(int) -> writeInt
    void writeUnsignedInt(long) -> a
    void writeLong(long) -> writeLong
    void writeFloat(float) -> writeFloat
    void writeDouble(double) -> writeDouble
    void writeBytes(java.lang.String) -> writeBytes
    void writeChars(java.lang.String) -> writeChars
    void writeUTF(java.lang.String) -> writeUTF
    void writeUTF(java.lang.String,java.io.DataOutput) -> a
org.freehep.util.io.CompressableOutputStream -> org.freehep.util.io.a:
    boolean compress -> a
    java.util.zip.DeflaterOutputStream dos -> a
    void write(int) -> write
    void write(byte[],int,int) -> write
    void finish() -> finish
    void close() -> close
org.freehep.util.io.CountedByteOutputStream -> org.freehep.util.io.d:
    int count -> a
    void write(int) -> write
    void write(byte[]) -> write
    void write(byte[],int,int) -> write
    int getCount() -> a
org.freehep.util.io.EEXECEncryption -> org.freehep.util.io.k:
    int n -> a
    int c1 -> b
    int c2 -> c
    int r -> d
    java.io.OutputStream out -> a
    boolean first -> a
    int encrypt(int) -> a
    void write(int) -> write
    void flush() -> flush
    void close() -> close
org.freehep.util.io.EncodingException -> org.freehep.util.io.j:
org.freehep.util.io.FinishableOutputStream -> org.freehep.util.io.x:
    void finish() -> finish
org.freehep.util.io.FlateOutputStream -> org.freehep.util.io.c:
    void finish() -> finish
org.freehep.util.io.NoCloseOutputStream -> org.freehep.util.io.u:
    void close() -> close
org.freehep.util.io.Tag -> org.freehep.util.io.t:
    int tagID -> a
    java.lang.String name -> a
    int version -> b
    int getTag() -> b
    java.lang.String getName() -> a
    void write(int,org.freehep.util.io.TaggedOutputStream) -> a
    java.lang.String toString() -> toString
org.freehep.util.io.TagHeader -> org.freehep.util.io.m:
    int tagID -> a
    long length -> a
    int getTag() -> a
    long getLength() -> a
org.freehep.util.io.TagSet -> org.freehep.util.io.s:
    java.util.Map tags -> a
    org.freehep.util.io.Tag defaultTag -> a
    void addTag(org.freehep.util.io.Tag) -> a
    boolean exists(int) -> a
org.freehep.util.io.TaggedOutputStream -> org.freehep.util.io.i:
    org.freehep.util.io.TagSet tagSet -> a
    org.freehep.util.io.ActionSet actionSet -> a
    void writeTagHeader(org.freehep.util.io.TagHeader) -> a
    int getTagAlignment() -> a
    void writeTag(org.freehep.util.io.Tag) -> a
    org.freehep.util.io.TagHeader createTagHeader(org.freehep.util.io.Tag,long) -> a
org.freehep.util.io.UndefinedTag -> org.freehep.util.io.e:
    int[] bytes -> a
    void write(int,org.freehep.util.io.TaggedOutputStream) -> a
    java.lang.String toString() -> toString
org.freehep.util.io.UndefinedTagException -> org.freehep.util.io.r:
org.freehep.util.io.WriterOutputStream -> org.freehep.util.io.b:
    java.io.Writer writer -> a
    void write(int) -> write
    void write(byte[]) -> write
    void write(byte[],int,int) -> write
    void close() -> close
    void flush() -> flush
org.freehep.xml.util.XMLWriter -> org.freehep.a.a.a:
    java.lang.String normalizeText(java.lang.String) -> a
yacas.ArrayClass -> a.bH:
    yacas.LispPtrArray iArray -> a
    java.lang.String TypeName() -> a
    int Size() -> a
    yacas.LispObject GetElement(int) -> a
    void SetElement(int,yacas.LispObject) -> a
yacas.BackQuoteBehaviour -> a.dt:
    yacas.LispEnvironment iEnvironment -> a
    boolean Matches(yacas.LispPtr,yacas.LispPtr) -> a
yacas.BasicEvaluator -> a.dB:
    void Eval(yacas.LispEnvironment,yacas.LispPtr,yacas.LispPtr) -> a
    yacas.LispUserFunction GetUserFunction(yacas.LispEnvironment,yacas.LispPtr) -> a
yacas.BigNumber -> a.dI:
    java.math.BigDecimal zero -> b
    java.math.BigDecimal one -> c
    java.math.BigDecimal two -> d
    java.math.BigDecimal ten -> e
    int iPrecision -> a
    int iTensExp -> b
    java.math.BigInteger integer -> a
    java.math.BigDecimal decimal -> a
    boolean NumericSupportForMantissa() -> a
    void SetTo(yacas.BigNumber) -> a
    boolean IsFloat(java.lang.String,int) -> a
    void SetTo(java.lang.String,int,int) -> a
    void SetTo(long) -> a
    void SetTo(int) -> a
    void SetTo(double) -> a
    java.lang.String ToString(int,int) -> a
    double Double() -> a
    long Long() -> a
    java.lang.String NumericLibraryName() -> a
    boolean Equals(yacas.BigNumber) -> a
    boolean IsInt() -> b
    boolean IsSmall() -> c
    void BecomeFloat(int) -> b
    boolean LessThan(yacas.BigNumber) -> b
    void Multiply(yacas.BigNumber,yacas.BigNumber,int) -> a
    void Add(yacas.BigNumber,yacas.BigNumber,int) -> b
    void Negate(yacas.BigNumber) -> b
    void Divide(yacas.BigNumber,yacas.BigNumber,int) -> c
    void Mod(yacas.BigNumber,yacas.BigNumber) -> a
    void DumpDebugInfo(yacas.LispOutput) -> a
    void Floor(yacas.BigNumber) -> c
    void Precision(int) -> c
    void ShiftLeft(yacas.BigNumber,int) -> a
    void ShiftRight(yacas.BigNumber,int) -> b
    void Gcd(yacas.BigNumber,yacas.BigNumber) -> b
    void BitAnd(yacas.BigNumber,yacas.BigNumber) -> c
    void BitOr(yacas.BigNumber,yacas.BigNumber) -> d
    void BitXor(yacas.BigNumber,yacas.BigNumber) -> e
    long BitCount() -> b
    int Sign() -> a
    int GetPrecision() -> b
    java.math.BigDecimal GetDecimal(yacas.BigNumber) -> a
yacas.BranchingUserFunction -> a.aA:
    java.util.Vector iParameters -> a
    java.util.Vector iRules -> b
    yacas.LispPtr iParamList -> a
    void Evaluate(yacas.LispPtr,yacas.LispEnvironment,yacas.LispPtr) -> a
    void HoldArgument(java.lang.String) -> a
    boolean IsArity(int) -> a
    int Arity() -> a
    void DeclareRule(int,yacas.LispPtr,yacas.LispPtr) -> a
    void DeclareRule(int,yacas.LispPtr) -> a
    void DeclarePattern(int,yacas.LispPtr,yacas.LispPtr) -> b
    void InsertRule(int,yacas.BranchingUserFunction$BranchRuleBase) -> a
    yacas.LispPtr ArgList() -> a
yacas.BranchingUserFunction$BranchParameter -> a.ec:
    java.lang.String iParameter -> a
    boolean iHold -> a
    yacas.BranchingUserFunction this$0 -> a
yacas.BranchingUserFunction$BranchPattern -> a.aG:
    int iPrecedence -> a
    yacas.LispPtr iBody -> a
    yacas.LispPtr iPredicate -> b
    yacas.PatternClass iPatternClass -> a
    yacas.BranchingUserFunction this$0 -> a
    boolean Matches(yacas.LispEnvironment,yacas.LispPtr[]) -> a
    int Precedence() -> a
    yacas.LispPtr Body() -> a
yacas.BranchingUserFunction$BranchRule -> a.cc:
    int iPrecedence -> a
    yacas.LispPtr iBody -> a
    yacas.LispPtr iPredicate -> b
    yacas.BranchingUserFunction this$0 -> a
    boolean Matches(yacas.LispEnvironment,yacas.LispPtr[]) -> a
    int Precedence() -> a
    yacas.LispPtr Body() -> a
yacas.BranchingUserFunction$BranchRuleBase -> a.bu:
    yacas.BranchingUserFunction this$0 -> b
    boolean Matches(yacas.LispEnvironment,yacas.LispPtr[]) -> a
    int Precedence() -> a
    yacas.LispPtr Body() -> a
yacas.BranchingUserFunction$BranchRuleTruePredicate -> a.du:
    yacas.BranchingUserFunction this$0 -> c
    boolean Matches(yacas.LispEnvironment,yacas.LispPtr[]) -> a
yacas.CVersion -> a.bf:
    java.lang.String VERSION -> a
yacas.CYacas -> a.cD:
    yacas.LispEnvironment env -> a
    yacas.LispTokenizer tokenizer -> a
    yacas.LispPrinter printer -> a
    java.lang.String iError -> a
    java.lang.StringBuffer inp -> a
    java.lang.StringBuffer string_out -> b
    java.lang.String Evaluate(java.lang.String) -> a
yacas.EvalFuncBase -> a.dm:
yacas.GenericClass -> a.an:
    java.lang.String TypeName() -> a
yacas.InfixParser -> a.bd:
    yacas.LispOperators iPrefixOperators -> a
    yacas.LispOperators iInfixOperators -> b
    yacas.LispOperators iPostfixOperators -> c
    yacas.LispOperators iBodiedOperators -> d
    void Parse(yacas.LispPtr) -> a
    void ParseCont(yacas.LispPtr) -> b
yacas.InfixPrinter -> a.cU:
    int KMaxPrecedence -> a
    yacas.LispOperators iPrefixOperators -> a
    yacas.LispOperators iInfixOperators -> b
    yacas.LispOperators iPostfixOperators -> c
    yacas.LispOperators iBodiedOperators -> d
    char iPrevLastChar -> a
    yacas.LispEnvironment iCurrentEnvironment -> a
    void Print(yacas.LispPtr,yacas.LispOutput,yacas.LispEnvironment) -> a
    void RememberLastChar(char) -> a
    void Print(yacas.LispPtr,yacas.LispOutput,int) -> a
    void WriteToken(yacas.LispOutput,java.lang.String) -> a
yacas.InputDirectories -> a.ak:
yacas.InputStatus -> a.bE:
    java.lang.String iFileName -> a
    int iLineNumber -> a
    void SetTo(java.lang.String) -> a
    void RestoreFrom(yacas.InputStatus) -> a
    int LineNumber() -> a
    java.lang.String FileName() -> a
    void NextLine() -> a
yacas.LispArityUserFunction -> a.ai:
    int Arity() -> a
    boolean IsArity(int) -> a
yacas.LispAssociatedHash -> a.al:
    java.util.Hashtable iHashtable -> a
    java.lang.Object LookUp(java.lang.String) -> a
    void SetAssociation(java.lang.Object,java.lang.String) -> a
    void Release(java.lang.String) -> a
yacas.LispAtom -> a.d:
    java.lang.String iString -> a
    yacas.LispObject New(yacas.LispEnvironment,java.lang.String) -> a
    java.lang.String String() -> a
    yacas.LispObject Copy(boolean) -> a
    yacas.LispObject SetExtraInfo(yacas.LispPtr) -> a
yacas.LispDefFile -> a.br:
    java.lang.String iFileName -> a
    boolean iIsLoaded -> a
    void SetLoaded() -> a
    boolean IsLoaded() -> a
yacas.LispDefFiles -> a.R:
    yacas.LispDefFile File(java.lang.String) -> a
yacas.LispEnvironment -> a.bc:
    int iPrecision -> d
    yacas.LispHashTable iHashTable -> a
    yacas.LispObject iTrue -> a
    yacas.LispObject iFalse -> b
    yacas.LispObject iEndOfFile -> c
    yacas.LispObject iEndStatement -> d
    yacas.LispObject iProgOpen -> e
    yacas.LispObject iProgClose -> f
    yacas.LispObject iNth -> g
    yacas.LispObject iBracketOpen -> h
    yacas.LispObject iBracketClose -> i
    yacas.LispObject iListOpen -> j
    yacas.LispObject iListClose -> k
    yacas.LispObject iComma -> l
    yacas.LispObject iList -> m
    yacas.LispObject iProg -> n
    yacas.LispOperators iPrefixOperators -> a
    yacas.LispOperators iInfixOperators -> b
    yacas.LispOperators iPostfixOperators -> c
    yacas.LispOperators iBodiedOperators -> d
    int iEvalDepth -> a
    int iMaxEvalDepth -> b
    yacas.LispEnvironment$YacasArgStack iStack -> a
    yacas.YacasCoreCommands iCoreCommands -> a
    yacas.LispEvaluatorBase iEvaluator -> a
    yacas.LispEnvironment$LocalVariableFrame iLocalsList -> a
    yacas.LispGlobal iGlobals -> a
    boolean iSecure -> a
    int iLastUniqueId -> c
    yacas.LispOutput iCurrentOutput -> a
    yacas.LispOutput iInitialOutput -> b
    yacas.LispPrinter iCurrentPrinter -> a
    yacas.LispInput iCurrentInput -> a
    yacas.InputStatus iInputStatus -> a
    yacas.LispTokenizer iCurrentTokenizer -> a
    yacas.LispTokenizer iDefaultTokenizer -> b
    yacas.LispTokenizer iXmlTokenizer -> c
    yacas.LispUserFunctions iUserFunctions -> a
    java.lang.String iError -> a
    yacas.LispDefFiles iDefFiles -> a
    yacas.InputDirectories iInputDirectories -> a
    java.lang.String iPrettyReader -> b
    java.lang.String iPrettyPrinter -> c
    yacas.LispHashTable HashTable() -> a
    int Precision() -> a
    void SetPrecision(int) -> a
    yacas.YacasCoreCommands CoreCommands() -> a
    yacas.LispPtr FindLocal(java.lang.String) -> a
    void SetVariable(java.lang.String,yacas.LispPtr) -> a
    void GetVariable(java.lang.String,yacas.LispPtr) -> b
    void SetGlobalEvaluates(java.lang.String) -> a
    void UnsetVariable(java.lang.String) -> b
    void PushLocalFrame(boolean) -> a
    void PopLocalFrame() -> a
    void NewLocal(java.lang.String,yacas.LispObject) -> a
    int GetUniqueId() -> b
    void HoldArgument(java.lang.String,java.lang.String) -> a
    void Retract(java.lang.String,int) -> a
    yacas.LispUserFunction UserFunction(yacas.LispPtr) -> a
    yacas.LispUserFunction UserFunction(java.lang.String,int) -> a
    void UnFenceRule(java.lang.String,int) -> b
    yacas.LispMultiUserFunction MultiUserFunction(java.lang.String) -> a
    void DeclareRuleBase(java.lang.String,yacas.LispPtr,boolean) -> a
    void DefineRule(java.lang.String,int,int,yacas.LispPtr,yacas.LispPtr) -> a
    void DeclareMacroRuleBase(java.lang.String,yacas.LispPtr,boolean) -> b
    void DefineRulePattern(java.lang.String,int,int,yacas.LispPtr,yacas.LispPtr) -> b
yacas.LispEnvironment$LispLocalVariable -> a.cl:
    yacas.LispEnvironment$LispLocalVariable iNext -> a
    java.lang.String iVariable -> a
    yacas.LispPtr iValue -> a
    yacas.LispEnvironment this$0 -> a
yacas.LispEnvironment$LocalVariableFrame -> a.cs:
    yacas.LispEnvironment$LocalVariableFrame iNext -> a
    yacas.LispEnvironment$LispLocalVariable iFirst -> a
    yacas.LispEnvironment$LispLocalVariable iLast -> b
    yacas.LispEnvironment this$0 -> a
    void Add(yacas.LispEnvironment$LispLocalVariable) -> a
    void Delete() -> a
yacas.LispEnvironment$YacasArgStack -> a.dd:
    yacas.LispPtrArray iStack -> a
    int iStackTop -> a
    yacas.LispEnvironment this$0 -> a
    int GetStackTop() -> a
    void RaiseStackOverflowError() -> a
    void PushArgOnStack(yacas.LispObject) -> a
    yacas.LispPtr GetElement(int) -> a
    void PopTo(int) -> a
yacas.LispError -> a.aY:
    int KLispErrNone -> a
    int KLispErrInvalidArg -> b
    int KLispErrWrongNumberOfArgs -> c
    int KLispErrNotList -> d
    int KLispErrListNotLongEnough -> e
    int KLispErrInvalidStack -> f
    int KQuitting -> g
    int KLispErrNotEnoughMemory -> h
    int KInvalidToken -> i
    int KLispErrInvalidExpression -> j
    int KLispErrUnprintableToken -> k
    int KLispErrFileNotFound -> l
    int KLispErrReadingFile -> m
    int KLispErrCreatingUserFunction -> n
    int KLispErrCreatingRule -> o
    int KLispErrArityAlreadyDefined -> p
    int KLispErrCommentToEndOfFile -> q
    int KLispErrNotString -> r
    int KLispErrNotInteger -> s
    int KLispErrParsingInput -> t
    int KLispErrMaxRecurseDepthReached -> u
    int KLispErrDefFileAlreadyChosen -> v
    int KLispErrDivideByZero -> w
    int KLispErrNotAnInFixOperator -> x
    int KLispErrUser -> y
    int KLispErrIsNotInFix -> z
    int KLispErrSecurityBreach -> A
    int KLispErrLibraryNotFound -> B
    int KLispErrUserInterrupt -> C
    int KLispErrNonBooleanPredicateInPattern -> D
    int KLispErrGenericFormat -> E
    int KLispNrErrors -> F
    java.lang.String ErrorString(int) -> a
    void Check(boolean,int) -> a
    void RaiseError(java.lang.String) -> a
    void CheckNrArgs(int,yacas.LispPtr,yacas.LispEnvironment) -> a
    void ErrorNrArgs(int,int,yacas.LispPtr,yacas.LispEnvironment) -> a
    java.lang.String ShowFunctionError(yacas.LispPtr,yacas.LispEnvironment) -> a
    void CHK_CORE(yacas.LispEnvironment,int,boolean,int) -> a
    void LISPASSERT(boolean) -> a
    void CHK_ARG_CORE(yacas.LispEnvironment,int,boolean,int) -> b
    void CHK_ISLIST_CORE(yacas.LispEnvironment,int,yacas.LispPtr,int) -> a
    void CHK_ISSTRING_CORE(yacas.LispEnvironment,int,yacas.LispPtr,int) -> b
    void CheckArgTypeWithError(yacas.LispEnvironment,int,boolean,int,java.lang.String) -> a
yacas.LispEvaluatorBase -> a.bI:
    yacas.UserStackInformation iBasicInfo -> a
    void Eval(yacas.LispEnvironment,yacas.LispPtr,yacas.LispPtr) -> a
    yacas.UserStackInformation StackInformation() -> a
yacas.LispGenericClass -> a.aX:
    yacas.GenericClass iClass -> a
    yacas.LispGenericClass New(yacas.GenericClass) -> a
    yacas.GenericClass Generic() -> a
    java.lang.String String() -> a
    yacas.LispObject Copy(boolean) -> a
    yacas.LispObject SetExtraInfo(yacas.LispPtr) -> a
yacas.LispGlobal -> a.cO:
yacas.LispGlobalVariable -> a.co:
    yacas.LispPtr iValue -> a
    boolean iEvalBeforeReturn -> a
    void SetEvalBeforeReturn(boolean) -> a
yacas.LispHashTable -> a.m:
    java.util.Hashtable iHashtable -> a
    java.lang.String LookUp(java.lang.String) -> a
    java.lang.String LookUpStringify(java.lang.String) -> b
    java.lang.String LookUpUnStringify(java.lang.String) -> c
    void GarbageCollect() -> a
yacas.LispInFixOperator -> a.aN:
    int iPrecedence -> a
    int iLeftPrecedence -> b
    int iRightPrecedence -> c
    int iRightAssociative -> d
    void SetRightAssociative() -> a
    void SetLeftPrecedence(int) -> a
    void SetRightPrecedence(int) -> b
yacas.LispInput -> a.cZ:
    yacas.InputStatus iStatus -> a
    char Next() -> a
    char Peek() -> b
    boolean EndOfStream() -> a
    java.lang.StringBuffer StartPtr() -> a
    int Position() -> a
    void SetPosition(int) -> a
yacas.LispIterator -> a.aC:
    yacas.LispPtr iPtr -> a
    yacas.LispObject GetObject() -> a
    yacas.LispPtr Ptr() -> a
    void GoNext() -> a
    void GoSub() -> b
yacas.LispMultiUserFunction -> a.I:
    java.util.ArrayList iFunctions -> a
    yacas.LispDefFile iFileToOpen -> a
    yacas.LispUserFunction UserFunc(int) -> a
    void HoldArgument(java.lang.String) -> a
    void DefineRuleBase(yacas.LispArityUserFunction) -> a
    void DeleteBase(int) -> a
yacas.LispNumber -> a.dp:
    yacas.BigNumber iNumber -> a
    java.lang.String iString -> a
    yacas.LispObject Copy(boolean) -> a
    java.lang.String String() -> a
    yacas.BigNumber Number(int) -> a
    yacas.LispObject SetExtraInfo(yacas.LispPtr) -> a
yacas.LispObject -> a.aR:
    yacas.LispPtr iNext -> a
    yacas.LispPtr Next() -> a
    java.lang.String String() -> a
    yacas.LispPtr SubList() -> b
    yacas.GenericClass Generic() -> a
    yacas.BigNumber Number(int) -> a
    yacas.LispObject Copy(boolean) -> a
    yacas.LispPtr ExtraInfo() -> c
    yacas.LispObject SetExtraInfo(yacas.LispPtr) -> a
yacas.LispOperators -> a.aS:
    void SetOperator(int,java.lang.String) -> a
    void SetRightAssociative(java.lang.String) -> b
    void SetLeftPrecedence(java.lang.String,int) -> a
    void SetRightPrecedence(java.lang.String,int) -> b
yacas.LispOutput -> a.dz:
    void PutChar(char) -> a
    void Write(java.lang.String) -> a
yacas.LispParser -> a.cd:
    yacas.LispTokenizer iTokenizer -> a
    yacas.LispInput iInput -> a
    yacas.LispEnvironment iEnvironment -> a
    boolean iListed -> a
    void Parse(yacas.LispPtr) -> a
    void ParseList(yacas.LispPtr) -> c
    void ParseAtom(yacas.LispPtr,java.lang.String) -> a
yacas.LispPrinter -> a.aJ:
    void Print(yacas.LispPtr,yacas.LispOutput,yacas.LispEnvironment) -> a
    void RememberLastChar(char) -> a
    void PrintExpression(yacas.LispPtr,yacas.LispOutput,yacas.LispEnvironment,int) -> a
    void Indent(yacas.LispOutput,int) -> a
yacas.LispPtr -> a.L:
    yacas.LispObject iNext -> a
    void Set(yacas.LispObject) -> a
    yacas.LispObject Get() -> a
    void GoNext() -> a
yacas.LispPtrArray -> a.ao:
    int iSize -> a
    yacas.LispPtr[] iArray -> a
    int Size() -> a
    yacas.LispPtr GetElement(int) -> a
    void SetElement(int,yacas.LispObject) -> a
yacas.LispStandard -> a.dl:
    int log2_table_size -> a
    double[] log2_table -> a
    java.lang.Class class$0 -> a
    boolean IsNumber(java.lang.String,boolean) -> a
    int InternalListLength(yacas.LispPtr) -> a
    void InternalReverseList(yacas.LispPtr,yacas.LispPtr) -> a
    void ReturnUnEvaluated(yacas.LispPtr,yacas.LispPtr,yacas.LispEnvironment) -> a
    void InternalApplyString(yacas.LispEnvironment,yacas.LispPtr,java.lang.String,yacas.LispPtr) -> a
    void InternalApplyPure(yacas.LispPtr,yacas.LispPtr,yacas.LispPtr,yacas.LispEnvironment) -> a
    void InternalTrue(yacas.LispEnvironment,yacas.LispPtr) -> a
    void InternalFalse(yacas.LispEnvironment,yacas.LispPtr) -> b
    void InternalBoolean(yacas.LispEnvironment,yacas.LispPtr,boolean) -> a
    void InternalNth(yacas.LispPtr,yacas.LispPtr,int) -> a
    void InternalTail(yacas.LispPtr,yacas.LispPtr) -> b
    boolean IsTrue(yacas.LispEnvironment,yacas.LispPtr) -> a
    boolean IsFalse(yacas.LispEnvironment,yacas.LispPtr) -> b
    java.lang.String SymbolName(yacas.LispEnvironment,java.lang.String) -> a
    boolean InternalIsList(yacas.LispPtr) -> a
    boolean InternalIsString(java.lang.String) -> a
    void InternalNot(yacas.LispPtr,yacas.LispEnvironment,yacas.LispPtr) -> a
    void InternalFlatCopy(yacas.LispPtr,yacas.LispPtr) -> c
    boolean InternalEquals(yacas.LispEnvironment,yacas.LispPtr,yacas.LispPtr) -> a
    void InternalSubstitute(yacas.LispPtr,yacas.LispPtr,yacas.SubstBehaviourBase) -> a
    java.lang.String InternalUnstringify(java.lang.String) -> a
    void DoInternalLoad(yacas.LispEnvironment,yacas.LispInput) -> a
    void InternalLoad(yacas.LispEnvironment,java.lang.String) -> a
    void InternalUse(yacas.LispEnvironment,java.lang.String) -> b
    java.lang.String PrintExpression(yacas.LispPtr,yacas.LispEnvironment,int) -> a
    yacas.LispInput OpenInputFile(java.lang.String,yacas.InputStatus) -> a
    yacas.LispInput OpenInputFile(yacas.LispEnvironment,yacas.InputDirectories,java.lang.String,yacas.InputStatus) -> a
    java.lang.String InternalFindFile(java.lang.String,yacas.InputDirectories) -> a
    void DoLoadDefFile(yacas.LispEnvironment,yacas.LispInput,yacas.LispDefFile) -> a
    void LoadDefFile(yacas.LispEnvironment,java.lang.String) -> c
    double log2_table_lookup(int) -> a
    long digits_to_bits(long,int) -> a
    long bits_to_digits(long,int) -> b
yacas.LispSubList -> a.bq:
    yacas.LispPtr iSubList -> b
    yacas.LispSubList New(yacas.LispObject) -> a
    yacas.LispPtr SubList() -> b
    java.lang.String String() -> a
    yacas.LispObject Copy(boolean) -> a
    yacas.LispObject SetExtraInfo(yacas.LispPtr) -> a
yacas.LispTokenizer -> a.cE:
    java.lang.String symbolics -> a
    java.lang.String NextToken(yacas.LispInput,yacas.LispHashTable) -> a
    boolean IsDigit(char) -> a
    boolean IsAlpha(char) -> b
    boolean IsAlNum(char) -> c
    boolean IsSymbolic(char) -> d
yacas.LispUserFunction -> a.cB:
    boolean iFenced -> a
    boolean iTraced -> b
    void Evaluate(yacas.LispPtr,yacas.LispEnvironment,yacas.LispPtr) -> a
    void HoldArgument(java.lang.String) -> a
    void DeclareRule(int,yacas.LispPtr,yacas.LispPtr) -> a
    void DeclareRule(int,yacas.LispPtr) -> a
    void DeclarePattern(int,yacas.LispPtr,yacas.LispPtr) -> b
    yacas.LispPtr ArgList() -> a
    void UnFence() -> a
    boolean Fenced() -> a
yacas.LispUserFunctions -> a.aL:
yacas.ListedBranchingUserFunction -> a.dZ:
    boolean IsArity(int) -> a
    void Evaluate(yacas.LispPtr,yacas.LispEnvironment,yacas.LispPtr) -> a
yacas.ListedMacroUserFunction -> a.aw:
    boolean IsArity(int) -> a
    void Evaluate(yacas.LispPtr,yacas.LispEnvironment,yacas.LispPtr) -> a
yacas.LocalSymbolBehaviour -> a.cH:
    yacas.LispEnvironment iEnvironment -> a
    java.lang.String[] iOriginalNames -> a
    java.lang.String[] iNewNames -> b
    int iNrNames -> a
    boolean Matches(yacas.LispPtr,yacas.LispPtr) -> a
yacas.MacroUserFunction -> a.cm:
    void Evaluate(yacas.LispPtr,yacas.LispEnvironment,yacas.LispPtr) -> a
yacas.MatchAtom -> a.t:
    java.lang.String iString -> a
    boolean ArgumentMatches(yacas.LispEnvironment,yacas.LispPtr,yacas.LispPtr[]) -> a
yacas.MatchNumber -> a.ap:
    yacas.BigNumber iNumber -> a
    boolean ArgumentMatches(yacas.LispEnvironment,yacas.LispPtr,yacas.LispPtr[]) -> a
yacas.MatchSubList -> a.j:
    yacas.YacasParamMatcherBase[] iMatchers -> a
    int iNrMatchers -> a
    boolean ArgumentMatches(yacas.LispEnvironment,yacas.LispPtr,yacas.LispPtr[]) -> a
yacas.MatchVariable -> a.k:
    int iVarIndex -> a
    boolean ArgumentMatches(yacas.LispEnvironment,yacas.LispPtr,yacas.LispPtr[]) -> a
yacas.MathCommands -> a.em:
    void AddCommands(yacas.LispEnvironment) -> a
    yacas.BigNumber GetNumber(yacas.LispEnvironment,int,int) -> a
    void MultiFix(yacas.LispEnvironment,int,yacas.LispOperators) -> a
    void SingleFix(int,yacas.LispEnvironment,int,yacas.LispOperators) -> a
    yacas.LispInFixOperator OperatorInfo(yacas.LispEnvironment,int,yacas.LispOperators) -> a
    void InternalSetVar(yacas.LispEnvironment,int,boolean) -> a
    void InternalDelete(yacas.LispEnvironment,int,boolean) -> b
    void InternalInsert(yacas.LispEnvironment,int,boolean) -> c
    void InternalReplace(yacas.LispEnvironment,int,boolean) -> d
    void InternalRuleBase(yacas.LispEnvironment,int,boolean) -> e
    void InternalNewRule(yacas.LispEnvironment,int) -> a
    void InternalDefMacroRuleBase(yacas.LispEnvironment,int,boolean) -> f
    void InternalNewRulePattern(yacas.LispEnvironment,int,boolean) -> g
yacas.MathCommands$GenArrayCreate -> a.G:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$GenArrayGet -> a.cN:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$GenArraySet -> a.bp:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$GenArraySize -> a.cV:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$GenPatternCreate -> a.dC:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$GenPatternMatches -> a.bs:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LexGreaterThan -> a.dU:
    yacas.MathCommands this$0 -> b
    boolean lexfunc(java.lang.String,java.lang.String,yacas.LispHashTable,int) -> a
    boolean numfunc(yacas.BigNumber,yacas.BigNumber) -> a
yacas.MathCommands$LexLessThan -> a.ej:
    yacas.MathCommands this$0 -> b
    boolean lexfunc(java.lang.String,java.lang.String,yacas.LispHashTable,int) -> a
    boolean numfunc(yacas.BigNumber,yacas.BigNumber) -> a
yacas.MathCommands$LispAbs -> a.bt:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispAdd -> a.bw:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispApplyPure -> a.aB:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispArcCos -> a.ar:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispArcTan -> a.l:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispAtomize -> a.er:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispBackQuote -> a.ab:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispBitAnd -> a.el:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispBitCount -> a.cJ:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispBitOr -> a.K:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispBitXor -> a.bo:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispBitsToDigits -> a.am:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispBodied -> a.cW:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispCTokenizer -> a.aT:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispCeil -> a.bn:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispCharString -> a.h:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispCheck -> a.cf:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispClearVar -> a.cp:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispCommonLispTokenizer -> a.dX:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispConcatenate -> a.dA:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispConcatenateStrings -> a.aW:
    yacas.MathCommands this$0 -> a
    void ConcatenateStrings(java.lang.StringBuffer,yacas.LispEnvironment,int) -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispCurrentFile -> a.aa:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispCurrentLine -> a.ei:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispCustomEval -> a.dv:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispCustomEvalExpression -> a.ay:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispCustomEvalLocals -> a.aH:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispCustomEvalResult -> a.T:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispCustomEvalStop -> a.bz:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispDebugFile -> a.e:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispDebugLine -> a.A:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispDefLoad -> a.cz:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispDefLoadFunction -> a.df:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispDefMacroRuleBase -> a.cj:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispDefMacroRuleBaseListed -> a.r:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispDefaultDirectory -> a.x:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispDefaultTokenizer -> a.aI:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispDelete -> a.ax:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispDestructiveDelete -> a.di:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispDestructiveInsert -> a.u:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispDestructiveReplace -> a.ek:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispDestructiveReverse -> a.av:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispDigitsToBits -> a.dL:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispDiv -> a.cy:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispDivide -> a.b:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispDllDirectory -> a.E:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispDllEnumerate -> a.bN:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispDllLoad -> a.dD:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispDllUnload -> a.bS:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispDumpBigNumberDebugInfo -> a.be:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispEquals -> a.bk:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispEval -> a.bG:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispExit -> a.bK:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispExitRequested -> a.aK:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispExplodeTag -> a.dy:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispFac -> a.de:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispFastAbs -> a.aF:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispFastArcCos -> a.ee:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispFastArcSin -> a.bU:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispFastArcTan -> a.dF:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispFastAssoc -> a.ad:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispFastCeil -> a.Q:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispFastCos -> a.dk:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispFastExp -> a.bx:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispFastFloor -> a.Z:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispFastIsPrime -> a.cF:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispFastLog -> a.au:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispFastMod -> a.ds:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispFastPi -> a.ah:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispFastPower -> a.dG:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispFastSin -> a.bb:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispFastSqrt -> a.cw:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispFastTan -> a.dT:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispFileSize -> a.dQ:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispFindFile -> a.es:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispFindFunction -> a.ch:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispFlatCopy -> a.ag:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispFloor -> a.v:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispFromBase -> a.X:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispFromFile -> a.dP:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispFromString -> a.bO:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispFullForm -> a.J:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispGarbageCollect -> a.bh:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispGcd -> a.o:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispGenericTypeName -> a.dS:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispGetCoreError -> a.eg:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispGetExactBits -> a.dJ:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispGetExtraInfo -> a.bA:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispGetLeftPrecedence -> a.dR:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispGetPrecedence -> a.at:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispGetPrecision -> a.ct:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispGetPrettyPrinter -> a.af:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispGetPrettyReader -> a.cv:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispGetRightPrecedence -> a.bj:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispGreaterThan -> a.g:
    yacas.MathCommands$LexGreaterThan compare -> a
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispHead -> a.dW:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispHistorySize -> a.V:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispHoldArg -> a.bX:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispIf -> a.ca:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispInDebugMode -> a.ck:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispInFix -> a.aP:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispInsert -> a.dK:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispIsAtom -> a.ed:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispIsBodied -> a.eh:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispIsBound -> a.bl:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispIsFunction -> a.cb:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispIsGeneric -> a.bW:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispIsInFix -> a.p:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispIsInteger -> a.cg:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispIsList -> a.bg:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispIsNumber -> a.ba:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispIsPostFix -> a.S:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispIsPreFix -> a.bF:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispIsPromptShown -> a.da:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispIsString -> a.W:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispLazyAnd -> a.bm:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispLazyGlobal -> a.cM:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispLazyOr -> a.N:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispLeftPrecedence -> a.cC:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispLength -> a.cG:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispLessThan -> a.i:
    yacas.MathCommands$LexLessThan compare -> a
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispLexCompare2 -> a.cQ:
    yacas.MathCommands this$0 -> a
    boolean lexfunc(java.lang.String,java.lang.String,yacas.LispHashTable,int) -> a
    boolean numfunc(yacas.BigNumber,yacas.BigNumber) -> a
    void Compare(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispList -> a.aV:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispListify -> a.cu:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispLoad -> a.ae:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispLocalSymbols -> a.cS:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispMacroNewRule -> a.dq:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispMacroNewRulePattern -> a.cK:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispMacroRuleBase -> a.dc:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispMacroRuleBaseListed -> a.cY:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispMacroSetVar -> a.C:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispMathIsSmall -> a.dN:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispMathLibName -> a.aD:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispMathNegate -> a.c:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispMathSign -> a.dH:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispMaxEvalDepth -> a.aO:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispMod -> a.dr:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispMultiply -> a.w:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispNewLocal -> a.az:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispNewRule -> a.bP:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispNewRulePattern -> a.aQ:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispNot -> a.aq:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispNth -> a.aE:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispPatchLoad -> a.dj:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispPatchString -> a.cA:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispPlatformOS -> a.D:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispPluginsCanBeLoaded -> a.aU:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispPostFix -> a.cx:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispPreFix -> a.f:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispPrecision -> a.U:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispPrettyPrinter -> a.bC:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispPrettyReader -> a.M:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispProgBody -> a.Y:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispQuote -> a.aZ:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispRead -> a.O:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispReadCmdLineString -> a.dh:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispReadLisp -> a.en:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispReadLispListed -> a.eo:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispReadToken -> a.dV:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispReplace -> a.dY:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispRetract -> a.bT:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispRightAssociative -> a.cr:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispRightPrecedence -> a.db:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispRuleBase -> a.bM:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispRuleBaseArgList -> a.dO:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispRuleBaseDefined -> a.cL:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispRuleBaseListed -> a.cT:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispSecure -> a.eu:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispSetExactBits -> a.dx:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispSetExtraInfo -> a.P:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispSetStringMid -> a.ci:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispSetVar -> a.a:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispShiftLeft -> a.aj:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispShiftRight -> a.cI:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispStackSize -> a.z:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispStringMid -> a.cP:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispStringify -> a.B:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispSubst -> a.ce:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispSubtract -> a.eb:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispSystemCall -> a.by:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispTail -> a.dw:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispTime -> a.ac:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispToBase -> a.bR:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispToFile -> a.bv:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispToStdout -> a.cX:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispToString -> a.ef:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispTraceRule -> a.eq:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispTraceStack -> a.aM:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispTrapError -> a.dn:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispType -> a.et:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispUnFence -> a.n:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispUnList -> a.ep:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispUse -> a.dM:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispVersion -> a.do:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispWhile -> a.dE:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispWrite -> a.cq:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispWriteString -> a.bZ:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.MathCommands$LispXmlTokenizer -> a.bi:
    yacas.MathCommands this$0 -> a
    void Eval(yacas.LispEnvironment,int) -> a
yacas.ParsedObject -> a.bV:
    yacas.InfixParser iParser -> a
    boolean iError -> a
    boolean iEndOfFile -> b
    java.lang.String iLookAhead -> a
    yacas.LispPtr iResult -> a
    void Parse() -> a
    void ReadToken() -> b
    void MatchToken(java.lang.String) -> a
    void ReadExpression(int) -> a
    void ReadAtom() -> c
    void GetOtherSide(int,int) -> a
    void Combine(int) -> b
    void InsertAtom(java.lang.String) -> b
    void Fail() -> d
yacas.PatternClass -> a.bD:
    yacas.YacasPatternPredicateBase iPatternMatcher -> a
    boolean Matches(yacas.LispEnvironment,yacas.LispPtr) -> a
    boolean Matches(yacas.LispEnvironment,yacas.LispPtr[]) -> a
    java.lang.String TypeName() -> a
yacas.StdFileInput -> a.cn:
yacas.StdFileOutput -> a.bQ:
    java.io.OutputStream iFile -> a
    void PutChar(char) -> a
yacas.StringInput -> a.bB:
    java.lang.StringBuffer iString -> a
    int iCurrent -> a
    char Next() -> a
    char Peek() -> b
    boolean EndOfStream() -> a
    java.lang.StringBuffer StartPtr() -> a
    int Position() -> a
    void SetPosition(int) -> a
yacas.StringOutput -> a.s:
    java.lang.StringBuffer iString -> a
    void PutChar(char) -> a
yacas.SubstBehaviour -> a.cR:
    yacas.LispEnvironment iEnvironment -> a
    yacas.LispPtr iToMatch -> a
    yacas.LispPtr iToReplaceWith -> b
    boolean Matches(yacas.LispPtr,yacas.LispPtr) -> a
yacas.SubstBehaviourBase -> a.F:
    boolean Matches(yacas.LispPtr,yacas.LispPtr) -> a
yacas.UserStackInformation -> a.y:
    int iRulePrecedence -> a
    int iSide -> b
yacas.XmlTokenizer -> a.dg:
    java.lang.String NextToken(yacas.LispInput,yacas.LispHashTable) -> a
    boolean IsSpace(int) -> a
yacas.YacasCoreCommands -> a.ea:
yacas.YacasEvalCaller -> a.as:
    void Eval(yacas.LispEnvironment,int) -> a
    yacas.LispPtr RESULT(yacas.LispEnvironment,int) -> a
    yacas.LispPtr ARGUMENT(yacas.LispEnvironment,int,int) -> a
    yacas.LispPtr Argument(yacas.LispPtr,int) -> a
yacas.YacasEvaluator -> a.bL:
    int Function -> a
    int Macro -> b
    int Fixed -> c
    int Variable -> d
    yacas.YacasEvalCaller iCaller -> a
    int iNrArgs -> e
    int iFlags -> f
    void Evaluate(yacas.LispPtr,yacas.LispEnvironment,yacas.LispPtr) -> a
yacas.YacasInterpreter -> a.q:
    yacas.CYacas yacas -> a
    java.lang.String Evaluate(java.lang.String) -> a
yacas.YacasParamMatcherBase -> a.H:
    boolean ArgumentMatches(yacas.LispEnvironment,yacas.LispPtr,yacas.LispPtr[]) -> a
yacas.YacasPatternPredicateBase -> a.bY:
    java.util.ArrayList iParamMatchers -> a
    java.util.ArrayList iVariables -> b
    java.util.ArrayList iPredicates -> c
    boolean Matches(yacas.LispEnvironment,yacas.LispPtr) -> a
    boolean Matches(yacas.LispEnvironment,yacas.LispPtr[]) -> a
    yacas.YacasParamMatcherBase MakeParamMatcher(yacas.LispEnvironment,yacas.LispObject) -> a
    int LookUp(java.lang.String) -> a
    void SetPatternVariables(yacas.LispEnvironment,yacas.LispPtr[]) -> a
    boolean CheckPredicates(yacas.LispEnvironment) -> a
yacas.Yacasexception -> a.bJ:
